--- /Users/kevin/card-show-finder/src/screens/ShowDetail/ShowDetailScreen.tsx	2025-06-27 13:44:28
+++ /Users/kevin/card-show-finder-fix/src/screens/ShowDetail/ShowDetailScreen.tsx	2025-06-27 13:57:38
@@ -27,8 +27,20 @@
 
 const ShowDetailScreen: React.FC<ShowDetailProps> = ({ route, navigation }) => {
   const { showId } = route.params;
-  const { user, userProfile } = useAuth();
   
+  // Get the entire auth context to access all available properties
+  const authContext = useAuth();
+  // Try multiple ways to access user data for resilience
+  const user = authContext.authState?.user || null;
+  
+  // Debug logging for authentication state
+  useEffect(() => {
+    console.log('Auth state in ShowDetailScreen:', 
+      authContext.authState?.isAuthenticated ? 'Authenticated' : 'Not authenticated',
+      'User ID:', authContext.authState?.user?.id || 'undefined'
+    );
+  }, [authContext.authState]);
+  
   const [show, setShow] = useState<any>(null);
   const [loading, setLoading] = useState(true);
   const [error, setError] = useState<string | null>(null);
@@ -50,13 +62,15 @@
   );
 
   useEffect(() => {
-    if (!user || !userProfile) {
+    if (!user) {
+      console.log('No user found in auth state, resetting organizer/dealer status');
       setIsShowOrganizer(false);
       setIsMvpDealer(false);
       return;
     }
     
-    const userRole = userProfile.role as UserRole;
+    console.log('User role in ShowDetailScreen:', user.role);
+    const userRole = user.role as UserRole;
     setIsShowOrganizer(userRole === UserRole.SHOW_ORGANIZER);
     setIsMvpDealer(userRole === UserRole.MVP_DEALER);
     
@@ -64,13 +78,18 @@
     if (userRoleService.IS_TEST_MODE) {
       setIsShowOrganizer(true);
     }
-  }, [user, userProfile]);
+  }, [user]);
   
   useEffect(() => {
     fetchShowDetails();
     fetchMvpDealers(showId);
-    if (user) {
+    
+    // Check if favorite whenever user or showId changes
+    if (user && user.id) {
+      console.log('Checking favorite status for user:', user.id, 'show:', showId);
       checkIfFavorite();
+    } else {
+      console.log('Cannot check favorite status - no authenticated user');
     }
   }, [showId, user]);
   
@@ -225,9 +244,13 @@
   };
   
   const checkIfFavorite = async () => {
-    if (!user) return;
+    if (!user || !user.id) {
+      console.log('checkIfFavorite: No authenticated user found');
+      return;
+    }
     
     try {
+      console.log('Checking if show is favorited:', { userId: user.id, showId });
       const { data, error } = await supabase
         .from('user_favorite_shows')
         .select()
@@ -236,8 +259,10 @@
         .single();
       
       if (!error && data) {
+        console.log('Show is favorited');
         setIsFavorite(true);
       } else {
+        console.log('Show is not favorited', error?.message);
         setIsFavorite(false);
       }
     } catch (error) {
@@ -246,28 +271,69 @@
   };
   
   const toggleFavorite = async () => {
-    if (!user) {
+    // Multiple checks to ensure we have authentication
+    const isAuthenticated = authContext.authState?.isAuthenticated;
+    const userId = user?.id;
+    
+    console.log('Toggle favorite - Auth state:', { 
+      isAuthenticated, 
+      userId,
+      isFavorite
+    });
+    
+    // Check authentication status with detailed error message
+    if (!isAuthenticated || !userId) {
+      console.error('Authentication check failed:', { 
+        isContextAvailable: !!authContext,
+        authStateAvailable: !!authContext?.authState,
+        isAuthenticated,
+        hasUser: !!user,
+        userId
+      });
+      
+      // Try to get session directly from Supabase as a fallback
+      try {
+        const { data: { session } } = await supabase.auth.getSession();
+        if (session?.user?.id) {
+          console.log('Found user session directly from Supabase:', session.user.id);
+          proceedWithFavoriteToggle(session.user.id);
+          return;
+        }
+      } catch (sessionError) {
+        console.error('Failed to get session from Supabase:', sessionError);
+      }
+      
       Alert.alert('Sign In Required', 'Please sign in to save favorites');
       return;
     }
     
+    // If we have authentication, proceed with the favorite toggle
+    proceedWithFavoriteToggle(userId);
+  };
+  
+  // Separated function to handle the actual favorite toggle operation
+  const proceedWithFavoriteToggle = async (userId: string) => {
     try {
       if (isFavorite) {
         // Remove from favorites
+        console.log('Removing from favorites:', { userId, showId });
         await supabase
           .from('user_favorite_shows')
           .delete()
-          .eq('user_id', user.id)
+          .eq('user_id', userId)
           .eq('show_id', showId);
         
         setIsFavorite(false);
+        console.log('Successfully removed from favorites');
       } else {
         // Add to favorites
+        console.log('Adding to favorites:', { userId, showId });
         await supabase
           .from('user_favorite_shows')
-          .insert([{ user_id: user.id, show_id: showId }]);
+          .insert([{ user_id: userId, show_id: showId }]);
         
         setIsFavorite(true);
+        console.log('Successfully added to favorites');
       }
     } catch (error) {
       console.error('Error toggling favorite:', error);
