{"version":3,"names":["_supabase","require","_subscriptionTypes","_userRoleService","cov_2672s7zqdg","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","_coverageSchema","coverage","actualCoverage","STRIPE_PUBLISHABLE_KEY","_env2","env","EXPO_PUBLIC_STRIPE_PUBLISHABLE_KEY","SUPABASE_EDGE_FUNCTION_URL","EXPO_PUBLIC_SUPABASE_URL","initializeStripe","exports","console","error","createPaymentSheetForSubscription","_ref","_asyncToGenerator2","default","userId","planId","initPaymentSheet","presentPaymentSheet","plan","SUBSCRIPTION_PLANS","find","p","id","success","_ref2","supabase","auth","getSession","session","data","accessToken","access_token","response","fetch","method","headers","Object","assign","Authorization","body","JSON","stringify","amount","price","currency","ok","errorBody","json","Error","_ref3","paymentIntent","ephemeralKey","customer","_ref4","merchantDisplayName","customerId","customerEphemeralKeySecret","paymentIntentClientSecret","allowsDelayedPaymentMethods","returnURL","initError","logPayment","user_id","plan_id","status","transaction_id","error_message","message","_ref5","presentError","code","processSubscriptionUpdate","transactionId","_x","_x2","_x3","_x4","apply","arguments","_ref6","expiryDate","calculateExpiryDate","newRole","UserRole","MVP_DEALER","SHOW_ORGANIZER","updateUserProfileWithSubscription","toISOString","SubscriptionPlanType","DEALER","duration","SubscriptionDuration","MONTHLY","rpc","p_user_id","p_payment_id","p_paid_at","Date","rpcErr","_x5","_x6","_x7","_ref7","expiryDateISO","_ref8","from","update","role","subscription_status","payment_status","subscription_expiry","updated_at","eq","_x8","_x9","_x0","_ref9","paymentData","_ref0","insert","_x1"],"sources":["stripePaymentService.ts"],"sourcesContent":["import { StripeProvider as _StripeProvider, useStripe as _useStripe } from '@stripe/stripe-react-native';\nimport { supabase } from '../supabase';\n// The helper in `subscriptionTypes` was accidentally exported with an underscore –\n// alias it locally so we can keep the nice name in the rest of this file.\nimport {\n  SubscriptionPlan,\n  SUBSCRIPTION_PLANS,\n  _calculateExpiryDate as calculateExpiryDate,\n  SubscriptionPlanType,\n  SubscriptionDuration,\n} from './subscriptionTypes';\nimport { UserRole } from './userRoleService';\n\n// --- Type Definitions ---\n\n/**\n * Represents the outcome of a payment operation.\n */\nexport interface StripePaymentResult {\n  success: boolean;\n  error?: string;\n  transactionId?: string;\n}\n\n/**\n * Defines the expected JSON response from the backend (Supabase Edge Function)\n * when creating a payment intent.\n */\ninterface PaymentIntentResponse {\n  paymentIntent: string; // The Payment Intent client secret\n  ephemeralKey: string;  // The Ephemeral Key secret for the customer\n  customer: string;      // The Stripe Customer ID\n  publishableKey: string; // The Stripe publishable key\n}\n\n/**\n * Defines the structure for logging a payment transaction in Supabase.\n */\ninterface PaymentLog {\n  id?: string;\n  user_id: string;\n  plan_id: string;\n  amount: number;\n  currency: string;\n  status: 'succeeded' | 'failed' | 'pending';\n  transaction_id: string; // Stripe Payment Intent ID\n  error_message?: string;\n  created_at?: string;\n}\n\n// --- Constants ---\n\n// It's crucial to load this from environment variables and not hardcode it.\nconst STRIPE_PUBLISHABLE_KEY = process.env.EXPO_PUBLIC_STRIPE_PUBLISHABLE_KEY;\nconst SUPABASE_EDGE_FUNCTION_URL = `${process.env.EXPO_PUBLIC_SUPABASE_URL}/functions/v1/create-payment-intent`;\n\n// --- Service Implementation ---\n\n/**\n * Initializes the Stripe SDK.\n * This should be called once at the root of your application.\n * @returns {_boolean} True if initialization was successful, false otherwise.\n */\nexport const initializeStripe = (): boolean => {\n  if (!STRIPE_PUBLISHABLE_KEY) {\n    console.error('Stripe publishable key is not set. Please check your environment variables.');\n    return false;\n  }\n  // The StripeProvider component handles initialization. This function is for validation.\n  return true;\n};\n\n/**\n * Creates and presents the Stripe Payment Sheet for a given subscription plan.\n * This function orchestrates the entire client-side payment flow.\n *\n * @param userId - The ID of the user purchasing the subscription.\n * @param planId - The ID of the subscription plan being purchased.\n * @param initPaymentSheet - The `initPaymentSheet` function from the `useStripe` hook.\n * @param presentPaymentSheet - The `presentPaymentSheet` function from the `useStripe` hook.\n * @returns {Promise<StripePaymentResult>} The result of the payment operation.\n */\nexport const createPaymentSheetForSubscription = async (\n  userId: string,\n  planId: string,\n  initPaymentSheet: (params: any) => Promise<any>,\n  presentPaymentSheet: () => Promise<any>\n): Promise<StripePaymentResult> => {\n  const plan = SUBSCRIPTION_PLANS.find((p) => p.id === planId);\n  if (!plan) {\n    return { success: false, error: 'Subscription plan not found.' };\n  }\n\n  try {\n    // 1. Create a payment intent on the server (via Supabase Edge Function)\n\n    // -----------------------------------------------------------\n    // Retrieve the current access-token from Supabase auth session\n    // -----------------------------------------------------------\n    const {\n      data: { session },\n    } = await supabase.auth.getSession();\n\n    const accessToken = session?.access_token;\n\n    const response = await fetch(SUPABASE_EDGE_FUNCTION_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        // Pass the access token only if we actually have one\n        ...(accessToken ? { Authorization: `Bearer ${accessToken}` } : {}),\n      },\n      body: JSON.stringify({\n        amount: plan.price * 100, // Stripe expects amount in cents\n        currency: 'usd',\n        userId: userId,\n        planId: plan.id,\n      }),\n    });\n\n    if (!response.ok) {\n      const errorBody = await response.json();\n      throw new Error(errorBody.error || 'Failed to create payment intent.');\n    }\n\n    const {\n      paymentIntent,\n      ephemeralKey,\n      customer,\n    }: PaymentIntentResponse = await response.json();\n\n    // 2. Initialize the Payment Sheet\n    const { error: initError } = await initPaymentSheet({\n      merchantDisplayName: 'Card Show Finder, LLC.',\n      customerId: customer,\n      customerEphemeralKeySecret: ephemeralKey,\n      paymentIntentClientSecret: paymentIntent,\n      allowsDelayedPaymentMethods: true,\n      returnURL: 'cardshowfinder://stripe-redirect', // Custom URL scheme\n    });\n\n    if (initError) {\n      console.error('Stripe initPaymentSheet error:', initError);\n      await logPayment({\n        user_id: userId,\n        plan_id: plan.id,\n        amount: plan.price,\n        currency: 'usd',\n        status: 'failed',\n        transaction_id: paymentIntent,\n        error_message: `Init Error: ${initError.message}`,\n      });\n      return { success: false, error: `Initialization failed: ${initError.message}` };\n    }\n\n    // 3. Present the Payment Sheet\n    const { error: presentError } = await presentPaymentSheet();\n\n    if (presentError) {\n      // User cancelled or payment failed\n      if (presentError.code === 'Canceled') {\n        return { success: false, error: 'Payment was canceled.' };\n      }\n      console.error('Stripe presentPaymentSheet error:', presentError);\n      await logPayment({\n        user_id: userId,\n        plan_id: plan.id,\n        amount: plan.price,\n        currency: 'usd',\n        status: 'failed',\n        transaction_id: paymentIntent,\n        error_message: `Present Error: ${presentError.message}`,\n      });\n      return { success: false, error: `Payment failed: ${presentError.message}` };\n    }\n\n    // 4. Payment succeeded, process the subscription\n    await processSubscriptionUpdate(userId, plan, paymentIntent);\n\n    return { success: true, transactionId: paymentIntent };\n\n  } catch (error: any) {\n    console.error('An unexpected error occurred during payment:', error);\n    return { success: false, error: error.message || 'An unknown error occurred.' };\n  }\n};\n\n/**\n * Handles the logic after a successful payment: calculates expiry, updates the user's profile,\n * and logs the transaction.\n *\n * @param userId - The ID of the user.\n * @param plan - The subscription plan that was purchased.\n * @param transactionId - The Stripe Payment Intent ID for logging.\n */\nexport const processSubscriptionUpdate = async (\n  userId: string,\n  plan: SubscriptionPlan,\n  transactionId: string\n): Promise<void> => {\n  try {\n    /**\n     * Calculate the expiry date for the **paid** subscription.\n     * We intentionally ignore any free-trial data here because an upgrade\n     * should terminate the trial and start the paid period immediately.\n     * The helper in `subscriptionTypes` already encodes:\n     *   • Annual  → +365 days\n     *   • Monthly → +30  days\n     */\n    const expiryDate = calculateExpiryDate(plan);\n\n    // Determine the new role based on the subscription type\n    const newRole =\n      plan.type === 'dealer' ? UserRole.MVP_DEALER : UserRole.SHOW_ORGANIZER;\n\n    // Update user profile in Supabase\n    await updateUserProfileWithSubscription(\n      userId,\n      newRole,\n      expiryDate.toISOString(),\n    );\n\n    // Log the successful payment\n    await logPayment({\n      user_id: userId,\n      plan_id: plan.id,\n      amount: plan.price,\n      currency: 'usd',\n      status: 'succeeded',\n      transaction_id: transactionId,\n    });\n\n    // --- Organizer referral earnings (dealer monthly only) -----------------\n    if (\n      plan.type === SubscriptionPlanType.DEALER &&\n      plan.duration === SubscriptionDuration.MONTHLY\n    ) {\n      try {\n        await supabase.rpc('award_referral_on_payment', {\n          p_user_id: userId,\n          p_payment_id: transactionId,\n          p_paid_at: new Date().toISOString(),\n        });\n      } catch (rpcErr: any) {\n        // Non-critical: log & continue\n        console.error('award_referral_on_payment RPC failed:', rpcErr);\n      }\n    }\n\n  } catch (error: any) {\n    console.error(\n      'Failed to process subscription update after payment:',\n      error,\n    );\n    // Even if post-payment processing fails, the payment was successful.\n    // This should be handled with a reconciliation process or monitoring.\n    // For now, we log the error.\n    await logPayment({\n      user_id: userId,\n      plan_id: plan.id,\n      amount: plan.price,\n      currency: 'usd',\n      status: 'failed', // Log as 'failed' to indicate a processing failure post-payment\n      transaction_id: transactionId,\n      error_message: 'Post-payment profile update failed.',\n    });\n  }\n};\n\n/**\n * Updates the user's profile in the Supabase 'profiles' table with new subscription details.\n *\n * @param userId - The user's ID.\n * @param newRole - The new role to assign to the user.\n * @param expiryDateISO - The ISO string of the subscription expiry date.\n */\nconst updateUserProfileWithSubscription = async (\n  userId: string,\n  newRole: UserRole,\n  expiryDateISO: string\n): Promise<void> => {\n  const { error } = await supabase\n    .from('profiles')\n    .update({\n      role: newRole,\n      subscription_status: 'active',\n      // Mark the user as having completed payment so UI does not show “Trial” banners\n      payment_status: 'paid',\n      subscription_expiry: expiryDateISO,\n      updated_at: new Date().toISOString(),\n    })\n    .eq('id', userId);\n\n  if (error) {\n    console.error('Error updating user profile with subscription:', error);\n    throw new Error('Failed to update user profile after payment.');\n  }\n};\n\n/**\n * Logs a payment transaction to the 'payments' table in Supabase.\n *\n * @param paymentData - The payment details to log.\n */\nconst logPayment = async (paymentData: PaymentLog): Promise<void> => {\n  const { error } = await supabase.from('payments').insert(paymentData);\n\n  if (error) {\n    console.error('Error logging payment transaction:', error);\n    // This is a non-critical error for the user flow, but important for analytics/debugging.\n  }\n};\n"],"mappings":";;;;;;;AACA,IAAAA,SAAA,GAAAC,OAAA;AAGA,IAAAC,kBAAA,GAAAD,OAAA;AAOA,IAAAE,gBAAA,GAAAF,OAAA;AAA6C,SAAAG,eAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,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","ignoreList":[]}