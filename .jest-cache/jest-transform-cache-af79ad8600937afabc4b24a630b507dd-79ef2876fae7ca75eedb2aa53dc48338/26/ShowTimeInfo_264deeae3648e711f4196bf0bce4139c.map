{"version":3,"names":["React","View","Text","StyleSheet","Ionicons","jsx","_jsx","jsxs","_jsxs","MIDNIGHT_UTC_REGEX","cov_2q18e82eq3","s","InfoRow","_ref","icon","label","value","f","safeValue","b","style","styles","infoRow","children","name","size","color","infoIcon","infoContent","infoLabel","infoValue","ShowTimeInfo","_ref2","show","safeShow","parseDatePreserveLocal","date","plainDateMatch","exec","_ref3","split","map","Number","_ref4","_slicedToArray","y","m","d","Date","midnightMatch","_ref5","_ref6","yStr","mStr","dStr","parsed","isNaN","getTime","formatDate","dateObj","__DEV__","console","warn","toLocaleDateString","weekday","year","month","day","e","error","areSameDates","date1","date2","d1","d2","getFullYear","getMonth","getDate","formatDateRange","startDate","start_date","endDate","end_date","formatTime","timeString","includes","toLocaleTimeString","hour","minute","getFormattedShowHours","startTime","start_time","time","endTime","end_time","formattedStart","formattedEnd","startDateRaw","endDateRaw","hasUsableTime","iso","test","derivedStart","undefined","derivedEnd","fs","fe","description","timePattern","match","container","sectionTitle","create","marginVertical","padding","backgroundColor","borderRadius","fontSize","fontWeight","marginBottom","flexDirection","marginRight","marginTop","flex"],"sources":["ShowTimeInfo.tsx"],"sourcesContent":["import React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\n\n// Define strict types for the show object with optional properties\ninterface ShowTimeInfoProps {\n  show: {\n    start_date?: string | null;\n    end_date?: string | null;\n    start_time?: string | null;\n    end_time?: string | null;\n    startTime?: string | null;\n    endTime?: string | null;\n    time?: string | null;\n    description?: string | null;\n    [key: string]: any; // Allow for additional properties\n  };\n}\n\n// Shared regex: detects midnight-UTC ISO timestamps (treated as date-only)\nconst MIDNIGHT_UTC_REGEX =\n  /^([0-9]{4})-([0-9]{2})-([0-9]{2})T0{2}:0{2}(?::0{2}(?:\\.[0-9]{1,3})?)?(Z|[+\\-]0{2}:?0{2})$/;\n\n// InfoRow component for consistent \"icon + text\" rows\ntype InfoRowProps = {\n  icon: React.ComponentProps<typeof Ionicons>['name'];\n  label: string;\n  value?: string | null;\n};\n\n/**\n * A robust InfoRow component that ensures all text is properly wrapped\n * in Text components and handles all edge cases.\n */\nconst InfoRow: React.FC<InfoRowProps> = ({ icon, label, value }) => {\n  // Safe value with fallback\n  const safeValue = value || 'Not specified';\n\n  return (\n    <View style={styles.infoRow}>\n      <Ionicons name={icon} size={20} color=\"#666666\" style={styles.infoIcon} />\n      <View style={styles.infoContent}>\n        <Text style={styles.infoLabel}>{label}</Text>\n        <Text style={styles.infoValue}>{safeValue}</Text>\n      </View>\n    </View>\n  );\n};\n\n/**\n * A super-robust ShowTimeInfo component that ensures all text is properly\n * wrapped in Text components and all data access is safely guarded.\n */\nconst ShowTimeInfo: React.FC<ShowTimeInfoProps> = ({ show }) => {\n  // Ensure show object exists\n  const safeShow = show || {};\n  \n  /**\n   * Parse an incoming date string while preserving the intended **calendar day**\n   * for plain `YYYY-MM-DD` inputs (avoid UTC-offset shifting that shows the\n   * previous day).  Falls back to the built-in `Date` parser for full ISO\n   * strings that include a time component.\n   */\n  const parseDatePreserveLocal = (date?: string | null): Date | null => {\n    if (!date) return null;\n\n    // Matches plain date strings like 2024-08-15\n    const plainDateMatch = /^\\\\d{4}-\\\\d{2}-\\\\d{2}$/.exec(date);\n    if (plainDateMatch) {\n      const [y, m, d] = date.split('-').map(Number);\n      return new Date(y, m - 1, d); // month is 0-based\n    }\n\n    /**\n     * Treat **midnight-UTC** ISO timestamps as date-only strings.\n     * Example matches:\n     *   2024-08-15T00:00:00Z\n     *   2024-08-15T00:00:00.000Z\n     *   2024-08-15T00:00:00+00:00\n     *   2024-08-15T00:00Z\n     */\n    const midnightMatch = MIDNIGHT_UTC_REGEX.exec(date);\n    if (midnightMatch) {\n      const [, yStr, mStr, dStr] = midnightMatch;\n      const y = Number(yStr);\n      const m = Number(mStr);\n      const d = Number(dStr);\n      return new Date(y, m - 1, d); // Interpret as local date\n    }\n\n    // Otherwise rely on normal parsing (may include timezone/offset)\n    const parsed = new Date(date);\n    return isNaN(parsed.getTime()) ? null : parsed;\n  };\n\n  // Format a date for display with comprehensive error handling\n  const formatDate = (date?: string | null): string => {\n    if (!date) return '';\n\n    try {\n      const dateObj = parseDatePreserveLocal(date);\n\n      if (!dateObj) {\n        if (__DEV__) console.warn(`[ShowTimeInfo] Invalid date format: ${date}`);\n        return date;\n      }\n\n      return dateObj.toLocaleDateString('en-US', {\n        weekday: 'long',\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      });\n    } catch (e) {\n      console.error('Error formatting date:', e);\n      return date || ''; // Return original string or empty string\n    }\n  };\n\n  // Check if dates are the same with robust error handling\n  const areSameDates = (date1?: string | null, date2?: string | null): boolean => {\n    if (!date1 || !date2) return false;\n    \n    try {\n      const d1 = parseDatePreserveLocal(date1);\n      const d2 = parseDatePreserveLocal(date2);\n\n      if (!d1 || !d2) return false;\n      \n      return (\n        d1.getFullYear() === d2.getFullYear() &&\n        d1.getMonth() === d2.getMonth() &&\n        d1.getDate() === d2.getDate()\n      );\n    } catch (e) {\n      console.error('Error comparing dates:', e);\n      return false;\n    }\n  };\n\n  // Format date range for display with comprehensive error handling\n  const formatDateRange = (): string => {\n    // Support both DB snake_case fields and mapped camelCase fields\n    const startDate = safeShow.start_date || safeShow.startDate;\n    const endDate   = safeShow.end_date   || safeShow.endDate;\n    \n    if (!startDate) return 'Date not specified';\n    \n    // For single-day shows\n    if (!endDate || areSameDates(startDate, endDate)) {\n      return formatDate(startDate);\n    }\n    \n    // For multi-day shows\n    return `${formatDate(startDate)} to ${formatDate(endDate)}`;\n  };\n\n  // Format time with comprehensive error handling\n  const formatTime = (timeString?: string | null): string => {\n    if (!timeString) return '';\n    \n    try {\n      // Try parsing as a full ISO date first\n      let date;\n      if (typeof timeString === 'string' && timeString.includes('T')) {\n        date = new Date(timeString);\n      } else {\n        // If it's just a time string, add a dummy date\n        date = new Date(`2000-01-01T${timeString}`);\n      }\n      \n      // Check if date is valid\n      if (isNaN(date.getTime())) {\n        return timeString; // Return original string if parsing fails\n      }\n      \n      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n    } catch (e) {\n      console.error('Error formatting time:', e);\n      return timeString; // Return original string if parsing fails\n    }\n  };\n\n  // Get formatted show hours with comprehensive error handling\n  const getFormattedShowHours = (): string => {\n    // Try all possible time fields with safe access\n    const startTime = safeShow.start_time || safeShow.startTime || safeShow.time;\n    const endTime = safeShow.end_time || safeShow.endTime;\n    \n    // Format both times if available\n    if (startTime && endTime) {\n      const formattedStart = formatTime(startTime);\n      const formattedEnd = formatTime(endTime);\n      \n      // Only show range if times are different\n      if (formattedStart && formattedEnd && formattedStart !== formattedEnd) {\n        return `${formattedStart} - ${formattedEnd}`;\n      }\n    }\n    \n    // Show single time if only start time is available\n    if (startTime) {\n      return formatTime(startTime);\n    }\n    \n    // Show single time if only end time is available\n    if (endTime) {\n      return formatTime(endTime);\n    }\n\n    /* -------------------------------------------------------------\n     * Fallback 2 – derive time component from ISO start/end dates\n     * -------------------------------------------------------------\n     * Some shows store the hour/minute directly in start_date /\n     * end_date (full ISO timestamps) without separate start_time /\n     * end_time columns.  If that’s the case – and the timestamp is\n     * NOT a midnight-UTC sentinel (handled earlier by midnightUtcRegex)\n     * – we can surface that time here.\n     * ----------------------------------------------------------- */\n    const startDateRaw = safeShow.start_date || safeShow.startDate;\n    const endDateRaw   = safeShow.end_date   || safeShow.endDate;\n\n    // Helper: ISO string has a usable time component (not midnight)\n    const hasUsableTime = (iso?: string | null): boolean => {\n      if (!iso || !iso.includes('T')) return false;\n      // Re-use the same midnightUtcRegex from parseDatePreserveLocal\n      // (scope-hoisted by JS so we can reference it here)\n      return !MIDNIGHT_UTC_REGEX.test(iso);\n    };\n\n    const derivedStart = hasUsableTime(startDateRaw) ? startDateRaw! : undefined;\n    const derivedEnd   = hasUsableTime(endDateRaw)   ? endDateRaw!   : undefined;\n\n    if (derivedStart && derivedEnd) {\n      const fs = formatTime(derivedStart);\n      const fe = formatTime(derivedEnd);\n      if (fs && fe && fs !== fe) return `${fs} - ${fe}`;\n      return fs || fe;\n    }\n\n    if (derivedStart) return formatTime(derivedStart);\n    if (derivedEnd)   return formatTime(derivedEnd);\n    \n    // Try to extract time from description as last resort\n    const description = safeShow.description;\n    if (description && typeof description === 'string') {\n      // Look for common time patterns\n      const timePattern = /(\\d{1,2})(:\\d{2})?\\s*(am|pm)\\s*[-–]?\\s*(\\d{1,2})(:\\d{2})?\\s*(am|pm)/i;\n      const match = description.match(timePattern);\n      \n      if (match) {\n        return `${match[1]}${match[2] || ''}${match[3]} - ${match[4]}${match[5] || ''}${match[6]}`;\n      }\n    }\n    \n    // Default fallback\n    return 'Time not specified';\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.sectionTitle}>Show Details</Text>\n      \n      {/* Date row with calendar icon */}\n      <InfoRow \n        icon=\"calendar\" \n        label=\"Date\"\n        value={formatDateRange()} \n      />\n      \n      {/* Time row with time icon */}\n      <InfoRow \n        icon=\"time\" \n        label=\"Hours\"\n        value={getFormattedShowHours()} \n      />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    marginVertical: 10,\n    padding: 15,\n    backgroundColor: '#f8f8f8',\n    borderRadius: 8,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 12,\n    color: '#333333',\n  },\n  infoRow: {\n    flexDirection: 'row',\n    marginBottom: 12,\n  },\n  infoIcon: {\n    marginRight: 10,\n    marginTop: 2,\n  },\n  infoContent: {\n    flex: 1,\n  },\n  infoLabel: {\n    fontSize: 14,\n    color: '#666666',\n    marginBottom: 2,\n  },\n  infoValue: {\n    fontSize: 16,\n    color: '#333333',\n  }\n});\n\nexport default ShowTimeInfo;\n"],"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","ignoreList":[]}