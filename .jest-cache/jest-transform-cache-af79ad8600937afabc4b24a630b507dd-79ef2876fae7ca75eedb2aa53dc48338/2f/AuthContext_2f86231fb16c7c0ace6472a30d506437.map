{"version":3,"names":["React","createContext","useState","useEffect","useContext","supabase","UserRole","AsyncStorage","supabaseAuthService","refreshUserSession","jsx","_jsx","BYPASS_PROFILE_FETCH","cov_1jiijzbd8t","s","defaultAuthState","user","isLoading","error","isAuthenticated","AuthContext","authState","Object","assign","favoriteCount","login","_login","_asyncToGenerator","f","Error","apply","arguments","register","_register","logout","_logout","resetPassword","_resetPassword","updateProfile","_updateProfile","addFavoriteShow","_addFavoriteShow","removeFavoriteShow","_removeFavoriteShow","clearError","refreshUserRole","_refreshUserRole","AuthProvider","_ref","_ref25","_ref26","_ref27","children","_ref2","_ref3","_slicedToArray","setAuthState","_ref4","_ref5","setFavoriteCount","fetchFavoriteCount","_ref6","userId","b","_ref7","from","select","eq","single","data","console","count","favorite_shows_count","__DEV__","warn","_x","initializeAuth","_ref8","clearSupabaseCache","_ref9","keys","getAllKeys","toRemove","filter","k","startsWith","includes","length","multiRemove","err","handleInvalidToken","_ref0","auth","signOut","_unused","session","sessionError","res","getSession","message","_ref1","id","profileData","profileError","userData","mapProfileToUser","_ref10","onAuthStateChange","_ref11","event","_ref12","prev","_x2","_x3","subscription","unsubscribe","_ref13","credentials","email","result","signIn","newState","hasError","Promise","reject","_ref14","nowIso","Date","toISOString","mockUser","firstName","lastName","homeZipCode","role","MVP_DEALER","createdAt","updatedAt","isEmailVerified","accountType","subscriptionStatus","paymentStatus","subscriptionExpiry","now","favoriteShows","attendedShows","phoneNumber","profileImageUrl","favoriteShowsCount","getCurrentUser","forceRefreshAndFetchProfile","msg","_x4","_ref15","password","registerUser","_x5","_x6","_x7","_x8","_x9","_x0","_ref16","_ref17","_x1","_ref18","userDataWithId","updatedUser","updateUserProfile","_x10","_ref19","showId","addShowToFavorites","_x11","_ref20","removeShowFromFavorites","_x12","_ref21","supabaseKeys","clearErr","_ref22","success","refreshErr","_ref23","profile","authStub","mapped","_x13","_ref24","fresh","e","contextValue","Provider","value","useAuth","context"],"sources":["AuthContext.tsx"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport { supabase } from '../supabase';\nimport { User, UserRole, AuthState, AuthCredentials } from '../types';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport * as supabaseAuthService from '../services/supabaseAuthService';\nimport { signIn as _signIn } from '../services/supabaseAuthService';\nimport { refreshUserSession } from '../services/sessionService';\n// import * as Sentry from 'sentry-expo'; // ↳ Temporarily disabled while debugging\n\n/* ------------------------------------------------------------------\n * Build-time / runtime dev flag to bypass profile fetch\n * ------------------------------------------------------------------\n * • Enabled automatically in Expo dev (`__DEV__`)\n * • Or via env  EXPO_PUBLIC_BYPASS_PROFILE_FETCH=true\n *   Lets developers log in with Auth only, even if the\n *   `profiles` row hasn't been created yet.\n * ------------------------------------------------------------------ */\n/**\n * BYPASS_PROFILE_FETCH disabled.\n * ---------------------------------------------------------------\n * This flag was intended for development convenience.  Leaving it\n * enabled in production caused ALL users to be treated as\n * MVP_DEALER, granting unintended access.  We now hard-disable it\n * to ensure each user's role is always read from the database.\n */\nconst BYPASS_PROFILE_FETCH = false;\n\n// Define the shape of our auth context\ninterface AuthContextType {\n  authState: AuthState & { favoriteCount: number };\n  /**\n   * Convenience getters exposed alongside the full `authState`,\n   * so that consuming components can access them directly without\n   * drilling into `authState`.\n   */\n  error: string | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  login: (credentials: AuthCredentials) => Promise<User>;\n  register: (\n    email: string,\n    password: string,\n    firstName: string,\n    lastName: string,\n    homeZipCode: string,\n    role: UserRole\n  ) => Promise<User>;\n  logout: () => Promise<void>;\n  resetPassword: (email: string) => Promise<void>;\n  updateProfile: (userData: Partial<User>) => Promise<void>;\n  addFavoriteShow: (showId: string) => Promise<void>;\n  removeFavoriteShow: (showId: string) => Promise<void>;\n  clearError: () => void;\n  refreshUserRole: () => Promise<boolean>;\n}\n\n// Default auth state\nconst defaultAuthState: AuthState = {\n  user: null,\n  isLoading: true,\n  error: null,\n  isAuthenticated: false,\n};\n\n// Create the context with default values\nconst AuthContext = createContext<AuthContextType>({\n  authState: { ...defaultAuthState, favoriteCount: 0 },\n  error: defaultAuthState.error,\n  isLoading: defaultAuthState.isLoading,\n  isAuthenticated: defaultAuthState.isAuthenticated,\n  login: async () => { throw new Error('AuthContext not initialized'); },\n  register: async () => { throw new Error('AuthContext not initialized'); },\n  logout: async () => { throw new Error('AuthContext not initialized'); },\n  resetPassword: async () => { throw new Error('AuthContext not initialized'); },\n  updateProfile: async () => { throw new Error('AuthContext not initialized'); },\n  addFavoriteShow: async () => { throw new Error('AuthContext not initialized'); },\n  removeFavoriteShow: async () => { throw new Error('AuthContext not initialized'); },\n  clearError: () => {},\n  refreshUserRole: async () => false,\n});\n\n// Provider component\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [authState, setAuthState] = useState<AuthState>(defaultAuthState);\n  const [favoriteCount, setFavoriteCount] = useState(0);\n\n  // Function to fetch the count of user's favorite shows\n  const fetchFavoriteCount = async (userId: string) => {\n    if (!userId) {\n      setFavoriteCount(0);\n      return;\n    }\n\n    try {\n      // Get the favorite_shows_count directly from the profiles table\n      const { data, error } = await supabase\n        .from('profiles')\n        .select('favorite_shows_count')\n        .eq('id', userId)\n        .single();\n\n      if (error) {\n        console.error('[AuthContext] Error fetching favorite_shows_count:', error);\n        return;\n      }\n\n      // Set the count from the profile data\n      const count = data?.favorite_shows_count || 0;\n      if (__DEV__)\n        console.warn('[AuthContext] Fetched favorite_shows_count:', count);\n      setFavoriteCount(count);\n    } catch (error) {\n      console.error('[AuthContext] Unexpected error in fetchFavoriteCount:', error);\n      // Keep the current count on error\n    }\n  };\n\n  // Initialize auth state on app start\n  useEffect(() => {\n    const initializeAuth = async () => {\n      try {\n        /**\n         * Helper that purges all cached Supabase auth/session entries.\n         * Supabase v2 prefixes keys with either `sb-` **or** `supabase`.\n         */\n        const clearSupabaseCache = async () => {\n          try {\n            const keys = await AsyncStorage.getAllKeys();\n            const toRemove = keys.filter(\n              (k) => k.startsWith('sb-') || k.includes('supabase')\n            );\n            if (toRemove.length) {\n              await AsyncStorage.multiRemove(toRemove);\n              if (__DEV__)\n                console.warn(\n                  '[AuthContext] Cleared stale Supabase tokens from AsyncStorage',\n                  toRemove\n                );\n            }\n          } catch (err) {\n            console.error('[AuthContext] Failed clearing Supabase cache', err);\n          }\n        };\n\n        /**\n         * Centralised recovery when we encounter an invalid / missing\n         * refresh-token error from Supabase.  Ensures the app never crashes\n         * on start and user is returned to a clean unauthenticated state.\n         */\n        const handleInvalidToken = async () => {\n          console.warn('[AuthContext] Invalid refresh token detected – forcing sign-out');\n          try {\n            await supabase.auth.signOut();\n          } catch {\n            /* ignore – we are clearing cache anyway */\n          }\n          await clearSupabaseCache();\n          setAuthState({\n            user: null,\n            isLoading: false,\n            error: null,\n            isAuthenticated: false,\n          });\n        };\n\n        // Check if we have a stored session\n        let session = null;\n        let sessionError: any = null;\n        try {\n          const res = await supabase.auth.getSession();\n          session = res.data.session;\n          sessionError = res.error;\n        } catch (err: any) {\n          sessionError = err;\n        }\n\n        // Handle refresh-token related failures\n        if (\n          sessionError &&\n          typeof sessionError.message === 'string' &&\n          (sessionError.message.includes('Invalid Refresh Token') ||\n            sessionError.message.includes('Refresh Token Not Found'))\n        ) {\n          await handleInvalidToken();\n          return;\n        }\n        \n        if (sessionError) {\n          throw sessionError;\n        }\n        \n        if (session) {\n          // Get user profile from the database\n          const { data: profileData, error: profileError } = await supabase\n            .from('profiles')\n            .select('*')\n            .eq('id', session.user.id)\n            .single();\n          \n          if (profileError) {\n            throw profileError;\n          }\n          \n          // Map combined auth + profile data using shared helper so ALL fields\n          // (including social URLs) are consistently included.\n          const userData: User = supabaseAuthService.mapProfileToUser(\n            session.user,\n            profileData,\n          );\n          \n          setAuthState({\n            user: userData,\n            isLoading: false,\n            error: null,\n            isAuthenticated: true,\n          });\n\n          // Set favorite count from profile data\n          setFavoriteCount(profileData.favorite_shows_count || 0);\n        } else {\n          // No session found\n          setAuthState({\n            user: null,\n            isLoading: false,\n            error: null,\n            isAuthenticated: false,\n          });\n        }\n      } catch (error: any) {\n        console.error('Error initializing auth:', error);\n        setAuthState({\n          user: null,\n          isLoading: false,\n          error: error.message || 'Failed to initialize authentication',\n          isAuthenticated: false,\n        });\n      }\n    };\n    \n    // Set up auth state change listener\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\n      async (event, session) => {\n        if (event === 'SIGNED_IN' && session) {\n          try {\n            // Get user profile from the database\n            const { data: profileData, error: profileError } = await supabase\n              .from('profiles')\n              .select('*')\n              .eq('id', session.user.id)\n              .single();\n            \n            if (profileError) {\n              throw profileError;\n            }\n            \n            // Use shared mapper for consistency\n            const userData: User = supabaseAuthService.mapProfileToUser(\n              session.user,\n              profileData,\n            );\n            \n            setAuthState({\n              user: userData,\n              isLoading: false,\n              error: null,\n              isAuthenticated: true,\n            });\n\n            // Set favorite count from profile data\n            setFavoriteCount(profileData.favorite_shows_count || 0);\n          } catch (error: any) {\n            console.error('Error handling auth state change:', error);\n            setAuthState(prev => ({\n              ...prev,\n              isLoading: false,\n              error: error.message || 'Failed to get user data on auth change',\n            }));\n          }\n        } else if (event === 'SIGNED_OUT') {\n          setAuthState({\n            user: null,\n            isLoading: false,\n            error: null,\n            isAuthenticated: false,\n          });\n          setFavoriteCount(0);\n        }\n      }\n    );\n    \n    // Initialize auth\n    initializeAuth();\n    \n    // Cleanup subscription on unmount\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n  \n  // Login method\n  const login = async (credentials: AuthCredentials): Promise<User> => {\n    // 1. Immediately set the app to a \"loading\" state and clear old errors.\n    if (__DEV__)\n      console.warn('[AuthContext] Login attempt started for email:', credentials.email);\n    setAuthState(prev => ({ ...prev, isLoading: true, error: null }));\n\n    // 2. Call the Supabase service to attempt the login.\n    const result = await supabaseAuthService.signIn(credentials);\n\n    // 3. Handle the response directly.\n    if (result.error) {\n      // FAILURE: If the service returns an error, update the state.\n      console.error('[AuthContext] Login failed with error:', result.error.message);\n      \n      // Set the error message and turn off the loading indicator.\n      const newState = {\n        ...authState,\n        isLoading: false,\n        error: result.error.message,\n        isAuthenticated: false\n      };\n      \n      setAuthState(newState);\n      if (__DEV__)\n        console.warn('[AuthContext] Auth state updated after login failure:', \n        { isAuthenticated: newState.isAuthenticated, hasError: !!newState.error });\n      \n      return Promise.reject(new Error(result.error.message));\n    } else if (result.user) {\n      // SUCCESS: If the service returns a user, get their profile and update state.\n      if (__DEV__)\n        console.warn('[AuthContext] Auth login succeeded – id:', result.user.id);\n\n      // ---- Optional bypass for dev -------------------------------------------------\n      if (BYPASS_PROFILE_FETCH) {\n        if (__DEV__)\n          console.warn(\n          '[AuthContext] BYPASS_PROFILE_FETCH active – skipping profile lookup, using auth payload only.'\n        );\n        const nowIso = new Date().toISOString();\n        \n        // Create a complete mock user with all fields that might be used elsewhere\n        const mockUser: User = {\n          id: result.user.id,\n          email: result.user.email ?? credentials.email,\n          firstName: 'Dev',\n          lastName: 'User',\n          homeZipCode: '00000',\n          role: UserRole.MVP_DEALER, // Use MVP_DEALER to access all features\n          createdAt: nowIso,\n          updatedAt: nowIso,\n          isEmailVerified: true, // Always verified in dev mode\n          accountType: 'collector',\n          subscriptionStatus: 'active', // Active subscription in dev mode\n          paymentStatus: 'none',\n          subscriptionExpiry: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString(), // 1 year from now\n          favoriteShows: [],\n          attendedShows: [],\n          phoneNumber: '555-123-4567', // Add mock phone number\n          profileImageUrl: 'https://ui-avatars.com/api/?name=Dev+User&background=0D8ABC&color=fff', // Add mock profile image\n          favoriteShowsCount: 0, // Start with 0 favorites\n        };\n        \n        // Update state with the mock user\n        const newState = {\n          user: mockUser,\n          isLoading: false,\n          error: null,\n          isAuthenticated: true,\n        };\n        \n        setAuthState(newState);\n        if (__DEV__)\n          console.warn('[AuthContext] Auth state updated with mock user:', \n          { isAuthenticated: newState.isAuthenticated, userId: mockUser.id, role: mockUser.role });\n        \n        // Set favorite count to 0 for mock user\n        setFavoriteCount(0);\n        \n        return mockUser;\n      }\n\n      // ---- Normal profile fetch ----------------------------------------------------\n      if (__DEV__)\n        console.warn('[AuthContext] Fetching user profile from database...');\n      let userData = await supabaseAuthService.getCurrentUser(result.user.id);\n      \n      if (userData) {\n        if (__DEV__)\n          console.warn('[AuthContext] Profile fetch successful:', \n          { userId: userData.id, role: userData.role });\n        \n        // Create new state with the user data\n        const newState = {\n          user: userData,\n          isLoading: false,\n          error: null,\n          isAuthenticated: true\n        };\n        \n        setAuthState(newState);\n        if (__DEV__)\n          console.warn('[AuthContext] Auth state updated after successful login:', \n          { isAuthenticated: newState.isAuthenticated, userId: userData.id });\n        \n        // Fetch favorite count for the logged in user\n        fetchFavoriteCount(userData.id);\n        \n        return userData;\n      } else {\n        if (__DEV__)\n          console.warn(\n          '[AuthContext] getCurrentUser returned null – attempting forceRefreshAndFetchProfile'\n        );\n        userData = await forceRefreshAndFetchProfile(result.user.id);\n\n        if (userData) {\n          if (__DEV__)\n            console.warn('[AuthContext] Fallback profile fetch succeeded:', \n            { userId: userData.id, role: userData.role });\n          \n          // Create new state with the user data from fallback\n          const newState = {\n            user: userData,\n            isLoading: false,\n            error: null,\n            isAuthenticated: true,\n          };\n          \n          setAuthState(newState);\n          if (__DEV__)\n            console.warn('[AuthContext] Auth state updated after fallback profile fetch:', \n            { isAuthenticated: newState.isAuthenticated, userId: userData.id });\n          \n          fetchFavoriteCount(userData.id);\n          return userData;\n        }\n\n        // EDGE CASE: Still no profile after fallback\n        console.error('[AuthContext] All profile fetch attempts failed');\n        const msg =\n          'We were unable to load your profile information. Please try again later or contact support.';\n        \n        const newState = {\n          ...authState,\n          isLoading: false,\n          error: msg,\n          isAuthenticated: false,\n        };\n        \n        setAuthState(newState);\n        if (__DEV__)\n          console.warn('[AuthContext] Auth state updated after all profile fetch attempts failed:', \n          { isAuthenticated: newState.isAuthenticated, hasError: !!newState.error });\n        \n        return Promise.reject(new Error(msg));\n      }\n    } else {\n      // EDGE CASE: If there's no error but also no user, handle it.\n      console.error('[AuthContext] No error but no user returned from auth service');\n      const msg = \"An unexpected error occurred. Please try again.\";\n      \n      const newState = {\n        ...authState,\n        isLoading: false,\n        error: msg,\n        isAuthenticated: false\n      };\n      \n      setAuthState(newState);\n      if (__DEV__)\n        console.warn('[AuthContext] Auth state updated after unexpected error:', \n        { isAuthenticated: newState.isAuthenticated, hasError: !!newState.error });\n      \n      return Promise.reject(new Error(msg));\n    }\n  };\n  \n  // Register method\n  const register = async (\n    email: string,\n    password: string,\n    firstName: string,\n    lastName: string,\n    homeZipCode: string,\n    role: UserRole\n  ): Promise<User> => {\n    try {\n      setAuthState(prev => ({ ...prev, isLoading: true, error: null }));\n      \n      const userData = await supabaseAuthService.registerUser(\n        email,\n        password,\n        firstName,\n        lastName,\n        homeZipCode,\n        role\n      );\n      \n      const newState = {\n        user: userData,\n        isLoading: false,\n        error: null,\n        isAuthenticated: true,\n      };\n      \n      setAuthState(newState);\n      if (__DEV__)\n        console.warn('[AuthContext] Auth state updated after registration:', \n        { isAuthenticated: newState.isAuthenticated, userId: userData.id });\n      \n      // New user has no favorites yet\n      setFavoriteCount(0);\n      \n      // ----------------- Sentry Business Metric -------------------\n      // Capture a lightweight \"User Signed Up\" event so we can track\n      // daily / weekly signup numbers directly in Sentry dashboards.\n      /* Sentry.captureMessage('User Signed Up', {\n         level: 'info',\n         tags: { event_type: 'business' },\n         extra: { userId: userData.id, email: userData.email },\n       }); */ // ← Temporarily disabled while debugging\n\n      return userData;\n    } catch (error: any) {\n      console.error('Registration error:', error);\n      setAuthState(prev => ({\n        ...prev,\n        isLoading: false,\n        error: error.message || 'Failed to register',\n        isAuthenticated: false,\n      }));\n      throw error;\n    }\n  };\n  \n  // Logout method\n  const logout = async (): Promise<void> => {\n    try {\n      setAuthState(prev => ({ ...prev, isLoading: true, error: null }));\n      \n      await supabaseAuthService.signOut();\n      \n      const newState = {\n        user: null,\n        isLoading: false,\n        error: null,\n        isAuthenticated: false,\n      };\n      \n      setAuthState(newState);\n      if (__DEV__)\n        console.warn('[AuthContext] Auth state updated after logout:', \n        { isAuthenticated: newState.isAuthenticated });\n      \n      // Reset favorite count on logout\n      setFavoriteCount(0);\n    } catch (error: any) {\n      console.error('Logout error:', error);\n      setAuthState(prev => ({\n        ...prev,\n        isLoading: false,\n        error: error.message || 'Failed to sign out',\n      }));\n      throw error;\n    }\n  };\n  \n  // Reset password method\n  const resetPassword = async (email: string): Promise<void> => {\n    try {\n      setAuthState(prev => ({ ...prev, isLoading: true, error: null }));\n      \n      await supabaseAuthService.resetPassword(email);\n      \n      setAuthState(prev => ({\n        ...prev,\n        isLoading: false,\n        error: null,\n      }));\n    } catch (error: any) {\n      console.error('Reset password error:', error);\n      setAuthState(prev => ({\n        ...prev,\n        isLoading: false,\n        error: error.message || 'Failed to reset password',\n      }));\n      throw error;\n    }\n  };\n  \n  // Update profile method\n  const updateProfile = async (userData: Partial<User>): Promise<void> => {\n    try {\n      setAuthState(prev => ({ ...prev, isLoading: true, error: null }));\n      \n      if (!authState.user) {\n        throw new Error('User not authenticated');\n      }\n      \n      // Include the user ID in the userData object\n      const userDataWithId: Partial<User> = {\n        ...userData,\n        id: authState.user.id\n      };\n      \n      // Call the updated service with the userData that now includes ID\n      const updatedUser = await supabaseAuthService.updateUserProfile(userDataWithId);\n      \n      setAuthState(prev => ({\n        ...prev,\n        user: updatedUser,\n        isLoading: false,\n        error: null,\n      }));\n    } catch (error: any) {\n      console.error('Update profile error:', error);\n      setAuthState(prev => ({\n        ...prev,\n        isLoading: false,\n        error: error.message || 'Failed to update profile',\n      }));\n      throw error;\n    }\n  };\n  \n  // Add favorite show method\n  const addFavoriteShow = async (showId: string): Promise<void> => {\n    try {\n      if (!authState.user) {\n        throw new Error('User not authenticated');\n      }\n      \n      if (__DEV__)\n        console.warn('[AuthContext] Adding show to favorites:', showId);\n      \n      // Call the service to add the show to favorites\n      // The database trigger will automatically update the favorite_shows_count\n      await supabaseAuthService.addShowToFavorites(authState.user.id, showId);\n      \n      // Refresh the favorite count from the database\n      fetchFavoriteCount(authState.user.id);\n      \n      if (__DEV__)\n        console.warn('[AuthContext] Show added to favorites successfully');\n    } catch (error: any) {\n      console.error('[AuthContext] Error adding show to favorites:', error);\n      setAuthState(prev => ({\n        ...prev,\n        error: error.message || 'Failed to add show to favorites',\n      }));\n      throw error;\n    }\n  };\n  \n  // Remove favorite show method\n  const removeFavoriteShow = async (showId: string): Promise<void> => {\n    try {\n      if (!authState.user) {\n        throw new Error('User not authenticated');\n      }\n      \n      if (__DEV__)\n        console.warn('[AuthContext] Removing show from favorites:', showId);\n      \n      // Call the service to remove the show from favorites\n      // The database trigger will automatically update the favorite_shows_count\n      await supabaseAuthService.removeShowFromFavorites(authState.user.id, showId);\n      \n      // Refresh the favorite count from the database\n      fetchFavoriteCount(authState.user.id);\n      \n      if (__DEV__)\n        console.warn('[AuthContext] Show removed from favorites successfully');\n    } catch (error: any) {\n      console.error('[AuthContext] Error removing show from favorites:', error);\n      setAuthState(prev => ({\n        ...prev,\n        error: error.message || 'Failed to remove show from favorites',\n      }));\n      throw error;\n    }\n  };\n  \n  // Clear error method\n  const clearError = () => {\n    setAuthState(prev => ({\n      ...prev,\n      error: null,\n    }));\n  };\n\n  /**\n   * Helper util that guarantees we have the *latest* profile information\n   * from Supabase in three steps:\n   *   1. Clear any cached JWT/session entries in AsyncStorage (_defensive)\n   *   2. Force‐refresh the JWT via `refreshUserSession`\n   *   3. Fetch a fresh profile row from the DB and map it to the `User` shape\n   *\n   * If any step fails we fall back to directly hitting the `profiles` table.\n   * Detailed console logs are provided to aid troubleshooting in production.\n   */\n  const forceRefreshAndFetchProfile = async (userId: string): Promise<User | null> => {\n    try {\n      // 1) Clear stale auth tokens from AsyncStorage (best-effort)\n      try {\n        const keys = await AsyncStorage.getAllKeys();\n        const supabaseKeys = keys.filter(k => k.includes('supabase'));\n        if (supabaseKeys.length) {\n          await AsyncStorage.multiRemove(supabaseKeys);\n           \n          if (__DEV__)\n            console.warn('[AuthContext] Cleared cached Supabase tokens', supabaseKeys);\n        }\n      } catch (clearErr) {\n        if (__DEV__)\n          console.warn('[AuthContext] Failed to clear cached tokens', clearErr);\n      }\n\n      // 2) Force the session to refresh\n      const { success, error: refreshErr } = await refreshUserSession();\n      if (!success) {\n        if (__DEV__)\n          console.warn('[AuthContext] Session refresh failed – falling back to direct DB fetch', refreshErr);\n      }\n\n      // 3) Fetch the latest profile data directly\n      const { data: profile, error } = await supabase\n        .from('profiles')\n        .select('*')\n        .eq('id', userId)\n        .single();\n\n      if (error || !profile) {\n        console.error('[AuthContext] Failed to fetch profile after refresh', error);\n        return null;\n      }\n\n      // Map DB → App `User`\n      // Use the shared mapper so social URLs and any new fields are included.\n      const authStub = { id: userId, email: profile.email || '' } as any;\n      const mapped: User = supabaseAuthService.mapProfileToUser(authStub, profile);\n      if (__DEV__)\n        console.warn('[AuthContext] Fetched fresh profile', mapped.role, mapped.accountType);\n\n      return mapped;\n    } catch (err) {\n      console.error('[AuthContext] Unexpected error in forceRefreshAndFetchProfile', err);\n      return null;\n    }\n  };\n\n  const refreshUserRole = async (): Promise<boolean> => {\n    try {\n      if (!authState.user) return false;\n\n      // Use the new robust helper\n      const fresh = await forceRefreshAndFetchProfile(authState.user.id);\n      if (!fresh) {\n        return false;\n      }\n\n      setAuthState(prev => {\n        if (!prev.user) return prev;\n        return {\n          ...prev,\n          user: fresh,\n        };\n      });\n      \n      // Also refresh the favorite count\n      fetchFavoriteCount(authState.user.id);\n      \n      return true;\n    } catch (e) {\n      console.error('An unexpected error occurred in refreshUserRole:', e);\n      return false;\n    }\n  };\n  \n  // Context value - ensuring error, isLoading, and isAuthenticated are always defined\n  const contextValue: AuthContextType = {\n    authState: { ...authState, favoriteCount },\n    // Explicitly extract these properties from authState with fallbacks to ensure they're never undefined\n    error: authState?.error ?? null,\n    isLoading: authState?.isLoading ?? false,\n    isAuthenticated: authState?.isAuthenticated ?? false,\n    login,\n    register,\n    logout,\n    resetPassword,\n    updateProfile,\n    addFavoriteShow,\n    removeFavoriteShow,\n    clearError,\n    refreshUserRole,\n  };\n  \n  return (\n    <AuthContext.Provider value={contextValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Custom hook for using the auth context\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  \n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  \n  return context;\n};\n\n// Expose context for external modules\nexport { AuthContext };\nexport default AuthContext;\n"],"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","ignoreList":[]}