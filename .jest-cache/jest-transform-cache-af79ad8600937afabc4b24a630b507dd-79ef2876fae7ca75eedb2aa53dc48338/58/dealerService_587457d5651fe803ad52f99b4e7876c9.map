{"version":3,"names":["supabase","UserRole","formatInList","normalizeRole","cov_brov4ucib","s","mapDbParticipationToAppParticipation","row","f","id","userId","userid","showId","showid","cardTypes","b","card_types","specialty","undefined","priceRange","price_range","notableItems","notable_items","boothLocation","booth_location","paymentMethods","payment_methods","openToTrades","open_to_trades","buyingCards","buying_cards","status","createdAt","createdat","mapDbCoordinatesToApp","geo","Array","isArray","coordinates","length","latitude","longitude","getDealerShows","_ref","_asyncToGenerator","data","error","query","from","select","eq","_ref2","transformedData","map","item","show","shows","participation","title","description","location","address","startDate","start_date","endDate","end_date","entryFee","entry_fee","imageUrl","image_url","rating","organizerId","organizer_id","features","categories","created_at","updatedAt","updated_at","err","console","message","_x","_x2","apply","arguments","registerForShow","_ref3","participationData","_ref5","_ref4","single","userData","userError","warn","role","userRole","rawRole","toString","toLowerCase","isDealerLike","includes","effectiveRole","DEALER","MVP_DEALER","SHOW_ORGANIZER","_ref6","maybeSingle","existingReg","checkError","insertData","_ref7","insert","inserted","_x3","_x4","updateShowParticipation","_ref8","participationId","_ref9","updateData","_ref0","update","_x5","_x6","_x7","cancelShowParticipation","_ref1","success","_ref10","_ref11","delete","_x8","_x9","getDealersForShow","_ref12","_ref13","order","ascending","participantsData","participantsError","userIds","participant","_ref14","in","profilesData","profilesError","profilesMap","forEach","profile","_ref15","_ref16","_ref17","_ref18","_ref19","_ref20","Object","assign","dealerName","first_name","last_name","trim","dealerEmail","email","dealerProfileImage","facebookUrl","facebook_url","instagramUrl","instagram_url","twitterUrl","twitter_url","whatnotUrl","whatnot_url","ebayStoreUrl","ebay_store_url","_x0","getAvailableShowsForDealer","_ref21","filters","_ref22","participations","partError","registeredShowIds","p","gt","Date","toISOString","gte","lte","not","_ref23","filteredData","radius","_x1"],"sources":["dealerService.ts"],"sourcesContent":["/**\n * Dealer Service\n *\n * This file contains helpers for dealer-specific operations related to show participation.\n */\n\nimport { supabase } from '../supabase';\nimport { Show, UserRole } from '../types';\nimport { formatInList } from '../utils/postgrest';\nimport { normalizeRole } from './userRoleService';\n\n/**\n * Types for dealer show participation\n */\n/**\n * Normalize a role string (DB may store lowercase) to the lowercase\n * `UserRole` enum used throughout the client.\n */\n\nexport interface DealerShowParticipation {\n  id: string;\n  userId: string;\n  showId: string;\n  cardTypes: string[];\n  specialty?: string;\n  priceRange?: 'budget' | 'mid-range' | 'high-end';\n  notableItems?: string;\n  boothLocation?: string;\n  paymentMethods: string[];\n  openToTrades: boolean;\n  buyingCards: boolean;\n  status: 'registered' | 'confirmed' | 'cancelled' | 'completed';\n  createdAt: Date | string;\n}\n\n/**\n * Input for registering or updating dealer participation\n */\nexport interface DealerParticipationInput {\n  showId: string;\n  cardTypes?: string[];\n  specialty?: string;\n  priceRange?: 'budget' | 'mid-range' | 'high-end';\n  notableItems?: string;\n  boothLocation?: string;\n  paymentMethods?: string[];\n  openToTrades?: boolean;\n  buyingCards?: boolean;\n}\n\n/**\n * Convert a raw Supabase row into a DealerShowParticipation object\n */\nconst mapDbParticipationToAppParticipation = (row: any): DealerShowParticipation => ({\n  id: row.id,\n  userId: row.userid,\n  showId: row.showid,\n  cardTypes: row.card_types || [],\n  specialty: row.specialty || undefined,\n  priceRange: row.price_range || undefined,\n  notableItems: row.notable_items || undefined,\n  boothLocation: row.booth_location || undefined,\n  paymentMethods: row.payment_methods || [],\n  openToTrades: row.open_to_trades || false,\n  buyingCards: row.buying_cards || false,\n  status: row.status || 'registered',\n  createdAt: row.createdat,\n});\n\n/**\n * Utility: Safely map a PostGIS `geometry(Point)`/`geography(Point)`\n * object returned by Supabase into the app's `{ latitude, longitude }`\n * shape.  Returns `undefined` if the value is missing or malformed.\n */\nconst mapDbCoordinatesToApp = (\n  geo: any\n): { latitude: number; longitude: number } | undefined => {\n  if (\n    geo &&\n    Array.isArray(geo.coordinates) &&\n    geo.coordinates.length >= 2 &&\n    typeof geo.coordinates[0] === 'number' &&\n    typeof geo.coordinates[1] === 'number'\n  ) {\n    return {\n      latitude: geo.coordinates[1],\n      longitude: geo.coordinates[0],\n    };\n  }\n  return undefined;\n};\n\n/**\n * Get all shows a dealer is participating in\n * * @param userId - The dealer's user ID\n * @param status - Optional filter for participation status\n * @returns Array of shows with participation details\n */\nexport const getDealerShows = async (\n  userId: string,\n  status?: 'registered' | 'confirmed' | 'cancelled' | 'completed'\n): Promise<{ data: Array<Show & { participation: DealerShowParticipation }> | null; error: string | null }> => {\n  try {\n    if (!userId) {\n      return { data: null, error: 'Invalid userId' };\n    }\n\n    let query = supabase\n      .from('show_participants')\n      .select(`\n        *,\n        shows:showid (*)\n      `)\n      .eq('userid', userId);\n\n    if (status) {\n      query = query.eq('status', status);\n    }\n\n    const { data, error } = await query;\n    if (error) throw error;\n\n    if (!data || data.length === 0) {\n      return { data: [], error: null };\n    }\n\n    // Transform the data to match our expected format\n    const transformedData = data.map(item => {\n      const show = item.shows;\n      const participation = mapDbParticipationToAppParticipation(item);\n      \n      return {\n        id: show.id,\n        title: show.title,\n        description: show.description,\n        location: show.location,\n        address: show.address,\n        startDate: show.start_date,\n        endDate: show.end_date,\n        entryFee: show.entry_fee,\n        imageUrl: show.image_url,\n        rating: show.rating,\n        coordinates: mapDbCoordinatesToApp(show.coordinates),\n        status: show.status,\n        organizerId: show.organizer_id,\n        features: show.features || {},\n        categories: show.categories || [],\n        createdAt: show.created_at,\n        updatedAt: show.updated_at,\n        participation,\n      };\n    });\n\n    return { data: transformedData, error: null };\n  } catch (err: any) {\n    console.error('Error fetching dealer shows:', err);\n    return { data: null, error: err.message || 'Failed to fetch dealer shows' };\n  }\n};\n\n/**\n * Register a dealer for a show\n * * @param userId - The dealer's user ID\n * @param participationData - Dealer participation details\n * @returns The created participation record or error\n */\nexport const registerForShow = async (\n  userId: string,\n  participationData: DealerParticipationInput\n): Promise<{ data: DealerShowParticipation | null; error: string | null }> => {\n  try {\n    if (!userId || !participationData.showId) {\n      return { data: null, error: 'Invalid userId or showId' };\n    }\n\n    // Check if user has dealer role\n    const { data: userData, error: userError } = await supabase\n      .from('profiles')\n      .select('role')\n      .eq('id', userId)\n      .single();\n\n    if (userError) {\n      throw userError;\n    }\n\n    // ------------------------------------------------------------\n    // Debugging – log the raw role we got back from Supabase\n    // ------------------------------------------------------------\n     \n    console.warn(\n      '[registerForShow] DB role value:',\n      userData?.role,\n      '| normalised:',\n      normalizeRole(userData?.role)\n    );\n\n    const userRole = normalizeRole(userData?.role);\n\n    /**\n     * Temporary, more lenient role check:\n     * 1. Accept normalised enum values (DEALER / MVP_DEALER)\n     * 2. Fallback – if the raw string contains \"dealer\" or \"mvp\"\n     * (case-insensitive) we also treat it as dealer-tier.\n     */\n    const rawRole = (userData?.role || '').toString().toLowerCase();\n    const isDealerLike =\n      rawRole.includes('dealer') || rawRole.includes('mvp') || rawRole.includes('organizer');\n\n    if (\n      !userRole &&\n      !isDealerLike\n    ) {\n      return { data: null, error: 'User is not a dealer' };\n    }\n\n    // If we passed the lenient check but normalisation failed,\n    // treat the user as a basic DEALER for the remainder of this call.\n    const effectiveRole = userRole ?? UserRole.DEALER;\n\n    if (\n      effectiveRole !== UserRole.DEALER &&\n      effectiveRole !== UserRole.MVP_DEALER &&\n      effectiveRole !== UserRole.SHOW_ORGANIZER\n    ) {\n      return { data: null, error: 'User is not a dealer' };\n    }\n\n    // Check if dealer is already registered for this show\n    const { data: existingReg, error: checkError } = await supabase\n      .from('show_participants')\n      .select('id')\n      .eq('userid', userId)\n      .eq('showid', participationData.showId)\n      .maybeSingle();\n\n    if (checkError) {\n      throw checkError;\n    }\n\n    if (existingReg) {\n      return { data: null, error: 'Already registered for this show' };\n    }\n\n    // Insert new participation record\n    const insertData: Record<string, any> = {\n      userid: userId,\n      showid: participationData.showId,\n      status: 'registered',\n    };\n\n    // Map optional fields if provided\n    if (participationData.cardTypes !== undefined) insertData.card_types = participationData.cardTypes;\n    if (participationData.specialty !== undefined) insertData.specialty = participationData.specialty;\n    if (participationData.priceRange !== undefined) insertData.price_range = participationData.priceRange;\n    if (participationData.notableItems !== undefined) insertData.notable_items = participationData.notableItems;\n    if (participationData.boothLocation !== undefined) insertData.booth_location = participationData.boothLocation;\n    if (participationData.paymentMethods !== undefined) insertData.payment_methods = participationData.paymentMethods;\n    if (participationData.openToTrades !== undefined) insertData.open_to_trades = participationData.openToTrades;\n    if (participationData.buyingCards !== undefined) insertData.buying_cards = participationData.buyingCards;\n\n    const { data: inserted, error } = await supabase\n      .from('show_participants')\n      .insert(insertData)\n      .select()\n      .single();\n\n    if (error) throw error;\n    return { data: mapDbParticipationToAppParticipation(inserted), error: null };\n  } catch (err: any) {\n    console.error('Error registering for show:', err);\n    return { data: null, error: err.message || 'Failed to register for show' };\n  }\n};\n\n/**\n * Update dealer participation details for a show\n * * @param userId - The dealer's user ID\n * @param participationId - The participation record ID\n * @param participationData - Updated dealer participation details\n * @returns The updated participation record or error\n */\nexport const updateShowParticipation = async (\n  userId: string,\n  participationId: string,\n  participationData: Partial<DealerParticipationInput>\n): Promise<{ data: DealerShowParticipation | null; error: string | null }> => {\n  try {\n    if (!userId || !participationId) {\n      return { data: null, error: 'Invalid userId or participationId' };\n    }\n\n    // Verify ownership of the participation record\n    const { data: existingReg, error: checkError } = await supabase\n      .from('show_participants')\n      .select('id')\n      .eq('id', participationId)\n      .eq('userid', userId)\n      .maybeSingle();\n\n    if (checkError) {\n      throw checkError;\n    }\n\n    if (!existingReg) {\n      return { data: null, error: 'Participation record not found or unauthorized' };\n    }\n\n    // Prepare update data - convert camelCase to snake_case for DB\n    const updateData: Record<string, any> = {};\n    if (participationData.cardTypes !== undefined) updateData.card_types = participationData.cardTypes;\n    if (participationData.specialty !== undefined) updateData.specialty = participationData.specialty;\n    if (participationData.priceRange !== undefined) updateData.price_range = participationData.priceRange;\n    if (participationData.notableItems !== undefined) updateData.notable_items = participationData.notableItems;\n    if (participationData.boothLocation !== undefined) updateData.booth_location = participationData.boothLocation;\n    if (participationData.paymentMethods !== undefined) updateData.payment_methods = participationData.paymentMethods;\n    if (participationData.openToTrades !== undefined) updateData.open_to_trades = participationData.openToTrades;\n    if (participationData.buyingCards !== undefined) updateData.buying_cards = participationData.buyingCards;\n\n    // Update the participation record\n    const { data, error } = await supabase\n      .from('show_participants')\n      .update(updateData)\n      .eq('id', participationId)\n      .select()\n      .single();\n\n    if (error) {\n      throw error;\n    }\n\n    return { data: mapDbParticipationToAppParticipation(data), error: null };\n  } catch (err: any) {\n    console.error('Error updating show participation:', err);\n    return { data: null, error: err.message || 'Failed to update show participation' };\n  }\n};\n\n/**\n * Cancel dealer participation in a show\n * * @param userId - The dealer's user ID\n * @param participationId - The participation record ID\n * @returns Success or error message\n */\nexport const cancelShowParticipation = async (\n  userId: string,\n  participationId: string\n): Promise<{ success: boolean; error: string | null }> => {\n  try {\n    if (!userId || !participationId) {\n      return { success: false, error: 'Invalid userId or participationId' };\n    }\n\n    // Verify ownership of the participation record\n    const { data: existingReg, error: checkError } = await supabase\n      .from('show_participants')\n      .select('id')\n      .eq('id', participationId)\n      .eq('userid', userId)\n      .maybeSingle();\n\n    if (checkError) {\n      throw checkError;\n    }\n\n    if (!existingReg) {\n      return { success: false, error: 'Participation record not found or unauthorized' };\n    }\n\n    // Cancellation strategy:\n    // We simply remove the participation row, which has the same practical\n    // effect as setting a \"cancelled\" status.  This avoids relying on the\n    // optional `status` column that may not be present in every deployed\n    // database schema.\n    const { error } = await supabase\n      .from('show_participants')\n      .delete()\n      .eq('id', participationId);\n\n    if (error) {\n      throw error;\n    }\n\n    return { success: true, error: null };\n  } catch (err: any) {\n    console.error('Error cancelling show participation:', err);\n    return { success: false, error: err.message || 'Failed to cancel show participation' };\n  }\n};\n\n/**\n * Get dealer information for a specific show\n * * @param showId - The show ID\n * @returns Array of dealer participation records for the show\n */\nexport const getDealersForShow = async (\n  showId: string\n): Promise<{ data: Array<DealerShowParticipation> | null; error: string | null }> => {\n  try {\n    if (!showId) {\n      return { data: null, error: 'Invalid showId' };\n    }\n\n    // Step 1: Fetch show participants data\n    const { data: participantsData, error: participantsError } = await supabase\n      .from('show_participants')\n      .select('*')\n      .eq('showid', showId)\n      .order('createdat', { ascending: true });\n\n    if (participantsError) {\n      throw participantsError;\n    }\n\n    if (!participantsData || participantsData.length === 0) {\n      return { data: [], error: null };\n    }\n\n    // Step 2: Extract user IDs from participants\n    const userIds = participantsData.map(participant => participant.userid);\n\n    // Early-exit guard: no user IDs to look up → nothing to return\n    if (!userIds || userIds.length === 0) {\n      return { data: [], error: null };\n    }\n\n    // Step 3: Fetch profiles for these user IDs\n    // Only select columns that definitely exist in the schema\n    const { data: profilesData, error: profilesError } = await supabase\n      .from('profiles')\n      .select(\n        'id, first_name, last_name, email, role, facebook_url, instagram_url, twitter_url, whatnot_url, ebay_store_url'\n      )\n      .in('id', userIds);\n\n    if (profilesError) {\n      throw profilesError;\n    }\n\n    // Create a map of user profiles for easy lookup\n    const profilesMap: Record<string, any> = {};\n    if (profilesData) {\n      profilesData.forEach(profile => {\n        profilesMap[profile.id] = profile;\n      });\n    }\n\n    // Step 4: Combine the data in JavaScript\n    const transformedData = participantsData.map(item => {\n      const participation = mapDbParticipationToAppParticipation(item);\n      const profile = profilesMap[item.userid];\n      \n      // Add dealer profile info\n      return {\n        ...participation,\n        dealerName: profile \n          ? `${profile.first_name || ''} ${profile.last_name || ''}`.trim() \n          : 'Unknown Dealer',\n        dealerEmail: profile?.email,\n        dealerProfileImage: undefined, // Profile image URL is not available in the schema\n        // Additional fields for UI (role + social links)\n        role: profile?.role ?? 'USER',\n        facebookUrl: profile?.facebook_url ?? undefined,\n        instagramUrl: profile?.instagram_url ?? undefined,\n        twitterUrl: profile?.twitter_url ?? undefined,\n        whatnotUrl: profile?.whatnot_url ?? undefined,\n        ebayStoreUrl: profile?.ebay_store_url ?? undefined\n      };\n    });\n\n    return { data: transformedData, error: null };\n  } catch (err: any) {\n    console.error('Error fetching dealers for show:', err);\n    return { data: null, error: err.message || 'Failed to fetch dealers for show' };\n  }\n};\n\n/**\n * Get upcoming shows available for dealer registration\n * * @param userId - The dealer's user ID\n * @param filters - Optional filters for shows\n * @returns Array of shows available for registration\n */\nexport const getAvailableShowsForDealer = async (\n  userId: string,\n  filters: {\n    startDate?: Date | string;\n    endDate?: Date | string;\n    radius?: number;\n    latitude?: number;\n    longitude?: number;\n  } = {}\n): Promise<{ data: Show[] | null; error: string | null }> => {\n  try {\n    if (!userId) {\n      return { data: null, error: 'Invalid userId' };\n    }\n\n    // Get shows the dealer is already registered for\n    const { data: participations, error: partError } = await supabase\n      .from('show_participants')\n      .select('showid')\n      .eq('userid', userId);\n\n    if (partError) {\n      throw partError;\n    }\n\n    // Extract show IDs the dealer is already registered for\n    const registeredShowIds = participations ? participations.map(p => p.showid) : [];\n\n    // Build the query for available shows\n    let query = supabase\n      .from('shows')\n      .select('*')\n      .eq('status', 'ACTIVE')\n      .gt('start_date', new Date().toISOString());\n\n    // Apply filters\n    if (filters.startDate) {\n      query = query.gte('start_date', filters.startDate as any);\n    }\n    if (filters.endDate) {\n      query = query.lte('end_date', filters.endDate as any);\n    }\n\n    // Exclude shows the dealer is already registered for\n    if (registeredShowIds.length > 0) {\n      // PostgREST expects a parenthesised list string for an `in` / `not.in` filter.\n      // Use the shared helper to ensure correct quoting / formatting.\n      query = query.not('id', 'in', formatInList(registeredShowIds));\n    }\n\n    // Order by start date\n    query = query.order('start_date', { ascending: true });\n\n    const { data, error } = await query;\n\n    if (error) {\n      throw error;\n    }\n\n    // If we have lat/lng and radius, filter results by distance\n    // This is a client-side filter since we already have the data\n    let filteredData = data || [];\n    \n    if (\n      filters.latitude && \n      filters.longitude && \n      filters.radius && \n      filteredData.length > 0\n    ) {\n      // This would ideally use the server-side PostGIS functions,\n      // but for simplicity we'll do basic filtering here\n       \nconsole.warn('Filtering by distance is not implemented in this version');\n    }\n\n    return { \n      data: filteredData.map(show => ({\n        id: show.id,\n        title: show.title,\n        description: show.description,\n        location: show.location,\n        address: show.address,\n        startDate: show.start_date,\n        endDate: show.end_date,\n        entryFee: show.entry_fee,\n        imageUrl: show.image_url,\n        rating: show.rating,\n        coordinates: mapDbCoordinatesToApp(show.coordinates),\n        status: show.status,\n        organizerId: show.organizer_id,\n        features: show.features || {},\n        categories: show.categories || [],\n        createdAt: show.created_at,\n        updatedAt: show.updated_at,\n      })), \n      error: null \n    };\n  } catch (err: any) {\n    console.error('Error fetching available shows for dealer:', err);\n    return { data: null, error: err.message || 'Failed to fetch available shows' };\n  }\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}