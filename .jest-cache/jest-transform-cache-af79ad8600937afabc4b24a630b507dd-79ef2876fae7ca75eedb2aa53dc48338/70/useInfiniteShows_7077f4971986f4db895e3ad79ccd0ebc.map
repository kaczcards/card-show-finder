{"version":3,"names":["useInfiniteQuery","getPaginatedShows","cov_2jkwhs2ywk","s","useInfiniteShows","params","_data$pages$","f","_ref","coordinates","_ref$radius","radius","b","_ref$startDate","startDate","Date","_ref$endDate","endDate","setDate","getDate","maxEntryFee","features","categories","keyword","dealerCardTypes","_ref$pageSize","pageSize","_ref$enabled","enabled","isValidCoordinates","latitude","longitude","Number","isNaN","effectiveCoordinates","console","warn","_ref2","queryKey","initialPageParam","queryFn","_queryFn","_asyncToGenerator","_ref3","_ref3$pageParam","pageParam","page","queryParams","result","error","Error","_x","apply","arguments","getNextPageParam","lastPage","pagination","currentPage","totalPages","undefined","staleTime","refetchOnWindowFocus","data","fetchNextPage","hasNextPage","isFetchingNextPage","isLoading","isError","queryError","refetch","refresh","_ref4","flattenedShows","pages","flatMap","totalCount","errorMessage","message","shows","_fetchNextPage2","isRefreshing"],"sources":["useInfiniteShows.ts"],"sourcesContent":["import { useInfiniteQuery } from '@tanstack/react-query';\nimport {\n  getPaginatedShows,\n  PaginatedShowsParams,\n  PaginatedShowsResult,\n} from '../services/showService';\nimport { Show, ShowFilters, Coordinates } from '../types';\n\n/**\n * Interface for the parameters accepted by useInfiniteShows hook\n */\nexport interface InfiniteShowsParams extends ShowFilters {\n  /**\n   * User's current coordinates (required for geo-filtering)\n   */\n  coordinates: Coordinates;\n  \n  /**\n   * Number of shows to fetch per page\n   * @default 20\n   */\n  pageSize?: number;\n  \n  /**\n   * Whether to enable the query automatically\n   * @default true\n   */\n  enabled?: boolean;\n}\n\n/**\n * Result interface returned by useInfiniteShows hook\n */\nexport interface InfiniteShowsResult {\n  /**\n   * Flattened array of all shows across all loaded pages\n   */\n  shows: Show[];\n  \n  /**\n   * Total count of shows matching the filter criteria\n   */\n  totalCount: number;\n  \n  /**\n   * Whether there are more pages that can be loaded\n   */\n  hasNextPage: boolean;\n  \n  /**\n   * Function to fetch the next page of shows\n   */\n  fetchNextPage: () => Promise<void>;\n  \n  /**\n   * Function to refresh all data\n   */\n  refresh: () => Promise<void>;\n  \n  /**\n   * Whether the initial data is loading\n   */\n  isLoading: boolean;\n  \n  /**\n   * Whether more data is being fetched\n   */\n  isFetchingNextPage: boolean;\n  \n  /**\n   * Whether a refresh is in progress\n   */\n  isRefreshing: boolean;\n  \n  /**\n   * Error message if any\n   */\n  error: string | null;\n}\n\n/**\n * Custom hook that uses React Query's useInfiniteQuery to implement infinite scrolling\n * for the shows list on the home screen.\n * \n * @param params - Filtering parameters and coordinates\n * @returns An object with shows data, loading states, and functions to fetch more data\n */\nexport const useInfiniteShows = (params: InfiniteShowsParams): InfiniteShowsResult => {\n  const {\n    coordinates,\n    radius = 25,\n    startDate = new Date(),\n    endDate = new Date(new Date().setDate(new Date().getDate() + 30)),\n    maxEntryFee,\n    features,\n    categories,\n    keyword,\n    dealerCardTypes,\n    pageSize = 20,\n    enabled = true,\n  } = params;\n  \n  /**\n   * ------------------------------------------------------------------\n   * Coordinate handling\n   * ------------------------------------------------------------------\n   * HomeScreen (and potentially other callers) may pass `null` or an\n   * incomplete coordinates object while location permissions are being\n   * resolved.  Previously we threw an error, which prevented the hook\n   * from ever executing and left the UI in an empty-state loop.\n   *\n   * Instead, we now:\n   *   1. Detect whether the incoming coordinates are valid numbers\n   *   2. If invalid, fall back to a sensible default (_Carmel, _IN) which\n   *      is seeded with real shows in seed data\n   *   3. Log a debug message so developers can see when the fallback\n   *      path is taken\n   */\n  const isValidCoordinates =\n    coordinates &&\n    typeof coordinates.latitude === 'number' &&\n    typeof coordinates.longitude === 'number' &&\n    !Number.isNaN(coordinates.latitude) &&\n    !Number.isNaN(coordinates.longitude);\n\n  const effectiveCoordinates: Coordinates = isValidCoordinates\n    ? coordinates\n    : { latitude: 39.9784, longitude: -86.118 }; // Carmel, IN\n\n  if (!isValidCoordinates) {\n     \n    console.warn(\n      '[useInfiniteShows] Invalid or missing coordinates supplied. ' +\n        'Falling back to default coordinates (Carmel, IN).',\n      coordinates\n    );\n  }\n  \n  // Set up the infinite query\n  const {\n    data,\n    fetchNextPage,\n    hasNextPage,\n    isFetchingNextPage,\n    isLoading,\n    isError,\n    error: queryError,\n    refetch,\n  } = useInfiniteQuery<PaginatedShowsResult, Error>({\n    queryKey: ['shows', 'infinite', { \n      coordinates: effectiveCoordinates, \n      radius, \n      startDate, \n      endDate, \n      maxEntryFee, \n      features, \n      categories,\n      keyword,\n      dealerCardTypes,\n      pageSize \n    }],\n    // Start pagination at page 1\n    initialPageParam: 1,\n    queryFn: async ({ pageParam = 1 }) => {\n      // Prepare parameters for the paginated shows query\n      const page = Number(pageParam) || 1;\n      const queryParams: PaginatedShowsParams = {\n        latitude: effectiveCoordinates.latitude,\n        longitude: effectiveCoordinates.longitude,\n        radius,\n        startDate,\n        endDate,\n        maxEntryFee,\n        features,\n        categories,\n        keyword,\n        dealerCardTypes,\n        pageSize,\n        page,\n      };\n      \n      // Call the service function to get paginated shows\n      const result = await getPaginatedShows(queryParams);\n      \n      // If there's an error, throw it so React Query can handle it\n      if (result.error) {\n        throw new Error(result.error);\n      }\n      \n      return result;\n    },\n    getNextPageParam: (lastPage: PaginatedShowsResult) => {\n      // If we've reached the last page, return undefined (stops infinite loading)\n      if (lastPage.pagination.currentPage >= lastPage.pagination.totalPages) {\n        return undefined;\n      }\n      \n      // Otherwise, return the next page number\n      return lastPage.pagination.currentPage + 1;\n    },\n    enabled,\n    staleTime: 60 * 1000, // Consider data fresh for 1 minute\n    refetchOnWindowFocus: false,\n  });\n  \n  // Function to refresh data\n  const refresh = async (): Promise<void> => {\n    await refetch();\n  };\n  \n  // Flatten the pages of shows into a single array\n  const flattenedShows =\n    data?.pages.flatMap((page: PaginatedShowsResult) => page.data) || [];\n  \n  // Get the total count from the first page (or 0 if no data)\n  const totalCount = data?.pages[0]?.pagination.totalCount || 0;\n  \n  // Extract error message if any\n  const errorMessage = isError ? (queryError as Error)?.message || 'Failed to load shows' : null;\n  \n  return {\n    shows: flattenedShows,\n    totalCount,\n    hasNextPage: !!hasNextPage,\n    fetchNextPage: async () => {\n      if (hasNextPage && !isFetchingNextPage) {\n        await fetchNextPage();\n      }\n    },\n    refresh,\n    isLoading,\n    isFetchingNextPage,\n    isRefreshing: false, // This would need to be tracked separately if needed\n    error: errorMessage,\n  };\n};\n\nexport default useInfiniteShows;\n"],"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","ignoreList":[]}