{"version":3,"names":["formatInList","values","cov_9tm3ud0sf","f","v","s","filter","Boolean","length","b","map","x","String","replace","join","formatLargeInList","chunkSize","arguments","undefined","__DEV__","console","warn","slice","safeOverlaps","query","column","arr","Array","isArray","overlaps"],"sources":["postgrest.ts"],"sourcesContent":["export function formatInList(values: Array<string | null | undefined>): string {\n  const v = values.filter(Boolean) as string[];\n  if (v.length === 0) return '()';\n  const f = v.map(x => `\"${String(x).replace(/\\\"/g, '\\\\\"')}\"`);\n  return `(${f.join(',')})`;\n}\n\nexport function formatLargeInList(values: Array<string | null | undefined>, chunkSize = 100): string {\n  if (values.length <= chunkSize) return formatInList(values);\n  if (__DEV__)\n    console.warn(`[postgrest] Large array (${values.length}) used with formatLargeInList.`);\n  return formatInList(values.slice(0, chunkSize));\n}\n\n/**\n * Safely apply a PostgREST `overlaps` filter only when the array is non-empty.\n * Returns the original query unchanged when the array is empty / null / undefined.\n *\n * Example:\n *   query = safeOverlaps(query, 'categories', selectedCategories);\n */\nexport function safeOverlaps<T>(query: any, column: string, arr?: T[] | null) {\n  if (Array.isArray(arr) && arr.length > 0) {\n    return query.overlaps(column, arr as any);\n  }\n  return query;\n}\n"],"mappingswC,EAAU;EAAAC,aAAA,GAAAC,CAAA;EAC7E,IAAMC,CAAC,IAAAF,aAAA,GAAAG,CAAA,OAAGJ,MAAM,CAACK,MAAM,CAACC,OAAO,CAAC,CAAY;EAACL,aAAA,GAAAG,CAAA;EAC7C,IAAID,CAAC,CAACI,MAAM,KAAK,CAAC,EAAE;IAAAN,aAAA,GAAAO,CAAA;IAAAP,aAAA,GAAAG,CAAA;IAAA,OAAO,IAAI;EAAA,CAAC;IAAAH,aAAA,GAAAO,CAAA;EAAA;EAChC,IAAMN,CAAC,IAAAD,aAAA,GAAAG,CAAA,OAAGD,CAAC,CAACM,GAAG,CAAC,UAAAC,CAAC,EAAI;IAAAT,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAG,CAAA;IAAA,WAAIO,MAAM,CAACD,CAAC,CAAC,CAACE,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,GAAG;EAAD,CAAC,CAAC;EAACX,aAAA,GAAAG,CAAA;EAC7D,OAAO,IAAIF,CAAC,CAACW,IAAI,CAAC,GAAG,CAAC,GAAG;AAC3B;AAEA,OAAO,SAASC,iBAAiBA,CAACd,MAAwC,EAA2B;EAAA,IAAzBe,SAAS,GAAAC,SAAA,CAAAT,MAAA,QAAAS,SAAA,QAAAC,SAAA,GAAAD,SAAA,OAAAf,aAAA,GAAAO,CAAA,UAAG,GAAG;EAAAP,aAAA,GAAAC,CAAA;EAAAD,aAAA,GAAAG,CAAA;EACzF,IAAIJ,MAAM,CAACO,MAAM,IAAIQ,SAAS,EAAE;IAAAd,aAAA,GAAAO,CAAA;IAAAP,aAAA,GAAAG,CAAA;IAAA,OAAOL,YAAY,CAACC,MAAM,CAAC;EAAA,CAAC;IAAAC,aAAA,GAAAO,CAAA;EAAA;EAAAP,aAAA,GAAAG,CAAA;EAC5D,IAAIc,OAAO,EACT;IAAAjB,aAAA,GAAAO,CAAA;IAAAP,aAAA,GAAAG,CAAA;IAAAe,OAAO,CAACC,IAAI,CAAC,4BAA4BpB,MAAM,CAACO,MAAM,gCAAgC,CAAC;EAAA,CAAC;IAAAN,aAAA,GAAAO,CAAA;EAAA;EAAAP,aAAA,GAAAG,CAAA;EAC1F,OAAOL,YAAY,CAACC,MAAM,CAACqB,KAAK,CAAC,CAAC,EAAEN,SAAS,CAAC,CAAC;AACjD;AASA,OAAO,SAASO,YAAYA,CAAIC,KAAU,EAAEC,MAAc,EAAEC,GAAgB,EAAE;EAAAxB,aAAA,GAAAC,CAAA;EAAAD,aAAA,GAAAG,CAAA;EAC5E,IAAI,CAAAH,aAAA,GAAAO,CAAA,UAAAkB,KAAK,CAACC,OAAO,CAACF,GAAG,CAAC,MAAAxB,aAAA,GAAAO,CAAA,UAAIiB,GAAG,CAAClB,MAAM,GAAG,CAAC,GAAE;IAAAN,aAAA,GAAAO,CAAA;IAAAP,aAAA,GAAAG,CAAA;IACxC,OAAOmB,KAAK,CAACK,QAAQ,CAACJ,MAAM,EAAEC,GAAU,CAAC;EAC3C,CAAC;IAAAxB,aAAA,GAAAO,CAAA;EAAA;EAAAP,aAAA,GAAAG,CAAA;EACD,OAAOmB,KAAK;AACd","ignoreList":[]}