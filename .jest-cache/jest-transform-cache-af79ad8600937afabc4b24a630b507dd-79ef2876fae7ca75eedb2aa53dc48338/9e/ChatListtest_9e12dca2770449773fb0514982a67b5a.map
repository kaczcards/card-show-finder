{"version":3,"names":["_getJestObj","mock","useConversationsQuery","jest","fn","useConversationMessagesQuery","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_ChatList","_hooks","_jsxRuntime","_require","describe","mockConversations","id","title","last_message_text","last_message_timestamp","unread_count","participants","user_id","display_name","avatar_url","type","mockMessages","conversation_id","sender_id","message_text","created_at","read_by_user_ids","sender_profile","mockMarkConversationAsRead","mockSendMessage","mockRefetchConversations","mockSendConversationMessage","beforeEach","clearAllMocks","mockReturnValue","conversations","isLoading","error","refetch","markConversationAsRead","sendMessage","isSending","messages","test","_render","render","jsx","default","userId","getByText","expect","toBeTruthy","onSelectConversationMock","_render2","onSelectConversation","fireEvent","press","toHaveBeenCalledWith","useRefSpy","spyOn","React","initialConversationId","waitFor","toHaveBeenCalledTimes","toHaveBeenCalled","_render3","rerender","mockRestore","_render4","mockClear","originalError","console","act","Promise","resolve","setTimeout","not","stringContaining","mockReturnValueOnce","_render5","getByPlaceholderText","messageInput","changeText"],"sources":["ChatList.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, fireEvent, waitFor, act } from '@testing-library/react-native';\nimport ChatList from '../../../src/components/Chat/ChatList';\n\n// Mock the hooks\njest.mock('../../../src/hooks', () => ({\n  useConversationsQuery: jest.fn(),\n  useConversationMessagesQuery: jest.fn(),\n}));\n\n// Import the mocked hooks\nimport { useConversationsQuery, useConversationMessagesQuery } from '../../../src/hooks';\n\ndescribe('ChatList Component', () => {\n  // Mock data\n  const mockConversations = [\n    {\n      id: 'convo-1',\n      title: 'Conversation 1',\n      last_message_text: 'Hello there',\n      last_message_timestamp: '2025-07-11T10:00:00Z',\n      unread_count: 2,\n      participants: [\n        {\n          user_id: 'user-2',\n          display_name: 'John Doe',\n          avatar_url: null,\n        },\n      ],\n      type: 'direct',\n    },\n    {\n      id: 'convo-2',\n      title: 'Conversation 2',\n      last_message_text: 'How are you?',\n      last_message_timestamp: '2025-07-10T15:30:00Z',\n      unread_count: 0,\n      participants: [\n        {\n          user_id: 'user-3',\n          display_name: 'Jane Smith',\n          avatar_url: null,\n        },\n      ],\n      type: 'direct',\n    },\n  ];\n\n  const mockMessages = [\n    {\n      id: 'msg-1',\n      conversation_id: 'convo-1',\n      sender_id: 'user-2',\n      message_text: 'Hello there',\n      created_at: '2025-07-11T10:00:00Z',\n      read_by_user_ids: ['user-1'],\n      sender_profile: {\n        id: 'user-2',\n        display_name: 'John Doe',\n      },\n    },\n    {\n      id: 'msg-2',\n      conversation_id: 'convo-1',\n      sender_id: 'user-1',\n      message_text: 'Hi! How are you?',\n      created_at: '2025-07-11T10:01:00Z',\n      read_by_user_ids: ['user-1', 'user-2'],\n      sender_profile: {\n        id: 'user-1',\n        display_name: 'Current User',\n      },\n    },\n  ];\n\n  // Mock implementations\n  const mockMarkConversationAsRead = jest.fn();\n  const mockSendMessage = jest.fn();\n  const mockRefetchConversations = jest.fn();\n  const mockSendConversationMessage = jest.fn();\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    // Mock useConversationsQuery hook\n    (useConversationsQuery as jest.Mock).mockReturnValue({\n      conversations: mockConversations,\n      isLoading: false,\n      error: null,\n      refetch: mockRefetchConversations,\n      markConversationAsRead: mockMarkConversationAsRead,\n      sendMessage: mockSendMessage,\n      isSending: false,\n    });\n\n    // Mock useConversationMessagesQuery hook\n    (useConversationMessagesQuery as jest.Mock).mockReturnValue({\n      messages: mockMessages,\n      isLoading: false,\n      error: null,\n      sendMessage: mockSendConversationMessage,\n      isSending: false,\n    });\n  });\n\n  test('renders conversation list when no conversation is selected', () => {\n    const { getByText } = render(<ChatList userId=\"user-1\" />);\n    \n    expect(getByText('Conversation 1')).toBeTruthy();\n    expect(getByText('Conversation 2')).toBeTruthy();\n  });\n\n  test('selects conversation when clicked', () => {\n    const onSelectConversationMock = jest.fn();\n    const { getByText } = render(\n      <ChatList \n        userId=\"user-1\" \n        onSelectConversation={onSelectConversationMock}\n      />\n    );\n    \n    fireEvent.press(getByText('Conversation 1'));\n    \n    // Check if the handler was called with the correct conversation\n    expect(onSelectConversationMock).toHaveBeenCalledWith(mockConversations[0]);\n    \n    // Check if markConversationAsRead was called\n    expect(mockMarkConversationAsRead).toHaveBeenCalledWith('convo-1');\n  });\n\n  test('processes initialConversationId only once', async () => {\n    // Spy on React.useRef to track how it's used\n    const useRefSpy = jest.spyOn(React, 'useRef');\n    \n    // Render component with initialConversationId\n    render(\n      <ChatList \n        userId=\"user-1\" \n        initialConversationId=\"convo-1\"\n      />\n    );\n    \n    // Wait for component to process initialConversationId\n    await waitFor(() => {\n      // Verify markConversationAsRead was called exactly once\n      expect(mockMarkConversationAsRead).toHaveBeenCalledTimes(1);\n      expect(mockMarkConversationAsRead).toHaveBeenCalledWith('convo-1');\n    });\n    \n    // Verify useRef was called (for the processedInitialIdRef)\n    expect(useRefSpy).toHaveBeenCalled();\n    \n    // Force a re-render to see if it processes initialConversationId again\n    const { rerender } = render(\n      <ChatList \n        userId=\"user-1\" \n        initialConversationId=\"convo-1\"\n      />\n    );\n    \n    // Re-render with the same props\n    rerender(\n      <ChatList \n        userId=\"user-1\" \n        initialConversationId=\"convo-1\"\n      />\n    );\n    \n    // Verify markConversationAsRead was still only called once\n    expect(mockMarkConversationAsRead).toHaveBeenCalledTimes(1);\n    \n    useRefSpy.mockRestore();\n  });\n\n  test('handles different initialConversationId correctly', async () => {\n    // First render with one initialConversationId\n    const { rerender } = render(\n      <ChatList \n        userId=\"user-1\" \n        initialConversationId=\"convo-1\"\n      />\n    );\n    \n    // Wait for first conversation to be processed\n    await waitFor(() => {\n      expect(mockMarkConversationAsRead).toHaveBeenCalledWith('convo-1');\n    });\n    \n    // Reset mock to track new calls\n    mockMarkConversationAsRead.mockClear();\n    \n    // Re-render with a different initialConversationId\n    rerender(\n      <ChatList \n        userId=\"user-1\" \n        initialConversationId=\"convo-2\"\n      />\n    );\n    \n    // Verify second conversation is processed\n    await waitFor(() => {\n      expect(mockMarkConversationAsRead).toHaveBeenCalledWith('convo-2');\n    });\n  });\n\n  test('does not cause infinite loop with initialConversationId', async () => {\n    // Mock console.error to catch any potential maximum update depth exceeded errors\n    const originalError = console.error;\n    console.error = jest.fn();\n    \n    // Render with initialConversationId\n    render(\n      <ChatList \n        userId=\"user-1\" \n        initialConversationId=\"convo-1\"\n      />\n    );\n    \n    // Wait for any async operations\n    await act(async () => {\n      await new Promise(resolve => setTimeout(resolve, 100));\n    });\n    \n    // Check if there were any maximum update depth exceeded errors\n    expect(console.error).not.toHaveBeenCalledWith(\n      expect.stringContaining('Maximum update depth exceeded')\n    );\n    \n    // Restore console.error\n    console.error = originalError;\n  });\n\n  test('handles empty conversations array with initialConversationId', () => {\n    // Mock empty conversations\n    (useConversationsQuery as jest.Mock).mockReturnValueOnce({\n      conversations: [],\n      isLoading: false,\n      error: null,\n      refetch: mockRefetchConversations,\n      markConversationAsRead: mockMarkConversationAsRead,\n      sendMessage: mockSendMessage,\n      isSending: false,\n    });\n    \n    render(\n      <ChatList \n        userId=\"user-1\" \n        initialConversationId=\"convo-1\"\n      />\n    );\n    \n    // Verify markConversationAsRead was not called since conversation doesn't exist\n    expect(mockMarkConversationAsRead).not.toHaveBeenCalled();\n  });\n\n  test('handles null userId with initialConversationId', () => {\n    render(\n      <ChatList \n        userId={null} \n        initialConversationId=\"convo-1\"\n      />\n    );\n    \n    // Verify markConversationAsRead was not called when userId is null\n    expect(mockMarkConversationAsRead).not.toHaveBeenCalled();\n  });\n\n  test('sends message correctly', () => {\n    // First select a conversation\n    const { getByText, getByPlaceholderText } = render(\n      <ChatList userId=\"user-1\" />\n    );\n    \n    // Select conversation\n    fireEvent.press(getByText('Conversation 1'));\n    \n    // Find input and send button\n    const messageInput = getByPlaceholderText('Type a message...');\n    \n    // Type a message\n    fireEvent.changeText(messageInput, 'Hello, this is a test message');\n    \n    // Send the message\n    fireEvent(messageInput, 'submitEditing');\n    \n    // Check if sendConversationMessage was called with the correct text\n    expect(mockSendConversationMessage).toHaveBeenCalledWith('Hello, this is a test message');\n  });\n});\n"],"mappings":"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","ignoreList":[]}