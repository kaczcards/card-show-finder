e59ac7f4c1dbc89e26d4283f7234d607
_getJestObj().mock('../../../src/hooks', function () {
  return {
    useConversationsQuery: jest.fn(),
    useConversationMessagesQuery: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ChatList = _interopRequireDefault(require("../../../src/components/Chat/ChatList"));
var _hooks = require("../../../src/hooks");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ChatList Component', function () {
  var mockConversations = [{
    id: 'convo-1',
    title: 'Conversation 1',
    last_message_text: 'Hello there',
    last_message_timestamp: '2025-07-11T10:00:00Z',
    unread_count: 2,
    participants: [{
      user_id: 'user-2',
      display_name: 'John Doe',
      avatar_url: null
    }],
    type: 'direct'
  }, {
    id: 'convo-2',
    title: 'Conversation 2',
    last_message_text: 'How are you?',
    last_message_timestamp: '2025-07-10T15:30:00Z',
    unread_count: 0,
    participants: [{
      user_id: 'user-3',
      display_name: 'Jane Smith',
      avatar_url: null
    }],
    type: 'direct'
  }];
  var mockMessages = [{
    id: 'msg-1',
    conversation_id: 'convo-1',
    sender_id: 'user-2',
    message_text: 'Hello there',
    created_at: '2025-07-11T10:00:00Z',
    read_by_user_ids: ['user-1'],
    sender_profile: {
      id: 'user-2',
      display_name: 'John Doe'
    }
  }, {
    id: 'msg-2',
    conversation_id: 'convo-1',
    sender_id: 'user-1',
    message_text: 'Hi! How are you?',
    created_at: '2025-07-11T10:01:00Z',
    read_by_user_ids: ['user-1', 'user-2'],
    sender_profile: {
      id: 'user-1',
      display_name: 'Current User'
    }
  }];
  var mockMarkConversationAsRead = jest.fn();
  var mockSendMessage = jest.fn();
  var mockRefetchConversations = jest.fn();
  var mockSendConversationMessage = jest.fn();
  beforeEach(function () {
    jest.clearAllMocks();
    _hooks.useConversationsQuery.mockReturnValue({
      conversations: mockConversations,
      isLoading: false,
      error: null,
      refetch: mockRefetchConversations,
      markConversationAsRead: mockMarkConversationAsRead,
      sendMessage: mockSendMessage,
      isSending: false
    });
    _hooks.useConversationMessagesQuery.mockReturnValue({
      messages: mockMessages,
      isLoading: false,
      error: null,
      sendMessage: mockSendConversationMessage,
      isSending: false
    });
  });
  test('renders conversation list when no conversation is selected', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ChatList.default, {
        userId: "user-1"
      })),
      getByText = _render.getByText;
    expect(getByText('Conversation 1')).toBeTruthy();
    expect(getByText('Conversation 2')).toBeTruthy();
  });
  test('selects conversation when clicked', function () {
    var onSelectConversationMock = jest.fn();
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ChatList.default, {
        userId: "user-1",
        onSelectConversation: onSelectConversationMock
      })),
      getByText = _render2.getByText;
    _reactNative.fireEvent.press(getByText('Conversation 1'));
    expect(onSelectConversationMock).toHaveBeenCalledWith(mockConversations[0]);
    expect(mockMarkConversationAsRead).toHaveBeenCalledWith('convo-1');
  });
  test('processes initialConversationId only once', (0, _asyncToGenerator2.default)(function* () {
    var useRefSpy = jest.spyOn(_react.default, 'useRef');
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ChatList.default, {
      userId: "user-1",
      initialConversationId: "convo-1"
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(mockMarkConversationAsRead).toHaveBeenCalledTimes(1);
      expect(mockMarkConversationAsRead).toHaveBeenCalledWith('convo-1');
    });
    expect(useRefSpy).toHaveBeenCalled();
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ChatList.default, {
        userId: "user-1",
        initialConversationId: "convo-1"
      })),
      rerender = _render3.rerender;
    rerender((0, _jsxRuntime.jsx)(_ChatList.default, {
      userId: "user-1",
      initialConversationId: "convo-1"
    }));
    expect(mockMarkConversationAsRead).toHaveBeenCalledTimes(1);
    useRefSpy.mockRestore();
  }));
  test('handles different initialConversationId correctly', (0, _asyncToGenerator2.default)(function* () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ChatList.default, {
        userId: "user-1",
        initialConversationId: "convo-1"
      })),
      rerender = _render4.rerender;
    yield (0, _reactNative.waitFor)(function () {
      expect(mockMarkConversationAsRead).toHaveBeenCalledWith('convo-1');
    });
    mockMarkConversationAsRead.mockClear();
    rerender((0, _jsxRuntime.jsx)(_ChatList.default, {
      userId: "user-1",
      initialConversationId: "convo-2"
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(mockMarkConversationAsRead).toHaveBeenCalledWith('convo-2');
    });
  }));
  test('does not cause infinite loop with initialConversationId', (0, _asyncToGenerator2.default)(function* () {
    var originalError = console.error;
    console.error = jest.fn();
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ChatList.default, {
      userId: "user-1",
      initialConversationId: "convo-1"
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 100);
      });
    }));
    expect(console.error).not.toHaveBeenCalledWith(expect.stringContaining('Maximum update depth exceeded'));
    console.error = originalError;
  }));
  test('handles empty conversations array with initialConversationId', function () {
    _hooks.useConversationsQuery.mockReturnValueOnce({
      conversations: [],
      isLoading: false,
      error: null,
      refetch: mockRefetchConversations,
      markConversationAsRead: mockMarkConversationAsRead,
      sendMessage: mockSendMessage,
      isSending: false
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ChatList.default, {
      userId: "user-1",
      initialConversationId: "convo-1"
    }));
    expect(mockMarkConversationAsRead).not.toHaveBeenCalled();
  });
  test('handles null userId with initialConversationId', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ChatList.default, {
      userId: null,
      initialConversationId: "convo-1"
    }));
    expect(mockMarkConversationAsRead).not.toHaveBeenCalled();
  });
  test('sends message correctly', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ChatList.default, {
        userId: "user-1"
      })),
      getByText = _render5.getByText,
      getByPlaceholderText = _render5.getByPlaceholderText;
    _reactNative.fireEvent.press(getByText('Conversation 1'));
    var messageInput = getByPlaceholderText('Type a message...');
    _reactNative.fireEvent.changeText(messageInput, 'Hello, this is a test message');
    (0, _reactNative.fireEvent)(messageInput, 'submitEditing');
    expect(mockSendConversationMessage).toHaveBeenCalledWith('Hello, this is a test message');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,