{"version":3,"names":["supabase","cov_1fwfr31yms","s","mapDbShowToAppShow","row","_ref","_ref2","_ref3","_row$coordinates$coor","_row$coordinates$coor2","_ref4","_ref5","f","id","title","location","address","startDate","start_date","endDate","end_date","startTime","start_time","endTime","end_time","entryFee","entry_fee","description","b","undefined","imageUrl","image_url","rating","coordinates","latitude","parseFloat","longitude","status","organizerId","organizer_id","features","categories","createdAt","created_at","updatedAt","updated_at","seriesId","series_id","websiteUrl","website_url","checkAdminStatus","_ref6","_asyncToGenerator","_ref7","rpc","data","error","functionMissing","code","test","message","_user$email","_ref8","auth","getUser","user","email","toLowerCase","isAdmin","fallbackErr","console","err","apply","arguments","getAllShowsForValidation","_ref9","_ref0","adminCheckError","shows","_ref1","from","select","order","ascending","viewMissing","warn","fb","mappedShows","Array","isArray","map","updateShowCoordinates","_ref10","showId","_ref11","success","geographyPoint","_ref12","update","Date","toISOString","eq","geoError","fallbackCoordinates","type","_ref13","fbError","primary","fallback","_x","_x2","assignAdminRole","_ref14","userId","_ref15","target_user_id","_x3","revokeAdminRole","_ref16","_ref17","_x4"],"sources":["adminService.ts"],"sourcesContent":["/**\n * Admin Service\n *\n * This file contains admin-specific functions for the Card Show Finder app.\n * These functions are used for the coordinate validation tool and other admin features.\n */\n\nimport { supabase } from '../supabase';\nimport { Show, Coordinates } from '../types';\n\n/**\n * Maps a database show record to the app's Show type.\n * \n * @param row The raw database record\n * @returns A Show object with properly mapped fields\n */\nconst mapDbShowToAppShow = (row: any): Show => ({\n  id: row.id,\n  title: row.title,\n  location: row.location,\n  address: row.address,\n  startDate: row.start_date,\n  endDate: row.end_date,\n  startTime: row.start_time,\n  endTime: row.end_time,\n  entryFee: row.entry_fee,\n  description: row.description ?? undefined,\n  imageUrl: row.image_url ?? undefined,\n  rating: row.rating ?? undefined,\n  coordinates: row.coordinates && \n    typeof row.coordinates === 'object' ? \n    {\n      // Extract coordinates from PostGIS geography type\n      latitude: parseFloat(row.coordinates.coordinates?.[1]) || 0,\n      longitude: parseFloat(row.coordinates.coordinates?.[0]) || 0,\n    } : undefined,\n  status: row.status,\n  organizerId: row.organizer_id,\n  features: row.features ?? {},\n  categories: row.categories ?? [],\n  createdAt: row.created_at,\n  updatedAt: row.updated_at,\n  seriesId: row.series_id,\n  websiteUrl: row.website_url,\n});\n\n/**\n * Checks if the current user has admin privileges.\n * \n * @returns An object containing isAdmin status and any error message\n */\nexport const checkAdminStatus = async (): Promise<{ isAdmin: boolean; error: string | null }> => {\n  try {\n    const { data, error } = await supabase.rpc('is_admin');\n    \n    if (error) {\n      // If the function is missing in the DB, fall back to a hard-coded check\n      const functionMissing =\n        error.code === 'PGRST202' ||                        // Supabase “function not found”\n        /is_admin/i.test(error.message || '');              // Generic missing-function hint\n\n      if (functionMissing) {\n        try {\n          // Safe fallback: treat the configured email as an admin until the DB is fixed\n          const {\n            data: { user },\n          } = await supabase.auth.getUser();\n\n          if (user?.email?.toLowerCase() === 'kaczcards@gmail.com') {\n            return { isAdmin: true, error: null };\n          }\n\n          // Not the fallback admin – report no error (avoid blocking UI)\n          return { isAdmin: false, error: null };\n        } catch (fallbackErr: any) {\n          console.error('Fallback admin check failed:', fallbackErr);\n          return { isAdmin: false, error: fallbackErr.message || error.message };\n        }\n      }\n\n      console.error('Error checking admin status:', error);\n      return { isAdmin: false, error: error.message };\n    }\n    \n    return { isAdmin: !!data, error: null };\n  } catch (err: any) {\n    console.error('Unexpected error checking admin status:', err);\n    return { isAdmin: false, error: err.message || 'An unexpected error occurred' };\n  }\n};\n\n/**\n * Fetches all shows from the database for admin validation.\n * This function ignores any date or distance filters and returns all shows.\n * \n * @returns An object containing an array of shows and any error message\n */\nexport const getAllShowsForValidation = async (): Promise<{ shows: Show[]; error: string | null }> => {\n  try {\n    // First check if the user has admin privileges\n    const { isAdmin, error: adminCheckError } = await checkAdminStatus();\n    \n    if (adminCheckError) {\n      return { shows: [], error: adminCheckError };\n    }\n    \n    if (!isAdmin) {\n      return { shows: [], error: 'Unauthorized: Admin privileges required' };\n    }\n    \n    /* -----------------------------------------------------------\n     * 1. Primary attempt – use the dedicated admin view\n     * --------------------------------------------------------- */\n    let { data, error } = await supabase\n      .from('admin_shows_view')\n      .select('*')\n      .order('created_at', { ascending: false });\n\n    /* -----------------------------------------------------------\n     * 2. Fallback – if the view doesn't exist yet, query shows\n     * --------------------------------------------------------- */\n    const viewMissing =\n      error &&\n      (\n        // Supabase “relation/view not found” codes\n        error.code === 'PGRST116' /* relation not found */ ||\n        error.code === 'PGRST201' /* view not found */ ||\n        /admin_shows_view/i.test(error.message || '')\n      );\n\n    if (viewMissing) {\n      console.warn(\n        '[adminService] admin_shows_view missing – falling back to public.shows',\n      );\n      const fb = await supabase\n        .from('shows')\n        .select('*')\n        .order('created_at', { ascending: false });\n      data = fb.data;\n      error = fb.error;\n    }\n\n    if (error) {\n      console.error('Error fetching shows for validation:', error);\n      return { shows: [], error: error.message };\n    }\n\n    const mappedShows = Array.isArray(data) ? data.map(mapDbShowToAppShow) : [];\n    return { shows: mappedShows, error: null };\n  } catch (err: any) {\n    console.error('Unexpected error fetching shows for validation:', err);\n    return { shows: [], error: err.message || 'An unexpected error occurred' };\n  }\n};\n\n/**\n * Updates the coordinates for a specific show.\n * \n * @param showId The ID of the show to update\n * @param coordinates The new coordinates for the show\n * @returns An object indicating success and any error message\n */\nexport const updateShowCoordinates = async (\n  showId: string,\n  coordinates: Coordinates\n): Promise<{ success: boolean; error: string | null }> => {\n  try {\n    // First check if the user has admin privileges\n    const { isAdmin, error: adminCheckError } = await checkAdminStatus();\n    \n    if (adminCheckError) {\n      return { success: false, error: adminCheckError };\n    }\n    \n    if (!isAdmin) {\n      return { success: false, error: 'Unauthorized: Admin privileges required' };\n    }\n    \n    // Convert coordinates to PostGIS geography point format\n    const geographyPoint = `SRID=4326;POINT(${coordinates.longitude} ${coordinates.latitude})`;\n    \n    // First attempt: PostGIS geography update\n    const { error: geoError } = await supabase\n      .from('shows')\n      .update({\n        coordinates: geographyPoint,\n        updated_at: new Date().toISOString(),\n      })\n      .eq('id', showId);\n\n    // If PostGIS update works, we're done\n    if (!geoError) {\n      return { success: true, error: null };\n    }\n\n    /* ------------------------------------------------------------------\n     * Fallback – if the geography column / extension isn't available yet\n     * ------------------------------------------------------------------\n     * We try a plain JSON representation that Supabase/Postgres will\n     * happily store in a JSONB column (or even a text column) so that\n     * coordinates are not lost.\n     *\n     * This keeps the admin UI functional even on staging DBs that haven't\n     * enabled PostGIS.\n     */\n    const fallbackCoordinates = {\n      type: 'Point',\n      coordinates: [coordinates.longitude, coordinates.latitude],\n    };\n\n    const { error: fbError } = await supabase\n      .from('shows')\n      .update({\n        coordinates: fallbackCoordinates as any,\n        updated_at: new Date().toISOString(),\n      })\n      .eq('id', showId);\n\n    if (fbError) {\n      console.error('Error updating show coordinates (both attempts failed):', {\n        primary: geoError?.message,\n        fallback: fbError.message,\n      });\n      return { success: false, error: geoError?.message || fbError.message };\n    }\n\n    // Fallback succeeded\n    console.warn(\n      '[adminService] PostGIS update failed, stored fallback JSON coordinates instead.',\n    );\n    return { success: true, error: null };\n  } catch (err: any) {\n    console.error('Unexpected error updating show coordinates:', err);\n    return { success: false, error: err.message || 'An unexpected error occurred' };\n  }\n};\n\n/**\n * Assigns admin role to a user.\n * Only existing admins can assign new admins.\n * \n * @param userId The ID of the user to make an admin\n * @returns An object indicating success and any error message\n */\nexport const assignAdminRole = async (\n  userId: string\n): Promise<{ success: boolean; error: string | null }> => {\n  try {\n    const { error } = await supabase.rpc('assign_admin_role', { target_user_id: userId });\n    \n    if (error) {\n      console.error('Error assigning admin role:', error);\n      return { success: false, error: error.message };\n    }\n    \n    return { success: true, error: null };\n  } catch (err: any) {\n    console.error('Unexpected error assigning admin role:', err);\n    return { success: false, error: err.message || 'An unexpected error occurred' };\n  }\n};\n\n/**\n * Revokes admin role from a user.\n * Only existing admins can revoke admin roles.\n * \n * @param userId The ID of the user to remove admin privileges from\n * @returns An object indicating success and any error message\n */\nexport const revokeAdminRole = async (\n  userId: string\n): Promise<{ success: boolean; error: string | null }> => {\n  try {\n    const { error } = await supabase.rpc('revoke_admin_role', { target_user_id: userId });\n    \n    if (error) {\n      console.error('Error revoking admin role:', error);\n      return { success: false, error: error.message };\n    }\n    \n    return { success: true, error: null };\n  } catch (err: any) {\n    console.error('Unexpected error revoking admin role:', err);\n    return { success: false, error: err.message || 'An unexpected error occurred' };\n  }\n};\n"],"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","ignoreList":[]}