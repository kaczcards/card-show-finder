{"version":3,"names":["Linking","Alert","DEFAULT_WHITELIST_HOSTS","cov_xgcarz77e","s","openExternalLink","_x","_x2","_openExternalLink","apply","arguments","_asyncToGenerator","rawUrl","opts","f","options","Object","assign","whitelistHosts","showErrorAlert","errorMessage","trimmedUrl","trim","b","formattedUrl","test","parsedUrl","URL","protocol","Error","length","isWhitelisted","some","host","hostname","endsWith","canOpen","canOpenURL","openURL","error","__DEV__","console","warn","alert","openSocialProfile","platform","handle","cleanHandle","startsWith","substring","url","Promise","resolve"],"sources":["safeLinking.ts"],"sourcesContent":["import { Linking, Alert } from 'react-native';\n\n/**\n * Options for opening external links\n */\nexport interface SafeLinkingOptions {\n  /**\n   * Optional array of allowed hostnames\n   * If provided, only URLs with hostnames ending with one of these will be opened\n   * Example: ['facebook.com', 'instagram.com']\n   */\n  whitelistHosts?: string[];\n  \n  /**\n   * Whether to show an alert when a link cannot be opened\n   * @default true\n   */\n  showErrorAlert?: boolean;\n  \n  /**\n   * Custom error message for invalid URLs\n   * @default 'The link appears to be invalid.'\n   */\n  errorMessage?: string;\n}\n\n/**\n * Default whitelist of common social media and marketplace domains\n */\nexport const DEFAULT_WHITELIST_HOSTS = [\n  'facebook.com',\n  'instagram.com',\n  'x.com',\n  'twitter.com',\n  'whatnot.com',\n  'ebay.com'\n];\n\n/**\n * Safely opens an external URL with validation and optional domain whitelisting\n * \n * @param rawUrl - The URL to open\n * @param opts - Optional configuration\n * @returns Promise resolving to true if URL was opened successfully, false otherwise\n * \n * @example\n * // Open any http/https URL\n * openExternalLink('https://example.com');\n * \n * @example\n * // Only open specific domains\n * openExternalLink('instagram.com/username', { \n *   whitelistHosts: ['instagram.com', 'facebook.com'] \n * });\n */\nexport async function openExternalLink(\n  rawUrl: string, \n  opts?: SafeLinkingOptions\n): Promise<boolean> {\n  // Default options\n  const options: Required<SafeLinkingOptions> = {\n    whitelistHosts: DEFAULT_WHITELIST_HOSTS,\n    showErrorAlert: true,\n    errorMessage: 'The link appears to be invalid.',\n    ...opts\n  };\n  \n  // Trim input; if empty return false\n  const trimmedUrl = rawUrl?.trim();\n  if (!trimmedUrl) return false;\n  \n  // Prepare URL with protocol if missing\n  let formattedUrl = trimmedUrl;\n  if (!/^[a-z][a-z0-9+.-]*:/i.test(formattedUrl)) {\n    formattedUrl = `https://${formattedUrl}`;\n  }\n  \n  try {\n    // Parse with URL to validate and extract components\n    const parsedUrl = new URL(formattedUrl);\n    \n    // Only allow http/https schemes\n    if (parsedUrl.protocol !== 'http:' && parsedUrl.protocol !== 'https:') {\n      throw new Error(`Unsupported protocol: ${parsedUrl.protocol}`);\n    }\n    \n    // Check against whitelist if provided\n    if (options.whitelistHosts && options.whitelistHosts.length > 0) {\n      const isWhitelisted = options.whitelistHosts.some(host => \n        parsedUrl.hostname === host || parsedUrl.hostname.endsWith(`.${host}`)\n      );\n      \n      if (!isWhitelisted) {\n        throw new Error(`Domain not in whitelist: ${parsedUrl.hostname}`);\n      }\n    }\n    \n    // Check if URL can be opened\n    const canOpen = await Linking.canOpenURL(formattedUrl);\n    if (!canOpen) {\n      throw new Error('URL cannot be opened by any app');\n    }\n    \n    // Open the URL\n    await Linking.openURL(formattedUrl);\n    return true;\n  } catch (error) {\n    if (__DEV__) {\n      console.warn('[safeLinking] Error opening URL:', error);\n    }\n    \n    // Show error alert if enabled\n    if (options.showErrorAlert) {\n      Alert.alert(\n        'Unable to open link',\n        options.errorMessage,\n      );\n    }\n    \n    return false;\n  }\n}\n\n/**\n * Opens a social media profile URL\n * \n * @param platform - The social media platform\n * @param handle - The username or handle (without @ symbol)\n * @returns Promise resolving to true if URL was opened successfully\n */\nexport function openSocialProfile(\n  platform: 'facebook' | 'instagram' | 'twitter' | 'x' | 'whatnot' | 'ebay',\n  handle: string\n): Promise<boolean> {\n  // Remove @ if present\n  const cleanHandle = handle.startsWith('@') ? handle.substring(1) : handle;\n  \n  // Build the appropriate URL for each platform\n  let url: string;\n  switch (platform) {\n    case 'facebook':\n      url = `https://facebook.com/${cleanHandle}`;\n      break;\n    case 'instagram':\n      url = `https://instagram.com/${cleanHandle}`;\n      break;\n    case 'twitter':\n    case 'x':\n      url = `https://twitter.com/${cleanHandle}`;\n      break;\n    case 'whatnot':\n      url = `https://whatnot.com/user/${cleanHandle}`;\n      break;\n    case 'ebay':\n      // For eBay, the handle could be a store name or a user ID\n      url = `https://www.ebay.com/usr/${cleanHandle}`;\n      break;\n    default:\n      return Promise.resolve(false);\n  }\n  \n  return openExternalLink(url);\n}\n"],"mappings":"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","ignoreList":[]}