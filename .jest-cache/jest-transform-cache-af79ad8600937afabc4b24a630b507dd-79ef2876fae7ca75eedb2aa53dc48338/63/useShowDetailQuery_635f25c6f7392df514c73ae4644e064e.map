{"version":3,"names":["useQuery","useMutation","useQueryClient","Alert","Share","Linking","supabase","useAuth","handleSupabaseError","UserRole","cov_tz6l8rh26","s","useShowDetailQuery","showId","_authContext$authStat","_data$show","f","queryClient","authContext","user","b","authState","fetchShowDetails","_ref","_asyncToGenerator","_show","_ref2","rpc","show_id","data","error","Error","message","enhanceWithSocialMediaLinks","_ref3","privilegedDealers","participatingDealers","filter","dealer","role","MVP_DEALER","SHOW_ORGANIZER","length","_ref4","from","select","in","map","id","profiles","console","profileMap","Map","forEach","profile","set","facebookUrl","facebook_url","instagramUrl","instagram_url","twitterUrl","twitter_url","whatnotUrl","whatnot_url","ebayStoreUrl","ebay_store_url","enhancedDealers","has","Object","assign","get","err","_x","apply","arguments","enhancedData","organizerId","show","organizer_id","normalizedDealers","_ref5","queryKey","queryFn","staleTime","retry","isLoading","isError","refetch","isCurrentUserOrganizer","isShowOrganizer","checkIfFavorite","_ref6","_session$user","_ref7","auth","getSession","session","_ref8","eq","single","_ref9","enabled","_ref9$data","isFavorite","_refetchFavorite","toggleFavoriteMutation","mutationFn","_mutationFn","_ref0","sessionError","userId","_ref1","delete","_ref10","insert","user_id","onSuccess","newFavoriteStatus","setQueryData","invalidateQueries","onError","appError","alert","toggleFavorite","_ref11","mutate","formatShowDate","start_date","startDate","Date","options","weekday","year","month","day","toLocaleDateString","shareShow","_ref12","title","location","address","share","openMapLocation","encodedAddress","encodeURIComponent","url","openURL","catch","googleUrl","handleClaimShow","organizer","loading","isClaimingShow"],"sources":["useShowDetailQuery.ts"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Alert, Share, Linking } from 'react-native';\nimport { supabase } from '../supabase';\nimport { useAuth } from '../contexts/AuthContext';\nimport { handleSupabaseError } from '../services/errorService';\nimport { UserRole } from '../types';\n\ninterface Dealer {\n  id: string;\n  name: string;\n  profileImageUrl?: string;\n  role: UserRole;\n  accountType?: string;\n  boothLocation?: string;\n  // --- Social Media & Marketplace links (added for Task 8) ------------------\n  facebookUrl?: string;\n  instagramUrl?: string;\n  twitterUrl?: string;\n  whatnotUrl?: string;\n  ebayStoreUrl?: string;\n}\n\ninterface ShowDetails {\n  id: string;\n  title: string;\n  description?: string;\n  location?: string;\n  address?: string;\n  start_date?: string;\n  end_date?: string;\n  start_time?: string;\n  end_time?: string;\n  entry_fee?: number | string;\n  organizer_id?: string;\n  claimed_by?: string;\n  [key: string]: any; // For additional properties\n}\n\ninterface OrganizerProfile {\n  id?: string;\n  first_name?: string;\n  last_name?: string;\n  profile_image_url?: string;\n  username?: string;\n  full_name?: string;\n  avatar_url?: string;\n  [key: string]: any; // For additional properties\n}\n\ninterface ShowDetailResponse {\n  show: ShowDetails;\n  organizer: OrganizerProfile | null;\n  participatingDealers: Dealer[];\n  isFavoriteCount: number;\n}\n\n/**\n * Custom hook to fetch show details using React Query and the get_show_details_by_id RPC function\n * @param showId The ID of the show to fetch\n */\nexport const useShowDetailQuery = (showId: string) => {\n  const queryClient = useQueryClient();\n  const authContext = useAuth();\n  const user = authContext.authState?.user || null;\n  \n  // Function to fetch show details from the RPC\n  const fetchShowDetails = async () => {\n    const { data, error } = await supabase.rpc('get_show_details_by_id', { \n      show_id: showId \n    });\n    \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    if (!data || data.error) {\n      throw new Error(data?.error || 'Failed to load show details');\n    }\n    \n    // Enhanced version that adds social media links for MVP Dealers\n    const enhanceWithSocialMediaLinks = async (data: ShowDetailResponse) => {\n      // Find any dealers with elevated privileges (MVP Dealers or Show Organizers)\n      const privilegedDealers = data.participatingDealers.filter(\n        dealer =>\n          dealer.role === UserRole.MVP_DEALER ||\n          dealer.role === UserRole.SHOW_ORGANIZER\n      );\n      \n      if (privilegedDealers.length === 0) return data; // No privileged dealers to enhance\n      \n      try {\n        // Fetch profiles for all MVP dealers in a single batch\n        const { data: profiles, error } = await supabase\n          .from('profiles')\n          .select('id, facebook_url, instagram_url, twitter_url, whatnot_url, ebay_store_url')\n          .in('id', privilegedDealers.map(dealer => dealer.id));\n        \n        if (error || !profiles) {\n          console.error('Error fetching dealer social media:', error);\n          return data; // Return original data if there's an error\n        }\n        \n        // Create a map for easy lookup\n        const profileMap = new Map();\n        profiles.forEach(profile => {\n          profileMap.set(profile.id, {\n            facebookUrl: profile.facebook_url,\n            instagramUrl: profile.instagram_url,\n            twitterUrl: profile.twitter_url,\n            whatnotUrl: profile.whatnot_url,\n            ebayStoreUrl: profile.ebay_store_url\n          });\n        });\n        \n        // Enhance the dealers with social media links\n        const enhancedDealers = data.participatingDealers.map(dealer => {\n          if (\n            (dealer.role === UserRole.MVP_DEALER ||\n              dealer.role === UserRole.SHOW_ORGANIZER) &&\n            profileMap.has(dealer.id)\n          ) {\n            return {\n              ...dealer,\n              ...profileMap.get(dealer.id)\n            };\n          }\n          return dealer;\n        });\n        \n        return {\n          ...data,\n          participatingDealers: enhancedDealers\n        };\n      } catch (err) {\n        console.error('Unexpected error enhancing dealers with social media:', err);\n        return data; // Return original data if there's an error\n      }\n    };\n\n    // Apply the enhancement\n    const enhancedData = await enhanceWithSocialMediaLinks(\n      data as ShowDetailResponse,\n    );\n\n    /* ------------------------------------------------------------------\n     * Normalize dealer roles so that the show organizer is always flagged\n     * as `SHOW_ORGANIZER`.  This guarantees clickability and privileged\n     * booth-info visibility for attendees in downstream components.\n     * ------------------------------------------------------------------ */\n    const organizerId = (enhancedData as ShowDetailResponse)?.show\n      ?.organizer_id;\n\n    if (organizerId) {\n      const normalizedDealers = enhancedData.participatingDealers.map(\n        (dealer) =>\n          dealer.id === organizerId\n            ? { ...dealer, role: UserRole.SHOW_ORGANIZER }\n            : dealer,\n      );\n\n      return {\n        ...enhancedData,\n        participatingDealers: normalizedDealers,\n      };\n    }\n\n    // Fallback: no organizerId or no matching dealer â€“ return as-is\n    return enhancedData;\n  };\n  \n  // Use React Query to fetch and cache the show details\n  const { \n    data,\n    isLoading,\n    isError,\n    error,\n    refetch\n  } = useQuery({\n    queryKey: ['showDetails', showId],\n    queryFn: fetchShowDetails,\n    staleTime: 60 * 1000, // Consider data fresh for 1 minute\n    retry: 1, // Only retry once on failure\n  });\n  \n  // Check if the current user is the show organizer\n  const isCurrentUserOrganizer = user?.id === data?.show?.organizer_id;\n  \n  // Check if the user has a show organizer role\n  const isShowOrganizer = user?.role === UserRole.SHOW_ORGANIZER;\n  \n  // Check if the show is a favorite\n  const checkIfFavorite = async () => {\n    try {\n      const { data: { session } } = await supabase.auth.getSession();\n      if (!session?.user?.id) return false;\n      \n      const { data, error } = await supabase\n        .from('user_favorite_shows')\n        .select()\n        .eq('user_id', session.user.id)\n        .eq('show_id', showId)\n        .single();\n        \n      return !error && !!data;\n    } catch (error) {\n      console.error('Error checking favorite status:', error);\n      return false;\n    }\n  };\n  \n  // Use a query to check if the show is a favorite\n  const { \n    data: isFavorite = false,\n    refetch: _refetchFavorite\n  } = useQuery({\n    queryKey: ['showFavorite', showId, user?.id],\n    queryFn: checkIfFavorite,\n    enabled: !!user?.id, // Only run if user is logged in\n  });\n  \n  // Mutation for toggling favorite status\n  const toggleFavoriteMutation = useMutation({\n    mutationFn: async () => {\n      const { data: { session }, error: sessionError } = await supabase.auth.getSession();\n      if (sessionError || !session?.user) {\n        throw new Error('Please sign in to save favorites');\n      }\n      const userId = session.user.id;\n\n      if (isFavorite) {\n        const { error } = await supabase\n          .from('user_favorite_shows')\n          .delete()\n          .eq('user_id', userId)\n          .eq('show_id', showId);\n        if (error) throw error;\n        return false; // Not a favorite anymore\n      } else {\n        const { error } = await supabase\n          .from('user_favorite_shows')\n          .insert([{ user_id: userId, show_id: showId }]);\n        if (error) throw error;\n        return true; // Now a favorite\n      }\n    },\n    onSuccess: (newFavoriteStatus) => {\n      // Update the cache\n      queryClient.setQueryData(['showFavorite', showId, user?.id], newFavoriteStatus);\n      // Invalidate the show details to update the favorite count\n      queryClient.invalidateQueries({ queryKey: ['showDetails', showId] });\n    },\n    onError: (error) => {\n      const appError = handleSupabaseError(error);\n      console.error('ðŸš¨ UNEXPECTED ERROR in toggleFavorite:', appError);\n      Alert.alert('Error', 'An unexpected error occurred while updating favorites.');\n    }\n  });\n  \n  // Helper function to toggle favorite status\n  const toggleFavorite = async () => {\n    if (!user) {\n      Alert.alert('Sign In Required', 'Please sign in to save favorites');\n      return;\n    }\n    \n    toggleFavoriteMutation.mutate();\n  };\n  \n  // Helper function to format show date\n  const formatShowDate = (show: ShowDetails) => {\n    if (!show.start_date) return '';\n    \n    const startDate = new Date(show.start_date);\n    const options: Intl.DateTimeFormatOptions = { \n      weekday: 'long', \n      year: 'numeric', \n      month: 'long', \n      day: 'numeric' \n    };\n    \n    return startDate.toLocaleDateString('en-US', options);\n  };\n  \n  // Helper function to share the show\n  const shareShow = async () => {\n    if (!data?.show) return;\n    \n    try {\n      const show = data.show;\n      const message = `Check out this card show: ${show.title}\\n\\nWhen: ${formatShowDate(show)}\\nWhere: ${show.location || show.address}\\n\\nShared from Card Show Finder app`;\n      await Share.share({ message, title: show.title });\n    } catch (error) {\n      console.error('Error sharing:', error);\n    }\n  };\n  \n  // Helper function to open the map location\n  const openMapLocation = () => {\n    if (!data?.show) return;\n    \n    const address = data.show.address || data.show.location || '';\n    const encodedAddress = encodeURIComponent(address);\n    const url = `https://maps.apple.com/?q=${encodedAddress}`;\n    \n    Linking.openURL(url).catch(() => {\n      const googleUrl = `https://www.google.com/maps/search/?api=1&query=${encodedAddress}`;\n      Linking.openURL(googleUrl);\n    });\n  };\n  \n  // Helper function for claiming a show (placeholder)\n  const handleClaimShow = () => {\n    Alert.alert(\"Claim Show\", \"This feature is coming soon!\");\n  };\n  \n  return {\n    // Data from the query\n    show: data?.show || null,\n    organizer: data?.organizer || null,\n    participatingDealers: data?.participatingDealers || [],\n    \n    // Status\n    loading: isLoading,\n    error: isError ? (error as Error)?.message || 'An error occurred' : null,\n    isFavorite,\n    isShowOrganizer,\n    isCurrentUserOrganizer,\n    isClaimingShow: false, // Placeholder, can be implemented as needed\n    \n    // Functions\n    fetchShowDetails: refetch,\n    toggleFavorite,\n    shareShow,\n    openMapLocation,\n    handleClaimShow\n  };\n};\n\n// ------------------------------------------------------------------\n// Exports\n// ------------------------------------------------------------------\n\n// Default export\nexport default useShowDetailQuery;\n"],"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","ignoreList":[]}