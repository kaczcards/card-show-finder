{"version":3,"names":["supabase","createPaymentSheetForSubscription","SubscriptionPlanType","SubscriptionDuration","SUBSCRIPTION_PLANS","_calculateExpiryDate","calculateExpiryDate","cov_15z3stinmo","s","hasActiveSubscription","user","f","b","accountType","subscriptionStatus","subscriptionExpiry","expiryDate","Date","isInTrialPeriod","paymentStatus","timeRemaining","getSubscriptionTimeRemaining","days","Number","isNaN","getTime","now","diffMs","hours","Math","floor","isSubscriptionExpired","getSubscriptionDetails","plan","planType","DEALER","ORGANIZER","find","p","type","duration","ANNUAL","isTrialPeriod","isPaid","expiryObj","expiryValid","active","status","expiry","isActive","initiateSubscriptionPurchase","_ref","_asyncToGenerator","userId","planId","stripeCtx","id","success","error","stripeResult","initPaymentSheet","presentPaymentSheet","_ref2","from","update","payment_status","eq","select","single","profile","data","updateError","console","transactionId","subscription_expiry","undefined","mockTransactionId","random","_ref3","account_type","subscription_status","toISOString","updated_at","message","_x","_x2","_x3","apply","arguments","renewSubscription","_ref4","_x4","_x5","cancelSubscription","_ref5","_ref6","userData","fetchError","_ref7","_x6","checkAndUpdateSubscriptionStatus","_ref8","_ref9","_ref0","_x7","getAvailablePlans","filter","formatExpiryDate","date","toLocaleDateString","year","month","day","canAccessDealerFeatures","canAccessOrganizerFeatures"],"sources":["subscriptionService.ts"],"sourcesContent":["// src/services/subscriptionService.ts\nimport { supabase } from '../supabase';\nimport { User } from '../types';\nimport { createPaymentSheetForSubscription } from './stripePaymentService';\nimport {\n  SubscriptionPlan,\n  SubscriptionPlanType,\n  SubscriptionDuration,\n  SUBSCRIPTION_PLANS,\n  StripePaymentResult,\n  _calculateExpiryDate as calculateExpiryDate\n} from './subscriptionTypes';\n\n/**\n * Result of a payment operation\n */\nexport interface PaymentResult {\n  success: boolean;\n  transactionId?: string;\n  error?: string;\n  subscriptionExpiry?: Date;\n}\n\n/**\n * Check if a user has an active subscription\n * @param user The user to check\n * @returns Boolean indicating if the subscription is active\n */\nexport const hasActiveSubscription = (user: User): boolean => {\n  if (!user) return false;\n  \n  // Free collector accounts don't have subscriptions\n  if (user.accountType === 'collector') return false;\n  \n  // Check if the subscription status is active\n  if (user.subscriptionStatus !== 'active') return false;\n  \n  // Check if the subscription has expired\n  if (user.subscriptionExpiry) {\n    const expiryDate = new Date(user.subscriptionExpiry);\n    return expiryDate > new Date();\n  }\n  \n  return false;\n};\n\n/**\n * Check if a user is in their trial period\n * @param user The user to check\n * @returns Boolean indicating if the user is in trial period\n */\nexport const isInTrialPeriod = (user: User): boolean => {\n  if (!user || !hasActiveSubscription(user)) return false;\n  \n  // Check if payment_status is explicitly set to 'trial'\n  if (user.paymentStatus === 'trial') return true;\n  \n  // Legacy check for users without payment_status field\n  // If they have less than 7 days remaining and no payment_status,\n  // they're likely in a trial period\n  if (!user.paymentStatus || user.paymentStatus === 'none') {\n    const timeRemaining = getSubscriptionTimeRemaining(user);\n    if (timeRemaining && timeRemaining.days < 7) {\n      return true;\n    }\n  }\n  \n  return false;\n};\n\n/**\n * Get the time remaining in a user's subscription\n * @param user The user to check\n * @returns Object with days, hours remaining or null if no active subscription\n */\nexport const getSubscriptionTimeRemaining = (user: User): { days: number, hours: number } | null => {\n  /* ------------------------------------------------------------------\n   * 1. Bail-out cases – users that should never have a subscription\n   * ------------------------------------------------------------------ */\n  if (!user || user.accountType === 'collector') {\n    return null;\n  }\n\n  /* ------------------------------------------------------------------\n   * 2. Inactive subscription statuses\n   * ------------------------------------------------------------------ */\n  if (user.subscriptionStatus !== 'active') {\n    return null;\n  }\n\n  // If we don't even have an expiry date we cannot compute anything\n  if (!user?.subscriptionExpiry) {\n    return null;\n  }\n\n  const expiryDate = new Date(user.subscriptionExpiry);\n\n  // Guard against corrupted / unparsable dates\n  if (Number.isNaN(expiryDate.getTime())) {\n    return null;\n  }\n\n  const now = new Date();\n  const diffMs = expiryDate.getTime() - now.getTime();\n\n  // If already expired, return explicit zero time remaining object\n  if (diffMs <= 0) {\n    return { days: 0, hours: 0 };\n  }\n\n  const days = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n  const hours = Math.floor((diffMs % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n\n  return { days, hours };\n};\n\n/**\n * Check if a user's subscription has expired\n * @param user The user to check\n * @returns Boolean indicating if the subscription is expired\n */\nexport const isSubscriptionExpired = (user: User): boolean => {\n  if (!user || user.accountType === 'collector') return false;\n  \n  if (user.subscriptionStatus === 'expired') return true;\n  \n  if (user.subscriptionExpiry) {\n    const expiryDate = new Date(user.subscriptionExpiry);\n    return expiryDate <= new Date();\n  }\n  \n  return false;\n};\n\n/**\n * Get subscription details for a user\n * @param user The user to get subscription details for\n * @returns Object with subscription details or null if no subscription\n */\nexport const getSubscriptionDetails = (user: User): {\n  accountType: string;\n  status: string;\n  expiry: Date | null;\n  isActive: boolean;\n  timeRemaining: { days: number, hours: number } | null;\n  plan: SubscriptionPlan | null;\n  isPaid: boolean;\n  isTrialPeriod: boolean;\n} | null => {\n  if (!user || user.accountType === 'collector') {\n    return null;\n  }\n  \n  // Resolve plan type safely – unknown account types yield null plan\n  let plan: SubscriptionPlan | null = null;\n  if (user.accountType === 'dealer' || user.accountType === 'organizer') {\n    const planType =\n      user.accountType === 'dealer'\n        ? SubscriptionPlanType.DEALER\n        : SubscriptionPlanType.ORGANIZER;\n\n    // Default to the annual plan as it's the most common\n    plan =\n      SUBSCRIPTION_PLANS.find(\n        (p) => p.type === planType && p.duration === SubscriptionDuration.ANNUAL,\n      ) || null;\n  }\n  \n  // Check if user is in trial period\n  const isTrialPeriod = isInTrialPeriod(user);\n  \n  // Check if user has paid (either explicitly marked as paid or has active subscription but not in trial)\n  const isPaid = user.paymentStatus === 'paid' || \n                (hasActiveSubscription(user) && !isTrialPeriod);\n  \n  // Determine expiry date object (may be invalid Date)\n  const expiryObj = user.subscriptionExpiry\n    ? new Date(user.subscriptionExpiry)\n    : null;\n\n  const expiryValid = expiryObj !== null && !Number.isNaN(expiryObj.getTime());\n\n  // Active status uses both subscription flag and valid expiry date\n  const active = hasActiveSubscription(user) && expiryValid;\n\n  return {\n    accountType: user.accountType,\n    status: user.subscriptionStatus,\n    expiry: expiryObj,\n    isActive: active,\n    timeRemaining: active ? getSubscriptionTimeRemaining(user) : getSubscriptionTimeRemaining(user),\n    plan,\n    isPaid,\n    isTrialPeriod\n  };\n};\n\n/**\n * Initiate a subscription purchase\n * @param userId The ID of the user making the purchase\n * @param planId The ID of the plan being purchased\n * @param stripeCtx Optional Stripe helpers (initPaymentSheet, presentPaymentSheet) –\n *                  if provided we run the real payment flow, otherwise we fall back\n *                  to the legacy mock implementation (useful for unit tests / Storybook).\n * @returns Promise with the payment result\n */\nexport const initiateSubscriptionPurchase = async (\n  userId: string,\n  planId: string,\n  stripeCtx?: {\n    initPaymentSheet: (params: any) => Promise<any>;\n    presentPaymentSheet: () => Promise<any>;\n  }\n): Promise<PaymentResult> => {\n  try {\n    // Find the selected plan\n    const plan = SUBSCRIPTION_PLANS.find(p => p.id === planId);\n    if (!plan) {\n      return {\n        success: false,\n        error: 'Invalid subscription plan selected'\n      };\n    }\n    \n    /* ------------------------------------------------------------------\n     * 1. Real payment flow via Stripe (preferred)\n     * ------------------------------------------------------------------ */\n    if (stripeCtx) {\n      const stripeResult: StripePaymentResult =\n        await createPaymentSheetForSubscription(\n          userId,\n          planId,\n          stripeCtx.initPaymentSheet,\n          stripeCtx.presentPaymentSheet\n        );\n\n      if (!stripeResult.success) {\n        return {\n          success: false,\n          error: stripeResult.error || 'Stripe payment failed',\n        };\n      }\n\n      /* After a successful payment, the stripePaymentService already\n       * updates the user profile with the correct expiry date and role.\n       * We need to also update the payment_status to 'paid'\n       */\n      const { data: profile, error: updateError } = await supabase\n        .from('profiles')\n        .update({ payment_status: 'paid' })\n        .eq('id', userId)\n        .select('subscription_expiry')\n        .single();\n\n      if (updateError) {\n        console.error('Error updating payment status:', updateError);\n      }\n\n      return {\n        success: true,\n        transactionId: stripeResult.transactionId,\n        subscriptionExpiry: profile?.subscription_expiry\n          ? new Date(profile.subscription_expiry)\n          : undefined,\n      };\n    }\n    \n    /* ------------------------------------------------------------------\n     * 2. Legacy mock payment (development fallback)\n     * ------------------------------------------------------------------ */\n    // For demonstration purposes, we'll simulate a successful payment\n    const mockTransactionId = `tx_${Date.now()}_${Math.floor(Math.random() * 1000)}`;\n    \n    // Calculate when the subscription will expire\n    const expiryDate = calculateExpiryDate(plan);\n    \n    // Update the user's profile with the new subscription information\n    const { error } = await supabase\n      .from('profiles')\n      .update({\n        account_type: plan.type,\n        subscription_status: 'active',\n        payment_status: 'paid', // Mark as paid immediately for prepaid subscriptions\n        subscription_expiry: expiryDate.toISOString(),\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', userId);\n    \n    if (error) {\n      console.error('Error updating subscription status:', error);\n      return {\n        success: false,\n        error: 'Failed to update subscription status'\n      };\n    }\n    \n    return {\n      success: true,\n      transactionId: mockTransactionId,\n      subscriptionExpiry: expiryDate\n    };\n  } catch (error: any) {\n    console.error('Error processing subscription purchase:', error);\n    return {\n      success: false,\n      error: error.message || 'Failed to process payment'\n    };\n  }\n};\n\n/**\n * Renew an existing subscription\n * @param userId The ID of the user renewing their subscription\n * @param planId The ID of the plan being renewed\n * @returns Promise with the payment result\n */\nexport const renewSubscription = async (\n  userId: string,\n  planId: string\n): Promise<PaymentResult> => {\n  // Forward to initiateSubscriptionPurchase so we keep one code-path\n  return initiateSubscriptionPurchase(userId, planId);\n};\n\n/**\n * Cancel a user's subscription\n * @param userId The ID of the user cancelling their subscription\n * @returns Promise with the result of the cancellation\n */\nexport const cancelSubscription = async (\n  userId: string\n): Promise<{ success: boolean, error?: string }> => {\n  try {\n    // Get the user's current subscription details\n    const { data: userData, error: fetchError } = await supabase\n      .from('profiles')\n      .select('subscription_expiry, account_type, payment_status')\n      .eq('id', userId)\n      .single();\n    \n    if (fetchError) {\n      throw fetchError;\n    }\n    \n    // Update the subscription status to indicate it's cancelled\n    // but allow the user to continue using it until the expiry date\n    const { error } = await supabase\n      .from('profiles')\n      .update({\n        subscription_status: 'expired',\n        // If they're in trial and cancel, reset payment_status to 'none'\n        // If they've paid, keep their payment_status as 'paid' until expiry\n        payment_status: userData.payment_status === 'trial' ? 'none' : userData.payment_status,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', userId);\n    \n    if (error) {\n      throw error;\n    }\n    \n    return { success: true };\n  } catch (error: any) {\n    console.error('Error cancelling subscription:', error);\n    return {\n      success: false,\n      error: error.message || 'Failed to cancel subscription'\n    };\n  }\n};\n\n/**\n * Check for and update expired subscriptions\n * This would typically be called by a server-side cron job,\n * but can be checked on app startup as well\n * @param userId The ID of the user to check\n * @returns Promise indicating if any update was made\n */\nexport const checkAndUpdateSubscriptionStatus = async (\n  userId: string\n): Promise<boolean> => {\n  try {\n    // Get the user's current subscription details\n    const { data: userData, error: fetchError } = await supabase\n      .from('profiles')\n      .select('subscription_expiry, subscription_status, account_type, payment_status')\n      .eq('id', userId)\n      .single();\n    \n    if (fetchError || !userData) {\n      return false;\n    }\n\n    /* ------------------------------------------------------------------\n     * Validate we actually have the minimum fields required to evaluate\n     * the subscription.  In some edge-cases (e.g. very old accounts or\n     * partially-migrated test fixtures) the profile row can exist while\n     * critical columns are `null` or empty.  When that happens we should\n     * bail out early and *not* attempt to run an update query.\n     * ------------------------------------------------------------------ */\n    if (\n      !userData.subscription_expiry ||            // no expiry date stored\n      !userData.subscription_status ||            // missing status field\n      !userData.account_type                      // missing account type\n    ) {\n      return false;\n    }\n    \n    // If the user doesn't have a subscription or it's already marked as expired, do nothing\n    if (\n      userData.account_type === 'collector' || \n      userData.subscription_status === 'none' ||\n      userData.subscription_status === 'expired'\n    ) {\n      return false;\n    }\n    \n    // Check if the subscription has expired\n    if (userData.subscription_expiry) {\n      const expiryDate = new Date(userData.subscription_expiry);\n      const now = new Date();\n      \n      if (expiryDate <= now && userData.subscription_status === 'active') {\n        // Update the subscription status to expired\n        const { error } = await supabase\n          .from('profiles')\n          .update({\n            subscription_status: 'expired',\n            payment_status: 'none', // Reset payment status when subscription expires\n            updated_at: now.toISOString()\n          })\n          .eq('id', userId);\n        \n        if (!error) {\n          return true; // Status was updated\n        }\n      }\n    }\n    \n    return false; // No update was needed\n  } catch (error) {\n    console.error('Error checking subscription status:', error);\n    return false;\n  }\n};\n\n/**\n * Get available subscription plans for a specific account type\n * @param accountType The account type to get plans for\n * @returns Array of subscription plans\n */\nexport const getAvailablePlans = (\n  accountType: 'dealer' | 'organizer'\n): SubscriptionPlan[] => {\n  const planType = accountType === 'dealer' \n    ? SubscriptionPlanType.DEALER \n    : SubscriptionPlanType.ORGANIZER;\n  \n  return SUBSCRIPTION_PLANS.filter(plan => plan.type === planType);\n};\n\n/**\n * Format the subscription expiry date for display\n * @param expiryDate The expiry date to format\n * @returns Formatted date string\n */\nexport const formatExpiryDate = (expiryDate: Date | string | null): string => {\n  if (!expiryDate) return 'No expiration date';\n  \n  const date = typeof expiryDate === 'string' ? new Date(expiryDate) : expiryDate;\n  \n  return date.toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n};\n\n/**\n * Check if a user can access dealer features\n * @param user The user to check\n * @returns Boolean indicating if the user can access dealer features\n */\nexport const canAccessDealerFeatures = (user: User | null): boolean => {\n  if (!user) return false;\n  \n  // Organizers also have dealer privileges\n  if (user.accountType === 'organizer') return hasActiveSubscription(user);\n  \n  return user.accountType === 'dealer' && hasActiveSubscription(user);\n};\n\n/**\n * Check if a user can access organizer features\n * @param user The user to check\n * @returns Boolean indicating if the user can access organizer features\n */\nexport const canAccessOrganizerFeatures = (user: User | null): boolean => {\n  if (!user) return false;\n  \n  return user.accountType === 'organizer' && hasActiveSubscription(user);\n};\n"],"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","ignoreList":[]}