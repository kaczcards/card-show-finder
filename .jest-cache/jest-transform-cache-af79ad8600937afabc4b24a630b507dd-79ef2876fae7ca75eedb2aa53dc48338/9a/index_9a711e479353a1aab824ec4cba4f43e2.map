{"version":3,"names":["UserRole","exports","ShowStatus","ShowFeature","CardCategory","BadgeTier"],"sources":["index.ts"],"sourcesContent":["/**\n * Type definitions for the Card Show Finder app\n */\n\n// User-related types\nexport enum UserRole {\n  ATTENDEE = 'attendee',\n  DEALER = 'dealer',\n  MVP_DEALER = 'mvp_dealer',\n  SHOW_ORGANIZER = 'show_organizer'\n}\n\nexport interface User {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName?: string;\n  homeZipCode: string;\n  role: UserRole;\n  createdAt: Date | string;\n  updatedAt: Date | string;\n  phoneNumber?: string;\n  profileImageUrl?: string;\n  /**\n   * Indicates whether the user's email has been verified.\n   */\n  isEmailVerified: boolean;\n  /**\n   * Tier of account the user currently has.\n   * - 'collector': free attendee account\n   * - 'dealer'   : paid dealer subscription\n   * - 'organizer': paid show–organizer subscription\n   */\n  accountType: 'collector' | 'dealer' | 'organizer';\n  /**\n   * Current subscription status for dealer / organizer accounts.\n   * Collectors will typically have 'none'.\n   */\n  subscriptionStatus: 'active' | 'expired' | 'none';\n  /**\n   * Current payment status.  Distinguishes users still\n   * in their free-trial window from those who have paid.\n   * - 'trial' : user is within the free-trial period\n   * - 'paid'  : user has an active paid subscription\n   * - 'none'  : user has no trial or paid subscription (collectors or expired)\n   */\n  paymentStatus: 'trial' | 'paid' | 'none';\n  /**\n   * Timestamp indicating when the paid subscription expires.\n   * Null for free collector accounts or when there is no active subscription.\n   */\n  subscriptionExpiry: Date | string | null;\n  favoriteShows?: string[];   // Array of show IDs\n  /**\n   * Count of shows the user has favorited.\n   * This is maintained automatically by database triggers when using user_favorite_shows table.\n   */\n  favoriteShowsCount?: number;\n  attendedShows?: string[];   // Array of show IDs for past shows\n  /**\n   * Running counter of shows the user has attended.\n   * This is incremented automatically when a user submits a post-show review.\n   */\n  showAttendanceCount?: number;\n  /**\n   * Number of pre-show broadcast messages the organizer can still send.\n   * Only relevant when role === UserRole.SHOW_ORGANIZER.\n   */\n  preShowBroadcastsRemaining?: number;\n  /**\n   * Number of post-show broadcast messages the organizer can still send.\n   * Only relevant when role === UserRole.SHOW_ORGANIZER.\n   */\n  postShowBroadcastsRemaining?: number;\n  /**\n   * Social media and marketplace profile URLs.\n   * Added in Task 8 for Profile and Show Pop-up enhancements.\n   */\n  facebookUrl?: string;\n  instagramUrl?: string;\n  twitterUrl?: string;\n  whatnotUrl?: string;\n  ebayStoreUrl?: string;\n}\n\n/* ------------------------------------------------------------------\n * Authentication helper types\n * ------------------------------------------------------------------ */\nexport interface AuthCredentials {\n  email: string;\n  password: string;\n}\n\nexport interface AuthState {\n  user: User | null;\n  isLoading: boolean;\n  error: string | null;\n  isAuthenticated: boolean;\n}\n\n// Show-related types\nexport interface Show {\n  id: string;\n  /**\n   * Optional link to the parent Show Series if this is a recurring show.\n   * Null/undefined for one-off shows.\n   */\n  seriesId?: string;\n  title: string;\n  description?: string;\n  location: string; // Venue name/location description\n  address: string;\n  startDate: Date | string;\n  endDate: Date | string;\n  startTime?: string; // Optional, not in DB schema\n  endTime?: string; // Optional, not in DB schema\n  entryFee: number;\n  imageUrl?: string;\n  rating?: number;\n  coordinates?: Coordinates;\n  status: ShowStatus;\n  organizerId: string;\n  features?: Record<string, boolean>; // JSON object in Supabase\n  categories?: string[]; // Array in Supabase\n  createdAt: Date | string;\n  updatedAt: Date | string;\n  websiteUrl?: string;\n}\n\nexport enum ShowStatus {\n  UPCOMING = 'upcoming',\n  ONGOING = 'ongoing',\n  COMPLETED = 'completed',\n  CANCELLED = 'cancelled',\n  ACTIVE = 'ACTIVE' // Default in Supabase\n}\n\n/* ------------------------------------------------------------------\n * Recurring Show Series\n * ------------------------------------------------------------------ */\nexport interface ShowSeries {\n  id: string;\n  /**\n   * The official name of the recurring show (e.g., \"Noblesville Card Show\").\n   */\n  name: string;\n  /**\n   * User ID of the organizer who claimed this series (nullable if unclaimed).\n   */\n  organizerId?: string | null;\n  /**\n   * General description of the show series.\n   */\n  description?: string;\n  /**\n   * Aggregate star rating across all reviews for the series.\n   */\n  averageRating?: number;\n  /**\n   * Total number of reviews the series has received.\n   */\n  reviewCount?: number;\n  /**\n   * Date of the next scheduled show in this series.\n   * Used for sorting and display purposes when listing unclaimed series.\n   */\n  nextShowDate?: Date | string;\n  createdAt: Date | string;\n  updatedAt?: Date | string;\n}\n\nexport enum ShowFeature {\n  ON_SITE_GRADING = 'On-site Grading',\n  AUTOGRAPHS = 'Autograph Guests',\n  FOOD_VENDORS = 'Food Vendors',\n  DOOR_PRIZES = 'Door Prizes',\n  AUCTION = 'Auction',\n  BREAKERS = 'Card Breakers'\n}\n\nexport enum CardCategory {\n  SPORTS = 'Sports Cards',\n  POKEMON = 'Pokemon',\n  MAGIC = 'Magic: The Gathering',\n  YU_GI_OH = 'Yu-Gi-Oh',\n  COMICS = 'Comics',\n  MEMORABILIA = 'Memorabilia',\n  VINTAGE = 'Vintage',\n  OTHER = 'Other'\n}\n\n// Review-related types\nexport interface Review {\n  id: string;\n  /**\n   * Foreign key to the individual show being reviewed.\n   * Required by multiple screens (e.g., _MyShows, Notifications).\n   */\n  showId: string;\n  /**\n   * Foreign key to the parent show series being reviewed.\n   */\n  seriesId: string;\n  userId: string;\n  userName: string;\n  rating: number; // 1-5\n  comment: string;\n  date: Date | string;\n  /**\n   * Favorite dealer information captured in the post-show review.\n   */\n  favoriteDealer?: string;\n  favoriteDealerReason?: string;\n  organizerResponse?: {\n    comment: string;\n    date: Date | string;\n  };\n}\n\n// Filter-related types\nexport interface ShowFilters {\n  radius?: number; // in miles (_25, _50, 100, 200)\n  startDate?: Date | string | null;\n  endDate?: Date | string | null;\n  maxEntryFee?: number;\n  features?: string[];\n  categories?: string[];\n  latitude?: number; // For geospatial filtering\n  longitude?: number; // For geospatial filtering\n  status?: ShowStatus; // For filtering by show status\n  /**\n   * If true, the cache will be bypassed and a fresh API request will be made\n   */\n  bypassCache?: boolean;\n  /**\n   * Free-text keyword applied on “Apply Filters”.\n   * Matches across show title/description/location as well as\n   * dealer booth fields (specialty & notable items).\n   */\n  keyword?: string;\n  /**\n   * Selected dealer card types to narrow results to booths carrying\n   * at least one of the chosen types. Applied together with all other\n   * constraints (radius, date range, etc.) when the user taps\n   * “Apply Filters”.\n   */\n  dealerCardTypes?: string[];\n}\n\n// Collection-related types\nexport interface CollectionItem {\n  id: string;\n  userId: string;\n  name: string;\n  description?: string;\n  imageUrl: string;\n  category: string;\n  isForSale: boolean;\n  isWanted: boolean;\n  createdAt: Date | string;\n}\n\n// Message-related types\nexport interface Message {\n  id: string;\n  senderId: string;\n  receiverId: string;\n  content: string;\n  timestamp: Date | string;\n  isRead: boolean;\n  showId?: string; // Optional reference to a show\n}\n\n// Badge/Reward types\nexport interface Badge {\n  id: string;\n  name: string;\n  description: string;\n  imageUrl: string;\n  requirement: string;\n  /**\n   * Tier of the badge (e.g., _bronze, silver, gold, platinum).\n   */\n  tier: BadgeTier;\n  dateEarned?: Date | string;\n}\n\nexport enum BadgeTier {\n  BRONZE = 'bronze',\n  SILVER = 'silver',\n  GOLD = 'gold',\n  PLATINUM = 'platinum',\n}\n\n// My Collection – Card images\nexport interface UserCard {\n  id: string;\n  userId: string;\n  imageUrl: string;\n  title?: string;\n  description?: string;\n  category?: string;\n  /**\n   * Indicates whether the uploaded image has been compressed\n   * before being stored in Supabase Storage.\n   */\n  isCompressed?: boolean;\n  createdAt: Date | string;\n  updatedAt: Date | string;\n}\n\n// My Collection – Want list\nexport interface WantList {\n  id: string;\n  userId: string;\n  content: string;\n  createdAt: Date | string;\n  updatedAt: Date | string;\n}\n\n// Notifications (e.g., review requests, badge earned)\nexport interface Notification {\n  id: string;\n  userId: string;\n  title: string;\n  message: string;\n  /**\n   * notification type, e.g., 'review_request', 'badge_earned'\n   */\n  type: string;\n  referenceId?: string; // Show ID, Badge ID, etc.\n  isRead: boolean;\n  createdAt: Date | string;\n}\n\n// Tracking planned attendance\nexport interface PlannedAttendance {\n  id: string;\n  showId: string;\n  userId: string;\n  createdAt: Date | string;\n}\n\n// Utility types\nexport type Coordinates = {\n  latitude: number;\n  longitude: number;\n};\n\nexport type ZipCodeData = {\n  zipCode: string;\n  city: string;\n  state: string;\n  coordinates: Coordinates;\n};\n\n/* ------------------------------------------------------------------\n * Subscription / Billing types\n * ------------------------------------------------------------------ */\n/**\n * Definition of a subscription plan available for purchase within the app.\n * These plans can be dealer-focused or organizer-focused and are surfaced\n * in the paywall / upgrade screens as well as in {@link SUBSCRIPTION_PLANS}.\n */\nexport interface SubscriptionPlan {\n  /** Unique identifier used by Stripe / billing provider */\n  id: string;\n  /** Display name – shown in UI (e.g. “MVP Dealer”) */\n  name: string;\n  /** Target audience of the plan (‘dealer’ | ‘organizer’) */\n  type: string;\n  /** Billing period (‘monthly’ | ‘annual’) */\n  duration: string;\n  /** Price in USD (e.g. 9.99) */\n  price: number;\n  /** Bullet-point list of features shown in the paywall */\n  features: string[];\n  /** Length of the free-trial period in days */\n  trialDays: number;\n}\n"],"mappings":";;;;IAKYA,QAAQ,GAAAC,OAAA,CAAAD,QAAA,aAARA,QAAQ;EAARA,QAAQ;EAARA,QAAQ;EAARA,QAAQ;EAARA,QAAQ;EAAA,OAARA,QAAQ;AAAA;AAAA,IA4HRE,UAAU,GAAAD,OAAA,CAAAC,UAAA,aAAVA,UAAU;EAAVA,UAAU;EAAVA,UAAU;EAAVA,UAAU;EAAVA,UAAU;EAAVA,UAAU;EAAA,OAAVA,UAAU;AAAA;AAAA,IA0CVC,WAAW,GAAAF,OAAA,CAAAE,WAAA,aAAXA,WAAW;EAAXA,WAAW;EAAXA,WAAW;EAAXA,WAAW;EAAXA,WAAW;EAAXA,WAAW;EAAXA,WAAW;EAAA,OAAXA,WAAW;AAAA;AAAA,IASXC,YAAY,GAAAH,OAAA,CAAAG,YAAA,aAAZA,YAAY;EAAZA,YAAY;EAAZA,YAAY;EAAZA,YAAY;EAAZA,YAAY;EAAZA,YAAY;EAAZA,YAAY;EAAZA,YAAY;EAAZA,YAAY;EAAA,OAAZA,YAAY;AAAA;AAAA,IA2GZC,SAAS,GAAAJ,OAAA,CAAAI,SAAA,aAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAAA,OAATA,SAAS;AAAA","ignoreList":[]}