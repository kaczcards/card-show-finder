{"version":3,"names":["Location","supabase","AsyncStorage","cov_1udnmm8pjh","s","requestLocationPermissions","_ref","_asyncToGenerator","f","_ref2","requestForegroundPermissionsAsync","status","error","console","apply","arguments","checkLocationPermissions","_ref3","_ref4","getForegroundPermissionsAsync","getCurrentLocation","_ref5","hasPermission","b","permissionGranted","location","getCurrentPositionAsync","accuracy","Accuracy","Balanced","latitude","coords","longitude","geocodeAddress","_ref6","address","results","geocodeAsync","length","_x","reverseGeocodeCoordinates","_ref7","coordinates","reverseGeocodeAsync","_x2","ZIP_CACHE_KEY_PREFIX","getZipFromCache","_ref8","zipCode","raw","getItem","JSON","parse","err","warn","_x3","setZipCache","_ref9","data","setItem","stringify","_x4","clearZipCodeCache","_ref0","removeItem","info","keys","getAllKeys","zipKeys","filter","key","startsWith","multiRemove","_x5","getZipCodeCoordinates","_ref1","cached","_ref10","from","select","eq","single","zipCodeDataFromDb","fetchError","code","zip_code","city","state","addressInfo","newZipCodeData","region","subregion","_x6","calculateDistance","lat1","lon1","lat2","lon2","R","dLat","Math","PI","dLon","a","sin","cos","c","atan2","sqrt","calculateDistanceBetweenCoordinates","point1","point2","getNearbyZipCodes","_ref11","centerZipCode","radiusMiles","centerData","Error","_ref12","rpc","center_lat","center_lng","radius_miles","map","item","message","_x7","_x8","formatCoordinates","toFixed","getDirectionsUrl","destination","label","query"],"sources":["locationService.ts"],"sourcesContent":["import * as Location from 'expo-location';\nimport { supabase } from '../supabase';\nimport { Coordinates, ZipCodeData } from '../types';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n/**\n * Request location permissions from the user\n * @returns Promise with boolean indicating if permissions were granted\n */\nexport const requestLocationPermissions = async (): Promise<boolean> => {\n  try {\n    const { status } = await Location.requestForegroundPermissionsAsync();\n    return status === 'granted';\n  } catch (error: any) {\n    console.error('Error requesting location permissions:', error);\n    return false;\n  }\n};\n\n/**\n * Check if location permissions are granted\n * @returns Promise with boolean indicating if permissions are granted\n */\nexport const checkLocationPermissions = async (): Promise<boolean> => {\n  try {\n    const { status } = await Location.getForegroundPermissionsAsync();\n    return status === 'granted';\n  } catch (error: any) {\n    console.error('Error checking location permissions:', error);\n    return false;\n  }\n};\n\n/**\n * Get the current location of the device\n * @returns Promise with coordinates or null if location cannot be determined\n */\nexport const getCurrentLocation = async (): Promise<Coordinates | null> => {\n  try {\n    const hasPermission = await checkLocationPermissions();\n    \n    if (!hasPermission) {\n      const permissionGranted = await requestLocationPermissions();\n      if (!permissionGranted) {\n        return null;\n      }\n    }\n    \n    const location = await Location.getCurrentPositionAsync({\n      accuracy: Location.Accuracy.Balanced,\n    });\n    \n    return {\n      latitude: location.coords.latitude,\n      longitude: location.coords.longitude,\n    };\n  } catch (error: any) {\n    console.error('Error getting current location:', error);\n    return null;\n  }\n};\n\n/**\n * Geocode an address to coordinates\n * @param address Full address string\n * @returns Promise with coordinates or null if geocoding fails\n */\nexport const geocodeAddress = async (address: string): Promise<Coordinates | null> => {\n  try {\n    const results = await Location.geocodeAsync(address);\n    \n    if (results.length === 0) {\n      return null;\n    }\n    \n    return {\n      latitude: results[0].latitude,\n      longitude: results[0].longitude,\n    };\n  } catch (error: any) {\n    console.error('Error geocoding address:', error);\n    return null;\n  }\n};\n\n/**\n * Reverse geocode coordinates to an address\n * @param coordinates Latitude and longitude\n * @returns Promise with address or null if reverse geocoding fails\n */\nexport const reverseGeocodeCoordinates = async (\n  coordinates: Coordinates\n): Promise<Location.LocationGeocodedAddress | null> => {\n  try {\n    const results = await Location.reverseGeocodeAsync({\n      latitude: coordinates.latitude,\n      longitude: coordinates.longitude,\n    });\n    \n    if (results.length === 0) {\n      return null;\n    }\n    \n    return results[0];\n  } catch (error: any) {\n    console.error('Error reverse geocoding coordinates:', error);\n    return null;\n  }\n};\n\n/**\n * AsyncStorage key prefix for caching ZIP code lookups\n */\nconst ZIP_CACHE_KEY_PREFIX = '@zip_cache:';\n\n/**\n * Retrieve ZIP code data from AsyncStorage cache\n */\nconst getZipFromCache = async (zipCode: string): Promise<ZipCodeData | null> => {\n  try {\n    const raw = await AsyncStorage.getItem(`${ZIP_CACHE_KEY_PREFIX}${zipCode}`);\n    return raw ? (JSON.parse(raw) as ZipCodeData) : null;\n  } catch (err) {\n    console.warn('[locationService] Failed to read ZIP cache', err);\n    return null;\n  }\n};\n\n/**\n * Save ZIP code data to AsyncStorage cache\n */\nconst setZipCache = async (data: ZipCodeData): Promise<void> => {\n  try {\n    await AsyncStorage.setItem(\n      `${ZIP_CACHE_KEY_PREFIX}${data.zipCode}`,\n      JSON.stringify(data)\n    );\n  } catch (err) {\n    console.warn('[locationService] Failed to write ZIP cache', err);\n  }\n};\n\n/**\n * Clear ZIP code cache from AsyncStorage\n * @param zipCode Optional specific ZIP code to clear, if not provided all ZIP caches will be cleared\n * @returns Promise<void>\n */\nexport const clearZipCodeCache = async (zipCode?: string): Promise<void> => {\n  try {\n    if (zipCode) {\n      // Clear specific ZIP code\n      await AsyncStorage.removeItem(`${ZIP_CACHE_KEY_PREFIX}${zipCode}`);\n      console.info(`[locationService] Cleared cache for ZIP code ${zipCode}`);\n    } else {\n      // Get all keys and clear only ZIP code caches\n      const keys = await AsyncStorage.getAllKeys();\n      const zipKeys = keys.filter(key => key.startsWith(ZIP_CACHE_KEY_PREFIX));\n      if (zipKeys.length > 0) {\n        await AsyncStorage.multiRemove(zipKeys);\n        console.info(\n          `[locationService] Cleared all ZIP code caches (${zipKeys.length} entries)`\n        );\n      }\n    }\n  } catch (error: any) {\n    console.error('Error clearing ZIP code cache:', error);\n  }\n};\n\n/**\n * Get coordinates for a ZIP code\n * @param zipCode ZIP code string\n * @returns Promise with ZipCodeData or null if not found\n */\nexport const getZipCodeCoordinates = async (zipCode: string): Promise<ZipCodeData | null> => {\n  try {\n    /* ---------------------------------\n     * 1. Check client-side cache first\n     * --------------------------------- */\n    const cached = await getZipFromCache(zipCode);\n    if (cached) {\n      return cached;\n    }\n\n    // First check if we have the ZIP code in our database\n    const { data: zipCodeDataFromDb, error: fetchError } = await supabase\n      .from('zip_codes') // Assuming a 'zip_codes' table\n      .select('*')\n      .eq('zip_code', zipCode)\n      .single();\n\n    if (fetchError && fetchError.code !== 'PGRST116') { // PGRST116 means no rows found\n      throw fetchError;\n    }\n\n    if (zipCodeDataFromDb) {\n      return {\n        zipCode: zipCodeDataFromDb.zip_code,\n        city: zipCodeDataFromDb.city,\n        state: zipCodeDataFromDb.state,\n        coordinates: {\n          latitude: zipCodeDataFromDb.latitude,\n          longitude: zipCodeDataFromDb.longitude,\n        },\n      };\n    }\n\n    // If not found, geocode it and save to database\n    const address = zipCode + ', USA'; // Simple address format for geocoding\n    const coordinates = await geocodeAddress(address);\n\n    if (!coordinates) {\n      return null;\n    }\n\n    // Get city and state from reverse geocoding\n    const addressInfo = await reverseGeocodeCoordinates(coordinates);\n\n    if (!addressInfo) {\n      return null;\n    }\n\n    const newZipCodeData: ZipCodeData = {\n      zipCode,\n      city: addressInfo.city || 'Unknown',\n      state: addressInfo.region || addressInfo.subregion || 'Unknown',\n      coordinates,\n    };\n\n    /**\n     * NOTE:\n     * We intentionally **skip inserting** the newly-geocoded ZIP code into the\n     * `zip_codes` table because the table is protected by an RLS policy that\n     * only allows inserts from server-side (service-role) contexts.  \n     * Trying to insert here would raise error 42501.\n     */\n    console.info(\n      `[locationService] ZIP code ${zipCode} geocoded on-device â€“ not cached in DB due to RLS.`\n    );\n\n    // Cache newly geocoded result for future requests\n    await setZipCache(newZipCodeData);\n\n    return newZipCodeData;\n  } catch (error: any) {\n    console.error('Error getting ZIP code coordinates:', error);\n    return null;\n  }\n};\n\n/**\n * Calculate distance between two coordinates using the Haversine formula\n * @param lat1 Latitude of first point\n * @param lon1 Longitude of first point\n * @param lat2 Latitude of second point\n * @param lon2 Longitude of second point\n * @returns Distance in miles\n */\nexport const calculateDistance = (\n  lat1: number,\n  lon1: number,\n  lat2: number,\n  lon2: number\n): number => {\n  const R = 3958.8; // Earth's radius in miles\n  const dLat = (lat2 - lat1) * (Math.PI / 180);\n  const dLon = (lon2 - lon1) * (Math.PI / 180);\n  const a =\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(lat1 * (Math.PI / 180)) *\n      Math.cos(lat2 * (Math.PI / 180)) *\n      Math.sin(dLon / 2) *\n      Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c;\n};\n\n/**\n * Calculate distance between two coordinate objects\n * @param point1 First coordinate\n * @param point2 Second coordinate\n * @returns Distance in miles\n */\nexport const calculateDistanceBetweenCoordinates = (\n  point1: Coordinates,\n  point2: Coordinates\n): number => {\n  return calculateDistance(\n    point1.latitude,\n    point1.longitude,\n    point2.latitude,\n    point2.longitude\n  );\n};\n\n/**\n * Get nearby ZIP codes within a radius\n * @param centerZipCode Center ZIP code\n * @param radiusMiles Radius in miles\n * @returns Promise with array of nearby ZIP codes\n */\nexport const getNearbyZipCodes = async (\n  centerZipCode: string,\n  radiusMiles: number\n): Promise<string[]> => {\n  try {\n    // Get coordinates for the center ZIP code\n    const centerData = await getZipCodeCoordinates(centerZipCode);\n    \n    if (!centerData) {\n      throw new Error(`ZIP code ${centerZipCode} not found`);\n    }\n    \n    // Query for nearby ZIP codes using PostGIS\n    const { data, error } = await supabase.rpc('nearby_zip_codes', {\n      center_lat: centerData.coordinates.latitude,\n      center_lng: centerData.coordinates.longitude,\n      radius_miles: radiusMiles\n    });\n    \n    if (error) throw error;\n    \n    return (data || []).map(item => item.zip_code);\n  } catch (error: any) {\n    console.error('Error getting nearby ZIP codes:', error);\n    throw new Error(error.message || 'Failed to get nearby ZIP codes');\n  }\n};\n\n/**\n * Format coordinates as a string\n * @param coordinates Latitude and longitude\n * @returns Formatted string (e.g., \"37.7749,-122.4194\")\n */\nexport const formatCoordinates = (coordinates: Coordinates): string => {\n  return `${coordinates.latitude.toFixed(6)},${coordinates.longitude.toFixed(6)}`;\n};\n\n/**\n * Get directions URL to a location (opens in maps app)\n * @param destination Destination coordinates\n * @param label Optional label for the destination\n * @returns URL string that can be opened with Linking\n */\nexport const getDirectionsUrl = (\n  destination: Coordinates,\n  label?: string\n): string => {\n  const query = label \n    ? `${label}@${destination.latitude},${destination.longitude}`\n    : `${destination.latitude},${destination.longitude}`;\n    \n  // This URL format works with both iOS and Android\n  return `https://www.google.com/maps/dir/?api=1&destination=${query}`;\n};"],"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","ignoreList":[]}