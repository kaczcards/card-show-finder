{"version":3,"names":["supabase","DEBUG_SHOW_ID","cov_2e6bcnjtba","s","mapDbShowToAppShow","row","_ref","_ref2","_ref3","_ref4","_ref5","f","id","title","location","address","startDate","start_date","endDate","end_date","startTime","start_time","endTime","end_time","entryFee","entry_fee","description","b","undefined","imageUrl","image_url","rating","coordinates","latitude","longitude","Array","isArray","length","status","organizerId","organizer_id","features","categories","createdAt","created_at","updatedAt","updated_at","seriesId","series_id","websiteUrl","website_url","getShows","_ref6","_asyncToGenerator","filters","arguments","_ref7","_ref8","toIso","d","Date","toISOString","now","radius","isNaN","_ref0","_ref1","_ref10","Math","abs","console","warn","debug","lat","long","radius_miles","debugShowId","_ref9","rpc","nearbyData","data","nearbyError","error","message","info","found","some","targetShow","find","filteredData","today","targetShowBeforeFilter","targetEndDate","isPastShow","filter","show","showEndDate","isValid","maxEntryFee","cat","includes","every","feature","foundAfter","map","center_lat","center_lng","max_entry_fee","show_categories","show_features","_ref11","rpcData","rpcError","foundRaw","foundFiltered","_ref12","fbData","fbError","showStartDate","filterStartDate","filterEndDate","query","from","select","eq","order","ascending","gte","lte","overlaps","_ref13","err","_ref14","Error","apply","getPaginatedShows","_ref15","params","_ref18","_ref19","_ref20","_ref21","_ref16","_ref16$radius","_ref16$startDate","_ref16$endDate","_ref16$maxEntryFee","_ref16$categories","_ref16$features","_ref16$pageSize","pageSize","_ref16$page","page","_ref17","lng","page_size","getFallbackPaginatedShows","msg","pagination","totalCount","currentPage","totalPages","safePayload","rows","paginationRaw","mappedShows","Number","total_count","current_page","total_pages","fallbackResult","getAllActiveShowsFallback","fallbackErr","_ref22","_ref23","_ref24","_x","_ref25","_ref26","_ref26$radius","_ref26$startDate","_ref26$endDate","_ref26$maxEntryFee","_ref26$categories","_ref26$features","_ref26$pageSize","_ref26$page","countQuery","count","_ref27","countError","dataQuery","range","_ref28","dataError","isDefaultCoordinates","showLat","showLng","distance","calculateDistance","ceil","_ref29","_ref30","_ref31","_x2","_ref32","_ref33","_ref33$startDate","_ref33$endDate","_ref33$pageSize","_ref33$page","_ref34","_ref35","_ref36","_ref37","_ref38","_x3","lat1","lon1","lat2","lon2","R","dLat","PI","dLon","a","sin","cos","c","atan2","sqrt","getShowById","_ref39","_ref40","single","_ref41","_x4","createShow","getUpcomingShows","_ref42","_ref43","userId","_ref44","participantRows","participantError","showIds","showid","Boolean","showQuery","in","_ref45","showRows","showError","mapped","_ref46","_x5","claimShow","_ref47","showId","_ref49","_ref48","profile","profileErr","success","roleOk","role","toString","toLowerCase","paidOk","is_paid","_ref50","update","claimed","claimed_by","claimed_at","or","updatedShow","updateError","_ref51","insert","show_id","user_id","ignoreDuplicates","orgError","_x6","_x7","updateShow","deleteShow"],"sources":["showService.ts"],"sourcesContent":["/**\n * Show Service\n *\n * This file contains helpers for fetching shows from Supabase.\n */\n\nimport { supabase } from '../supabase';\nimport { Show, ShowStatus } from '../types';\n\n/**\n * Convert a raw Supabase row into an app `Show` object.\n */\n/* ------------------------------------------------------------------ */\n/* Debug helper – track a single show end-to-end                        */\n/* ------------------------------------------------------------------ */\nconst DEBUG_SHOW_ID = 'cd175b33-3144-4ccb-9d85-94490446bf26';\n\nconst mapDbShowToAppShow = (row: any): Show => ({\n  id: row.id,\n  title: row.title,\n  location: row.location,\n  address: row.address,\n  startDate: row.start_date,\n  endDate: row.end_date,\n  startTime: row.start_time,\n  endTime: row.end_time,\n  entryFee: row.entry_fee,\n  description: row.description ?? undefined,\n  imageUrl: row.image_url ?? undefined,\n  rating: row.rating ?? undefined,\n  // Prefer explicit latitude / longitude columns (added in updated Supabase functions);\n  // fall back to legacy PostGIS object when they are not present.\n  coordinates:\n    typeof row.latitude === 'number' && typeof row.longitude === 'number'\n      ? {\n          latitude: row.latitude,\n          longitude: row.longitude,\n        }\n      : row.coordinates &&\n        row.coordinates.coordinates &&\n        Array.isArray(row.coordinates.coordinates) &&\n        row.coordinates.coordinates.length >= 2\n      ? {\n          latitude: row.coordinates.coordinates[1],\n          longitude: row.coordinates.coordinates[0],\n        }\n      : undefined,\n  status: row.status as ShowStatus,\n  organizerId: row.organizer_id,\n  features: row.features ?? {},\n  categories: row.categories ?? [],\n  createdAt: row.created_at,\n  updatedAt: row.updated_at,\n  seriesId: row.series_id,\n  websiteUrl: row.website_url,\n});\n\n/**\n * Fetch a list of active shows.\n *\n * The caller supplies a `ShowFilters` object that may contain:\n *   • latitude / longitude / radius → geo-filtered RPC\n *   • startDate / endDate / maxEntryFee / categories / features, etc.\n *\n * The function always returns an **array of Show objects** (may be empty) and\n * throws on error – this aligns with `HomeScreen.tsx`, which expects a plain\n * array.\n */\nimport { ShowFilters } from '../types';\n\n/* ------------------------------------------------------------------ */\n/* Pagination helper types                                             */\n/* ------------------------------------------------------------------ */\n\n/**\n * Metadata describing pagination state returned from the\n * `get_paginated_shows` RPC.\n */\nexport interface PaginationMeta {\n  totalCount: number;\n  pageSize: number;\n  currentPage: number;\n  totalPages: number;\n}\n\n/**\n * Params accepted by `getPaginatedShows`.\n * Inherits all normal ShowFilters plus `pageSize` & `page`.\n * `latitude` and `longitude` are **required** because the RPC\n * is geo-aware – calling code (e.g. HomeScreen) must supply them.\n */\nexport interface PaginatedShowsParams extends ShowFilters {\n  latitude: number;\n  longitude: number;\n  /** Number of rows per page (default: 20) */\n  pageSize?: number;\n  /** 1-based page index (default: 1)            */\n  page?: number;\n}\n\n/**\n * Shape returned by `getPaginatedShows`.\n */\nexport interface PaginatedShowsResult {\n  data: Show[];\n  pagination: PaginationMeta;\n  error: string | null;\n}\n\nexport const getShows = async (filters: ShowFilters = {}): Promise<Show[]> => {\n  try {\n    // Ensure filters is a valid object\n    filters = filters || {};\n\n    /* -----------------------------------------------------------\n     * Derive **normalized** filter values so every query path\n     * (RPCs & basic SELECT) uses the exact same parameters.\n     * --------------------------------------------------------- */\n    const toIso = (d: Date | string): string =>\n      d instanceof Date ? d.toISOString() : d;\n\n    // Default date range: today → +30 days (ISO strings)\n    const startDate = toIso(\n      filters.startDate ?? new Date()\n    );\n    const endDate = toIso(\n      filters.endDate ?? new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)\n    );\n\n    // Default radius: 25 mi\n    const radius =\n      typeof filters.radius === 'number' && !isNaN(filters.radius)\n        ? filters.radius\n        : 25;\n    \n    /* -----------------------------------------------------------\n     * 1. Geo-aware query via nearby_shows RPC when lat/lng present\n     * --------------------------------------------------------- */\n    if (\n      typeof filters.latitude === 'number' &&\n      typeof filters.longitude === 'number' &&\n      !isNaN(filters.latitude) &&\n      !isNaN(filters.longitude)\n    ) {\n      const radius = typeof filters.radius === 'number' ? filters.radius : 25;\n\n      /* ---------- Sanity-check lat / lng values ---------- */\n      if (Math.abs(filters.latitude) > 90 || Math.abs(filters.longitude) > 180) {\n        console.warn(\n          '[showService] Suspicious coordinates detected – latitude / longitude might be swapped:',\n          { latitude: filters.latitude, longitude: filters.longitude }\n        );\n      }\n\n      console.debug('[showService] Calling nearby_shows with params:', {\n        lat: filters.latitude,\n        long: filters.longitude,\n        radius_miles: radius,\n        start_date: startDate,\n        end_date: endDate,\n        debugShowId: DEBUG_SHOW_ID, // helpful when grepping logs\n      });\n\n      // Call the new nearby_shows function as primary method\n      const { data: nearbyData, error: nearbyError } = await supabase.rpc(\n        'nearby_shows',\n        {\n          lat: filters.latitude,\n          long: filters.longitude,\n          radius_miles: radius,\n          start_date: startDate, // Always include a date range\n          end_date: endDate,    // to filter out past shows\n        }\n      );\n\n      if (nearbyError) {\n        console.warn(\n          '[showService] nearby_shows RPC failed – attempting fallback',\n          nearbyError.message\n        );\n      } else {\n        console.info(\n          `[showService] nearby_shows returned ${((nearbyData && Array.isArray(nearbyData)) ? nearbyData.length : 0)} show(s)`\n        );\n\n        /* ----- DEBUG: Is target show present in raw nearby_shows data? ---- */\n        if (Array.isArray(nearbyData)) {\n          const found = nearbyData.some((s: any) => s.id === DEBUG_SHOW_ID);\n          console.debug(\n            `[showService][DEBUG_SHOW] Target show ${\n              found ? 'FOUND' : 'NOT found'\n            } in raw nearby_shows payload`\n          );\n\n          // If found, get the show details for further debugging\n          if (found) {\n            const targetShow = nearbyData.find((s: any) => s.id === DEBUG_SHOW_ID);\n            console.debug(\n              `[showService][DEBUG_SHOW] Target show details:`,\n              {\n                id: targetShow.id,\n                title: targetShow.title,\n                start_date: targetShow.start_date,\n                end_date: targetShow.end_date,\n                status: targetShow.status\n              }\n            );\n          }\n        }\n        \n        // Apply additional filters that weren't handled by the RPC\n        let filteredData = nearbyData;\n        \n        // Ensure we're not showing past shows\n        if (Array.isArray(filteredData)) {\n          const today = new Date();\n          console.debug(`[showService][DEBUG_SHOW] Today's date for filtering: ${today.toISOString()}`);\n          \n          // Check if target show exists before filtering\n          const targetShowBeforeFilter = filteredData.find((s: any) => s.id === DEBUG_SHOW_ID);\n          \n          if (targetShowBeforeFilter) {\n            const targetEndDate = new Date(targetShowBeforeFilter.end_date);\n            const isPastShow = targetEndDate < today;\n            \n            console.debug(\n              `[showService][DEBUG_SHOW] Target show end_date: ${targetEndDate.toISOString()} | Today: ${today.toISOString()} | Is past show? ${isPastShow ? 'YES' : 'NO'}`\n            );\n          }\n          \n          filteredData = filteredData.filter(show => {\n            // Parse the end date, ensuring timezone issues don't cause off-by-one errors\n            const showEndDate = new Date(show.end_date);\n            const isValid = showEndDate >= today;\n            \n            // Debug logging specifically for our target show\n            if (show.id === DEBUG_SHOW_ID) {\n              console.debug(\n                `[showService][DEBUG_SHOW] Filtering decision: show.end_date (${showEndDate.toISOString()}) ${isValid ? '>=' : '<'} today (${today.toISOString()}) => ${isValid ? 'KEEP' : 'FILTER OUT'}`\n              );\n            }\n            \n            return isValid;\n          });\n          \n          console.debug(`[showService] Filtered out past shows. ${filteredData.length} shows remaining.`);\n        }\n        \n        // Filter by max entry fee if specified\n        if (typeof filters.maxEntryFee === 'number' && Array.isArray(filteredData)) {\n          filteredData = filteredData.filter(show => \n            show.entry_fee <= filters.maxEntryFee!\n          );\n        }\n        \n        // Filter by categories if specified\n        if (filters.categories && Array.isArray(filters.categories) && \n            filters.categories.length > 0 && Array.isArray(filteredData)) {\n          filteredData = filteredData.filter(show => \n            show.categories && \n            filters.categories!.some(cat => show.categories.includes(cat))\n          );\n        }\n        \n        // Filter by features if specified\n        if (filters.features && Array.isArray(filters.features) && \n            filters.features.length > 0 && Array.isArray(filteredData)) {\n          filteredData = filteredData.filter(show => \n            show.features && \n            filters.features!.every(feature => show.features[feature] === true)\n          );\n        }\n        \n        /* ----- DEBUG: Is target show present after client-side filters? ---- */\n        if (Array.isArray(filteredData)) {\n          const foundAfter = filteredData.some((s: any) => s.id === DEBUG_SHOW_ID);\n          console.debug(\n            `[showService][DEBUG_SHOW] Target show ${\n              foundAfter ? 'REMAINS' : 'WAS FILTERED OUT'\n            } after nearby_shows client-side filters`\n          );\n        }\n\n        return Array.isArray(filteredData) ? filteredData.map(mapDbShowToAppShow) : [];\n      }\n\n      /* -------------------------------------------------------\n       * 1b. Fallback to find_filtered_shows if nearby_shows fails\n       * ----------------------------------------------------- */\n      console.debug('[showService] Falling back to find_filtered_shows with params:', {\n        center_lat: filters.latitude,\n        center_lng: filters.longitude,\n        radius_miles: radius,\n        start_date: startDate,\n        end_date: endDate,\n        max_entry_fee: filters.maxEntryFee ?? null,\n        show_categories: filters.categories ?? null,\n        show_features: filters.features ?? null,\n      });\n\n      const { data: rpcData, error: rpcError } = await supabase.rpc(\n        'find_filtered_shows',\n        {\n          // Primary/filter-aware RPC parameters\n          center_lat: typeof filters.latitude === 'number' ? filters.latitude : null,\n          center_lng: typeof filters.longitude === 'number' ? filters.longitude : null,\n          radius_miles: typeof filters.radius === 'number' ? filters.radius : 25,\n          start_date: startDate,\n          end_date: endDate,\n          max_entry_fee: typeof filters.maxEntryFee === 'number' ? filters.maxEntryFee : null,\n          show_categories: Array.isArray(filters.categories) ? filters.categories : null,\n          show_features: filters.features || null,\n        }\n      );\n\n      if (rpcError) {\n        console.warn(\n          '[showService] find_filtered_shows RPC failed – attempting second fallback',\n          rpcError.message\n        );\n      } else {\n        console.info(\n          `[showService] find_filtered_shows returned ${((rpcData && Array.isArray(rpcData)) ? rpcData.length : 0)} show(s)`\n        );\n        \n        /* ----- DEBUG: Target show in raw find_filtered_shows payload? ----- */\n        if (Array.isArray(rpcData)) {\n          const foundRaw = rpcData.some((s: any) => s.id === DEBUG_SHOW_ID);\n          console.debug(\n            `[showService][DEBUG_SHOW] Target show ${\n              foundRaw ? 'FOUND' : 'NOT found'\n            } in raw find_filtered_shows payload`\n          );\n          \n          // If found, get the show details for further debugging\n          if (foundRaw) {\n            const targetShow = rpcData.find((s: any) => s.id === DEBUG_SHOW_ID);\n            console.debug(\n              `[showService][DEBUG_SHOW] Target show details from find_filtered_shows:`,\n              {\n                id: targetShow.id,\n                title: targetShow.title,\n                start_date: targetShow.start_date,\n                end_date: targetShow.end_date,\n                status: targetShow.status\n              }\n            );\n          }\n        }\n\n        // Ensure we're not showing past shows\n        let filteredData = rpcData;\n        if (Array.isArray(filteredData)) {\n          const today = new Date();\n          console.debug(`[showService][DEBUG_SHOW] Today's date for filtering (find_filtered): ${today.toISOString()}`);\n          \n          // Check if target show exists before filtering\n          const targetShowBeforeFilter = filteredData.find((s: any) => s.id === DEBUG_SHOW_ID);\n          \n          if (targetShowBeforeFilter) {\n            const targetEndDate = new Date(targetShowBeforeFilter.end_date);\n            const isPastShow = targetEndDate < today;\n            \n            console.debug(\n              `[showService][DEBUG_SHOW] Target show end_date (find_filtered): ${targetEndDate.toISOString()} | Today: ${today.toISOString()} | Is past show? ${isPastShow ? 'YES' : 'NO'}`\n            );\n          }\n          \n          filteredData = filteredData.filter(show => {\n            // Parse the end date, ensuring timezone issues don't cause off-by-one errors\n            const showEndDate = new Date(show.end_date);\n            const isValid = showEndDate >= today;\n            \n            // Debug logging specifically for our target show\n            if (show.id === DEBUG_SHOW_ID) {\n              console.debug(\n                `[showService][DEBUG_SHOW] Filtering decision (find_filtered): show.end_date (${showEndDate.toISOString()}) ${isValid ? '>=' : '<'} today (${today.toISOString()}) => ${isValid ? 'KEEP' : 'FILTER OUT'}`\n              );\n            }\n            \n            return isValid;\n          });\n          \n          console.debug(`[showService] Filtered out past shows. ${filteredData.length} shows remaining.`);\n        }\n        \n        /* ----- DEBUG: Target show after filters (find_filtered_shows) ----- */\n        if (Array.isArray(filteredData)) {\n          const foundFiltered = filteredData.some((s: any) => s.id === DEBUG_SHOW_ID);\n          console.debug(\n            `[showService][DEBUG_SHOW] Target show ${\n              foundFiltered ? 'REMAINS' : 'WAS FILTERED OUT'\n            } after find_filtered_shows client-side filters`\n          );\n        }\n\n        return Array.isArray(filteredData) ? filteredData.map(mapDbShowToAppShow) : [];\n      }\n\n      /* -------------------------------------------------------\n       * 1c. Fallback to simple radius-only RPC if the above fails\n       * ----------------------------------------------------- */\n      const { data: fbData, error: fbError } = await supabase.rpc(\n        'find_shows_within_radius',\n        {\n          center_lat: typeof filters.latitude === 'number' ? filters.latitude : null,\n          center_lng: typeof filters.longitude === 'number' ? filters.longitude : null,\n          radius_miles: radius,\n        }\n      );\n\n      if (fbError) {\n        console.warn(\n          '[showService] find_shows_within_radius fallback failed – will use basic query',\n          fbError.message\n        );\n        // fall through to non-spatial query below\n      } else {\n        console.debug(\n          '[showService] find_shows_within_radius params:',\n          { center_lat: filters.latitude, center_lng: filters.longitude, radius_miles: radius }\n        );\n        console.info(\n          `[showService] find_shows_within_radius returned ${((fbData && Array.isArray(fbData)) ? fbData.length : 0)} show(s)`\n        );\n        \n        // Apply date filtering since this RPC doesn't do it\n        let filteredData = Array.isArray(fbData) ? fbData : [];\n        \n        // Ensure we're not showing past shows\n        if (Array.isArray(filteredData)) {\n          const today = new Date();\n          filteredData = filteredData.filter(show => {\n            // Parse the end date, ensuring timezone issues don't cause off-by-one errors\n            const showEndDate = new Date(show.end_date);\n            return showEndDate >= today;\n          });\n          \n          console.debug(`[showService] Filtered out past shows. ${filteredData.length} shows remaining.`);\n        }\n        \n        // Apply date range filtering\n        filteredData = filteredData.filter(show => {\n          const showStartDate = new Date(show.start_date);\n          const filterStartDate = new Date(startDate);\n          const filterEndDate = new Date(endDate);\n          return showStartDate >= filterStartDate && showStartDate <= filterEndDate;\n        });\n        \n        return filteredData.map(mapDbShowToAppShow);\n      }\n    }\n\n    /* -----------------------------------------------------------\n     * 2. Basic (non-spatial) SELECT with optional filters\n     * --------------------------------------------------------- */\n    let query = supabase\n      .from('shows')\n      .select('*')\n      .eq('status', 'ACTIVE')\n      .order('start_date', { ascending: true });\n\n    // Always apply date filters to show only future/current shows\n    query = query.gte('start_date', startDate as any);\n    query = query.lte('start_date', endDate as any);\n    \n    // Also ensure the end_date is not in the past\n    const today = new Date();\n    query = query.gte('end_date', today.toISOString() as any);\n    \n    if (typeof filters.maxEntryFee === 'number') {\n      query = query.lte('entry_fee', filters.maxEntryFee);\n    }\n    if (filters.categories && Array.isArray(filters.categories) && filters.categories.length > 0) {\n      query = query.overlaps('categories', filters.categories);\n    }\n\n    /* ---------- Log basic-query filters for debugging ---------- */\n    console.debug('[showService] Executing basic query with filters:', {\n      startDate,\n      endDate,\n      today: today.toISOString(),\n      maxEntryFee: filters.maxEntryFee,\n      categories: filters.categories,\n      status: 'ACTIVE',\n    });\n\n    const { data, error } = await query;\n\n    if (error) throw error;\n\n    console.info(\n      `[showService] basic query returned ${((data && Array.isArray(data)) ? data.length : 0)} show(s)`\n    );\n    \n    // Ensure we're not showing past shows\n    let filteredData = data;\n    if (Array.isArray(filteredData)) {\n      const today = new Date();\n      \n      // Check if target show exists before filtering\n      const targetShowBeforeFilter = filteredData.find((s: any) => s.id === DEBUG_SHOW_ID);\n      \n      if (targetShowBeforeFilter) {\n        const targetEndDate = new Date(targetShowBeforeFilter.end_date);\n        const isPastShow = targetEndDate < today;\n        \n        console.debug(\n          `[showService][DEBUG_SHOW] Target show end_date (basic query): ${targetEndDate.toISOString()} | Today: ${today.toISOString()} | Is past show? ${isPastShow ? 'YES' : 'NO'}`\n        );\n      }\n      \n      filteredData = filteredData.filter(show => {\n        // Parse the end date, ensuring timezone issues don't cause off-by-one errors\n        const showEndDate = new Date(show.end_date);\n        const isValid = showEndDate >= today;\n        \n        // Debug logging specifically for our target show\n        if (show.id === DEBUG_SHOW_ID) {\n          console.debug(\n            `[showService][DEBUG_SHOW] Filtering decision (basic query): show.end_date (${showEndDate.toISOString()}) ${isValid ? '>=' : '<'} today (${today.toISOString()}) => ${isValid ? 'KEEP' : 'FILTER OUT'}`\n          );\n        }\n        \n        return isValid;\n      });\n      \n      console.debug(`[showService] Filtered out past shows. ${filteredData.length} shows remaining.`);\n    }\n    \n    return Array.isArray(filteredData) ? filteredData.map(mapDbShowToAppShow) : [];\n  } catch (err: any) {\n    console.error('Error fetching shows:', err);\n    throw new Error(err.message ?? 'Failed to fetch shows');\n  }\n  \n  // Safety return if we somehow get here without data\n  return [];\n};\n\n/* ------------------------------------------------------------------ */\n/* Paginated / infinite-scroll helper                                  */\n/* ------------------------------------------------------------------ */\n\n/**\n * Fetch shows in **paged** chunks using the `get_paginated_shows` RPC.\n * Designed for infinite-scroll lists (Home screen, etc.).\n */\nexport const getPaginatedShows = async (\n  params: PaginatedShowsParams\n): Promise<PaginatedShowsResult> => {\n  try {\n    /* ---------------- Normalise & default params ----------------- */\n    const {\n      latitude,\n      longitude,\n      radius = 25,\n      startDate = new Date(),\n      endDate = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\n      maxEntryFee = null,\n      categories = null,\n      features = null,\n      pageSize = 20,\n      page = 1,\n    } = params;\n\n    const toIso = (d: Date | string): string =>\n      d instanceof Date ? d.toISOString() : d;\n    \n    console.debug('[showService] getPaginatedShows called with params:', {\n      latitude, longitude, radius, startDate, endDate, maxEntryFee, \n      categories, features, pageSize, page\n    });\n\n    /* ---------------------- RPC invocation ----------------------- */\n    const { data, error } = await supabase.rpc('get_paginated_shows', {\n      lat: latitude,\n      lng: longitude,\n      radius_miles: typeof radius === 'number' && !isNaN(radius) ? radius : 25,\n      start_date: toIso(startDate),\n      end_date: toIso(endDate),\n      max_entry_fee: typeof maxEntryFee === 'number' ? maxEntryFee : null,\n      categories,\n      features,\n      page_size: pageSize,\n      page,\n      status: 'ACTIVE', // Explicitly request only ACTIVE shows\n    });\n\n    /* -------------------------------------------------------------\n     * 1. Handle RPC-level error (network / SQL exception, etc.)\n     * ----------------------------------------------------------- */\n    if (error) {\n      console.warn('[showService] get_paginated_shows RPC failed:', error.message);\n      console.warn('[showService] Falling back to direct query...');\n      \n      // Fallback to direct query if RPC fails\n      return await getFallbackPaginatedShows(params);\n    }\n\n    /* -------------------------------------------------------------\n     * 2. Guard against malformed payloads or error wrapper returned\n     *    by the SQL function itself (it returns `{ error: .. }`).\n     * ----------------------------------------------------------- */\n    if (\n      !data ||\n      (typeof data === 'object' && 'error' in (data as any))\n    ) {\n      const msg =\n        typeof (data as any)?.error === 'string'\n          ? (data as any).error\n          : 'Failed to load shows';\n      console.warn('[showService] get_paginated_shows returned error payload:', msg);\n      return {\n        data: [],\n        pagination: {\n          totalCount: 0,\n          pageSize,\n          currentPage: page,\n          totalPages: 0,\n        },\n        error: msg,\n      };\n    }\n\n    /* -------------------------------------------------------------\n     * 3. Normalise successful payload to avoid \"undefined value\n     *    to object\" errors when the function returns unexpected\n     *    shapes.  Always guarantee `rows` is an array and\n     *    `paginationRaw` is an object.\n     * ----------------------------------------------------------- */\n    const safePayload = typeof data === 'object' && data !== null ? data as any : {};\n    const rows: any[] = Array.isArray(safePayload.data) ? safePayload.data : [];\n    const paginationRaw: any = typeof safePayload.pagination === 'object' && safePayload.pagination !== null\n      ? safePayload.pagination\n      : {};\n\n    const mappedShows: Show[] = Array.isArray(rows)\n      ? rows.map(mapDbShowToAppShow)\n      : [];\n      \n    console.info(`[showService] get_paginated_shows returned ${mappedShows.length} shows`);\n\n    const pagination: PaginationMeta = {\n      totalCount: Number(paginationRaw.total_count ?? 0),\n      pageSize: Number(paginationRaw.page_size ?? pageSize),\n      currentPage: Number(paginationRaw.current_page ?? page),\n      totalPages: Number(paginationRaw.total_pages ?? 0),\n    };\n\n    return { data: mappedShows, pagination, error: null };\n  } catch (err: any) {\n    console.error('[showService] Error in getPaginatedShows:', err);\n    \n    // Try fallback if the main method fails\n    try {\n      console.warn('[showService] Attempting fallback after error...');\n      const fallbackResult = await getFallbackPaginatedShows(params);\n      \n      // If the fallback found no shows, try the emergency fallback\n      if (fallbackResult.data.length === 0 && fallbackResult.pagination.totalCount > 0) {\n        console.warn('[showService] Fallback found 0 shows but totalCount > 0, trying emergency fallback');\n        return await getAllActiveShowsFallback(params);\n      }\n      \n      return fallbackResult;\n    } catch (fallbackErr: any) {\n      console.error('[showService] Fallback also failed:', fallbackErr);\n      return {\n        data: [],\n        pagination: {\n          totalCount: 0,\n          pageSize: params.pageSize ?? 20,\n          currentPage: params.page ?? 1,\n          totalPages: 0,\n        },\n        error: err.message ?? 'Failed to fetch paginated shows',\n      };\n    }\n  }\n};\n\n/**\n * Fallback implementation for getPaginatedShows that uses direct Supabase queries\n * instead of the RPC. This is used when the RPC fails for any reason.\n */\nconst getFallbackPaginatedShows = async (\n  params: PaginatedShowsParams\n): Promise<PaginatedShowsResult> => {\n  try {\n    const {\n      latitude,\n      longitude,\n      radius = 25,\n      startDate = new Date(),\n      endDate = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\n      maxEntryFee = null,\n      categories = null,\n      features = null,\n      pageSize = 20,\n      page = 1,\n    } = params;\n\n    const toIso = (d: Date | string): string =>\n      d instanceof Date ? d.toISOString() : d;\n    \n    console.debug('[showService] getFallbackPaginatedShows executing with params:', {\n      latitude, longitude, radius, \n      startDate: toIso(startDate),\n      endDate: toIso(endDate)\n    });\n    \n    // First get the total count with a separate query\n    let countQuery = supabase\n      .from('shows')\n      .select('id', { count: 'exact' })\n      .eq('status', 'ACTIVE');\n    \n    // Apply date filters\n    countQuery = countQuery.gte('start_date', toIso(startDate) as any);\n    countQuery = countQuery.lte('start_date', toIso(endDate) as any);\n    \n    // Ensure end_date is not in the past\n    const today = new Date();\n    countQuery = countQuery.gte('end_date', today.toISOString() as any);\n    \n    // Apply other filters\n    if (typeof maxEntryFee === 'number') {\n      countQuery = countQuery.lte('entry_fee', maxEntryFee);\n    }\n    \n    if (categories && Array.isArray(categories) && categories.length > 0) {\n      countQuery = countQuery.overlaps('categories', categories);\n    }\n    \n    // Execute count query\n    const { count, error: countError } = await countQuery;\n    \n    if (countError) {\n      console.error('[showService] Error getting count:', countError);\n      throw countError;\n    }\n    \n    // Now get the actual data for this page\n    let dataQuery = supabase\n      .from('shows')\n      .select('*')\n      .eq('status', 'ACTIVE');\n    \n    // Apply the same filters as the count query\n    dataQuery = dataQuery.gte('start_date', toIso(startDate) as any);\n    dataQuery = dataQuery.lte('start_date', toIso(endDate) as any);\n    dataQuery = dataQuery.gte('end_date', today.toISOString() as any);\n    \n    if (typeof maxEntryFee === 'number') {\n      dataQuery = dataQuery.lte('entry_fee', maxEntryFee);\n    }\n    \n    if (categories && Array.isArray(categories) && categories.length > 0) {\n      dataQuery = dataQuery.overlaps('categories', categories);\n    }\n    \n    // Apply pagination\n    dataQuery = dataQuery\n      .order('start_date', { ascending: true })\n      .range((page - 1) * pageSize, page * pageSize - 1);\n    \n    // Execute data query\n    const { data, error: dataError } = await dataQuery;\n    \n    if (dataError) {\n      console.error('[showService] Error getting data:', dataError);\n      throw dataError;\n    }\n    \n    // Filter results for shows within the radius\n    // (since we can't do this in the query without the RPC)\n    let filteredData = data || [];\n\n    /* ------------------------------------------------------------------\n     * Skip distance filtering if we're using the default (0,0) placeholder\n     * coordinates.  Applying the radius filter in that case removes every\n     * show because all real-world coordinates are far from (0,0).\n     * ------------------------------------------------------------------ */\n    const isDefaultCoordinates =\n      Math.abs(latitude) < 0.1 && Math.abs(longitude) < 0.1;\n\n    if (radius && !isDefaultCoordinates) {\n      console.debug(\n        `[showService] Applying distance filtering with coordinates (${latitude}, ${longitude})`\n      );\n\n      filteredData = filteredData.filter(show => {\n        // Skip shows without coordinates\n        if (!show.coordinates || !show.coordinates.coordinates) return false;\n\n        const showLat = show.coordinates.coordinates[1];\n        const showLng = show.coordinates.coordinates[0];\n        const distance = calculateDistance(\n          latitude,\n          longitude,\n          showLat,\n          showLng\n        );\n        return distance <= radius;\n      });\n    } else if (isDefaultCoordinates) {\n      console.debug(\n        `[showService] Skipping distance filtering – default coordinates detected (${latitude}, ${longitude})`\n      );\n    }\n    \n    console.info(`[showService] getFallbackPaginatedShows found ${filteredData.length} shows (from ${count} total)`);\n    \n    // Map to app format\n    const mappedShows = filteredData.map(mapDbShowToAppShow);\n    \n    // Calculate pagination info\n    const totalCount = count || 0;\n    const totalPages = Math.ceil(totalCount / pageSize);\n    \n    return {\n      data: mappedShows,\n      pagination: {\n        totalCount,\n        pageSize,\n        currentPage: page,\n        totalPages,\n      },\n      error: null,\n    };\n  } catch (err: any) {\n    console.error('[showService] Error in getFallbackPaginatedShows:', err);\n    return {\n      data: [],\n      pagination: {\n        totalCount: 0,\n        pageSize: params.pageSize ?? 20,\n        currentPage: params.page ?? 1,\n        totalPages: 0,\n      },\n      error: err.message ?? 'Failed to fetch paginated shows',\n    };\n  }\n};\n\n/**\n * Completely bypass all location filtering if we're still not getting results.\n * This ensures users always see shows even if there are issues with coordinates.\n */\nconst getAllActiveShowsFallback = async (\n  params: PaginatedShowsParams\n): Promise<PaginatedShowsResult> => {\n  try {\n    const {\n      startDate = new Date(),\n      endDate = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\n      pageSize = 20,\n      page = 1,\n    } = params;\n\n    console.warn('[showService] Using emergency getAllActiveShowsFallback without coordinate filtering');\n    \n    const toIso = (d: Date | string): string =>\n      d instanceof Date ? d.toISOString() : d;\n    \n    // Simple query - just get active shows\n    let dataQuery = supabase\n      .from('shows')\n      .select('*')\n      .eq('status', 'ACTIVE');\n    \n    // Apply minimal filtering to ensure we don't show past shows\n    const today = new Date();\n    dataQuery = dataQuery.gte('end_date', today.toISOString() as any);\n    \n    // Only apply date filtering to start date to match what we promise users\n    dataQuery = dataQuery.gte('start_date', toIso(startDate) as any);\n    dataQuery = dataQuery.lte('start_date', toIso(endDate) as any);\n    \n    // Get total count first\n    const { count, error: countError } = await dataQuery.count();\n    \n    if (countError) {\n      console.error('[showService] Error getting count in emergency fallback:', countError);\n      throw countError;\n    }\n    \n    // Now apply pagination to the same query\n    dataQuery = dataQuery\n      .order('start_date', { ascending: true })\n      .range((page - 1) * pageSize, page * pageSize - 1);\n    \n    const { data, error: dataError } = await dataQuery;\n    \n    if (dataError) {\n      console.error('[showService] Error getting data in emergency fallback:', dataError);\n      throw dataError;\n    }\n    \n    console.info(`[showService] Emergency getAllActiveShowsFallback found ${data.length} shows (from ${count} total)`);\n    \n    // Map to app format\n    const mappedShows = data.map(mapDbShowToAppShow);\n    \n    // Calculate pagination info\n    const totalCount = count || 0;\n    const totalPages = Math.ceil(totalCount / pageSize);\n    \n    return {\n      data: mappedShows,\n      pagination: {\n        totalCount,\n        pageSize,\n        currentPage: page,\n        totalPages,\n      },\n      error: null,\n    };\n  } catch (err: any) {\n    console.error('[showService] Error in emergency fallback:', err);\n    return {\n      data: [],\n      pagination: {\n        totalCount: 0,\n        pageSize: params.pageSize ?? 20,\n        currentPage: params.page ?? 1,\n        totalPages: 0,\n      },\n      error: err.message ?? 'Failed to fetch shows',\n    };\n  }\n};\n\n/**\n * Calculate distance between two points using the Haversine formula\n * @returns Distance in miles\n */\nconst calculateDistance = (lat1: number, lon1: number, lat2: number, lon2: number): number => {\n  const R = 3958.8; // Earth's radius in miles\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLon = (lon2 - lon1) * Math.PI / 180;\n  const a = \n    Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * \n    Math.sin(dLon/2) * Math.sin(dLon/2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n  return R * c;\n};\n\n/**\n * Fetch a single show by ID.\n */\nexport const getShowById = async (\n  id: string\n): Promise<{ data: Show | null; error: string | null }> => {\n  try {\n    const { data, error } = await supabase\n      .from('shows')\n      .select('*')\n      .eq('id', id)\n      .single();\n\n    if (error) {\n      throw error;\n    }\n\n    if (!data) {\n      return { data: null, error: 'Show not found' };\n    }\n\n    return { data: mapDbShowToAppShow(data), error: null };\n  } catch (err: any) {\n    console.error('Error fetching show by id:', err);\n    return { data: null, error: err.message ?? 'Unknown error' };\n  }\n};\n\n/**\n * Create a new show (stub)\n */\nexport const createShow = () => {\n  throw new Error('createShow not implemented');\n};\n\n/**\n * Fetch upcoming (or otherwise date-filtered) shows a user is planning to attend.\n *\n * Looks up the `show_participants` table for the supplied `userId` and then\n * fetches matching shows from `shows`, with optional date-range constraints.\n *\n * @param params - { userId, startDate, endDate? }\n * @returns { data, error } shape – `data` will be an array of `Show`s.\n */\nexport const getUpcomingShows = async (params: {\n  userId: string;\n  startDate: Date | string;\n  endDate?: Date | string;\n}): Promise<{ data: Show[] | null; error: string | null }> => {\n  try {\n    const { userId, startDate, endDate } = params;\n\n    if (!userId) {\n      return { data: null, error: 'Invalid userId' };\n    }\n\n    /* -----------------------------------------------------------\n     * 1. Fetch show IDs the user plans to attend\n     * --------------------------------------------------------- */\n    const { data: participantRows, error: participantError } = await supabase\n      .from('show_participants')\n      // use lowercase column names in db\n      .select('showid')\n      .eq('userid', userId);\n\n    if (participantError) {\n      throw participantError;\n    }\n\n    if (!participantRows || participantRows.length === 0) {\n      // User is not signed up for any shows\n      return { data: [], error: null };\n    }\n\n    const showIds = participantRows\n      .map((row: any) => row.showid)\n      .filter(Boolean);\n\n    /* -----------------------------------------------------------\n     * 2. Fetch shows matching those IDs + date filters\n     * --------------------------------------------------------- */\n    let showQuery = supabase\n      .from('shows')\n      .select('*')\n      .in('id', showIds)\n      .order('start_date', { ascending: true });\n\n    if (startDate) {\n      showQuery = showQuery.gte('start_date', startDate as any);\n    }\n    if (endDate) {\n      showQuery = showQuery.lte('end_date', endDate as any);\n    }\n    \n    // Also ensure the end_date is not in the past\n    const today = new Date();\n    showQuery = showQuery.gte('end_date', today.toISOString() as any);\n\n    const { data: showRows, error: showError } = await showQuery;\n\n    if (showError) {\n      throw showError;\n    }\n    \n    // Ensure we're not showing past shows\n    let filteredData = showRows;\n    if (Array.isArray(filteredData)) {\n      const today = new Date();\n      filteredData = filteredData.filter(show => {\n        // Parse the end date, ensuring timezone issues don't cause off-by-one errors\n        const showEndDate = new Date(show.end_date);\n        return showEndDate >= today;\n      });\n      \n      console.debug(`[showService] Filtered out past shows. ${filteredData.length} shows remaining.`);\n    }\n\n    const mapped = Array.isArray(filteredData)\n      ? filteredData.map(mapDbShowToAppShow)\n      : [];\n\n    return { data: mapped, error: null };\n  } catch (err: any) {\n    console.error('Error fetching upcoming shows for user:', err);\n    return { data: null, error: err.message ?? 'Unknown error' };\n  }\n};\n\n/**\n * Claims a show for a show organizer.\n *\n * 1. Marks the show row as claimed (`claimed`, `claimed_by`, `claimed_at`).\n * 2. Inserts a row in the `show_organizers` join table so we can\n *    easily query which organisers manage which shows.\n *\n * On success returns `{ success: true, data: <updated show row> }`\n * On failure returns `{ success: false, message: <reason> }`\n */\nexport const claimShow = async (\n  showId: string,\n  userId: string\n): Promise<{ success: boolean; data?: any; message?: string }> => {\n  try {\n    /* --------------------------------------------------------\n     * 0. Verify user is a (paid) show organiser\n     * ------------------------------------------------------ */\n    const { data: profile, error: profileErr } = await supabase\n      .from('profiles')\n      .select('role, is_paid')\n      .eq('id', userId)\n      .single();\n\n    if (profileErr) throw profileErr;\n    if (!profile) {\n      return {\n        success: false,\n        message: 'User profile not found',\n      };\n    }\n\n    const roleOk =\n      (profile.role ?? '').toString().toLowerCase() ===\n      'show_organizer';\n    const paidOk =\n      profile.is_paid === undefined\n        ? true // tolerate missing column\n        : !!profile.is_paid;\n\n    if (!roleOk || !paidOk) {\n      return {\n        success: false,\n        message:\n          'Only paid Show Organizers can claim shows. Please upgrade your plan.',\n      };\n    }\n\n    /* --------------------------------------------------------\n     * 1. Atomically flag the show as claimed IF not yet claimed\n     *    — PostgREST will return 0 rows if the condition fails.\n     * ------------------------------------------------------ */\n    const { data: updatedShow, error: updateError, count } =\n      await supabase\n        .from('shows')\n        .update({\n          claimed: true,\n          claimed_by: userId,\n          claimed_at: new Date().toISOString(),\n        })\n        .eq('id', showId)\n        .or('claimed.is.null,claimed.eq.false') // only update unclaimed\n        .select('*', { count: 'exact' })\n        .single();\n\n    if (updateError) throw updateError;\n\n    if (!updatedShow || count === 0) {\n      return {\n        success: false,\n        message: 'Show has already been claimed by another organiser.',\n      };\n    }\n\n    /* --------------------------------------------------------\n     * 2. Insert organiser ↔ show relation (ignore duplicates)\n     * ------------------------------------------------------ */\n    const { error: orgError } = await supabase\n      .from('show_organizers')\n      .insert(\n        {\n          show_id: showId,\n          user_id: userId,\n          role: 'owner',\n          created_at: new Date().toISOString(),\n        },\n        { ignoreDuplicates: true }\n      );\n\n    if (orgError) throw orgError;\n\n    return { success: true, data: updatedShow };\n  } catch (err: any) {\n    console.error('API error in claimShow:', err);\n    return { success: false, message: err.message || 'Failed to claim show' };\n  }\n};\n\n/**\n * Update an existing show (stub)\n */\nexport const updateShow = () => {\n  throw new Error('updateShow not implemented');\n};\n\n/**\n * Delete a show (stub)\n */\nexport const deleteShow = () => {\n  throw new Error('deleteShow not implemented');\n};\n"],"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","ignoreList":[]}