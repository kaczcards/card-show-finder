{"version":3,"names":["useState","useEffect","supabase","useAuth","cov_21wbpfmr70","s","useUserSubscriptions","f","_ref","_ref2","_slicedToArray","subscriptions","setSubscriptions","_ref3","_ref4","isLoading","setIsLoading","_ref5","_ref6","error","setError","_ref7","authState","_ref8","user","b","fetchSubscriptions","_ref9","_asyncToGenerator","__DEV__","console","warn","id","_ref0","from","select","eq","single","data","supabaseError","Error","message","mapped","status","subscription_status","expiry","subscription_expiry","accountType","account_type","length","err","apply","arguments"],"sources":["useUserSubscriptions.ts"],"sourcesContent":["// src/hooks/useUserSubscriptions.ts\nimport { useState, useEffect } from 'react';\nimport { supabase } from '../supabase';\nimport { useAuth } from '../contexts/AuthContext';\n\n/**\n * Custom hook to fetch user subscription data with proper loading and error handling\n * @returns Object containing subscriptions array, loading state, and error state\n */\nexport const useUserSubscriptions = () => {\n  const [subscriptions, setSubscriptions] = useState<any[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [error, setError] = useState<Error | null>(null);\n  const { authState } = useAuth();\n  const { user } = authState;\n\n  useEffect(() => {\n    // Don't attempt to fetch if there's no authenticated user\n    if (!user) {\n      setSubscriptions([]);\n      setIsLoading(false);\n      return;\n    }\n\n    const fetchSubscriptions = async () => {\n      try {\n        setIsLoading(true);\n        setError(null);\n\n         \n        if (__DEV__)\n          console.warn(\n            '[_useUserSubscriptions] Fetching subscriptions for user:',\n            user.id,\n          );\n\n        /* --------------------------------------------------------------\n         * Subscription info lives in the `profiles` table, not a separate\n         * `user_subscriptions` table. We fetch the three relevant columns\n         * and map them to an array with one element so existing screens\n         * that expect `subscriptions.find(...)` keep working.\n         * -------------------------------------------------------------- */\n        const { data, error: supabaseError } = await supabase\n          .from('profiles')\n          .select('subscription_status, subscription_expiry, account_type')\n          .eq('id', user.id)\n          .single();\n\n        // Handle Supabase error\n        if (supabaseError) {\n          console.error('[_useUserSubscriptions] Error fetching subscriptions:', supabaseError);\n          throw new Error(supabaseError.message || 'Failed to fetch subscription data');\n        }\n\n        // Map the profile row into the shape expected by the UI\n        const mapped = data\n          ? [\n              {\n                status: data.subscription_status,\n                expiry: data.subscription_expiry,\n                accountType: data.account_type,\n              },\n            ]\n          : [];\n\n        setSubscriptions(mapped);\n        if (__DEV__)\n          console.warn(\n            '[_useUserSubscriptions] Fetched subscriptions:',\n            mapped.length,\n          );\n      } catch (err) {\n        console.error('[_useUserSubscriptions] Unexpected error:', err);\n        setError(err instanceof Error ? err : new Error('An unknown error occurred'));\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchSubscriptions();\n  }, [user]); // Re-fetch when user changes\n\n  return { subscriptions, isLoading, error };\n};\n"],"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","ignoreList":[]}