{"version":3,"names":["supabase","refreshUserSession","UserRole","IS_TEST_MODE","cov_tania2nji","s","normalizeRole","role","f","b","lower","toLowerCase","Object","values","includes","Action","ROLE_PERMISSIONS","_defineProperty","ATTENDEE","Set","SEND_DM","RECEIVE_DM","REPLY_DM","DEALER","DEALER_PARTICIPATION","MVP_DEALER","SEND_BROADCAST","PREMIUM_FEATURE","SHOW_ORGANIZER","MANAGE_SHOWS","MODERATE_MESSAGE","canPerformAction","userRole","action","allowed","has","canSendDirectMessage","senderRole","recipientRole","canReplyToMessage","canSendBroadcast","canModerateMessages","getUserRole","_ref2","_asyncToGenerator","userId","_ref3","from","select","eq","single","data","error","console","_x","apply","arguments","getUserProfile","_ref4","_ref5","_x2","canUserSendMessage","SEND_MESSAGE","canUserReceiveMessage","RECEIVE_MESSAGE","hasRole","requiredRole","hasAnyRole","requiredRoles","canManageShows","canParticipateAsDealer","hasPremiumFeatures","needsUpgrade","canContactUser","currentUserRole","targetUserRole","updateUserRole","_ref6","_x3"],"sources":["userRoleService.ts"],"sourcesContent":["import { supabase } from '../supabase';\nimport { refreshUserSession } from './sessionService';\nimport { UserRole } from '../types';\nexport { UserRole } from '../types'; // backward-compat re-export\n\n/**\n * Global test-mode flag.\n *\n * KEEP THIS **FALSE** IN PRODUCTION.\n * Can be overridden at runtime by setting\n *   globalThis.CSF_IS_TEST_MODE = true\n * during e2e / unit tests.\n */\n// NOTE: changing this to **const** prevents runtime overrides in production.\nexport const IS_TEST_MODE = false;\n\n\n/* ------------------------------------------------------------------\n * Utility helpers\n * ------------------------------------------------------------------ */\n\n/**\n * Normalises a role string coming from the database (often lowercase)\n * to the corresponding uppercase `UserRole` enum value.\n * Returns `null` if it cannot be mapped.\n */\nexport const normalizeRole = (role?: string | null): UserRole | null => {\n  if (!role) return null;\n  const lower = role.toLowerCase() as UserRole;\n  return (Object.values(UserRole) as string[]).includes(lower) ? lower : null;\n};\n\n/* ------------------------------------------------------------------\n * Permission Matrix\n * ------------------------------------------------------------------ */\n\n/**\n * Discrete actions in the system that can be gated by role.\n * Extend this enum as new features are added.\n */\nexport enum Action {\n  SEND_DM = 'SEND_DM',\n  RECEIVE_DM = 'RECEIVE_DM',\n  REPLY_DM = 'REPLY_DM',\n  /**\n   * Generic, non-UI message actions used elsewhere in the codebase.\n   * These are aliases for the more specific DM actions above but are\n   * referenced by helper utilities (e.g. `canUserSendMessage`).\n   * Keeping both spellings prevents brittle runtime errors when new\n   * modules are introduced that rely on the generic names.\n   */\n  SEND_MESSAGE = 'SEND_MESSAGE',\n  RECEIVE_MESSAGE = 'RECEIVE_MESSAGE',\n  SEND_BROADCAST = 'SEND_BROADCAST',\n  MANAGE_SHOWS = 'MANAGE_SHOWS', // create / edit show listings\n  DEALER_PARTICIPATION = 'DEALER_PARTICIPATION',\n  PREMIUM_FEATURE = 'PREMIUM_FEATURE',\n  MODERATE_MESSAGE = 'MODERATE_MESSAGE',\n}\n\n/**\n * Mapping of role â‡’ allowed action set.\n * NOTE: keep this in sync with product requirements.\n */\nconst ROLE_PERMISSIONS: Record<UserRole, Set<Action>> = {\n  [UserRole.ATTENDEE]: new Set<Action>([\n    Action.SEND_DM,\n    Action.RECEIVE_DM,\n    Action.REPLY_DM,\n  ]),\n  [UserRole.DEALER]: new Set<Action>([\n    Action.RECEIVE_DM,\n    Action.DEALER_PARTICIPATION,\n  ]),\n  [UserRole.MVP_DEALER]: new Set<Action>([\n    Action.SEND_DM,\n    Action.RECEIVE_DM,\n    Action.REPLY_DM,\n    Action.SEND_BROADCAST,\n    Action.DEALER_PARTICIPATION,\n    Action.PREMIUM_FEATURE,\n  ]),\n  [UserRole.SHOW_ORGANIZER]: new Set<Action>([\n    Action.SEND_DM,\n    Action.RECEIVE_DM,\n    Action.REPLY_DM,\n    Action.SEND_BROADCAST,\n    Action.MANAGE_SHOWS,\n    Action.DEALER_PARTICIPATION,\n    Action.PREMIUM_FEATURE,\n    Action.MODERATE_MESSAGE,\n  ]),\n};\n\n/**\n * Generic permission checker.\n * @param userRole   caller's role\n * @param action     action to check\n */\nexport const canPerformAction = (userRole: UserRole, action: Action): boolean => {\n  if (IS_TEST_MODE) return true;\n  const allowed = ROLE_PERMISSIONS[userRole];\n  return allowed ? allowed.has(action) : false;\n};\n\n/* ------------------------------------------------------------------\n * Messaging-specific helpers\n * ------------------------------------------------------------------ */\n\n/**\n * Checks if a sender can initiate a DM to a recipient\n * (show validation must be handled by caller when needed).\n */\nexport const canSendDirectMessage = (\n  senderRole: UserRole,\n  recipientRole: UserRole\n): boolean => {\n  if (IS_TEST_MODE) return true;\n\n  switch (senderRole) {\n    case UserRole.ATTENDEE:\n      return recipientRole === UserRole.MVP_DEALER;\n    case UserRole.MVP_DEALER:\n      return (\n        recipientRole === UserRole.ATTENDEE ||\n        recipientRole === UserRole.DEALER ||\n        recipientRole === UserRole.SHOW_ORGANIZER\n      );\n    case UserRole.SHOW_ORGANIZER:\n      return true; // can DM anyone\n    default:\n      return false;\n  }\n};\n\n/**\n * Dealers are read-only, everyone else can reply.\n */\nexport const canReplyToMessage = (userRole: UserRole): boolean => {\n  if (IS_TEST_MODE) return true;\n  return userRole !== UserRole.DEALER;\n};\n\n/**\n * Broadcast: MVP dealer (attendees only) or organizer (quota enforced server-side)\n */\nexport const canSendBroadcast = (userRole: UserRole): boolean => {\n  if (IS_TEST_MODE) return true;\n  return (\n    userRole === UserRole.MVP_DEALER ||\n    userRole === UserRole.SHOW_ORGANIZER\n  );\n};\n\n/**\n * Show organizers (for their shows) & admins (handled elsewhere) can moderate.\n */\nexport const canModerateMessages = (userRole: UserRole): boolean => {\n  if (IS_TEST_MODE) return true;\n  return userRole === UserRole.SHOW_ORGANIZER;\n};\n\n/**\n * Fetches a user's role from the profiles table.\n * @param userId The ID of the user.\n * @returns The user's role as a string, or null if not found/error.\n */\nexport const getUserRole = async (userId: string): Promise<UserRole | null> => {\n  try {\n    const { data, error } = await supabase\n      .from('profiles')\n      .select('role')\n      .eq('id', userId)\n      .single();\n\n    if (error) {\n      console.error('Error fetching user role:', error);\n      return null;\n    }\n\n    return normalizeRole(data?.role);\n  } catch (error) {\n    console.error('Exception in getUserRole:', error);\n    return null;\n  }\n};\n\n/**\n * Get user profile by ID.\n * @param userId User ID to lookup\n * @returns User profile information or null\n */\nexport const getUserProfile = async (userId: string) => {\n  try {\n    const { data, error } = await supabase\n      .from('profiles')\n      .select('id, _username, full_name, avatar_url, role')\n      .eq('id', userId)\n      .single();\n      \n    if (error) {\n      console.error('Error fetching user profile:', error);\n      return null;\n    }\n    \n    return data;\n  } catch (error) {\n    console.error('Exception in getUserProfile:', error);\n    return null;\n  }\n};\n\n/**\n * Checks if a user can send messages.\n * In our current system, all users can send messages.\n * @param userRole The role of the user.\n * @returns True if the user can send messages, false otherwise.\n */\nexport const canUserSendMessage = (userRole: UserRole): boolean => {\n  return canPerformAction(userRole, Action.SEND_MESSAGE);\n};\n\n/**\n * Checks if a user can receive messages.\n * Only MVP_DEALER and SHOW_ORGANIZER can receive messages in production.\n * @param userRole The role of the user.\n * @returns True if the user can receive messages, false otherwise.\n */\nexport const canUserReceiveMessage = (userRole: UserRole): boolean => {\n  return canPerformAction(userRole, Action.RECEIVE_MESSAGE);\n};\n\n/**\n * Provides a general function to check if a user has a specific role.\n * @param userRole The role of the user.\n * @param requiredRole The role required for the action.\n * @returns True if the user has the required role, false otherwise.\n */\nexport const hasRole = (userRole: UserRole, requiredRole: UserRole): boolean => {\n  if (IS_TEST_MODE) {\n    return true; // Bypass role checks in test mode\n  }\n  return userRole === requiredRole;\n};\n\n/**\n * Provides a general function to check if a user has one of several roles.\n * @param userRole The role of the user.\n * @param requiredRoles An array of roles, at least one of which the user must have.\n * @returns True if the user has any of the required roles, false otherwise.\n */\nexport const hasAnyRole = (userRole: UserRole, requiredRoles: UserRole[]): boolean => {\n  if (IS_TEST_MODE) {\n    return true; // Bypass role checks in test mode\n  }\n  return requiredRoles.includes(userRole);\n};\n\n/**\n * Checks if a user can create or edit show listings.\n * Only SHOW_ORGANIZER role can manage show listings.\n * @param userRole The role of the user.\n * @returns True if the user can manage show listings, false otherwise.\n */\nexport const canManageShows = (userRole: UserRole): boolean => {\n  return canPerformAction(userRole, Action.MANAGE_SHOWS);\n};\n\n/**\n * Checks if a user can participate as a dealer in shows.\n * DEALER, MVP_DEALER, and SHOW_ORGANIZER roles can participate as dealers.\n * @param userRole The role of the user.\n * @returns True if the user can participate as a dealer, false otherwise.\n */\nexport const canParticipateAsDealer = (userRole: UserRole): boolean => {\n  return canPerformAction(userRole, Action.DEALER_PARTICIPATION);\n};\n\n/**\n * Checks if a user has premium features.\n * MVP_DEALER and SHOW_ORGANIZER have premium features.\n * @param userRole The role of the user.\n * @returns True if the user has premium features, false otherwise.\n */\nexport const hasPremiumFeatures = (userRole: UserRole): boolean => {\n  return canPerformAction(userRole, Action.PREMIUM_FEATURE);\n};\n\n/**\n * Checks if a user needs to upgrade to access certain features.\n * ATTENDEE and DEALER roles need to upgrade for premium features.\n * @param userRole The role of the user.\n * @returns True if the user needs to upgrade, false otherwise.\n */\nexport const needsUpgrade = (userRole: UserRole): boolean => {\n  return !hasPremiumFeatures(userRole);\n};\n\n/**\n * Checks if a user can contact another user based on their roles.\n * Used to determine if \"Message\" button should be shown in profiles.\n * @param currentUserRole Role of the current user \n * @param targetUserRole Role of the user to be messaged\n * @returns Boolean indicating if messaging is allowed\n */\nexport const canContactUser = (currentUserRole: UserRole, targetUserRole: UserRole): boolean => {\n  if (IS_TEST_MODE) {\n    return true; // Allow all messaging in test mode\n  }\n  \n  // Check if the target user can receive messages\n  return canUserReceiveMessage(targetUserRole);\n};\n\n/* ------------------------------------------------------------------\n * Session / role synchronisation helpers\n * ------------------------------------------------------------------ */\n\n/**\n * Convenience helper that:\n * 1. Refreshes the session token\n * 2. Fetches the latest role from the database\n *\n * This should be called after any action that might change the user's\n * subscription or role (e.g., _webhook, upgrade flow).\n */\nexport const updateUserRole = async (userId: string): Promise<UserRole | null> => {\n  await refreshUserSession();\n  return getUserRole(userId);\n};\n"],"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","ignoreList":[]}