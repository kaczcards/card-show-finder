e5ac761db782f2c7379870118faf9664
function cov_9tm3ud0sf() {
  var path = "/Users/kevin/card-show-finder/src/utils/postgrest.ts";
  var hash = "a370f3a3b3ac91d52351f2c03961638d4b2c6aa3";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kevin/card-show-finder/src/utils/postgrest.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 12
        },
        end: {
          line: 2,
          column: 46
        }
      },
      "1": {
        start: {
          line: 3,
          column: 2
        },
        end: {
          line: 3,
          column: 34
        }
      },
      "2": {
        start: {
          line: 3,
          column: 22
        },
        end: {
          line: 3,
          column: 34
        }
      },
      "3": {
        start: {
          line: 4,
          column: 12
        },
        end: {
          line: 4,
          column: 62
        }
      },
      "4": {
        start: {
          line: 4,
          column: 23
        },
        end: {
          line: 4,
          column: 61
        }
      },
      "5": {
        start: {
          line: 5,
          column: 2
        },
        end: {
          line: 5,
          column: 28
        }
      },
      "6": {
        start: {
          line: 9,
          column: 2
        },
        end: {
          line: 9,
          column: 62
        }
      },
      "7": {
        start: {
          line: 9,
          column: 34
        },
        end: {
          line: 9,
          column: 62
        }
      },
      "8": {
        start: {
          line: 10,
          column: 2
        },
        end: {
          line: 10,
          column: 90
        }
      },
      "9": {
        start: {
          line: 11,
          column: 2
        },
        end: {
          line: 11,
          column: 50
        }
      },
      "10": {
        start: {
          line: 22,
          column: 2
        },
        end: {
          line: 24,
          column: 3
        }
      },
      "11": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 23,
          column: 46
        }
      },
      "12": {
        start: {
          line: 25,
          column: 2
        },
        end: {
          line: 25,
          column: 15
        }
      }
    },
    fnMap: {
      "0": {
        name: "formatInList",
        decl: {
          start: {
            line: 1,
            column: 16
          },
          end: {
            line: 1,
            column: 28
          }
        },
        loc: {
          start: {
            line: 1,
            column: 79
          },
          end: {
            line: 6,
            column: 1
          }
        },
        line: 1
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 4,
            column: 18
          },
          end: {
            line: 4,
            column: 19
          }
        },
        loc: {
          start: {
            line: 4,
            column: 23
          },
          end: {
            line: 4,
            column: 61
          }
        },
        line: 4
      },
      "2": {
        name: "formatLargeInList",
        decl: {
          start: {
            line: 8,
            column: 16
          },
          end: {
            line: 8,
            column: 33
          }
        },
        loc: {
          start: {
            line: 8,
            column: 101
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 8
      },
      "3": {
        name: "safeOverlaps",
        decl: {
          start: {
            line: 21,
            column: 16
          },
          end: {
            line: 21,
            column: 28
          }
        },
        loc: {
          start: {
            line: 21,
            column: 78
          },
          end: {
            line: 26,
            column: 1
          }
        },
        line: 21
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 3,
            column: 2
          },
          end: {
            line: 3,
            column: 34
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 2
          },
          end: {
            line: 3,
            column: 34
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 3
      },
      "1": {
        loc: {
          start: {
            line: 8,
            column: 76
          },
          end: {
            line: 8,
            column: 91
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 8,
            column: 88
          },
          end: {
            line: 8,
            column: 91
          }
        }],
        line: 8
      },
      "2": {
        loc: {
          start: {
            line: 9,
            column: 2
          },
          end: {
            line: 9,
            column: 62
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 9,
            column: 2
          },
          end: {
            line: 9,
            column: 62
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 9
      },
      "3": {
        loc: {
          start: {
            line: 22,
            column: 2
          },
          end: {
            line: 24,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 2
          },
          end: {
            line: 24,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "4": {
        loc: {
          start: {
            line: 22,
            column: 6
          },
          end: {
            line: 22,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 22,
            column: 6
          },
          end: {
            line: 22,
            column: 24
          }
        }, {
          start: {
            line: 22,
            column: 28
          },
          end: {
            line: 22,
            column: 42
          }
        }],
        line: 22
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a370f3a3b3ac91d52351f2c03961638d4b2c6aa3"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_9tm3ud0sf = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_9tm3ud0sf();
export function formatInList(values) {
  cov_9tm3ud0sf().f[0]++;
  var v = (cov_9tm3ud0sf().s[0]++, values.filter(Boolean));
  cov_9tm3ud0sf().s[1]++;
  if (v.length === 0) {
    cov_9tm3ud0sf().b[0][0]++;
    cov_9tm3ud0sf().s[2]++;
    return '()';
  } else {
    cov_9tm3ud0sf().b[0][1]++;
  }
  var f = (cov_9tm3ud0sf().s[3]++, v.map(function (x) {
    cov_9tm3ud0sf().f[1]++;
    cov_9tm3ud0sf().s[4]++;
    return `"${String(x).replace(/\"/g, '\\"')}"`;
  }));
  cov_9tm3ud0sf().s[5]++;
  return `(${f.join(',')})`;
}
export function formatLargeInList(values) {
  var chunkSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (cov_9tm3ud0sf().b[1][0]++, 100);
  cov_9tm3ud0sf().f[2]++;
  cov_9tm3ud0sf().s[6]++;
  if (values.length <= chunkSize) {
    cov_9tm3ud0sf().b[2][0]++;
    cov_9tm3ud0sf().s[7]++;
    return formatInList(values);
  } else {
    cov_9tm3ud0sf().b[2][1]++;
  }
  cov_9tm3ud0sf().s[8]++;
  console.warn(`[postgrest] Large array (${values.length}) used with formatLargeInList.`);
  cov_9tm3ud0sf().s[9]++;
  return formatInList(values.slice(0, chunkSize));
}
export function safeOverlaps(query, column, arr) {
  cov_9tm3ud0sf().f[3]++;
  cov_9tm3ud0sf().s[10]++;
  if ((cov_9tm3ud0sf().b[4][0]++, Array.isArray(arr)) && (cov_9tm3ud0sf().b[4][1]++, arr.length > 0)) {
    cov_9tm3ud0sf().b[3][0]++;
    cov_9tm3ud0sf().s[11]++;
    return query.overlaps(column, arr);
  } else {
    cov_9tm3ud0sf().b[3][1]++;
  }
  cov_9tm3ud0sf().s[12]++;
  return query;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmb3JtYXRJbkxpc3QiLCJ2YWx1ZXMiLCJjb3ZfOXRtM3VkMHNmIiwiZiIsInYiLCJzIiwiZmlsdGVyIiwiQm9vbGVhbiIsImxlbmd0aCIsImIiLCJtYXAiLCJ4IiwiU3RyaW5nIiwicmVwbGFjZSIsImpvaW4iLCJmb3JtYXRMYXJnZUluTGlzdCIsImNodW5rU2l6ZSIsImFyZ3VtZW50cyIsInVuZGVmaW5lZCIsImNvbnNvbGUiLCJ3YXJuIiwic2xpY2UiLCJzYWZlT3ZlcmxhcHMiLCJxdWVyeSIsImNvbHVtbiIsImFyciIsIkFycmF5IiwiaXNBcnJheSIsIm92ZXJsYXBzIl0sInNvdXJjZXMiOlsicG9zdGdyZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBmb3JtYXRJbkxpc3QodmFsdWVzOiBBcnJheTxzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkPik6IHN0cmluZyB7XG4gIGNvbnN0IHYgPSB2YWx1ZXMuZmlsdGVyKEJvb2xlYW4pIGFzIHN0cmluZ1tdO1xuICBpZiAodi5sZW5ndGggPT09IDApIHJldHVybiAnKCknO1xuICBjb25zdCBmID0gdi5tYXAoeCA9PiBgXCIke1N0cmluZyh4KS5yZXBsYWNlKC9cXFwiL2csICdcXFxcXCInKX1cImApO1xuICByZXR1cm4gYCgke2Yuam9pbignLCcpfSlgO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0TGFyZ2VJbkxpc3QodmFsdWVzOiBBcnJheTxzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkPiwgY2h1bmtTaXplID0gMTAwKTogc3RyaW5nIHtcbiAgaWYgKHZhbHVlcy5sZW5ndGggPD0gY2h1bmtTaXplKSByZXR1cm4gZm9ybWF0SW5MaXN0KHZhbHVlcyk7XG4gIGNvbnNvbGUud2FybihgW3Bvc3RncmVzdF0gTGFyZ2UgYXJyYXkgKCR7dmFsdWVzLmxlbmd0aH0pIHVzZWQgd2l0aCBmb3JtYXRMYXJnZUluTGlzdC5gKTtcbiAgcmV0dXJuIGZvcm1hdEluTGlzdCh2YWx1ZXMuc2xpY2UoMCwgY2h1bmtTaXplKSk7XG59XG5cbi8qKlxuICogU2FmZWx5IGFwcGx5IGEgUG9zdGdSRVNUIGBvdmVybGFwc2AgZmlsdGVyIG9ubHkgd2hlbiB0aGUgYXJyYXkgaXMgbm9uLWVtcHR5LlxuICogUmV0dXJucyB0aGUgb3JpZ2luYWwgcXVlcnkgdW5jaGFuZ2VkIHdoZW4gdGhlIGFycmF5IGlzIGVtcHR5IC8gbnVsbCAvIHVuZGVmaW5lZC5cbiAqXG4gKiBFeGFtcGxlOlxuICogICBxdWVyeSA9IHNhZmVPdmVybGFwcyhxdWVyeSwgJ2NhdGVnb3JpZXMnLCBzZWxlY3RlZENhdGVnb3JpZXMpO1xuICovXG5leHBvcnQgZnVuY3Rpb24gc2FmZU92ZXJsYXBzPFQ+KHF1ZXJ5OiBhbnksIGNvbHVtbjogc3RyaW5nLCBhcnI/OiBUW10gfCBudWxsKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikgJiYgYXJyLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gcXVlcnkub3ZlcmxhcHMoY29sdW1uLCBhcnIgYXMgYW55KTtcbiAgfVxuICByZXR1cm4gcXVlcnk7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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