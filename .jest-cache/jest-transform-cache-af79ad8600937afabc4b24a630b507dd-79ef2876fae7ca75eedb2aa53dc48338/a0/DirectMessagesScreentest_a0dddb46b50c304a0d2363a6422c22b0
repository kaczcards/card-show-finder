7695b6a11927c1dd86e390e4dc3f4d80
_getJestObj().mock('../../../src/contexts/AuthContext', function () {
  return {
    useAuth: jest.fn()
  };
});
_getJestObj().mock('../../../src/components/Chat', function () {
  return {
    ChatList: jest.fn(function () {
      return null;
    })
  };
});
_getJestObj().mock('../../../src/supabase', function () {
  return {
    supabase: {
      from: jest.fn(function () {
        return {
          select: jest.fn(function () {
            return {
              eq: jest.fn(function () {
                return {
                  single: jest.fn(function () {
                    return Promise.resolve({
                      data: {
                        id: 'user-1',
                        username: 'testuser',
                        role: 'attendee'
                      },
                      error: null
                    });
                  })
                };
              })
            };
          })
        };
      })
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _DirectMessagesScreen = _interopRequireDefault(require("../../../src/screens/Messages/DirectMessagesScreen"));
var _AuthContext = require("../../../src/contexts/AuthContext");
var _Chat = require("../../../src/components/Chat");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockNavigation = {
  navigate: jest.fn(),
  setOptions: jest.fn()
};
var mockRoute = {
  params: {}
};
describe('DirectMessagesScreen', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _AuthContext.useAuth.mockReturnValue({
      authState: {
        user: {
          id: 'user-1',
          email: 'test@example.com'
        }
      }
    });
    mockRoute.params = {};
  });
  test('renders correctly when user is logged in', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_DirectMessagesScreen.default, {
        navigation: mockNavigation,
        route: mockRoute
      })),
      getByText = _render.getByText;
    expect(getByText('Messages')).toBeTruthy();
  });
  test('renders sign in message when user is not logged in', function () {
    _AuthContext.useAuth.mockReturnValue({
      authState: {
        user: null
      }
    });
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_DirectMessagesScreen.default, {
        navigation: mockNavigation,
        route: mockRoute
      })),
      getByText = _render2.getByText;
    expect(getByText('Please sign in to use messages')).toBeTruthy();
    expect(getByText('Sign In')).toBeTruthy();
  });
  test('navigates to Profile when Sign In button is pressed', function () {
    _AuthContext.useAuth.mockReturnValue({
      authState: {
        user: null
      }
    });
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_DirectMessagesScreen.default, {
        navigation: mockNavigation,
        route: mockRoute
      })),
      getByText = _render3.getByText;
    _reactNative.fireEvent.press(getByText('Sign In'));
    expect(mockNavigation.navigate).toHaveBeenCalledWith('Profile');
  });
  test('renders new conversation UI when showNewConversation is true', (0, _asyncToGenerator2.default)(function* () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_DirectMessagesScreen.default, {
        navigation: mockNavigation,
        route: {
          params: {
            isNewConversation: true
          }
        }
      })),
      getByText = _render4.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('New Message')).toBeTruthy();
      expect(getByText('Back to Messages')).toBeTruthy();
    });
  }));
  test('passes stable function props to ChatList (wrapped in useCallback)', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_DirectMessagesScreen.default, {
        navigation: mockNavigation,
        route: mockRoute
      })),
      rerender = _render5.rerender;
    var firstRenderProps = _Chat.ChatList.mock.calls[0][0];
    var firstHandleSelectConversation = firstRenderProps.onSelectConversation;
    var firstHandleCreateNewConversation = firstRenderProps.onCreateNewConversation;
    rerender((0, _jsxRuntime.jsx)(_DirectMessagesScreen.default, {
      navigation: mockNavigation,
      route: mockRoute
    }));
    var secondRenderProps = _Chat.ChatList.mock.calls[1][0];
    var secondHandleSelectConversation = secondRenderProps.onSelectConversation;
    var secondHandleCreateNewConversation = secondRenderProps.onCreateNewConversation;
    expect(secondHandleSelectConversation).toBe(firstHandleSelectConversation);
    expect(secondHandleCreateNewConversation).toBe(firstHandleCreateNewConversation);
  });
  test('handleSelectConversation updates navigation title correctly', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_DirectMessagesScreen.default, {
      navigation: mockNavigation,
      route: mockRoute
    }));
    var chatListProps = _Chat.ChatList.mock.calls[0][0];
    var handleSelectConversation = chatListProps.onSelectConversation;
    var mockConversation = {
      id: 'convo-1',
      participants: [{
        user_id: 'user-2',
        display_name: 'John Doe'
      }]
    };
    handleSelectConversation(mockConversation);
    expect(mockNavigation.setOptions).toHaveBeenCalledWith({
      title: 'John Doe'
    });
  });
  test('handleSelectConversation uses fallback title when display_name is missing', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_DirectMessagesScreen.default, {
      navigation: mockNavigation,
      route: mockRoute
    }));
    var chatListProps = _Chat.ChatList.mock.calls[0][0];
    var handleSelectConversation = chatListProps.onSelectConversation;
    var mockConversation = {
      id: 'convo-1',
      participants: [{
        user_id: 'user-2'
      }]
    };
    handleSelectConversation(mockConversation);
    expect(mockNavigation.setOptions).toHaveBeenCalledWith({
      title: 'Conversation'
    });
  });
  test('handleCreateNewConversation sets showNewConversation to true', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_DirectMessagesScreen.default, {
        navigation: mockNavigation,
        route: mockRoute
      })),
      queryByText = _render6.queryByText;
    expect(queryByText('New Message')).toBeFalsy();
    var chatListProps = _Chat.ChatList.mock.calls[0][0];
    var handleCreateNewConversation = chatListProps.onCreateNewConversation;
    handleCreateNewConversation();
    expect(queryByText('New Message')).toBeTruthy();
  });
  test('functions remain stable even when props change', function () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_DirectMessagesScreen.default, {
        navigation: mockNavigation,
        route: mockRoute
      })),
      rerender = _render7.rerender;
    var firstRenderProps = _Chat.ChatList.mock.calls[0][0];
    var firstHandleSelectConversation = firstRenderProps.onSelectConversation;
    var updatedNavigation = Object.assign({}, mockNavigation, {
      addListener: jest.fn()
    });
    rerender((0, _jsxRuntime.jsx)(_DirectMessagesScreen.default, {
      navigation: updatedNavigation,
      route: mockRoute
    }));
    var secondRenderProps = _Chat.ChatList.mock.calls[1][0];
    var secondHandleSelectConversation = secondRenderProps.onSelectConversation;
    expect(secondRenderProps.onCreateNewConversation).toBe(firstRenderProps.onCreateNewConversation);
    if (updatedNavigation === mockNavigation) {
      expect(secondHandleSelectConversation).toBe(firstHandleSelectConversation);
    } else {
      expect(secondHandleSelectConversation).not.toBe(firstHandleSelectConversation);
    }
  });
  test('initialConversationId is passed correctly to ChatList', function () {
    var conversationId = 'test-conversation-id';
    mockRoute.params = {
      conversationId: conversationId
    };
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_DirectMessagesScreen.default, {
      navigation: mockNavigation,
      route: mockRoute
    }));
    var chatListProps = _Chat.ChatList.mock.calls[0][0];
    expect(chatListProps.initialConversationId).toBe(conversationId);
  });
  test('debug panel toggles when debug button is pressed', function () {
    var _getByText$parentElem;
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_DirectMessagesScreen.default, {
        navigation: mockNavigation,
        route: mockRoute
      })),
      getByText = _render8.getByText,
      queryByText = _render8.queryByText;
    expect(queryByText('Debug Info')).toBeFalsy();
    var debugButton = (_getByText$parentElem = getByText('Messages').parentElement) == null ? void 0 : _getByText$parentElem.querySelector('TouchableOpacity');
    _reactNative.fireEvent.press(debugButton);
    expect(queryByText('Debug Info')).toBeTruthy();
    _reactNative.fireEvent.press(debugButton);
    expect(queryByText('Debug Info')).toBeFalsy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,