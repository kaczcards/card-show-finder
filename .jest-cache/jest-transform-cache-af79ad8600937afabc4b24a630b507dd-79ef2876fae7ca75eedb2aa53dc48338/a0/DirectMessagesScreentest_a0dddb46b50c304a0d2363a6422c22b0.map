{"version":3,"names":["_getJestObj","mock","useAuth","jest","fn","ChatList","supabase","from","select","eq","single","Promise","resolve","data","id","username","role","error","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_DirectMessagesScreen","_AuthContext","_Chat","_jsxRuntime","_require","mockNavigation","navigate","setOptions","mockRoute","params","describe","beforeEach","clearAllMocks","mockReturnValue","authState","user","email","test","_render","render","jsx","default","navigation","route","getByText","expect","toBeTruthy","_render2","_render3","fireEvent","press","toHaveBeenCalledWith","_render4","isNewConversation","waitFor","_render5","rerender","firstRenderProps","calls","firstHandleSelectConversation","onSelectConversation","firstHandleCreateNewConversation","onCreateNewConversation","secondRenderProps","secondHandleSelectConversation","secondHandleCreateNewConversation","toBe","chatListProps","handleSelectConversation","mockConversation","participants","user_id","display_name","title","_render6","queryByText","toBeFalsy","handleCreateNewConversation","_render7","updatedNavigation","Object","assign","addListener","not","conversationId","initialConversationId","_getByText$parentElem","_render8","debugButton","parentElement","querySelector"],"sources":["DirectMessagesScreen.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, fireEvent, waitFor } from '@testing-library/react-native';\nimport DirectMessagesScreen from '../../../src/screens/Messages/DirectMessagesScreen';\nimport { useAuth } from '../../../src/contexts/AuthContext';\nimport { ChatList } from '../../../src/components/Chat';\n\n// Mock the dependencies\njest.mock('../../../src/contexts/AuthContext', () => ({\n  useAuth: jest.fn(),\n}));\n\njest.mock('../../../src/components/Chat', () => ({\n  ChatList: jest.fn(() => null),\n}));\n\njest.mock('../../../src/supabase', () => ({\n  supabase: {\n    from: jest.fn(() => ({\n      select: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          single: jest.fn(() => Promise.resolve({ data: { id: 'user-1', username: 'testuser', role: 'attendee' }, error: null })),\n        })),\n      })),\n    })),\n  },\n}));\n\n// Navigation mock\nconst mockNavigation = {\n  navigate: jest.fn(),\n  setOptions: jest.fn(),\n};\n\n// Route params mock\nconst mockRoute = {\n  params: {},\n};\n\ndescribe('DirectMessagesScreen', () => {\n  // Reset mocks before each test\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Default auth mock implementation\n    (useAuth as jest.Mock).mockReturnValue({\n      authState: {\n        user: { id: 'user-1', email: 'test@example.com' },\n      },\n    });\n    \n    // Reset route params\n    mockRoute.params = {};\n  });\n\n  test('renders correctly when user is logged in', () => {\n    const { getByText } = render(\n      <DirectMessagesScreen navigation={mockNavigation} route={mockRoute} />\n    );\n    \n    expect(getByText('Messages')).toBeTruthy();\n  });\n\n  test('renders sign in message when user is not logged in', () => {\n    (useAuth as jest.Mock).mockReturnValue({\n      authState: { user: null },\n    });\n    \n    const { getByText } = render(\n      <DirectMessagesScreen navigation={mockNavigation} route={mockRoute} />\n    );\n    \n    expect(getByText('Please sign in to use messages')).toBeTruthy();\n    expect(getByText('Sign In')).toBeTruthy();\n  });\n\n  test('navigates to Profile when Sign In button is pressed', () => {\n    (useAuth as jest.Mock).mockReturnValue({\n      authState: { user: null },\n    });\n    \n    const { getByText } = render(\n      <DirectMessagesScreen navigation={mockNavigation} route={mockRoute} />\n    );\n    \n    fireEvent.press(getByText('Sign In'));\n    expect(mockNavigation.navigate).toHaveBeenCalledWith('Profile');\n  });\n\n  test('renders new conversation UI when showNewConversation is true', async () => {\n    const { getByText } = render(\n      <DirectMessagesScreen navigation={mockNavigation} route={{ params: { isNewConversation: true } }} />\n    );\n    \n    await waitFor(() => {\n      expect(getByText('New Message')).toBeTruthy();\n      expect(getByText('Back to Messages')).toBeTruthy();\n    });\n  });\n\n  test('passes stable function props to ChatList (wrapped in useCallback)', () => {\n    // First render\n    const { rerender } = render(\n      <DirectMessagesScreen navigation={mockNavigation} route={mockRoute} />\n    );\n    \n    // Get the props passed to ChatList on first render\n    const firstRenderProps = (ChatList as jest.Mock).mock.calls[0][0];\n    const firstHandleSelectConversation = firstRenderProps.onSelectConversation;\n    const firstHandleCreateNewConversation = firstRenderProps.onCreateNewConversation;\n    \n    // Force a re-render\n    rerender(\n      <DirectMessagesScreen navigation={mockNavigation} route={mockRoute} />\n    );\n    \n    // Get the props passed to ChatList on second render\n    const secondRenderProps = (ChatList as jest.Mock).mock.calls[1][0];\n    const secondHandleSelectConversation = secondRenderProps.onSelectConversation;\n    const secondHandleCreateNewConversation = secondRenderProps.onCreateNewConversation;\n    \n    // If the functions are wrapped in useCallback, they should maintain referential equality\n    expect(secondHandleSelectConversation).toBe(firstHandleSelectConversation);\n    expect(secondHandleCreateNewConversation).toBe(firstHandleCreateNewConversation);\n  });\n\n  test('handleSelectConversation updates navigation title correctly', () => {\n    // Render the component\n    render(\n      <DirectMessagesScreen navigation={mockNavigation} route={mockRoute} />\n    );\n    \n    // Get the onSelectConversation function passed to ChatList\n    const chatListProps = (ChatList as jest.Mock).mock.calls[0][0];\n    const handleSelectConversation = chatListProps.onSelectConversation;\n    \n    // Call the function with a mock conversation\n    const mockConversation = {\n      id: 'convo-1',\n      participants: [\n        {\n          user_id: 'user-2',\n          display_name: 'John Doe',\n        },\n      ],\n    };\n    handleSelectConversation(mockConversation);\n    \n    // Check if navigation.setOptions was called with the correct title\n    expect(mockNavigation.setOptions).toHaveBeenCalledWith({\n      title: 'John Doe',\n    });\n  });\n\n  test('handleSelectConversation uses fallback title when display_name is missing', () => {\n    // Render the component\n    render(\n      <DirectMessagesScreen navigation={mockNavigation} route={mockRoute} />\n    );\n    \n    // Get the onSelectConversation function passed to ChatList\n    const chatListProps = (ChatList as jest.Mock).mock.calls[0][0];\n    const handleSelectConversation = chatListProps.onSelectConversation;\n    \n    // Call the function with a mock conversation that has no display_name\n    const mockConversation = {\n      id: 'convo-1',\n      participants: [\n        {\n          user_id: 'user-2',\n          // No display_name\n        },\n      ],\n    };\n    handleSelectConversation(mockConversation);\n    \n    // Check if navigation.setOptions was called with the fallback title\n    expect(mockNavigation.setOptions).toHaveBeenCalledWith({\n      title: 'Conversation',\n    });\n  });\n\n  test('handleCreateNewConversation sets showNewConversation to true', () => {\n    // Render the component\n    const { queryByText } = render(\n      <DirectMessagesScreen navigation={mockNavigation} route={mockRoute} />\n    );\n    \n    // Initially, the new message UI should not be visible\n    expect(queryByText('New Message')).toBeFalsy();\n    \n    // Get the onCreateNewConversation function passed to ChatList\n    const chatListProps = (ChatList as jest.Mock).mock.calls[0][0];\n    const handleCreateNewConversation = chatListProps.onCreateNewConversation;\n    \n    // Call the function\n    handleCreateNewConversation();\n    \n    // Now the new message UI should be visible\n    expect(queryByText('New Message')).toBeTruthy();\n  });\n\n  test('functions remain stable even when props change', () => {\n    // First render with initial route\n    const { rerender } = render(\n      <DirectMessagesScreen \n        navigation={mockNavigation} \n        route={mockRoute} \n      />\n    );\n    \n    // Get the props passed to ChatList on first render\n    const firstRenderProps = (ChatList as jest.Mock).mock.calls[0][0];\n    const firstHandleSelectConversation = firstRenderProps.onSelectConversation;\n    \n    // Change the navigation prop\n    const updatedNavigation = {\n      ...mockNavigation,\n      addListener: jest.fn(),\n    };\n    \n    // Re-render with different navigation prop\n    rerender(\n      <DirectMessagesScreen \n        navigation={updatedNavigation} \n        route={mockRoute} \n      />\n    );\n    \n    // Get the props passed to ChatList on second render\n    const secondRenderProps = (ChatList as jest.Mock).mock.calls[1][0];\n    const secondHandleSelectConversation = secondRenderProps.onSelectConversation;\n    \n    // The onCreateNewConversation function should remain stable (no dependencies)\n    expect(secondRenderProps.onCreateNewConversation).toBe(firstRenderProps.onCreateNewConversation);\n    \n    // The onSelectConversation function might change because it depends on navigation\n    // But this test verifies our implementation is correct either way\n    if (updatedNavigation === mockNavigation) {\n      // If navigation reference is the same, function should be the same\n      expect(secondHandleSelectConversation).toBe(firstHandleSelectConversation);\n    } else {\n      // If navigation reference changed, function might change too (due to dependency)\n      // This is expected behavior with useCallback when dependencies change\n      expect(secondHandleSelectConversation).not.toBe(firstHandleSelectConversation);\n    }\n  });\n\n  test('initialConversationId is passed correctly to ChatList', () => {\n    // Set up route with initialConversationId\n    const conversationId = 'test-conversation-id';\n    mockRoute.params = { conversationId };\n    \n    // Render the component\n    render(\n      <DirectMessagesScreen navigation={mockNavigation} route={mockRoute} />\n    );\n    \n    // Check if initialConversationId was passed to ChatList\n    const chatListProps = (ChatList as jest.Mock).mock.calls[0][0];\n    expect(chatListProps.initialConversationId).toBe(conversationId);\n  });\n\n  test('debug panel toggles when debug button is pressed', () => {\n    // Render the component\n    const { getByText, queryByText } = render(\n      <DirectMessagesScreen navigation={mockNavigation} route={mockRoute} />\n    );\n    \n    // Debug panel should not be visible initially\n    expect(queryByText('Debug Info')).toBeFalsy();\n    \n    // Find and press the debug button (it has an icon, so we'll need to find it by its role)\n    const debugButton = getByText('Messages').parentElement?.querySelector('TouchableOpacity');\n    fireEvent.press(debugButton);\n    \n    // Debug panel should now be visible\n    expect(queryByText('Debug Info')).toBeTruthy();\n    \n    // Press the debug button again\n    fireEvent.press(debugButton);\n    \n    // Debug panel should be hidden again\n    expect(queryByText('Debug Info')).toBeFalsy();\n  });\n});\n"],"mappings":"AAOAA,WAAA,GAAKC,IAAI,CAAC,mCAAmC,EAAE;EAAA,OAAO;IACpDC,OAAO,EAAEC,IAAI,CAACC,EAAE,CAAC;EACnB,CAAC;AAAA,CAAC,CAAC;AAEHJ,WAAA,GAAKC,IAAI,CAAC,8BAA8B,EAAE;EAAA,OAAO;IAC/CI,QAAQ,EAAEF,IAAI,CAACC,EAAE,CAAC;MAAA,OAAM,IAAI;IAAA;EAC9B,CAAC;AAAA,CAAC,CAAC;AAEHJ,WAAA,GAAKC,IAAI,CAAC,uBAAuB,EAAE;EAAA,OAAO;IACxCK,QAAQ,EAAE;MACRC,IAAI,EAAEJ,IAAI,CAACC,EAAE,CAAC;QAAA,OAAO;UACnBI,MAAM,EAAEL,IAAI,CAACC,EAAE,CAAC;YAAA,OAAO;cACrBK,EAAE,EAAEN,IAAI,CAACC,EAAE,CAAC;gBAAA,OAAO;kBACjBM,MAAM,EAAEP,IAAI,CAACC,EAAE,CAAC;oBAAA,OAAMO,OAAO,CAACC,OAAO,CAAC;sBAAEC,IAAI,EAAE;wBAAEC,EAAE,EAAE,QAAQ;wBAAEC,QAAQ,EAAE,UAAU;wBAAEC,IAAI,EAAE;sBAAW,CAAC;sBAAEC,KAAK,EAAE;oBAAK,CAAC,CAAC;kBAAA;gBACxH,CAAC;cAAA,CAAC;YACJ,CAAC;UAAA,CAAC;QACJ,CAAC;MAAA,CAAC;IACJ;EACF,CAAC;AAAA,CAAC,CAAC;AAAC,IAAAC,sBAAA,GAAAC,OAAA;AAAA,IAAAC,kBAAA,GAAAF,sBAAA,CAAAC,OAAA;AAzBJ,IAAAE,MAAA,GAAAH,sBAAA,CAAAC,OAAA;AACA,IAAAG,YAAA,GAAAH,OAAA;AACA,IAAAI,qBAAA,GAAAL,sBAAA,CAAAC,OAAA;AACA,IAAAK,YAAA,GAAAL,OAAA;AACA,IAAAM,KAAA,GAAAN,OAAA;AAAwD,IAAAO,WAAA,GAAAP,OAAA;AAAA,SAAAnB,YAAA;EAAA,IAAA2B,QAAA,GAAAR,OAAA;IAAAhB,IAAA,GAAAwB,QAAA,CAAAxB,IAAA;EAAAH,WAAA,YAAAA,YAAA;IAAA,OAAAG,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAwBxD,IAAMyB,cAAc,GAAG;EACrBC,QAAQ,EAAE1B,IAAI,CAACC,EAAE,CAAC,CAAC;EACnB0B,UAAU,EAAE3B,IAAI,CAACC,EAAE,CAAC;AACtB,CAAC;AAGD,IAAM2B,SAAS,GAAG;EAChBC,MAAM,EAAE,CAAC;AACX,CAAC;AAEDC,QAAQ,CAAC,sBAAsB,EAAE,YAAM;EAErCC,UAAU,CAAC,YAAM;IACf/B,IAAI,CAACgC,aAAa,CAAC,CAAC;IAGnBjC,oBAAO,CAAekC,eAAe,CAAC;MACrCC,SAAS,EAAE;QACTC,IAAI,EAAE;UAAExB,EAAE,EAAE,QAAQ;UAAEyB,KAAK,EAAE;QAAmB;MAClD;IACF,CAAC,CAAC;IAGFR,SAAS,CAACC,MAAM,GAAG,CAAC,CAAC;EACvB,CAAC,CAAC;EAEFQ,IAAI,CAAC,0CAA0C,EAAE,YAAM;IACrD,IAAAC,OAAA,GAAsB,IAAAC,mBAAM,EAC1B,IAAAhB,WAAA,CAAAiB,GAAA,EAACpB,qBAAA,CAAAqB,OAAoB;QAACC,UAAU,EAAEjB,cAAe;QAACkB,KAAK,EAAEf;MAAU,CAAE,CACvE,CAAC;MAFOgB,SAAS,GAAAN,OAAA,CAATM,SAAS;IAIjBC,MAAM,CAACD,SAAS,CAAC,UAAU,CAAC,CAAC,CAACE,UAAU,CAAC,CAAC;EAC5C,CAAC,CAAC;EAEFT,IAAI,CAAC,oDAAoD,EAAE,YAAM;IAC9DtC,oBAAO,CAAekC,eAAe,CAAC;MACrCC,SAAS,EAAE;QAAEC,IAAI,EAAE;MAAK;IAC1B,CAAC,CAAC;IAEF,IAAAY,QAAA,GAAsB,IAAAR,mBAAM,EAC1B,IAAAhB,WAAA,CAAAiB,GAAA,EAACpB,qBAAA,CAAAqB,OAAoB;QAACC,UAAU,EAAEjB,cAAe;QAACkB,KAAK,EAAEf;MAAU,CAAE,CACvE,CAAC;MAFOgB,SAAS,GAAAG,QAAA,CAATH,SAAS;IAIjBC,MAAM,CAACD,SAAS,CAAC,gCAAgC,CAAC,CAAC,CAACE,UAAU,CAAC,CAAC;IAChED,MAAM,CAACD,SAAS,CAAC,SAAS,CAAC,CAAC,CAACE,UAAU,CAAC,CAAC;EAC3C,CAAC,CAAC;EAEFT,IAAI,CAAC,qDAAqD,EAAE,YAAM;IAC/DtC,oBAAO,CAAekC,eAAe,CAAC;MACrCC,SAAS,EAAE;QAAEC,IAAI,EAAE;MAAK;IAC1B,CAAC,CAAC;IAEF,IAAAa,QAAA,GAAsB,IAAAT,mBAAM,EAC1B,IAAAhB,WAAA,CAAAiB,GAAA,EAACpB,qBAAA,CAAAqB,OAAoB;QAACC,UAAU,EAAEjB,cAAe;QAACkB,KAAK,EAAEf;MAAU,CAAE,CACvE,CAAC;MAFOgB,SAAS,GAAAI,QAAA,CAATJ,SAAS;IAIjBK,sBAAS,CAACC,KAAK,CAACN,SAAS,CAAC,SAAS,CAAC,CAAC;IACrCC,MAAM,CAACpB,cAAc,CAACC,QAAQ,CAAC,CAACyB,oBAAoB,CAAC,SAAS,CAAC;EACjE,CAAC,CAAC;EAEFd,IAAI,CAAC,8DAA8D,MAAApB,kBAAA,CAAAwB,OAAA,EAAE,aAAY;IAC/E,IAAAW,QAAA,GAAsB,IAAAb,mBAAM,EAC1B,IAAAhB,WAAA,CAAAiB,GAAA,EAACpB,qBAAA,CAAAqB,OAAoB;QAACC,UAAU,EAAEjB,cAAe;QAACkB,KAAK,EAAE;UAAEd,MAAM,EAAE;YAAEwB,iBAAiB,EAAE;UAAK;QAAE;MAAE,CAAE,CACrG,CAAC;MAFOT,SAAS,GAAAQ,QAAA,CAATR,SAAS;IAIjB,MAAM,IAAAU,oBAAO,EAAC,YAAM;MAClBT,MAAM,CAACD,SAAS,CAAC,aAAa,CAAC,CAAC,CAACE,UAAU,CAAC,CAAC;MAC7CD,MAAM,CAACD,SAAS,CAAC,kBAAkB,CAAC,CAAC,CAACE,UAAU,CAAC,CAAC;IACpD,CAAC,CAAC;EACJ,CAAC,EAAC;EAEFT,IAAI,CAAC,mEAAmE,EAAE,YAAM;IAE9E,IAAAkB,QAAA,GAAqB,IAAAhB,mBAAM,EACzB,IAAAhB,WAAA,CAAAiB,GAAA,EAACpB,qBAAA,CAAAqB,OAAoB;QAACC,UAAU,EAAEjB,cAAe;QAACkB,KAAK,EAAEf;MAAU,CAAE,CACvE,CAAC;MAFO4B,QAAQ,GAAAD,QAAA,CAARC,QAAQ;IAKhB,IAAMC,gBAAgB,GAAIvD,cAAQ,CAAeJ,IAAI,CAAC4D,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACjE,IAAMC,6BAA6B,GAAGF,gBAAgB,CAACG,oBAAoB;IAC3E,IAAMC,gCAAgC,GAAGJ,gBAAgB,CAACK,uBAAuB;IAGjFN,QAAQ,CACN,IAAAjC,WAAA,CAAAiB,GAAA,EAACpB,qBAAA,CAAAqB,OAAoB;MAACC,UAAU,EAAEjB,cAAe;MAACkB,KAAK,EAAEf;IAAU,CAAE,CACvE,CAAC;IAGD,IAAMmC,iBAAiB,GAAI7D,cAAQ,CAAeJ,IAAI,CAAC4D,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAClE,IAAMM,8BAA8B,GAAGD,iBAAiB,CAACH,oBAAoB;IAC7E,IAAMK,iCAAiC,GAAGF,iBAAiB,CAACD,uBAAuB;IAGnFjB,MAAM,CAACmB,8BAA8B,CAAC,CAACE,IAAI,CAACP,6BAA6B,CAAC;IAC1Ed,MAAM,CAACoB,iCAAiC,CAAC,CAACC,IAAI,CAACL,gCAAgC,CAAC;EAClF,CAAC,CAAC;EAEFxB,IAAI,CAAC,6DAA6D,EAAE,YAAM;IAExE,IAAAE,mBAAM,EACJ,IAAAhB,WAAA,CAAAiB,GAAA,EAACpB,qBAAA,CAAAqB,OAAoB;MAACC,UAAU,EAAEjB,cAAe;MAACkB,KAAK,EAAEf;IAAU,CAAE,CACvE,CAAC;IAGD,IAAMuC,aAAa,GAAIjE,cAAQ,CAAeJ,IAAI,CAAC4D,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9D,IAAMU,wBAAwB,GAAGD,aAAa,CAACP,oBAAoB;IAGnE,IAAMS,gBAAgB,GAAG;MACvB1D,EAAE,EAAE,SAAS;MACb2D,YAAY,EAAE,CACZ;QACEC,OAAO,EAAE,QAAQ;QACjBC,YAAY,EAAE;MAChB,CAAC;IAEL,CAAC;IACDJ,wBAAwB,CAACC,gBAAgB,CAAC;IAG1CxB,MAAM,CAACpB,cAAc,CAACE,UAAU,CAAC,CAACwB,oBAAoB,CAAC;MACrDsB,KAAK,EAAE;IACT,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFpC,IAAI,CAAC,2EAA2E,EAAE,YAAM;IAEtF,IAAAE,mBAAM,EACJ,IAAAhB,WAAA,CAAAiB,GAAA,EAACpB,qBAAA,CAAAqB,OAAoB;MAACC,UAAU,EAAEjB,cAAe;MAACkB,KAAK,EAAEf;IAAU,CAAE,CACvE,CAAC;IAGD,IAAMuC,aAAa,GAAIjE,cAAQ,CAAeJ,IAAI,CAAC4D,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9D,IAAMU,wBAAwB,GAAGD,aAAa,CAACP,oBAAoB;IAGnE,IAAMS,gBAAgB,GAAG;MACvB1D,EAAE,EAAE,SAAS;MACb2D,YAAY,EAAE,CACZ;QACEC,OAAO,EAAE;MAEX,CAAC;IAEL,CAAC;IACDH,wBAAwB,CAACC,gBAAgB,CAAC;IAG1CxB,MAAM,CAACpB,cAAc,CAACE,UAAU,CAAC,CAACwB,oBAAoB,CAAC;MACrDsB,KAAK,EAAE;IACT,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFpC,IAAI,CAAC,8DAA8D,EAAE,YAAM;IAEzE,IAAAqC,QAAA,GAAwB,IAAAnC,mBAAM,EAC5B,IAAAhB,WAAA,CAAAiB,GAAA,EAACpB,qBAAA,CAAAqB,OAAoB;QAACC,UAAU,EAAEjB,cAAe;QAACkB,KAAK,EAAEf;MAAU,CAAE,CACvE,CAAC;MAFO+C,WAAW,GAAAD,QAAA,CAAXC,WAAW;IAKnB9B,MAAM,CAAC8B,WAAW,CAAC,aAAa,CAAC,CAAC,CAACC,SAAS,CAAC,CAAC;IAG9C,IAAMT,aAAa,GAAIjE,cAAQ,CAAeJ,IAAI,CAAC4D,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9D,IAAMmB,2BAA2B,GAAGV,aAAa,CAACL,uBAAuB;IAGzEe,2BAA2B,CAAC,CAAC;IAG7BhC,MAAM,CAAC8B,WAAW,CAAC,aAAa,CAAC,CAAC,CAAC7B,UAAU,CAAC,CAAC;EACjD,CAAC,CAAC;EAEFT,IAAI,CAAC,gDAAgD,EAAE,YAAM;IAE3D,IAAAyC,QAAA,GAAqB,IAAAvC,mBAAM,EACzB,IAAAhB,WAAA,CAAAiB,GAAA,EAACpB,qBAAA,CAAAqB,OAAoB;QACnBC,UAAU,EAAEjB,cAAe;QAC3BkB,KAAK,EAAEf;MAAU,CAClB,CACH,CAAC;MALO4B,QAAQ,GAAAsB,QAAA,CAARtB,QAAQ;IAQhB,IAAMC,gBAAgB,GAAIvD,cAAQ,CAAeJ,IAAI,CAAC4D,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACjE,IAAMC,6BAA6B,GAAGF,gBAAgB,CAACG,oBAAoB;IAG3E,IAAMmB,iBAAiB,GAAAC,MAAA,CAAAC,MAAA,KAClBxD,cAAc;MACjByD,WAAW,EAAElF,IAAI,CAACC,EAAE,CAAC;IAAC,EACvB;IAGDuD,QAAQ,CACN,IAAAjC,WAAA,CAAAiB,GAAA,EAACpB,qBAAA,CAAAqB,OAAoB;MACnBC,UAAU,EAAEqC,iBAAkB;MAC9BpC,KAAK,EAAEf;IAAU,CAClB,CACH,CAAC;IAGD,IAAMmC,iBAAiB,GAAI7D,cAAQ,CAAeJ,IAAI,CAAC4D,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAClE,IAAMM,8BAA8B,GAAGD,iBAAiB,CAACH,oBAAoB;IAG7Ef,MAAM,CAACkB,iBAAiB,CAACD,uBAAuB,CAAC,CAACI,IAAI,CAACT,gBAAgB,CAACK,uBAAuB,CAAC;IAIhG,IAAIiB,iBAAiB,KAAKtD,cAAc,EAAE;MAExCoB,MAAM,CAACmB,8BAA8B,CAAC,CAACE,IAAI,CAACP,6BAA6B,CAAC;IAC5E,CAAC,MAAM;MAGLd,MAAM,CAACmB,8BAA8B,CAAC,CAACmB,GAAG,CAACjB,IAAI,CAACP,6BAA6B,CAAC;IAChF;EACF,CAAC,CAAC;EAEFtB,IAAI,CAAC,uDAAuD,EAAE,YAAM;IAElE,IAAM+C,cAAc,GAAG,sBAAsB;IAC7CxD,SAAS,CAACC,MAAM,GAAG;MAAEuD,cAAc,EAAdA;IAAe,CAAC;IAGrC,IAAA7C,mBAAM,EACJ,IAAAhB,WAAA,CAAAiB,GAAA,EAACpB,qBAAA,CAAAqB,OAAoB;MAACC,UAAU,EAAEjB,cAAe;MAACkB,KAAK,EAAEf;IAAU,CAAE,CACvE,CAAC;IAGD,IAAMuC,aAAa,GAAIjE,cAAQ,CAAeJ,IAAI,CAAC4D,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9Db,MAAM,CAACsB,aAAa,CAACkB,qBAAqB,CAAC,CAACnB,IAAI,CAACkB,cAAc,CAAC;EAClE,CAAC,CAAC;EAEF/C,IAAI,CAAC,kDAAkD,EAAE,YAAM;IAAA,IAAAiD,qBAAA;IAE7D,IAAAC,QAAA,GAAmC,IAAAhD,mBAAM,EACvC,IAAAhB,WAAA,CAAAiB,GAAA,EAACpB,qBAAA,CAAAqB,OAAoB;QAACC,UAAU,EAAEjB,cAAe;QAACkB,KAAK,EAAEf;MAAU,CAAE,CACvE,CAAC;MAFOgB,SAAS,GAAA2C,QAAA,CAAT3C,SAAS;MAAE+B,WAAW,GAAAY,QAAA,CAAXZ,WAAW;IAK9B9B,MAAM,CAAC8B,WAAW,CAAC,YAAY,CAAC,CAAC,CAACC,SAAS,CAAC,CAAC;IAG7C,IAAMY,WAAW,IAAAF,qBAAA,GAAG1C,SAAS,CAAC,UAAU,CAAC,CAAC6C,aAAa,qBAAnCH,qBAAA,CAAqCI,aAAa,CAAC,kBAAkB,CAAC;IAC1FzC,sBAAS,CAACC,KAAK,CAACsC,WAAW,CAAC;IAG5B3C,MAAM,CAAC8B,WAAW,CAAC,YAAY,CAAC,CAAC,CAAC7B,UAAU,CAAC,CAAC;IAG9CG,sBAAS,CAACC,KAAK,CAACsC,WAAW,CAAC;IAG5B3C,MAAM,CAAC8B,WAAW,CAAC,YAAY,CAAC,CAAC,CAACC,SAAS,CAAC,CAAC;EAC/C,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}