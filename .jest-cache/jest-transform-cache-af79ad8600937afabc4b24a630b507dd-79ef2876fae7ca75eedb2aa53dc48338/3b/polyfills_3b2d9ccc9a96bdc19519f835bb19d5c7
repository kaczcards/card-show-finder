1c15fd8c767f0c7ce0a0325822550f7b
function cov_f1wkvrkx() {
  var path = "/Users/kevin/card-show-finder/src/utils/polyfills.ts";
  var hash = "84d2d3c266541d8401a9e57bd50a105dec2949fb";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kevin/card-show-finder/src/utils/polyfills.ts",
    statementMap: {
      "0": {
        start: {
          line: 33,
          column: 0
        },
        end: {
          line: 64,
          column: 1
        }
      },
      "1": {
        start: {
          line: 42,
          column: 45
        },
        end: {
          line: 55,
          column: 3
        }
      },
      "2": {
        start: {
          line: 43,
          column: 4
        },
        end: {
          line: 43,
          column: 42
        }
      },
      "3": {
        start: {
          line: 43,
          column: 29
        },
        end: {
          line: 43,
          column: 42
        }
      },
      "4": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 54,
          column: 5
        }
      },
      "5": {
        start: {
          line: 46,
          column: 6
        },
        end: {
          line: 46,
          column: 47
        }
      },
      "6": {
        start: {
          line: 48,
          column: 6
        },
        end: {
          line: 51,
          column: 8
        }
      },
      "7": {
        start: {
          line: 53,
          column: 6
        },
        end: {
          line: 53,
          column: 19
        }
      },
      "8": {
        start: {
          line: 58,
          column: 2
        },
        end: {
          line: 58,
          column: 41
        }
      },
      "9": {
        start: {
          line: 61,
          column: 2
        },
        end: {
          line: 63,
          column: 3
        }
      },
      "10": {
        start: {
          line: 62,
          column: 4
        },
        end: {
          line: 62,
          column: 88
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 42,
            column: 45
          },
          end: {
            line: 42,
            column: 46
          }
        },
        loc: {
          start: {
            line: 42,
            column: 65
          },
          end: {
            line: 55,
            column: 3
          }
        },
        line: 42
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 33,
            column: 0
          },
          end: {
            line: 64,
            column: 1
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 0
          },
          end: {
            line: 64,
            column: 1
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 33
      },
      "1": {
        loc: {
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 43,
            column: 42
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 43,
            column: 42
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 43
      },
      "2": {
        loc: {
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 50,
            column: 64
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 50,
            column: 33
          },
          end: {
            line: 50,
            column: 46
          }
        }, {
          start: {
            line: 50,
            column: 49
          },
          end: {
            line: 50,
            column: 64
          }
        }],
        line: 50
      },
      "3": {
        loc: {
          start: {
            line: 61,
            column: 2
          },
          end: {
            line: 63,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 61,
            column: 2
          },
          end: {
            line: 63,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 61
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "84d2d3c266541d8401a9e57bd50a105dec2949fb"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_f1wkvrkx = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_f1wkvrkx();
cov_f1wkvrkx().s[0]++;
if (typeof globalThis.structuredClone !== 'function') {
  cov_f1wkvrkx().b[0][0]++;
  cov_f1wkvrkx().s[1]++;
  var jsonClone = function jsonClone(value) {
    cov_f1wkvrkx().f[0]++;
    cov_f1wkvrkx().s[2]++;
    if (value === undefined) {
      cov_f1wkvrkx().b[1][0]++;
      cov_f1wkvrkx().s[3]++;
      return value;
    } else {
      cov_f1wkvrkx().b[1][1]++;
    }
    cov_f1wkvrkx().s[4]++;
    try {
      cov_f1wkvrkx().s[5]++;
      return JSON.parse(JSON.stringify(value));
    } catch (error) {
      cov_f1wkvrkx().s[6]++;
      console.warn('[structuredClone polyfill] Failed to clone value:', error instanceof Error ? (cov_f1wkvrkx().b[2][0]++, error.message) : (cov_f1wkvrkx().b[2][1]++, 'Unknown error'));
      cov_f1wkvrkx().s[7]++;
      return value;
    }
  };
  cov_f1wkvrkx().s[8]++;
  globalThis.structuredClone = jsonClone;
  cov_f1wkvrkx().s[9]++;
  if (__DEV__) {
    cov_f1wkvrkx().b[3][0]++;
    cov_f1wkvrkx().s[10]++;
    console.log('[Polyfill] Added structuredClone polyfill for Supabase compatibility');
  } else {
    cov_f1wkvrkx().b[3][1]++;
  }
} else {
  cov_f1wkvrkx().b[0][1]++;
}
export {};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnbG9iYWxUaGlzIiwic3RydWN0dXJlZENsb25lIiwiY292X2Yxd2t2cmt4IiwiYiIsInMiLCJqc29uQ2xvbmUiLCJ2YWx1ZSIsImYiLCJ1bmRlZmluZWQiLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJlcnJvciIsImNvbnNvbGUiLCJ3YXJuIiwiRXJyb3IiLCJtZXNzYWdlIiwiX19ERVZfXyIsImxvZyJdLCJzb3VyY2VzIjpbInBvbHlmaWxscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIHBvbHlmaWxscy50c1xuICogXG4gKiBUaGlzIGZpbGUgY29udGFpbnMgcG9seWZpbGxzIGZvciBtb2Rlcm4gSmF2YVNjcmlwdCBmZWF0dXJlcyB0aGF0IG1pZ2h0IG5vdCBiZVxuICogYXZhaWxhYmxlIGluIGFsbCBlbnZpcm9ubWVudHMsIHBhcnRpY3VsYXJseSBSZWFjdCBOYXRpdmUuXG4gKiBcbiAqIFVzYWdlOlxuICogSW1wb3J0IHRoaXMgZmlsZSBhdCB0aGUgZW50cnkgcG9pbnQgb2YgeW91ciBhcHBsaWNhdGlvbiAoZS5nLiwgQXBwLnRzeClcbiAqIGBgYFxuICogaW1wb3J0ICcuL3NyYy91dGlscy9wb2x5ZmlsbHMnO1xuICogYGBgXG4gKi9cblxuLyoqXG4gKiBzdHJ1Y3R1cmVkQ2xvbmUgUG9seWZpbGxcbiAqIFxuICogVGhlIHN0cnVjdHVyZWRDbG9uZSgpIGdsb2JhbCBtZXRob2QgY3JlYXRlcyBhIGRlZXAgY2xvbmUgb2YgYSBnaXZlbiB2YWx1ZSB1c2luZ1xuICogdGhlIHN0cnVjdHVyZWQgY2xvbmUgYWxnb3JpdGhtLiBUaGlzIHBvbHlmaWxsIHByb3ZpZGVzIGEgc2ltcGxpZmllZCB2ZXJzaW9uXG4gKiB0aGF0IHdvcmtzIGZvciBtb3N0IEpTT04tc2VyaWFsaXphYmxlIGRhdGEsIHdoaWNoIGlzIHN1ZmZpY2llbnQgZm9yIFN1cGFiYXNlJ3MgbmVlZHMuXG4gKiBcbiAqIExpbWl0YXRpb25zIG9mIHRoaXMgcG9seWZpbGw6XG4gKiAtIENhbm5vdCBjbG9uZSBmdW5jdGlvbnMsIFN5bWJvbHMsIFdlYWtNYXBzLCBldGMuXG4gKiAtIENhbm5vdCBoYW5kbGUgY2lyY3VsYXIgcmVmZXJlbmNlc1xuICogLSBMb3NlcyBwcm90b3R5cGUgY2hhaW4gaW5mb3JtYXRpb25cbiAqIC0gRGF0ZSBvYmplY3RzIGJlY29tZSBzdHJpbmdzXG4gKiAtIFJlZ0V4cCwgTWFwLCBTZXQgb2JqZWN0cyBhcmUgbm90IHByb3Blcmx5IGNsb25lZFxuICogXG4gKiBUaGVzZSBsaW1pdGF0aW9ucyBhcmUgYWNjZXB0YWJsZSBmb3IgU3VwYWJhc2UgdXNhZ2UgYXMgaXQgcHJpbWFyaWx5IGRlYWxzIHdpdGhcbiAqIEpTT04tc2VyaWFsaXphYmxlIGRhdGEgZm9yIGF1dGhlbnRpY2F0aW9uIGFuZCBkYXRhYmFzZSBvcGVyYXRpb25zLlxuICovXG5cbi8vIE9ubHkgYWRkIHRoZSBwb2x5ZmlsbCBpZiBpdCBkb2Vzbid0IGFscmVhZHkgZXhpc3RcbmlmICh0eXBlb2YgZ2xvYmFsVGhpcy5zdHJ1Y3R1cmVkQ2xvbmUgIT09ICdmdW5jdGlvbicpIHtcbiAgLy8gRGVmaW5lIHRoZSB0eXBlIGZvciB0aGUgcG9seWZpbGwgdG8gbWF0Y2ggdGhlIG5hdGl2ZSBmdW5jdGlvblxuICB0eXBlIFN0cnVjdHVyZWRDbG9uZUZ1bmN0aW9uID0gPFQ+KHZhbHVlOiBUKSA9PiBUO1xuXG4gIC8qKlxuICAgKiBTaW1wbGUgaW1wbGVtZW50YXRpb24gdXNpbmcgSlNPTiBzZXJpYWxpemF0aW9uL2Rlc2VyaWFsaXphdGlvblxuICAgKiBUaGlzIGlzIHN1ZmZpY2llbnQgZm9yIG1vc3QgU3VwYWJhc2UgdXNlIGNhc2VzIHdoaWNoIGludm9sdmVcbiAgICogc2VyaWFsaXphYmxlIHNlc3Npb24gYW5kIHVzZXIgZGF0YVxuICAgKi9cbiAgY29uc3QganNvbkNsb25lOiBTdHJ1Y3R1cmVkQ2xvbmVGdW5jdGlvbiA9IDxUPih2YWx1ZTogVCk6IFQgPT4ge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdmFsdWU7XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgJ1tzdHJ1Y3R1cmVkQ2xvbmUgcG9seWZpbGxdIEZhaWxlZCB0byBjbG9uZSB2YWx1ZTonLFxuICAgICAgICBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJ1xuICAgICAgKTtcbiAgICAgIC8vIFJldHVybiB0aGUgb3JpZ2luYWwgdmFsdWUgYXMgZmFsbGJhY2sgKHRob3VnaCBpdCB3b24ndCBiZSBhIGNsb25lKVxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgfTtcblxuICAvLyBBZGQgdG8gZ2xvYmFsVGhpcyBzbyBpdCdzIGF2YWlsYWJsZSBldmVyeXdoZXJlXG4gIGdsb2JhbFRoaXMuc3RydWN0dXJlZENsb25lID0ganNvbkNsb25lO1xuXG4gIC8vIExvZyB0aGF0IHRoZSBwb2x5ZmlsbCBoYXMgYmVlbiBhcHBsaWVkIChoZWxwZnVsIGZvciBkZWJ1Z2dpbmcpXG4gIGlmIChfX0RFVl9fKSB7XG4gICAgY29uc29sZS5sb2coJ1tQb2x5ZmlsbF0gQWRkZWQgc3RydWN0dXJlZENsb25lIHBvbHlmaWxsIGZvciBTdXBhYmFzZSBjb21wYXRpYmlsaXR5Jyk7XG4gIH1cbn1cblxuLyoqXG4gKiBUeXBlIGRlY2xhcmF0aW9uIHRvIG1ha2UgVHlwZVNjcmlwdCBhd2FyZSBvZiBvdXIgcG9seWZpbGxcbiAqIFRoaXMgZW5zdXJlcyBubyB0eXBlIGVycm9ycyB3aGVuIHVzaW5nIHN0cnVjdHVyZWRDbG9uZVxuICovXG5kZWNsYXJlIGdsb2JhbCB7XG4gIGludGVyZmFjZSBXaW5kb3cge1xuICAgIHN0cnVjdHVyZWRDbG9uZTxUPih2YWx1ZTogVCk6IFQ7XG4gIH1cbiAgXG4gIHZhciBzdHJ1Y3R1cmVkQ2xvbmU6IDxUPih2YWx1ZTogVCkgPT4gVDtcbn1cblxuLy8gRXhwb3J0IG5vdGhpbmcgLSB0aGlzIGZpbGUgaXMgdXNlZCBmb3IgaXRzIHNpZGUgZWZmZWN0cyBvbmx5XG5leHBvcnQge307XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWdDQSxJQUFJLE9BQU9BLFVBQVUsQ0FBQ0MsZUFBZSxLQUFLLFVBQVUsRUFBRTtFQUFBQyxZQUFBLEdBQUFDLENBQUE7RUFBQUQsWUFBQSxHQUFBRSxDQUFBO0VBU3BELElBQU1DLFNBQWtDLEdBQUcsU0FBckNBLFNBQWtDQSxDQUFPQyxLQUFRLEVBQVE7SUFBQUosWUFBQSxHQUFBSyxDQUFBO0lBQUFMLFlBQUEsR0FBQUUsQ0FBQTtJQUM3RCxJQUFJRSxLQUFLLEtBQUtFLFNBQVMsRUFBRTtNQUFBTixZQUFBLEdBQUFDLENBQUE7TUFBQUQsWUFBQSxHQUFBRSxDQUFBO01BQUEsT0FBT0UsS0FBSztJQUFBLENBQUM7TUFBQUosWUFBQSxHQUFBQyxDQUFBO0lBQUE7SUFBQUQsWUFBQSxHQUFBRSxDQUFBO0lBRXRDLElBQUk7TUFBQUYsWUFBQSxHQUFBRSxDQUFBO01BQ0YsT0FBT0ssSUFBSSxDQUFDQyxLQUFLLENBQUNELElBQUksQ0FBQ0UsU0FBUyxDQUFDTCxLQUFLLENBQUMsQ0FBQztJQUMxQyxDQUFDLENBQUMsT0FBT00sS0FBSyxFQUFFO01BQUFWLFlBQUEsR0FBQUUsQ0FBQTtNQUNkUyxPQUFPLENBQUNDLElBQUksQ0FDVixtREFBbUQsRUFDbkRGLEtBQUssWUFBWUcsS0FBSyxJQUFBYixZQUFBLEdBQUFDLENBQUEsVUFBR1MsS0FBSyxDQUFDSSxPQUFPLEtBQUFkLFlBQUEsR0FBQUMsQ0FBQSxVQUFHLGVBQWUsQ0FDMUQsQ0FBQztNQUFDRCxZQUFBLEdBQUFFLENBQUE7TUFFRixPQUFPRSxLQUFLO0lBQ2Q7RUFDRixDQUFDO0VBQUNKLFlBQUEsR0FBQUUsQ0FBQTtFQUdGSixVQUFVLENBQUNDLGVBQWUsR0FBR0ksU0FBUztFQUFDSCxZQUFBLEdBQUFFLENBQUE7RUFHdkMsSUFBSWEsT0FBTyxFQUFFO0lBQUFmLFlBQUEsR0FBQUMsQ0FBQTtJQUFBRCxZQUFBLEdBQUFFLENBQUE7SUFDWFMsT0FBTyxDQUFDSyxHQUFHLENBQUMsc0VBQXNFLENBQUM7RUFDckYsQ0FBQztJQUFBaEIsWUFBQSxHQUFBQyxDQUFBO0VBQUE7QUFDSCxDQUFDO0VBQUFELFlBQUEsR0FBQUMsQ0FBQTtBQUFBO0FBZUQiLCJpZ25vcmVMaXN0IjpbXX0=