{"version":3,"names":["_supabase","require","_sessionService","_types","cov_tania2nji","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","_coverageSchema","coverage","actualCoverage","IS_TEST_MODE","exports","normalizeRole","role","lower","toLowerCase","Object","values","UserRole","includes","Action","ROLE_PERMISSIONS","_defineProperty2","default","ATTENDEE","Set","SEND_DM","RECEIVE_DM","REPLY_DM","DEALER","DEALER_PARTICIPATION","MVP_DEALER","SEND_BROADCAST","PREMIUM_FEATURE","SHOW_ORGANIZER","MANAGE_SHOWS","MODERATE_MESSAGE","canPerformAction","userRole","action","allowed","has","canSendDirectMessage","senderRole","recipientRole","canReplyToMessage","canSendBroadcast","canModerateMessages","getUserRole","_ref2","_asyncToGenerator2","userId","_ref3","supabase","from","select","eq","single","data","error","console","_x","apply","arguments","getUserProfile","_ref4","_ref5","_x2","canUserSendMessage","SEND_MESSAGE","canUserReceiveMessage","RECEIVE_MESSAGE","hasRole","requiredRole","hasAnyRole","requiredRoles","canManageShows","canParticipateAsDealer","hasPremiumFeatures","needsUpgrade","canContactUser","currentUserRole","targetUserRole","updateUserRole","_ref6","refreshUserSession","_x3"],"sources":["userRoleService.ts"],"sourcesContent":["import { supabase } from '../supabase';\nimport { refreshUserSession } from './sessionService';\nimport { UserRole } from '../types';\nexport { UserRole } from '../types'; // backward-compat re-export\n\n/**\n * Global test-mode flag.\n *\n * KEEP THIS **FALSE** IN PRODUCTION.\n * Can be overridden at runtime by setting\n *   globalThis.CSF_IS_TEST_MODE = true\n * during e2e / unit tests.\n */\n// NOTE: changing this to **const** prevents runtime overrides in production.\nexport const IS_TEST_MODE = false;\n\n\n/* ------------------------------------------------------------------\n * Utility helpers\n * ------------------------------------------------------------------ */\n\n/**\n * Normalises a role string coming from the database (often lowercase)\n * to the corresponding uppercase `UserRole` enum value.\n * Returns `null` if it cannot be mapped.\n */\nexport const normalizeRole = (role?: string | null): UserRole | null => {\n  if (!role) return null;\n  const lower = role.toLowerCase() as UserRole;\n  return (Object.values(UserRole) as string[]).includes(lower) ? lower : null;\n};\n\n/* ------------------------------------------------------------------\n * Permission Matrix\n * ------------------------------------------------------------------ */\n\n/**\n * Discrete actions in the system that can be gated by role.\n * Extend this enum as new features are added.\n */\nexport enum Action {\n  SEND_DM = 'SEND_DM',\n  RECEIVE_DM = 'RECEIVE_DM',\n  REPLY_DM = 'REPLY_DM',\n  /**\n   * Generic, non-UI message actions used elsewhere in the codebase.\n   * These are aliases for the more specific DM actions above but are\n   * referenced by helper utilities (e.g. `canUserSendMessage`).\n   * Keeping both spellings prevents brittle runtime errors when new\n   * modules are introduced that rely on the generic names.\n   */\n  SEND_MESSAGE = 'SEND_MESSAGE',\n  RECEIVE_MESSAGE = 'RECEIVE_MESSAGE',\n  SEND_BROADCAST = 'SEND_BROADCAST',\n  MANAGE_SHOWS = 'MANAGE_SHOWS', // create / edit show listings\n  DEALER_PARTICIPATION = 'DEALER_PARTICIPATION',\n  PREMIUM_FEATURE = 'PREMIUM_FEATURE',\n  MODERATE_MESSAGE = 'MODERATE_MESSAGE',\n}\n\n/**\n * Mapping of role â‡’ allowed action set.\n * NOTE: keep this in sync with product requirements.\n */\nconst ROLE_PERMISSIONS: Record<UserRole, Set<Action>> = {\n  [UserRole.ATTENDEE]: new Set<Action>([\n    Action.SEND_DM,\n    Action.RECEIVE_DM,\n    Action.REPLY_DM,\n  ]),\n  [UserRole.DEALER]: new Set<Action>([\n    Action.RECEIVE_DM,\n    Action.DEALER_PARTICIPATION,\n  ]),\n  [UserRole.MVP_DEALER]: new Set<Action>([\n    Action.SEND_DM,\n    Action.RECEIVE_DM,\n    Action.REPLY_DM,\n    Action.SEND_BROADCAST,\n    Action.DEALER_PARTICIPATION,\n    Action.PREMIUM_FEATURE,\n  ]),\n  [UserRole.SHOW_ORGANIZER]: new Set<Action>([\n    Action.SEND_DM,\n    Action.RECEIVE_DM,\n    Action.REPLY_DM,\n    Action.SEND_BROADCAST,\n    Action.MANAGE_SHOWS,\n    Action.DEALER_PARTICIPATION,\n    Action.PREMIUM_FEATURE,\n    Action.MODERATE_MESSAGE,\n  ]),\n};\n\n/**\n * Generic permission checker.\n * @param userRole   caller's role\n * @param action     action to check\n */\nexport const canPerformAction = (userRole: UserRole, action: Action): boolean => {\n  if (IS_TEST_MODE) return true;\n  const allowed = ROLE_PERMISSIONS[userRole];\n  return allowed ? allowed.has(action) : false;\n};\n\n/* ------------------------------------------------------------------\n * Messaging-specific helpers\n * ------------------------------------------------------------------ */\n\n/**\n * Checks if a sender can initiate a DM to a recipient\n * (show validation must be handled by caller when needed).\n */\nexport const canSendDirectMessage = (\n  senderRole: UserRole,\n  recipientRole: UserRole\n): boolean => {\n  if (IS_TEST_MODE) return true;\n\n  switch (senderRole) {\n    case UserRole.ATTENDEE:\n      return recipientRole === UserRole.MVP_DEALER;\n    case UserRole.MVP_DEALER:\n      return (\n        recipientRole === UserRole.ATTENDEE ||\n        recipientRole === UserRole.DEALER ||\n        recipientRole === UserRole.SHOW_ORGANIZER\n      );\n    case UserRole.SHOW_ORGANIZER:\n      return true; // can DM anyone\n    default:\n      return false;\n  }\n};\n\n/**\n * Dealers are read-only, everyone else can reply.\n */\nexport const canReplyToMessage = (userRole: UserRole): boolean => {\n  if (IS_TEST_MODE) return true;\n  return userRole !== UserRole.DEALER;\n};\n\n/**\n * Broadcast: MVP dealer (attendees only) or organizer (quota enforced server-side)\n */\nexport const canSendBroadcast = (userRole: UserRole): boolean => {\n  if (IS_TEST_MODE) return true;\n  return (\n    userRole === UserRole.MVP_DEALER ||\n    userRole === UserRole.SHOW_ORGANIZER\n  );\n};\n\n/**\n * Show organizers (for their shows) & admins (handled elsewhere) can moderate.\n */\nexport const canModerateMessages = (userRole: UserRole): boolean => {\n  if (IS_TEST_MODE) return true;\n  return userRole === UserRole.SHOW_ORGANIZER;\n};\n\n/**\n * Fetches a user's role from the profiles table.\n * @param userId The ID of the user.\n * @returns The user's role as a string, or null if not found/error.\n */\nexport const getUserRole = async (userId: string): Promise<UserRole | null> => {\n  try {\n    const { data, error } = await supabase\n      .from('profiles')\n      .select('role')\n      .eq('id', userId)\n      .single();\n\n    if (error) {\n      console.error('Error fetching user role:', error);\n      return null;\n    }\n\n    return normalizeRole(data?.role);\n  } catch (error) {\n    console.error('Exception in getUserRole:', error);\n    return null;\n  }\n};\n\n/**\n * Get user profile by ID.\n * @param userId User ID to lookup\n * @returns User profile information or null\n */\nexport const getUserProfile = async (userId: string) => {\n  try {\n    const { data, error } = await supabase\n      .from('profiles')\n      .select('id, _username, full_name, avatar_url, role')\n      .eq('id', userId)\n      .single();\n      \n    if (error) {\n      console.error('Error fetching user profile:', error);\n      return null;\n    }\n    \n    return data;\n  } catch (error) {\n    console.error('Exception in getUserProfile:', error);\n    return null;\n  }\n};\n\n/**\n * Checks if a user can send messages.\n * In our current system, all users can send messages.\n * @param userRole The role of the user.\n * @returns True if the user can send messages, false otherwise.\n */\nexport const canUserSendMessage = (userRole: UserRole): boolean => {\n  return canPerformAction(userRole, Action.SEND_MESSAGE);\n};\n\n/**\n * Checks if a user can receive messages.\n * Only MVP_DEALER and SHOW_ORGANIZER can receive messages in production.\n * @param userRole The role of the user.\n * @returns True if the user can receive messages, false otherwise.\n */\nexport const canUserReceiveMessage = (userRole: UserRole): boolean => {\n  return canPerformAction(userRole, Action.RECEIVE_MESSAGE);\n};\n\n/**\n * Provides a general function to check if a user has a specific role.\n * @param userRole The role of the user.\n * @param requiredRole The role required for the action.\n * @returns True if the user has the required role, false otherwise.\n */\nexport const hasRole = (userRole: UserRole, requiredRole: UserRole): boolean => {\n  if (IS_TEST_MODE) {\n    return true; // Bypass role checks in test mode\n  }\n  return userRole === requiredRole;\n};\n\n/**\n * Provides a general function to check if a user has one of several roles.\n * @param userRole The role of the user.\n * @param requiredRoles An array of roles, at least one of which the user must have.\n * @returns True if the user has any of the required roles, false otherwise.\n */\nexport const hasAnyRole = (userRole: UserRole, requiredRoles: UserRole[]): boolean => {\n  if (IS_TEST_MODE) {\n    return true; // Bypass role checks in test mode\n  }\n  return requiredRoles.includes(userRole);\n};\n\n/**\n * Checks if a user can create or edit show listings.\n * Only SHOW_ORGANIZER role can manage show listings.\n * @param userRole The role of the user.\n * @returns True if the user can manage show listings, false otherwise.\n */\nexport const canManageShows = (userRole: UserRole): boolean => {\n  return canPerformAction(userRole, Action.MANAGE_SHOWS);\n};\n\n/**\n * Checks if a user can participate as a dealer in shows.\n * DEALER, MVP_DEALER, and SHOW_ORGANIZER roles can participate as dealers.\n * @param userRole The role of the user.\n * @returns True if the user can participate as a dealer, false otherwise.\n */\nexport const canParticipateAsDealer = (userRole: UserRole): boolean => {\n  return canPerformAction(userRole, Action.DEALER_PARTICIPATION);\n};\n\n/**\n * Checks if a user has premium features.\n * MVP_DEALER and SHOW_ORGANIZER have premium features.\n * @param userRole The role of the user.\n * @returns True if the user has premium features, false otherwise.\n */\nexport const hasPremiumFeatures = (userRole: UserRole): boolean => {\n  return canPerformAction(userRole, Action.PREMIUM_FEATURE);\n};\n\n/**\n * Checks if a user needs to upgrade to access certain features.\n * ATTENDEE and DEALER roles need to upgrade for premium features.\n * @param userRole The role of the user.\n * @returns True if the user needs to upgrade, false otherwise.\n */\nexport const needsUpgrade = (userRole: UserRole): boolean => {\n  return !hasPremiumFeatures(userRole);\n};\n\n/**\n * Checks if a user can contact another user based on their roles.\n * Used to determine if \"Message\" button should be shown in profiles.\n * @param currentUserRole Role of the current user \n * @param targetUserRole Role of the user to be messaged\n * @returns Boolean indicating if messaging is allowed\n */\nexport const canContactUser = (currentUserRole: UserRole, targetUserRole: UserRole): boolean => {\n  if (IS_TEST_MODE) {\n    return true; // Allow all messaging in test mode\n  }\n  \n  // Check if the target user can receive messages\n  return canUserReceiveMessage(targetUserRole);\n};\n\n/* ------------------------------------------------------------------\n * Session / role synchronisation helpers\n * ------------------------------------------------------------------ */\n\n/**\n * Convenience helper that:\n * 1. Refreshes the session token\n * 2. Fetches the latest role from the database\n *\n * This should be called after any action that might change the user's\n * subscription or role (e.g., _webhook, upgrade flow).\n */\nexport const updateUserRole = async (userId: string): Promise<UserRole | null> => {\n  await refreshUserSession();\n  return getUserRole(userId);\n};\n"],"mappings":"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","ignoreList":[]}