{"version":3,"names":["useInfiniteShows","useShowsInfiniteQuery","cov_1tj5joz3ti","s","useUnifiedInfiniteShows","params","_data$pages$","f","shouldUseRpc","b","keyword","trim","length","Array","isArray","dealerCardTypes","_ref","coordinates","_ref$radius","radius","_ref$startDate","startDate","Date","_ref$endDate","endDate","setDate","getDate","maxEntryFee","features","categories","_ref$pageSize","pageSize","_ref$enabled","enabled","featuresRecord","forEach","feature","_ref2","lat","latitude","lng","longitude","radius_miles","start_date","end_date","max_entry_fee","Object","keys","undefined","page_size","useLegacyFallback","data","fetchNextPage","hasNextPage","isFetchingNextPage","isLoading","isError","queryError","error","refetch","flattenedShows","pages","flatMap","page","shows","totalCount","pagination","errorMessage","message","refresh","_ref3","_asyncToGenerator","apply","arguments","_fetchNextPage2","isRefreshing"],"sources":["useUnifiedInfiniteShows.ts"],"sourcesContent":["import { useInfiniteShows, InfiniteShowsParams, InfiniteShowsResult } from './useInfiniteShows';\nimport { useShowsInfiniteQuery } from './useShowsAdvancedQuery.rpc';\nimport { Show } from '../types';\n\n/**\n * Unified hook for infinite shows fetching that chooses between:\n * 1. RPC-based advanced query (when keyword or dealerCardTypes are used)\n * 2. Legacy client-side filtering (for basic filtering)\n * \n * Maintains the same parameter and result interface as useInfiniteShows\n * for seamless integration with existing components.\n * \n * @param params - Filtering parameters and coordinates\n * @returns An object with shows data, loading states, and functions to fetch more data\n */\nexport const useUnifiedInfiniteShows = (params: InfiniteShowsParams): InfiniteShowsResult => {\n  // Determine if we should use the RPC path\n  const shouldUseRpc = \n    (typeof params.keyword === 'string' && params.keyword.trim().length > 0) || \n    (Array.isArray(params.dealerCardTypes) && params.dealerCardTypes.length > 0);\n  \n  // If no advanced filtering is needed, use the legacy path\n  if (!shouldUseRpc) {\n    return useInfiniteShows(params);\n  }\n  \n  // Otherwise, use the RPC path with advanced filtering capabilities\n  const {\n    coordinates,\n    radius = 25,\n    startDate = new Date(),\n    endDate = new Date(new Date().setDate(new Date().getDate() + 30)),\n    maxEntryFee,\n    features,\n    categories,\n    keyword,\n    dealerCardTypes,\n    pageSize = 20,\n    enabled = true,\n  } = params;\n\n  // Convert features array to Record<string, boolean> if needed\n  const featuresRecord: Record<string, boolean> = {};\n  if (Array.isArray(features) && features.length > 0) {\n    features.forEach(feature => {\n      featuresRecord[feature] = true;\n    });\n  }\n\n  // Use the RPC-based infinite query\n  const {\n    data,\n    fetchNextPage,\n    hasNextPage,\n    isFetchingNextPage,\n    isLoading,\n    isError,\n    error: queryError,\n    refetch,\n  } = useShowsInfiniteQuery(\n    {\n      lat: coordinates.latitude,\n      lng: coordinates.longitude,\n      radius_miles: radius,\n      start_date: startDate,\n      end_date: endDate,\n      max_entry_fee: maxEntryFee,\n      categories,\n      features: Object.keys(featuresRecord).length > 0 ? featuresRecord : undefined,\n      keyword,\n      dealerCardTypes,\n      page_size: pageSize,\n      useLegacyFallback: true, // Enable fallback to ensure we always get results\n    },\n    {\n      enabled,\n    }\n  );\n  \n  // Flatten the pages of shows into a single array\n  const flattenedShows: Show[] = \n    data?.pages.flatMap((page) => page.shows) || [];\n  \n  // Get the total count from the first page (or 0 if no data)\n  const totalCount = data?.pages[0]?.pagination.totalCount || 0;\n  \n  // Extract error message if any\n  const errorMessage = isError ? (queryError as Error)?.message || 'Failed to load shows' : null;\n  \n  // Create a refresh function that wraps refetch\n  const refresh = async (): Promise<void> => {\n    await refetch();\n  };\n  \n  return {\n    shows: flattenedShows,\n    totalCount,\n    hasNextPage: !!hasNextPage,\n    fetchNextPage: async () => {\n      if (hasNextPage && !isFetchingNextPage) {\n        await fetchNextPage();\n      }\n    },\n    refresh,\n    isLoading,\n    isFetchingNextPage,\n    isRefreshing: false, // This would need to be tracked separately if needed\n    error: errorMessage,\n  };\n};\n\nexport default useUnifiedInfiniteShows;\n"],"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","ignoreList":[]}