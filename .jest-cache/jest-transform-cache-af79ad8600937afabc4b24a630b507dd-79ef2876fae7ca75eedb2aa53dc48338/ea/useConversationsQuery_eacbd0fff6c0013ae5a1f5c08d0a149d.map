{"version":3,"names":["useQuery","useQueryClient","useMutation","useEffect","useState","supabase","messagingService","cov_2nz1gc2shw","s","useConversationsQuery","userId","f","queryClient","_ref","_ref2","_slicedToArray","isSubscribed","setIsSubscribed","_ref3","queryKey","queryFn","_queryFn","_asyncToGenerator","b","_ref4","rpc","input_user_id","data","error","console","warn","message","Array","isArray","length","id","Error","getConversations","err","apply","arguments","enabled","staleTime","cacheTime","retry","retryDelay","attempt","Math","min","onError","conversations","isLoading","rawError","refetch","formattedError","subscription","channel","on","event","schema","table","payload","newMessage","new","invalidateQueries","conversation_id","subscribe","removeChannel","markAsReadMutation","mutationFn","_mutationFn","_ref5","conversationId","markConversationAsRead","_x","onSuccess","_","variables","setQueryData","oldData","map","conversation","Object","assign","unread_count","sendMessageMutation","_mutationFn2","_ref6","_conversation$partici","messageText","find","c","recipientId","participants","user_id","type","sendMessage","sendGroupMessage","_x2","last_message_text","last_message_timestamp","Date","toISOString","sort","a","timeA","getTime","timeB","createConversationMutation","_mutationFn3","_ref7","initialMessage","startConversationFromProfile","_x3","totalUnreadCount","reduce","total","mutate","createConversation","isSending","isPending","isCreating"],"sources":["useConversationsQuery.ts"],"sourcesContent":["import { useQuery, useQueryClient, useMutation } from '@tanstack/react-query';\nimport { useEffect, useState } from 'react';\nimport { supabase } from '../supabase';\nimport * as messagingService from '../services/messagingService';\nimport { Conversation, Message } from '../services/messagingService';\n\n/**\n * Custom hook for fetching and managing user conversations with React Query\n * Includes real-time updates and optimized data fetching\n * \n * Integration with PostgreSQL RPC functions:\n * - Uses 'get_user_conversations' RPC function with 'input_user_id' parameter\n * - Defined in migration: 20250711121000_create_conversations_rpc.sql\n * - Falls back to messagingService.getConversations() if RPC fails\n */\nexport const useConversationsQuery = (userId: string | null) => {\n  const queryClient = useQueryClient();\n  const [isSubscribed, setIsSubscribed] = useState(false);\n\n  // Main query to fetch conversations\n  const {\n    data: conversations,\n    isLoading,\n    error: rawError,\n    refetch\n  } = useQuery<Conversation[], Error>({\n    queryKey: ['conversations', userId],\n    queryFn: async () => {\n      if (!userId) return [];\n      try {\n        // 1. Attempt optimized RPC\n        // This calls the PostgreSQL function 'get_user_conversations' defined in\n        // migration 20250711121000_create_conversations_rpc.sql\n        const { data, error } = await supabase\n          .rpc('get_user_conversations', { \n            // Parameter name must match the SQL function parameter\n            input_user_id: userId \n          });\n\n        if (error) {\n          console.warn('[useConversationsQuery] RPC error:', error.message);\n          throw error;\n        }\n\n        // Validate returned data structure\n        if (data && Array.isArray(data)) {\n          // Verify the data has the expected structure\n          if (data.length > 0 && !data[0].id) {\n            console.warn('[useConversationsQuery] RPC returned unexpected data structure:', data[0]);\n            throw new Error('Invalid data structure returned from RPC');\n          }\n          return data as Conversation[];\n        }\n\n        // Defensive fallback (should not typically run)\n        console.warn('[useConversationsQuery] RPC returned no data, falling back to service');\n        return await messagingService.getConversations(userId);\n      } catch (err) {\n        // Log and fallback to legacy service\n        /* eslint-disable no-console */\n        console.warn(\n          '[useConversationsQuery] RPC failed, falling back to service:',\n          err,\n        );\n        /* eslint-enable no-console */\n        return await messagingService.getConversations(userId);\n      }\n    },\n    enabled: !!userId,\n    staleTime: 1000 * 60 * 5, // Consider data fresh for 5 minutes\n    cacheTime: 1000 * 60 * 30, // Keep in cache for 30 minutes\n    // Automatically retry (with exponential back-off) a few times\n    retry: 3,\n    retryDelay: attempt => Math.min(1000 * 2 ** attempt, 30_000),\n    // Log the error for observability\n    onError: (err) => {\n      /* eslint-disable no-console */\n      console.error('[useConversationsQuery] fetch error:', err);\n      /* eslint-enable no-console */\n    },\n  });\n\n  /**\n   * Provide a simplified / structured error for consumers\n   * while also allowing access to the raw Error object.\n   */\n  const formattedError = rawError\n    ? {\n        message: rawError.message,\n        retry: () => refetch(),\n      }\n    : null;\n\n  // Setup real-time subscription for new messages\n  useEffect(() => {\n    if (!userId || isSubscribed) return;\n\n    // Subscribe to messages table for real-time updates\n    const subscription = supabase\n      .channel('public:messages')\n      .on('postgres_changes', {\n        event: 'INSERT',\n        schema: 'public',\n        table: 'messages',\n      }, (payload) => {\n        const newMessage = payload.new as unknown as Message;\n        \n        // Update the conversations cache when a new message arrives\n        queryClient.invalidateQueries({\n          queryKey: ['conversations', userId],\n        });\n        \n        // If we're viewing a specific conversation, also update its messages\n        queryClient.invalidateQueries({\n          queryKey: ['messages', newMessage.conversation_id],\n        });\n      })\n      .subscribe();\n\n    setIsSubscribed(true);\n\n    // Cleanup subscription on unmount\n    return () => {\n      supabase.removeChannel(subscription);\n      setIsSubscribed(false);\n    };\n  }, [userId, queryClient, isSubscribed]);\n\n  // Mutation for marking a conversation as read\n  const markAsReadMutation = useMutation({\n    mutationFn: async ({ conversationId }: { conversationId: string }) => {\n      if (!userId) throw new Error('User not authenticated');\n      return await messagingService.markConversationAsRead(conversationId, userId);\n    },\n    onSuccess: (_, variables) => {\n      // Update the conversations cache to reflect read status\n      queryClient.setQueryData(['conversations', userId], (oldData: Conversation[] | undefined) => {\n        if (!oldData) return [];\n        \n        return oldData.map(conversation => {\n          if (conversation.id === variables.conversationId) {\n            return {\n              ...conversation,\n              unread_count: 0\n            };\n          }\n          return conversation;\n        });\n      });\n    }\n  });\n\n  // Mutation for sending a new message\n  const sendMessageMutation = useMutation({\n    mutationFn: async ({\n      conversationId,\n      messageText\n    }: {\n      conversationId: string;\n      messageText: string;\n    }) => {\n      if (!userId) throw new Error('User not authenticated');\n      \n      // Get the conversation to find the recipient\n      const conversation = conversations?.find(c => c.id === conversationId);\n      if (!conversation) throw new Error('Conversation not found');\n      \n      // For direct messages, find the other participant\n      const recipientId = conversation.participants?.[0]?.user_id || '';\n      \n      if (conversation.type === 'direct') {\n        return await messagingService.sendMessage(userId, recipientId, messageText, conversationId);\n      } else {\n        return await messagingService.sendGroupMessage(userId, conversationId, messageText);\n      }\n    },\n    onSuccess: (_, variables) => {\n      // Optimistically update the conversations list with the new message\n      queryClient.setQueryData(['conversations', userId], (oldData: Conversation[] | undefined) => {\n        if (!oldData) return [];\n        \n        return oldData.map(conversation => {\n          if (conversation.id === variables.conversationId) {\n            return {\n              ...conversation,\n              last_message_text: variables.messageText,\n              last_message_timestamp: new Date().toISOString()\n            };\n          }\n          return conversation;\n        }).sort((a, b) => {\n          // Sort by most recent message\n          const timeA = a.last_message_timestamp ? new Date(a.last_message_timestamp).getTime() : 0;\n          const timeB = b.last_message_timestamp ? new Date(b.last_message_timestamp).getTime() : 0;\n          return timeB - timeA;\n        });\n      });\n      \n      // Also update the messages for this conversation\n      queryClient.invalidateQueries({\n        queryKey: ['messages', variables.conversationId],\n      });\n    }\n  });\n\n  // Mutation for creating a new conversation\n  const createConversationMutation = useMutation({\n    mutationFn: async ({\n      recipientId,\n      initialMessage\n    }: {\n      recipientId: string;\n      initialMessage: string;\n    }) => {\n      if (!userId) throw new Error('User not authenticated');\n      return await messagingService.startConversationFromProfile(userId, recipientId, initialMessage);\n    },\n    onSuccess: () => {\n      // Refresh the conversations list\n      refetch();\n    }\n  });\n\n  // Get total unread count across all conversations\n  const totalUnreadCount = conversations?.reduce(\n    (total, conversation) => total + (conversation.unread_count || 0),\n    0\n  ) || 0;\n\n  return {\n    conversations: conversations || [],\n    isLoading,\n    error: formattedError,\n    refetch,\n    totalUnreadCount,\n    markConversationAsRead: (conversationId: string) => \n      markAsReadMutation.mutate({ conversationId }),\n    sendMessage: (conversationId: string, messageText: string) => \n      sendMessageMutation.mutate({ conversationId, messageText }),\n    createConversation: (recipientId: string, initialMessage: string) => \n      createConversationMutation.mutate({ recipientId, initialMessage }),\n    isSending: sendMessageMutation.isPending,\n    isCreating: createConversationMutation.isPending\n  };\n};\n"],"mappingscAAc,EAAEC,WAAW,QAAQ,uBAAuB;AAC7E,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,QAAQ,QAAQ,aAAa;AACtC,OAAO,KAAKC,gBAAgB,MAAM,8BAA8B;AAACC,cAAA,GAAAC,CAAA;AAYjE,OAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAAIC,MAAqB,EAAK;EAAAH,cAAA,GAAAI,CAAA;EAC9D,IAAMC,WAAW,IAAAL,cAAA,GAAAC,CAAA,OAAGP,cAAc,CAAC,CAAC;EACpC,IAAAY,IAAA,IAAAN,cAAA,GAAAC,CAAA,OAAwCJ,QAAQ,CAAC,KAAK,CAAC;IAAAU,KAAA,GAAAC,cAAA,CAAAF,IAAA;IAAhDG,YAAY,GAAAF,KAAA;IAAEG,eAAe,GAAAH,KAAA;EAGpC,IAAAI,KAAA,IAAAX,cAAA,GAAAC,CAAA,OAKIR,QAAQ,CAAwB;MAClCmB,QAAQ,EAAE,CAAC,eAAe,EAAET,MAAM,CAAC;MACnCU,OAAO;QAAA,IAAAC,QAAA,GAAAC,iBAAA,CAAE,aAAY;UAAAf,cAAA,GAAAI,CAAA;UAAAJ,cAAA,GAAAC,CAAA;UACnB,IAAI,CAACE,MAAM,EAAE;YAAAH,cAAA,GAAAgB,CAAA;YAAAhB,cAAA,GAAAC,CAAA;YAAA,OAAO,EAAE;UAAA,CAAC;YAAAD,cAAA,GAAAgB,CAAA;UAAA;UAAAhB,cAAA,GAAAC,CAAA;UACvB,IAAI;YAIF,IAAAgB,KAAA,IAAAjB,cAAA,GAAAC,CAAA,aAA8BH,QAAQ,CACnCoB,GAAG,CAAC,wBAAwB,EAAE;gBAE7BC,aAAa,EAAEhB;cACjB,CAAC,CAAC;cAJIiB,IAAI,GAAAH,KAAA,CAAJG,IAAI;cAAEC,KAAK,GAAAJ,KAAA,CAALI,KAAK;YAIdrB,cAAA,GAAAC,CAAA;YAEL,IAAIoB,KAAK,EAAE;cAAArB,cAAA,GAAAgB,CAAA;cAAAhB,cAAA,GAAAC,CAAA;cACTqB,OAAO,CAACC,IAAI,CAAC,oCAAoC,EAAEF,KAAK,CAACG,OAAO,CAAC;cAACxB,cAAA,GAAAC,CAAA;cAClE,MAAMoB,KAAK;YACb,CAAC;cAAArB,cAAA,GAAAgB,CAAA;YAAA;YAAAhB,cAAA,GAAAC,CAAA;YAGD,IAAI,CAAAD,cAAA,GAAAgB,CAAA,UAAAI,IAAI,MAAApB,cAAA,GAAAgB,CAAA,UAAIS,KAAK,CAACC,OAAO,CAACN,IAAI,CAAC,GAAE;cAAApB,cAAA,GAAAgB,CAAA;cAAAhB,cAAA,GAAAC,CAAA;cAE/B,IAAI,CAAAD,cAAA,GAAAgB,CAAA,UAAAI,IAAI,CAACO,MAAM,GAAG,CAAC,MAAA3B,cAAA,GAAAgB,CAAA,UAAI,CAACI,IAAI,CAAC,CAAC,CAAC,CAACQ,EAAE,GAAE;gBAAA5B,cAAA,GAAAgB,CAAA;gBAAAhB,cAAA,GAAAC,CAAA;gBAClCqB,OAAO,CAACC,IAAI,CAAC,iEAAiE,EAAEH,IAAI,CAAC,CAAC,CAAC,CAAC;gBAACpB,cAAA,GAAAC,CAAA;gBACzF,MAAM,IAAI4B,KAAK,CAAC,0CAA0C,CAAC;cAC7D,CAAC;gBAAA7B,cAAA,GAAAgB,CAAA;cAAA;cAAAhB,cAAA,GAAAC,CAAA;cACD,OAAOmB,IAAI;YACb,CAAC;cAAApB,cAAA,GAAAgB,CAAA;YAAA;YAAAhB,cAAA,GAAAC,CAAA;YAGDqB,OAAO,CAACC,IAAI,CAAC,uEAAuE,CAAC;YAACvB,cAAA,GAAAC,CAAA;YACtF,aAAaF,gBAAgB,CAAC+B,gBAAgB,CAAC3B,MAAM,CAAC;UACxD,CAAC,CAAC,OAAO4B,GAAG,EAAE;YAAA/B,cAAA,GAAAC,CAAA;YAGZqB,OAAO,CAACC,IAAI,CACV,8DAA8D,EAC9DQ,GACF,CAAC;YAAC/B,cAAA,GAAAC,CAAA;YAEF,aAAaF,gBAAgB,CAAC+B,gBAAgB,CAAC3B,MAAM,CAAC;UACxD;QACF,CAAC;QAAA,SAxCDU,OAAOA,CAAA;UAAA,OAAAC,QAAA,CAAAkB,KAAA,OAAAC,SAAA;QAAA;QAAA,OAAPpB,OAAO;MAAA,GAwCN;MACDqB,OAAO,EAAE,CAAC,CAAC/B,MAAM;MACjBgC,SAAS,EAAE,IAAI,GAAG,EAAE,GAAG,CAAC;MACxBC,SAAS,EAAE,IAAI,GAAG,EAAE,GAAG,EAAE;MAEzBC,KAAK,EAAE,CAAC;MACRC,UAAU,EAAE,SAAZA,UAAUA,CAAEC,OAAO,EAAI;QAAAvC,cAAA,GAAAI,CAAA;QAAAJ,cAAA,GAAAC,CAAA;QAAA,OAAAuC,IAAI,CAACC,GAAG,CAAC,IAAI,GAAG,CAAC,IAAIF,OAAO,EAAE,KAAM,CAAC;MAAD,CAAC;MAE5DG,OAAO,EAAE,SAATA,OAAOA,CAAGX,GAAG,EAAK;QAAA/B,cAAA,GAAAI,CAAA;QAAAJ,cAAA,GAAAC,CAAA;QAEhBqB,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEU,GAAG,CAAC;MAE5D;IACF,CAAC,CAAC;IA3DMY,aAAa,GAAAhC,KAAA,CAAnBS,IAAI;IACJwB,SAAS,GAAAjC,KAAA,CAATiC,SAAS;IACFC,QAAQ,GAAAlC,KAAA,CAAfU,KAAK;IACLyB,OAAO,GAAAnC,KAAA,CAAPmC,OAAO;EA8DT,IAAMC,cAAc,IAAA/C,cAAA,GAAAC,CAAA,QAAG4C,QAAQ,IAAA7C,cAAA,GAAAgB,CAAA,UAC3B;IACEQ,OAAO,EAAEqB,QAAQ,CAACrB,OAAO;IACzBa,KAAK,EAAE,SAAPA,KAAKA,CAAA,EAAQ;MAAArC,cAAA,GAAAI,CAAA;MAAAJ,cAAA,GAAAC,CAAA;MAAA,OAAA6C,OAAO,CAAC,CAAC;IAAD;EACvB,CAAC,KAAA9C,cAAA,GAAAgB,CAAA,UACD,IAAI;EAAChB,cAAA,GAAAC,CAAA;EAGTL,SAAS,CAAC,YAAM;IAAAI,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAC,CAAA;IACd,IAAI,CAAAD,cAAA,GAAAgB,CAAA,WAACb,MAAM,MAAAH,cAAA,GAAAgB,CAAA,UAAIP,YAAY,GAAE;MAAAT,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAC,CAAA;MAAA;IAAM,CAAC;MAAAD,cAAA,GAAAgB,CAAA;IAAA;IAGpC,IAAMgC,YAAY,IAAAhD,cAAA,GAAAC,CAAA,QAAGH,QAAQ,CAC1BmD,OAAO,CAAC,iBAAiB,CAAC,CAC1BC,EAAE,CAAC,kBAAkB,EAAE;MACtBC,KAAK,EAAE,QAAQ;MACfC,MAAM,EAAE,QAAQ;MAChBC,KAAK,EAAE;IACT,CAAC,EAAE,UAACC,OAAO,EAAK;MAAAtD,cAAA,GAAAI,CAAA;MACd,IAAMmD,UAAU,IAAAvD,cAAA,GAAAC,CAAA,QAAGqD,OAAO,CAACE,GAAG,CAAsB;MAACxD,cAAA,GAAAC,CAAA;MAGrDI,WAAW,CAACoD,iBAAiB,CAAC;QAC5B7C,QAAQ,EAAE,CAAC,eAAe,EAAET,MAAM;MACpC,CAAC,CAAC;MAACH,cAAA,GAAAC,CAAA;MAGHI,WAAW,CAACoD,iBAAiB,CAAC;QAC5B7C,QAAQ,EAAE,CAAC,UAAU,EAAE2C,UAAU,CAACG,eAAe;MACnD,CAAC,CAAC;IACJ,CAAC,CAAC,CACDC,SAAS,CAAC,CAAC;IAAC3D,cAAA,GAAAC,CAAA;IAEfS,eAAe,CAAC,IAAI,CAAC;IAACV,cAAA,GAAAC,CAAA;IAGtB,OAAO,YAAM;MAAAD,cAAA,GAAAI,CAAA;MAAAJ,cAAA,GAAAC,CAAA;MACXH,QAAQ,CAAC8D,aAAa,CAACZ,YAAY,CAAC;MAAChD,cAAA,GAAAC,CAAA;MACrCS,eAAe,CAAC,KAAK,CAAC;IACxB,CAAC;EACH,CAAC,EAAE,CAACP,MAAM,EAAEE,WAAW,EAAEI,YAAY,CAAC,CAAC;EAGvC,IAAMoD,kBAAkB,IAAA7D,cAAA,GAAAC,CAAA,QAAGN,WAAW,CAAC;IACrCmE,UAAU;MAAA,IAAAC,WAAA,GAAAhD,iBAAA,CAAE,WAAAiD,KAAA,EAA0D;QAAA,IAAjDC,cAAc,GAAAD,KAAA,CAAdC,cAAc;QAAAjE,cAAA,GAAAI,CAAA;QAAAJ,cAAA,GAAAC,CAAA;QACjC,IAAI,CAACE,MAAM,EAAE;UAAAH,cAAA,GAAAgB,CAAA;UAAAhB,cAAA,GAAAC,CAAA;UAAA,MAAM,IAAI4B,KAAK,CAAC,wBAAwB,CAAC;QAAA,CAAC;UAAA7B,cAAA,GAAAgB,CAAA;QAAA;QAAAhB,cAAA,GAAAC,CAAA;QACvD,aAAaF,gBAAgB,CAACmE,sBAAsB,CAACD,cAAc,EAAE9D,MAAM,CAAC;MAC9E,CAAC;MAAA,SAHD2D,UAAUA,CAAAK,EAAA;QAAA,OAAAJ,WAAA,CAAA/B,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAV6B,UAAU;IAAA,GAGT;IACDM,SAAS,EAAE,SAAXA,SAASA,CAAGC,CAAC,EAAEC,SAAS,EAAK;MAAAtE,cAAA,GAAAI,CAAA;MAAAJ,cAAA,GAAAC,CAAA;MAE3BI,WAAW,CAACkE,YAAY,CAAC,CAAC,eAAe,EAAEpE,MAAM,CAAC,EAAE,UAACqE,OAAmC,EAAK;QAAAxE,cAAA,GAAAI,CAAA;QAAAJ,cAAA,GAAAC,CAAA;QAC3F,IAAI,CAACuE,OAAO,EAAE;UAAAxE,cAAA,GAAAgB,CAAA;UAAAhB,cAAA,GAAAC,CAAA;UAAA,OAAO,EAAE;QAAA,CAAC;UAAAD,cAAA,GAAAgB,CAAA;QAAA;QAAAhB,cAAA,GAAAC,CAAA;QAExB,OAAOuE,OAAO,CAACC,GAAG,CAAC,UAAAC,YAAY,EAAI;UAAA1E,cAAA,GAAAI,CAAA;UAAAJ,cAAA,GAAAC,CAAA;UACjC,IAAIyE,YAAY,CAAC9C,EAAE,KAAK0C,SAAS,CAACL,cAAc,EAAE;YAAAjE,cAAA,GAAAgB,CAAA;YAAAhB,cAAA,GAAAC,CAAA;YAChD,OAAA0E,MAAA,CAAAC,MAAA,KACKF,YAAY;cACfG,YAAY,EAAE;YAAC;UAEnB,CAAC;YAAA7E,cAAA,GAAAgB,CAAA;UAAA;UAAAhB,cAAA,GAAAC,CAAA;UACD,OAAOyE,YAAY;QACrB,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;EAGF,IAAMI,mBAAmB,IAAA9E,cAAA,GAAAC,CAAA,QAAGN,WAAW,CAAC;IACtCmE,UAAU;MAAA,IAAAiB,YAAA,GAAAhE,iBAAA,CAAE,WAAAiE,KAAA,EAMN;QAAA,IAAAC,qBAAA;QAAA,IALJhB,cAAc,GAAAe,KAAA,CAAdf,cAAc;UACdiB,WAAW,GAAAF,KAAA,CAAXE,WAAW;QAAAlF,cAAA,GAAAI,CAAA;QAAAJ,cAAA,GAAAC,CAAA;QAKX,IAAI,CAACE,MAAM,EAAE;UAAAH,cAAA,GAAAgB,CAAA;UAAAhB,cAAA,GAAAC,CAAA;UAAA,MAAM,IAAI4B,KAAK,CAAC,wBAAwB,CAAC;QAAA,CAAC;UAAA7B,cAAA,GAAAgB,CAAA;QAAA;QAGvD,IAAM0D,YAAY,IAAA1E,cAAA,GAAAC,CAAA,QAAG0C,aAAa,oBAAbA,aAAa,CAAEwC,IAAI,CAAC,UAAAC,CAAC,EAAI;UAAApF,cAAA,GAAAI,CAAA;UAAAJ,cAAA,GAAAC,CAAA;UAAA,OAAAmF,CAAC,CAACxD,EAAE,KAAKqC,cAAc;QAAD,CAAC,CAAC;QAACjE,cAAA,GAAAC,CAAA;QACvE,IAAI,CAACyE,YAAY,EAAE;UAAA1E,cAAA,GAAAgB,CAAA;UAAAhB,cAAA,GAAAC,CAAA;UAAA,MAAM,IAAI4B,KAAK,CAAC,wBAAwB,CAAC;QAAA,CAAC;UAAA7B,cAAA,GAAAgB,CAAA;QAAA;QAG7D,IAAMqE,WAAW,IAAArF,cAAA,GAAAC,CAAA,QAAG,CAAAD,cAAA,GAAAgB,CAAA,YAAAiE,qBAAA,GAAAP,YAAY,CAACY,YAAY,cAAAL,qBAAA,GAAzBA,qBAAA,CAA4B,CAAC,CAAC,qBAA9BA,qBAAA,CAAgCM,OAAO,MAAAvF,cAAA,GAAAgB,CAAA,WAAI,EAAE;QAAChB,cAAA,GAAAC,CAAA;QAElE,IAAIyE,YAAY,CAACc,IAAI,KAAK,QAAQ,EAAE;UAAAxF,cAAA,GAAAgB,CAAA;UAAAhB,cAAA,GAAAC,CAAA;UAClC,aAAaF,gBAAgB,CAAC0F,WAAW,CAACtF,MAAM,EAAEkF,WAAW,EAAEH,WAAW,EAAEjB,cAAc,CAAC;QAC7F,CAAC,MAAM;UAAAjE,cAAA,GAAAgB,CAAA;UAAAhB,cAAA,GAAAC,CAAA;UACL,aAAaF,gBAAgB,CAAC2F,gBAAgB,CAACvF,MAAM,EAAE8D,cAAc,EAAEiB,WAAW,CAAC;QACrF;MACF,CAAC;MAAA,SArBDpB,UAAUA,CAAA6B,GAAA;QAAA,OAAAZ,YAAA,CAAA/C,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAV6B,UAAU;IAAA,GAqBT;IACDM,SAAS,EAAE,SAAXA,SAASA,CAAGC,CAAC,EAAEC,SAAS,EAAK;MAAAtE,cAAA,GAAAI,CAAA;MAAAJ,cAAA,GAAAC,CAAA;MAE3BI,WAAW,CAACkE,YAAY,CAAC,CAAC,eAAe,EAAEpE,MAAM,CAAC,EAAE,UAACqE,OAAmC,EAAK;QAAAxE,cAAA,GAAAI,CAAA;QAAAJ,cAAA,GAAAC,CAAA;QAC3F,IAAI,CAACuE,OAAO,EAAE;UAAAxE,cAAA,GAAAgB,CAAA;UAAAhB,cAAA,GAAAC,CAAA;UAAA,OAAO,EAAE;QAAA,CAAC;UAAAD,cAAA,GAAAgB,CAAA;QAAA;QAAAhB,cAAA,GAAAC,CAAA;QAExB,OAAOuE,OAAO,CAACC,GAAG,CAAC,UAAAC,YAAY,EAAI;UAAA1E,cAAA,GAAAI,CAAA;UAAAJ,cAAA,GAAAC,CAAA;UACjC,IAAIyE,YAAY,CAAC9C,EAAE,KAAK0C,SAAS,CAACL,cAAc,EAAE;YAAAjE,cAAA,GAAAgB,CAAA;YAAAhB,cAAA,GAAAC,CAAA;YAChD,OAAA0E,MAAA,CAAAC,MAAA,KACKF,YAAY;cACfkB,iBAAiB,EAAEtB,SAAS,CAACY,WAAW;cACxCW,sBAAsB,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;YAAC;UAEpD,CAAC;YAAA/F,cAAA,GAAAgB,CAAA;UAAA;UAAAhB,cAAA,GAAAC,CAAA;UACD,OAAOyE,YAAY;QACrB,CAAC,CAAC,CAACsB,IAAI,CAAC,UAACC,CAAC,EAAEjF,CAAC,EAAK;UAAAhB,cAAA,GAAAI,CAAA;UAEhB,IAAM8F,KAAK,IAAAlG,cAAA,GAAAC,CAAA,QAAGgG,CAAC,CAACJ,sBAAsB,IAAA7F,cAAA,GAAAgB,CAAA,WAAG,IAAI8E,IAAI,CAACG,CAAC,CAACJ,sBAAsB,CAAC,CAACM,OAAO,CAAC,CAAC,KAAAnG,cAAA,GAAAgB,CAAA,WAAG,CAAC;UACzF,IAAMoF,KAAK,IAAApG,cAAA,GAAAC,CAAA,QAAGe,CAAC,CAAC6E,sBAAsB,IAAA7F,cAAA,GAAAgB,CAAA,WAAG,IAAI8E,IAAI,CAAC9E,CAAC,CAAC6E,sBAAsB,CAAC,CAACM,OAAO,CAAC,CAAC,KAAAnG,cAAA,GAAAgB,CAAA,WAAG,CAAC;UAAChB,cAAA,GAAAC,CAAA;UAC1F,OAAOmG,KAAK,GAAGF,KAAK;QACtB,CAAC,CAAC;MACJ,CAAC,CAAC;MAAClG,cAAA,GAAAC,CAAA;MAGHI,WAAW,CAACoD,iBAAiB,CAAC;QAC5B7C,QAAQ,EAAE,CAAC,UAAU,EAAE0D,SAAS,CAACL,cAAc;MACjD,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;EAGF,IAAMoC,0BAA0B,IAAArG,cAAA,GAAAC,CAAA,QAAGN,WAAW,CAAC;IAC7CmE,UAAU;MAAA,IAAAwC,YAAA,GAAAvF,iBAAA,CAAE,WAAAwF,KAAA,EAMN;QAAA,IALJlB,WAAW,GAAAkB,KAAA,CAAXlB,WAAW;UACXmB,cAAc,GAAAD,KAAA,CAAdC,cAAc;QAAAxG,cAAA,GAAAI,CAAA;QAAAJ,cAAA,GAAAC,CAAA;QAKd,IAAI,CAACE,MAAM,EAAE;UAAAH,cAAA,GAAAgB,CAAA;UAAAhB,cAAA,GAAAC,CAAA;UAAA,MAAM,IAAI4B,KAAK,CAAC,wBAAwB,CAAC;QAAA,CAAC;UAAA7B,cAAA,GAAAgB,CAAA;QAAA;QAAAhB,cAAA,GAAAC,CAAA;QACvD,aAAaF,gBAAgB,CAAC0G,4BAA4B,CAACtG,MAAM,EAAEkF,WAAW,EAAEmB,cAAc,CAAC;MACjG,CAAC;MAAA,SATD1C,UAAUA,CAAA4C,GAAA;QAAA,OAAAJ,YAAA,CAAAtE,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAV6B,UAAU;IAAA,GAST;IACDM,SAAS,EAAE,SAAXA,SAASA,CAAA,EAAQ;MAAApE,cAAA,GAAAI,CAAA;MAAAJ,cAAA,GAAAC,CAAA;MAEf6C,OAAO,CAAC,CAAC;IACX;EACF,CAAC,CAAC;EAGF,IAAM6D,gBAAgB,IAAA3G,cAAA,GAAAC,CAAA,QAAG,CAAAD,cAAA,GAAAgB,CAAA,WAAA2B,aAAa,oBAAbA,aAAa,CAAEiE,MAAM,CAC5C,UAACC,KAAK,EAAEnC,YAAY,EAAK;IAAA1E,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAC,CAAA;IAAA,OAAA4G,KAAK,IAAI,CAAA7G,cAAA,GAAAgB,CAAA,WAAA0D,YAAY,CAACG,YAAY,MAAA7E,cAAA,GAAAgB,CAAA,WAAI,CAAC,EAAC;EAAD,CAAC,EACjE,CACF,CAAC,MAAAhB,cAAA,GAAAgB,CAAA,WAAI,CAAC;EAAChB,cAAA,GAAAC,CAAA;EAEP,OAAO;IACL0C,aAAa,EAAE,CAAA3C,cAAA,GAAAgB,CAAA,WAAA2B,aAAa,MAAA3C,cAAA,GAAAgB,CAAA,WAAI,EAAE;IAClC4B,SAAS,EAATA,SAAS;IACTvB,KAAK,EAAE0B,cAAc;IACrBD,OAAO,EAAPA,OAAO;IACP6D,gBAAgB,EAAhBA,gBAAgB;IAChBzC,sBAAsB,EAAE,SAAxBA,sBAAsBA,CAAGD,cAAsB,EAC7C;MAAAjE,cAAA,GAAAI,CAAA;MAAAJ,cAAA,GAAAC,CAAA;MAAA,OAAA4D,kBAAkB,CAACiD,MAAM,CAAC;QAAE7C,cAAc,EAAdA;MAAe,CAAC,CAAC;IAAD,CAAC;IAC/CwB,WAAW,EAAE,SAAbA,WAAWA,CAAGxB,cAAsB,EAAEiB,WAAmB,EACvD;MAAAlF,cAAA,GAAAI,CAAA;MAAAJ,cAAA,GAAAC,CAAA;MAAA,OAAA6E,mBAAmB,CAACgC,MAAM,CAAC;QAAE7C,cAAc,EAAdA,cAAc;QAAEiB,WAAW,EAAXA;MAAY,CAAC,CAAC;IAAD,CAAC;IAC7D6B,kBAAkB,EAAE,SAApBA,kBAAkBA,CAAG1B,WAAmB,EAAEmB,cAAsB,EAC9D;MAAAxG,cAAA,GAAAI,CAAA;MAAAJ,cAAA,GAAAC,CAAA;MAAA,OAAAoG,0BAA0B,CAACS,MAAM,CAAC;QAAEzB,WAAW,EAAXA,WAAW;QAAEmB,cAAc,EAAdA;MAAe,CAAC,CAAC;IAAD,CAAC;IACpEQ,SAAS,EAAElC,mBAAmB,CAACmC,SAAS;IACxCC,UAAU,EAAEb,0BAA0B,CAACY;EACzC,CAAC;AACH,CAAC","ignoreList":[]}