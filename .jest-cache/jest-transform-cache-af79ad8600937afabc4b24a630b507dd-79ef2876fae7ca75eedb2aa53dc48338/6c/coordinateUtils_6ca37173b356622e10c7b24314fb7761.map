{"version":3,"names":["sanitizeCoordinates","coordinates","cov_1zdl274oa","f","s","b","__DEV__","console","warn","_ref","latitude","longitude","isNaN","Math","abs","originalLat","originalLong","_sanitizeCoordinates","calculateDistance","lat1","lon1","lat2","lon2","R","dLat","PI","dLon","a","sin","cos","c","atan2","sqrt"],"sources":["coordinateUtils.ts"],"sourcesContent":["/**\n * Utility functions for working with geographic coordinates\n */\nimport { Coordinates } from '../types';\n\n/**\n * Sanitizes coordinates to ensure they are valid\n * \n * This function:\n * 1. Verifies both latitude and longitude are numbers\n * 2. Detects and swaps swapped coordinates (a common error)\n * 3. Ensures latitude is between -90 and 90\n * 4. Ensures longitude is between -180 and 180\n * \n * @param coordinates The coordinates to sanitize\n * @returns Sanitized coordinates or null if invalid\n */\nexport const sanitizeCoordinates = (coordinates?: Coordinates | null): Coordinates | null => {\n  // If no coordinates provided, return null\n  if (!coordinates) {\n    if (__DEV__) console.warn('No coordinates provided to sanitize');\n    return null;\n  }\n\n  const { latitude, longitude } = coordinates;\n\n  // Verify both values are numbers\n  if (\n    typeof latitude !== 'number' ||\n    typeof longitude !== 'number' ||\n    isNaN(latitude) ||\n    isNaN(longitude)\n  ) {\n    if (__DEV__) console.warn('Invalid coordinates: latitude or longitude is not a number', { latitude, longitude });\n    return null;\n  }\n\n  // Check for swapped coordinates\n  // This is often the case when lat > 90 or long > 180\n  if (Math.abs(latitude) > 90 && Math.abs(longitude) <= 90) {\n    if (__DEV__) console.warn('Coordinates appear to be swapped - fixing automatically', { \n      originalLat: latitude, \n      originalLong: longitude \n    });\n    \n    // Swap them and proceed with the rest of the validation\n    return sanitizeCoordinates({\n      latitude: longitude,\n      longitude: latitude\n    });\n  }\n\n  // Validate latitude range (-90 to 90)\n  if (latitude < -90 || latitude > 90) {\n    if (__DEV__) console.warn('Invalid latitude value outside -90 to 90 range:', latitude);\n    return null;\n  }\n\n  // Validate longitude range (-180 to 180)\n  if (longitude < -180 || longitude > 180) {\n    if (__DEV__) console.warn('Invalid longitude value outside -180 to 180 range:', longitude);\n    return null;\n  }\n\n  // Return the valid coordinates\n  return { latitude, longitude };\n};\n\n/**\n * Calculates the distance between two points using the Haversine formula\n * @param lat1 Latitude of point 1\n * @param lon1 Longitude of point 1\n * @param lat2 Latitude of point 2\n * @param lon2 Longitude of point 2\n * @returns Distance in miles\n */\nexport const calculateDistance = (\n  lat1: number, \n  lon1: number, \n  lat2: number, \n  lon2: number\n): number => {\n  // Radius of the earth in miles\n  const R = 3958.8;\n  \n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLon = (lon2 - lon1) * Math.PI / 180;\n  \n  const a = \n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * \n    Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  \n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c;\n};\n"],"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","ignoreList":[]}