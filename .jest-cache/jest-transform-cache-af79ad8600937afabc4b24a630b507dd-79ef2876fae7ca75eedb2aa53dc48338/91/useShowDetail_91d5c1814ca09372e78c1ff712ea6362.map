{"version":3,"names":["useState","useEffect","Alert","supabase","useAuth","handleSupabaseError","UserRole","cov_2le0mjav29","s","useShowDetail","showId","onShare","onOpenMap","_authContext$authStat","f","_ref","_ref2","_slicedToArray","show","setShow","_ref3","_ref4","loading","setLoading","_ref5","_ref6","error","setError","_ref7","_ref8","isFavorite","setIsFavorite","_ref9","_ref0","isClaimingShow","_setIsClaimingShow","_ref1","_ref10","_isShowClaimed","setIsShowClaimed","_ref11","_ref12","participatingDealers","setParticipatingDealers","_ref13","_ref14","loadingDealers","setLoadingDealers","authContext","user","b","authState","_ref15","_ref16","isShowOrganizer","setIsShowOrganizer","_ref17","_ref18","isCurrentUserOrganizer","setIsCurrentUserOrganizer","userRole","role","hasOrganizerRole","SHOW_ORGANIZER","fetchShowDetails","fetchParticipatingDealers","checkIfFavorite","_ref19","_asyncToGenerator","_ref20","from","select","eq","single","showData","data","showError","Error","organizerProfile","organizer_id","_ref21","profileData","profileError","combinedData","Object","assign","profiles","id","claimed_by","console","apply","arguments","_ref22","_ref23","participants","participantsError","length","participantUserIds","_toConsumableArray","Set","map","p","userid","_ref24","in","or","dealerProfiles","profilesError","dealers","profile","_ref25","_ref26","_ref27","name","first_name","last_name","trim","substring","profileImageUrl","profile_image_url","toUpperCase","accountType","account_type","_ref28","_session$user","_ref29","auth","getSession","session","_ref30","toggleFavorite","_ref31","_ref32","sessionError","alert","userId","_ref33","delete","_ref34","insert","user_id","show_id","appError","shareShow","_ref35","openMapLocation","address","location","handleClaimShow"],"sources":["useShowDetail.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { Alert } from 'react-native';\nimport { supabase } from '../../../supabase';\nimport { useAuth } from '../../../contexts/AuthContext';\nimport { handleSupabaseError } from '../../../services/errorService';\nimport { UserRole } from '../../../types';  // shared UserRole definition\n\ninterface Dealer {\n  id: string;\n  name: string;\n  profileImageUrl?: string;\n  role: UserRole;\n  accountType?: string;\n}\n\ninterface ShowDetails {\n  id: string;\n  title: string;\n  description?: string;\n  location?: string;\n  address?: string;\n  start_date?: string;\n  end_date?: string;\n  start_time?: string;\n  end_time?: string;\n  entry_fee?: number | string;\n  organizer_id?: string;\n  claimed_by?: string;\n  profiles?: {\n    id?: string;\n    first_name?: string;\n    last_name?: string;\n    profile_image_url?: string;\n    username?: string;\n    full_name?: string;\n    avatar_url?: string;\n  };\n  [key: string]: any; // For additional properties\n}\n\ninterface UseShowDetailResult {\n  show: ShowDetails | null;\n  loading: boolean;\n  error: string | null;\n  isFavorite: boolean;\n  isShowOrganizer: boolean;\n  isCurrentUserOrganizer: boolean;\n  isClaimingShow: boolean;\n  participatingDealers: Dealer[];\n  loadingDealers: boolean;\n  fetchShowDetails: () => Promise<void>;\n  toggleFavorite: () => Promise<void>;\n  shareShow: () => Promise<void>;\n  openMapLocation: () => void;\n  handleClaimShow: () => void;\n}\n\n/**\n * Custom hook to handle show detail data fetching and state management\n * @param showId The ID of the show to fetch\n * @param onShare Function to handle sharing the show\n * @param onOpenMap Function to handle opening the map\n */\nexport const useShowDetail = (\n  showId: string,\n  onShare: (show: ShowDetails) => Promise<void>,\n  onOpenMap: (address: string) => void\n): UseShowDetailResult => {\n  const [show, setShow] = useState<ShowDetails | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [isFavorite, setIsFavorite] = useState(false);\n  const [isClaimingShow, _setIsClaimingShow] = useState(false);\n  // Tracks whether the show has already been claimed by an organizer\n  const [_isShowClaimed, setIsShowClaimed] = useState(false);\n  const [participatingDealers, setParticipatingDealers] = useState<Dealer[]>([]);\n  const [loadingDealers, setLoadingDealers] = useState(false);\n  \n  // Auth context for current user\n  const authContext = useAuth();\n  const user = authContext.authState?.user || null;\n  \n  // Derived state\n  const [isShowOrganizer, setIsShowOrganizer] = useState(false);\n  const [isCurrentUserOrganizer, setIsCurrentUserOrganizer] = useState(false);\n\n  // Check if user is a show organizer\n  useEffect(() => {\n    if (user) {\n      const userRole = user.role as UserRole;\n      const hasOrganizerRole = userRole === UserRole.SHOW_ORGANIZER;\n      setIsShowOrganizer(hasOrganizerRole);\n    } else {\n      setIsShowOrganizer(false);\n    }\n  }, [user]);\n\n  // Fetch show details and dealers when showId changes\n  useEffect(() => {\n    fetchShowDetails();\n    fetchParticipatingDealers();\n    checkIfFavorite();\n  }, [showId]);\n\n  /**\n   * Fetch show details from the database\n   */\n  const fetchShowDetails = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      /* ------------------------------------------------------------------\n       * Step 1: Fetch the show row on its own (no joins)\n       * ------------------------------------------------------------------ */\n      const {\n        data: showData,\n        error: showError,\n      } = await supabase.from('shows').select('*').eq('id', showId).single();\n\n      if (showError) throw showError;\n      if (!showData) throw new Error('Show not found');\n\n      /* ------------------------------------------------------------------\n       * Step 2: If the show has an organiser, fetch their profile\n       * ------------------------------------------------------------------ */\n      let organizerProfile: any = null;\n      if (showData.organizer_id) {\n        const {\n          data: profileData,\n          error: profileError,\n        } = await supabase\n          .from('profiles')\n          .select(\n            'id, first_name, last_name, profile_image_url, username, full_name, avatar_url'\n          )\n          .eq('id', showData.organizer_id)\n          .single();\n\n        if (!profileError && profileData) {\n          organizerProfile = profileData;\n        }\n      }\n\n      /* ------------------------------------------------------------------\n       * Step 3: Combine the data and update component state\n       * ------------------------------------------------------------------ */\n      const combinedData = {\n        ...showData,\n        profiles: organizerProfile,\n      };\n\n      setShow(combinedData);\n      setIsCurrentUserOrganizer(user?.id === showData.organizer_id);\n      setIsShowClaimed(!!showData.claimed_by);\n    } catch (error) {\n      console.error('Error fetching show details:', error);\n      setError('Failed to load show details');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  /**\n   * Fetch participating dealers for the show\n   */\n  const fetchParticipatingDealers = async () => {\n    setLoadingDealers(true);\n    try {\n      const { data: participants, error: participantsError } = await supabase\n        .from('show_participants')\n        .select('userid')\n        .eq('showid', showId);\n\n      if (participantsError) throw participantsError;\n      if (!participants || participants.length === 0) {\n        setParticipatingDealers([]);\n        return;\n      }\n\n      const participantUserIds = [...new Set(participants.map((p) => p.userid))];\n      const { data: dealerProfiles, error: profilesError } = await supabase\n        .from('profiles')\n        .select('id, first_name, last_name, profile_image_url, role, account_type')\n        .in('id', participantUserIds)\n        // Roles are stored lowercase in DB, so query accordingly\n        .or('role.eq.mvp_dealer,role.eq.dealer');\n\n      if (profilesError) throw profilesError;\n\n      const dealers = (dealerProfiles || []).map((profile) => ({\n        id: profile.id,\n        name: `${profile.first_name ?? ''} ${profile.last_name ?? ''}`.trim() || profile.id.substring(0, 8),\n        profileImageUrl: profile.profile_image_url,\n        // Normalise role to uppercase so downstream comparisons\n        // (`dealer.role === 'MVP_DEALER'`, etc.) work reliably.\n        role: ((profile.role ?? '') as string).toUpperCase() as UserRole,\n        accountType: profile.account_type,\n      }));\n      setParticipatingDealers(dealers);\n    } catch (error) {\n      console.error('Error in fetchParticipatingDealers:', error);\n      // Don't set error state here to avoid disrupting the main UI if dealers can't load\n    } finally {\n      setLoadingDealers(false);\n    }\n  };\n\n  /**\n   * Check if the current show is marked as a favorite by the user\n   */\n  const checkIfFavorite = async () => {\n    try {\n      const { data: { session } } = await supabase.auth.getSession();\n      if (!session?.user?.id) {\n        setIsFavorite(false);\n        return;\n      }\n      const { data, error } = await supabase\n        .from('user_favorite_shows')\n        .select()\n        .eq('user_id', session.user.id)\n        .eq('show_id', showId)\n        .single();\n      setIsFavorite(!error && !!data);\n    } catch (error) {\n      console.error('Error checking favorite status:', error);\n    }\n  };\n\n  /**\n   * Toggle the favorite status of the show\n   */\n  const toggleFavorite = async () => {\n    try {\n      const { data: { session }, error: sessionError } = await supabase.auth.getSession();\n      if (sessionError || !session?.user) {\n        Alert.alert('Sign In Required', 'Please sign in to save favorites');\n        return;\n      }\n      const userId = session.user.id;\n\n      if (isFavorite) {\n        const { error } = await supabase\n          .from('user_favorite_shows')\n          .delete()\n          .eq('user_id', userId)\n          .eq('show_id', showId);\n        if (error) throw error;\n        setIsFavorite(false);\n      } else {\n        const { error } = await supabase\n          .from('user_favorite_shows')\n          .insert([{ user_id: userId, show_id: showId }]);\n        if (error) throw error;\n        setIsFavorite(true);\n      }\n    } catch (error) {\n      const appError = handleSupabaseError(error);\n      console.error('🚨 UNEXPECTED ERROR in toggleFavorite:', appError);\n      Alert.alert('Error', 'An unexpected error occurred while updating favorites.');\n    }\n  };\n\n  /**\n   * Share the show details\n   */\n  const shareShow = async () => {\n    if (!show) return;\n    try {\n      // Cast `show` explicitly to `ShowDetails` to satisfy the expected type\n      await onShare(show as ShowDetails);\n    } catch (error) {\n      console.error('Error sharing:', error);\n    }\n  };\n\n  /**\n   * Open the show location in a map app\n   */\n  const openMapLocation = () => {\n    if (!show) return;\n    const address = show.address || show.location || '';\n    onOpenMap(address);\n  };\n\n  /**\n   * Handle claiming a show (placeholder)\n   */\n  const handleClaimShow = () => {\n    Alert.alert(\"Claim Show\", \"This feature is coming soon!\");\n  };\n\n  return {\n    show,\n    loading,\n    error,\n    isFavorite,\n    isShowOrganizer,\n    isCurrentUserOrganizer,\n    isClaimingShow,\n    participatingDealers,\n    loadingDealers,\n    fetchShowDetails,\n    toggleFavorite,\n    shareShow,\n    openMapLocation,\n    handleClaimShow\n  };\n};\n\nexport default useShowDetail;\n"],"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","ignoreList":[]}