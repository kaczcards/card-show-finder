{"version":3,"names":["useQuery","useMutation","useQueryClient","Alert","Share","Linking","supabase","useAuth","handleSupabaseError","UserRole","cov_tz6l8rh26","s","useShowDetailQuery","showId","_authContext$authStat","_data$show","f","queryClient","authContext","user","b","authState","fetchShowDetails","_ref","_asyncToGenerator","_ref2","rpc","show_id","data","error","Error","message","enhanceWithSocialMediaLinks","_ref3","privilegedDealers","participatingDealers","filter","dealer","role","MVP_DEALER","SHOW_ORGANIZER","length","_ref4","from","select","in","map","id","profiles","console","profileMap","Map","forEach","profile","set","facebookUrl","facebook_url","instagramUrl","instagram_url","twitterUrl","twitter_url","whatnotUrl","whatnot_url","ebayStoreUrl","ebay_store_url","enhancedDealers","has","Object","assign","get","err","_x","apply","arguments","enhancedData","_ref5","queryKey","queryFn","staleTime","retry","isLoading","isError","refetch","isCurrentUserOrganizer","show","organizer_id","isShowOrganizer","checkIfFavorite","_ref6","_session$user","_ref7","auth","getSession","session","_ref8","eq","single","_ref9","enabled","_ref9$data","isFavorite","_refetchFavorite","toggleFavoriteMutation","mutationFn","_mutationFn","_ref0","sessionError","userId","_ref1","delete","_ref10","insert","user_id","onSuccess","newFavoriteStatus","setQueryData","invalidateQueries","onError","appError","alert","toggleFavorite","_ref11","mutate","formatShowDate","start_date","startDate","Date","options","weekday","year","month","day","toLocaleDateString","shareShow","_ref12","title","location","address","share","openMapLocation","encodedAddress","encodeURIComponent","url","openURL","catch","googleUrl","handleClaimShow","organizer","loading","isClaimingShow"],"sources":["useShowDetailQuery.ts"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Alert, Share, Linking } from 'react-native';\nimport { supabase } from '../supabase';\nimport { useAuth } from '../contexts/AuthContext';\nimport { handleSupabaseError } from '../services/errorService';\nimport { UserRole } from '../types';\n\ninterface Dealer {\n  id: string;\n  name: string;\n  profileImageUrl?: string;\n  role: UserRole;\n  accountType?: string;\n  boothLocation?: string;\n  // --- Social Media & Marketplace links (added for Task 8) ------------------\n  facebookUrl?: string;\n  instagramUrl?: string;\n  twitterUrl?: string;\n  whatnotUrl?: string;\n  ebayStoreUrl?: string;\n}\n\ninterface ShowDetails {\n  id: string;\n  title: string;\n  description?: string;\n  location?: string;\n  address?: string;\n  start_date?: string;\n  end_date?: string;\n  start_time?: string;\n  end_time?: string;\n  entry_fee?: number | string;\n  organizer_id?: string;\n  claimed_by?: string;\n  [key: string]: any; // For additional properties\n}\n\ninterface OrganizerProfile {\n  id?: string;\n  first_name?: string;\n  last_name?: string;\n  profile_image_url?: string;\n  username?: string;\n  full_name?: string;\n  avatar_url?: string;\n  [key: string]: any; // For additional properties\n}\n\ninterface ShowDetailResponse {\n  show: ShowDetails;\n  organizer: OrganizerProfile | null;\n  participatingDealers: Dealer[];\n  isFavoriteCount: number;\n}\n\n/**\n * Custom hook to fetch show details using React Query and the get_show_details_by_id RPC function\n * @param showId The ID of the show to fetch\n */\nexport const useShowDetailQuery = (showId: string) => {\n  const queryClient = useQueryClient();\n  const authContext = useAuth();\n  const user = authContext.authState?.user || null;\n  \n  // Function to fetch show details from the RPC\n  const fetchShowDetails = async () => {\n    const { data, error } = await supabase.rpc('get_show_details_by_id', { \n      show_id: showId \n    });\n    \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    if (!data || data.error) {\n      throw new Error(data?.error || 'Failed to load show details');\n    }\n    \n    // Enhanced version that adds social media links for MVP Dealers\n    const enhanceWithSocialMediaLinks = async (data: ShowDetailResponse) => {\n      // Find any dealers with elevated privileges (MVP Dealers or Show Organizers)\n      const privilegedDealers = data.participatingDealers.filter(\n        dealer =>\n          dealer.role === UserRole.MVP_DEALER ||\n          dealer.role === UserRole.SHOW_ORGANIZER\n      );\n      \n      if (privilegedDealers.length === 0) return data; // No privileged dealers to enhance\n      \n      try {\n        // Fetch profiles for all MVP dealers in a single batch\n        const { data: profiles, error } = await supabase\n          .from('profiles')\n          .select('id, facebook_url, instagram_url, twitter_url, whatnot_url, ebay_store_url')\n          .in('id', privilegedDealers.map(dealer => dealer.id));\n        \n        if (error || !profiles) {\n          console.error('Error fetching dealer social media:', error);\n          return data; // Return original data if there's an error\n        }\n        \n        // Create a map for easy lookup\n        const profileMap = new Map();\n        profiles.forEach(profile => {\n          profileMap.set(profile.id, {\n            facebookUrl: profile.facebook_url,\n            instagramUrl: profile.instagram_url,\n            twitterUrl: profile.twitter_url,\n            whatnotUrl: profile.whatnot_url,\n            ebayStoreUrl: profile.ebay_store_url\n          });\n        });\n        \n        // Enhance the dealers with social media links\n        const enhancedDealers = data.participatingDealers.map(dealer => {\n          if (\n            (dealer.role === UserRole.MVP_DEALER ||\n              dealer.role === UserRole.SHOW_ORGANIZER) &&\n            profileMap.has(dealer.id)\n          ) {\n            return {\n              ...dealer,\n              ...profileMap.get(dealer.id)\n            };\n          }\n          return dealer;\n        });\n        \n        return {\n          ...data,\n          participatingDealers: enhancedDealers\n        };\n      } catch (err) {\n        console.error('Unexpected error enhancing dealers with social media:', err);\n        return data; // Return original data if there's an error\n      }\n    };\n\n    // Apply the enhancement\n    const enhancedData = await enhanceWithSocialMediaLinks(data as ShowDetailResponse);\n    return enhancedData;\n  };\n  \n  // Use React Query to fetch and cache the show details\n  const { \n    data,\n    isLoading,\n    isError,\n    error,\n    refetch\n  } = useQuery({\n    queryKey: ['showDetails', showId],\n    queryFn: fetchShowDetails,\n    staleTime: 60 * 1000, // Consider data fresh for 1 minute\n    retry: 1, // Only retry once on failure\n  });\n  \n  // Check if the current user is the show organizer\n  const isCurrentUserOrganizer = user?.id === data?.show?.organizer_id;\n  \n  // Check if the user has a show organizer role\n  const isShowOrganizer = user?.role === UserRole.SHOW_ORGANIZER;\n  \n  // Check if the show is a favorite\n  const checkIfFavorite = async () => {\n    try {\n      const { data: { session } } = await supabase.auth.getSession();\n      if (!session?.user?.id) return false;\n      \n      const { data, error } = await supabase\n        .from('user_favorite_shows')\n        .select()\n        .eq('user_id', session.user.id)\n        .eq('show_id', showId)\n        .single();\n        \n      return !error && !!data;\n    } catch (error) {\n      console.error('Error checking favorite status:', error);\n      return false;\n    }\n  };\n  \n  // Use a query to check if the show is a favorite\n  const { \n    data: isFavorite = false,\n    refetch: _refetchFavorite\n  } = useQuery({\n    queryKey: ['showFavorite', showId, user?.id],\n    queryFn: checkIfFavorite,\n    enabled: !!user?.id, // Only run if user is logged in\n  });\n  \n  // Mutation for toggling favorite status\n  const toggleFavoriteMutation = useMutation({\n    mutationFn: async () => {\n      const { data: { session }, error: sessionError } = await supabase.auth.getSession();\n      if (sessionError || !session?.user) {\n        throw new Error('Please sign in to save favorites');\n      }\n      const userId = session.user.id;\n\n      if (isFavorite) {\n        const { error } = await supabase\n          .from('user_favorite_shows')\n          .delete()\n          .eq('user_id', userId)\n          .eq('show_id', showId);\n        if (error) throw error;\n        return false; // Not a favorite anymore\n      } else {\n        const { error } = await supabase\n          .from('user_favorite_shows')\n          .insert([{ user_id: userId, show_id: showId }]);\n        if (error) throw error;\n        return true; // Now a favorite\n      }\n    },\n    onSuccess: (newFavoriteStatus) => {\n      // Update the cache\n      queryClient.setQueryData(['showFavorite', showId, user?.id], newFavoriteStatus);\n      // Invalidate the show details to update the favorite count\n      queryClient.invalidateQueries({ queryKey: ['showDetails', showId] });\n    },\n    onError: (error) => {\n      const appError = handleSupabaseError(error);\n      console.error('ðŸš¨ UNEXPECTED ERROR in toggleFavorite:', appError);\n      Alert.alert('Error', 'An unexpected error occurred while updating favorites.');\n    }\n  });\n  \n  // Helper function to toggle favorite status\n  const toggleFavorite = async () => {\n    if (!user) {\n      Alert.alert('Sign In Required', 'Please sign in to save favorites');\n      return;\n    }\n    \n    toggleFavoriteMutation.mutate();\n  };\n  \n  // Helper function to format show date\n  const formatShowDate = (show: ShowDetails) => {\n    if (!show.start_date) return '';\n    \n    const startDate = new Date(show.start_date);\n    const options: Intl.DateTimeFormatOptions = { \n      weekday: 'long', \n      year: 'numeric', \n      month: 'long', \n      day: 'numeric' \n    };\n    \n    return startDate.toLocaleDateString('en-US', options);\n  };\n  \n  // Helper function to share the show\n  const shareShow = async () => {\n    if (!data?.show) return;\n    \n    try {\n      const show = data.show;\n      const message = `Check out this card show: ${show.title}\\n\\nWhen: ${formatShowDate(show)}\\nWhere: ${show.location || show.address}\\n\\nShared from Card Show Finder app`;\n      await Share.share({ message, title: show.title });\n    } catch (error) {\n      console.error('Error sharing:', error);\n    }\n  };\n  \n  // Helper function to open the map location\n  const openMapLocation = () => {\n    if (!data?.show) return;\n    \n    const address = data.show.address || data.show.location || '';\n    const encodedAddress = encodeURIComponent(address);\n    const url = `https://maps.apple.com/?q=${encodedAddress}`;\n    \n    Linking.openURL(url).catch(() => {\n      const googleUrl = `https://www.google.com/maps/search/?api=1&query=${encodedAddress}`;\n      Linking.openURL(googleUrl);\n    });\n  };\n  \n  // Helper function for claiming a show (placeholder)\n  const handleClaimShow = () => {\n    Alert.alert(\"Claim Show\", \"This feature is coming soon!\");\n  };\n  \n  return {\n    // Data from the query\n    show: data?.show || null,\n    organizer: data?.organizer || null,\n    participatingDealers: data?.participatingDealers || [],\n    \n    // Status\n    loading: isLoading,\n    error: isError ? (error as Error)?.message || 'An error occurred' : null,\n    isFavorite,\n    isShowOrganizer,\n    isCurrentUserOrganizer,\n    isClaimingShow: false, // Placeholder, can be implemented as needed\n    \n    // Functions\n    fetchShowDetails: refetch,\n    toggleFavorite,\n    shareShow,\n    openMapLocation,\n    handleClaimShow\n  };\n};\n\n// ------------------------------------------------------------------\n// Exports\n// ------------------------------------------------------------------\n\n// Default export\nexport default useShowDetailQuery;\n"],"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","ignoreList":[]}