{"version":3,"names":["supabase","StorageService","_classCallCheck","signedUrlCache","cov_q7bw4twtn","s","Map","defaultBucket","defaultExpiresIn","cacheBufferTime","_createClass","key","value","_getSignedUrl","_asyncToGenerator","path","options","arguments","length","undefined","b","f","cacheKey","getCacheKey","cachedUrl","getCachedUrl","data","error","expiresIn","_ref","storage","from","createSignedUrl","download","transform","signedUrl","Error","cacheSignedUrl","console","String","getSignedUrl","_x","apply","_uploadImage","userId","file","fileName","contentType","finalFileName","Date","now","filePath","fileData","startsWith","base64Data","split","base64ToUint8Array","Blob","File","_ref2","upload","upsert","uploadImage","_x2","_x3","_x4","_x5","_getImage","getImage","_x6","_getUserImage","getUserImage","_x7","_x8","_deleteImage","_ref3","remove","clearCacheForPath","deleteImage","_x9","_deleteUserImage","deleteUserImage","_x0","_x1","_listUserImages","_ref4","list","paths","filter","item","_item$metadata","metadata","isDir","map","name","listUserImages","_x10","_getMultipleImages","_this","results","Promise","all","_ref5","_ref6","warn","_x12","getMultipleImages","_x11","getFileNameFromPath","pathOrUrl","includes","url","URL","pathname","pop","getUserIdFromPath","parts","optionsKey","JSON","stringify","cached","get","expiresAt","delete","_this2","set","setTimeout","keys","clearCache","clear","base64","binaryString","globalThis","atob","chars","str","i","enc1","indexOf","charAt","enc2","enc3","enc4","chr1","chr2","chr3","fromCharCode","len","bytes","Uint8Array","charCodeAt","storageService"],"sources":["storageService.ts"],"sourcesContent":["import { supabase } from '../supabase';\n\n/**\n * Interface for URL cache entries\n */\ninterface SignedUrlCacheEntry {\n  url: string;\n  expiresAt: number; // Timestamp when the URL expires\n}\n\n/**\n * Options for generating signed URLs\n */\ninterface SignedUrlOptions {\n  /** URL expiration time in seconds (default: 1 hour) */\n  expiresIn?: number;\n  /** Whether to download the file (default: false) */\n  download?: boolean;\n  /** Transform options for images */\n  transform?: {\n    width?: number;\n    height?: number;\n    quality?: number;\n    format?: 'origin' | 'webp' | 'avif' | 'jpg' | 'jpeg' | 'png';\n  };\n}\n\n/**\n * Result of storage operations\n */\ninterface StorageResult<T> {\n  data: T | null;\n  error: Error | null;\n}\n\n/**\n * Storage Service\n * Handles operations related to image storage with signed URLs\n */\nclass StorageService {\n  // Cache for signed URLs to reduce API calls\n  private signedUrlCache: Map<string, SignedUrlCacheEntry> = new Map();\n  \n  // Default bucket name\n  private readonly defaultBucket: string = 'card_images';\n  \n  // Default expiration time for signed URLs (1 hour)\n  private readonly defaultExpiresIn: number = 3600;\n  \n  // Cache buffer time in seconds (5 minutes)\n  // URLs will be refreshed 5 minutes before actual expiration\n  private readonly cacheBufferTime: number = 300;\n\n  /**\n   * Generate a signed URL for an image\n   * @param path - Path to the image in storage\n   * @param options - Options for the signed URL\n   * @returns The signed URL or null if error\n   */\n  async getSignedUrl(\n    path: string,\n    options: SignedUrlOptions = {}\n  ): Promise<StorageResult<string>> {\n    try {\n      // Check cache first\n      const cacheKey = this.getCacheKey(path, options);\n      const cachedUrl = this.getCachedUrl(cacheKey);\n      \n      if (cachedUrl) {\n        return { data: cachedUrl, error: null };\n      }\n      \n      // Set default options\n      const expiresIn = options.expiresIn || this.defaultExpiresIn;\n      \n      // Generate signed URL\n      const { data, error } = await supabase.storage\n        .from(this.defaultBucket)\n        .createSignedUrl(path, expiresIn, {\n          download: options.download || false,\n          transform: options.transform\n        });\n      \n      if (error) {\n        throw error;\n      }\n      \n      if (!data?.signedUrl) {\n        throw new Error('Failed to generate signed URL');\n      }\n      \n      // Cache the URL\n      this.cacheSignedUrl(cacheKey, data.signedUrl, expiresIn);\n      \n      return { data: data.signedUrl, error: null };\n    } catch (error) {\n      console.error('Error generating signed URL:', error);\n      return { data: null, error: error instanceof Error ? error : new Error(String(error)) };\n    }\n  }\n  \n  /**\n   * Upload an image to storage\n   * @param userId - User ID for folder path\n   * @param file - File to upload (base64 string, Blob, or File)\n   * @param fileName - Optional file name (generated if not provided)\n   * @param contentType - Content type of the file\n   * @returns Path to the uploaded file or null if error\n   */\n  async uploadImage(\n    userId: string,\n    file: string | Blob | File,\n    fileName?: string,\n    contentType?: string\n  ): Promise<StorageResult<string>> {\n    try {\n      // Generate file name if not provided\n      const finalFileName = fileName || `image_${Date.now()}`;\n      \n      // Create path with user folder structure\n      const filePath = `${userId}/${finalFileName}`;\n      \n      let fileData: File | Blob | Uint8Array;\n      \n      // Handle different file types\n      if (typeof file === 'string' && file.startsWith('data:')) {\n        // Base64 data URL\n        const base64Data = file.split(',')[1];\n        fileData = this.base64ToUint8Array(base64Data);\n        \n        // Extract content type if not provided\n        if (!contentType) {\n          contentType = file.split(';')[0].split(':')[1];\n        }\n      } else if (file instanceof Blob || file instanceof File) {\n        fileData = file;\n      } else if (typeof file === 'string') {\n        // Assume it's already base64 encoded without data URL prefix\n        fileData = this.base64ToUint8Array(file);\n      } else {\n        throw new Error('Unsupported file format');\n      }\n      \n      // Upload the file\n      const { data, error } = await supabase.storage\n        .from(this.defaultBucket)\n        .upload(filePath, fileData, {\n          contentType: contentType || 'image/jpeg',\n          upsert: true\n        });\n      \n      if (error) {\n        throw error;\n      }\n      \n      if (!data?.path) {\n        throw new Error('Upload successful but path not returned');\n      }\n      \n      return { data: data.path, error: null };\n    } catch (error) {\n      console.error('Error uploading image:', error);\n      return { data: null, error: error instanceof Error ? error : new Error(String(error)) };\n    }\n  }\n  \n  /**\n   * Get an image with a signed URL\n   * @param path - Path to the image\n   * @param options - Options for the signed URL\n   * @returns The signed URL or null if error\n   */\n  async getImage(\n    path: string,\n    options: SignedUrlOptions = {}\n  ): Promise<StorageResult<string>> {\n    return this.getSignedUrl(path, options);\n  }\n  \n  /**\n   * Get a user's image with a signed URL\n   * @param userId - User ID\n   * @param fileName - File name\n   * @param options - Options for the signed URL\n   * @returns The signed URL or null if error\n   */\n  async getUserImage(\n    userId: string,\n    fileName: string,\n    options: SignedUrlOptions = {}\n  ): Promise<StorageResult<string>> {\n    const path = `${userId}/${fileName}`;\n    return this.getSignedUrl(path, options);\n  }\n  \n  /**\n   * Delete an image from storage\n   * @param path - Path to the image\n   * @returns Success status\n   */\n  async deleteImage(path: string): Promise<StorageResult<boolean>> {\n    try {\n      const { error } = await supabase.storage\n        .from(this.defaultBucket)\n        .remove([path]);\n      \n      if (error) {\n        throw error;\n      }\n      \n      // Clear any cached URLs for this path\n      this.clearCacheForPath(path);\n      \n      return { data: true, error: null };\n    } catch (error) {\n      console.error('Error deleting image:', error);\n      return { data: null, error: error instanceof Error ? error : new Error(String(error)) };\n    }\n  }\n  \n  /**\n   * Delete a user's image from storage\n   * @param userId - User ID\n   * @param fileName - File name\n   * @returns Success status\n   */\n  async deleteUserImage(\n    userId: string,\n    fileName: string\n  ): Promise<StorageResult<boolean>> {\n    const path = `${userId}/${fileName}`;\n    return this.deleteImage(path);\n  }\n  \n  /**\n   * List all images for a user\n   * @param userId - User ID\n   * @returns List of image paths or null if error\n   */\n  async listUserImages(userId: string): Promise<StorageResult<string[]>> {\n    try {\n      const { data, error } = await supabase.storage\n        .from(this.defaultBucket)\n        .list(userId);\n      \n      if (error) {\n        throw error;\n      }\n      \n      // Extract file paths\n      const paths = data\n        .filter(item => !item.metadata?.isDir)\n        .map(item => `${userId}/${item.name}`);\n      \n      return { data: paths, error: null };\n    } catch (error) {\n      console.error('Error listing user images:', error);\n      return { data: null, error: error instanceof Error ? error : new Error(String(error)) };\n    }\n  }\n  \n  /**\n   * Get multiple images with signed URLs\n   * @param paths - Array of image paths\n   * @param options - Options for the signed URLs\n   * @returns Object mapping paths to signed URLs, or null if error\n   */\n  async getMultipleImages(\n    paths: string[],\n    options: SignedUrlOptions = {}\n  ): Promise<StorageResult<Record<string, string>>> {\n    try {\n      const results: Record<string, string> = {};\n      \n      // Process all paths in parallel\n      await Promise.all(\n        paths.map(async (path) => {\n          const { data, error } = await this.getSignedUrl(path, options);\n          \n          if (error) {\n            console.warn(`Error getting signed URL for ${path}:`, error);\n            return;\n          }\n          \n          if (data) {\n            results[path] = data;\n          }\n        })\n      );\n      \n      return { data: results, error: null };\n    } catch (error) {\n      console.error('Error getting multiple images:', error);\n      return { data: null, error: error instanceof Error ? error : new Error(String(error)) };\n    }\n  }\n  \n  /**\n   * Extract file name from a path or URL\n   * @param pathOrUrl - Path or URL to extract file name from\n   * @returns File name\n   */\n  getFileNameFromPath(pathOrUrl: string): string {\n    // Handle URLs\n    if (pathOrUrl.includes('://')) {\n      const url = new URL(pathOrUrl);\n      pathOrUrl = url.pathname;\n    }\n    \n    // Extract file name\n    return pathOrUrl.split('/').pop() || '';\n  }\n  \n  /**\n   * Extract user ID from a path\n   * @param path - Path to extract user ID from\n   * @returns User ID\n   */\n  getUserIdFromPath(path: string): string {\n    const parts = path.split('/');\n    return parts.length > 1 ? parts[0] : '';\n  }\n  \n  /**\n   * Generate a cache key for a path and options\n   * @param path - Path to the image\n   * @param options - Options for the signed URL\n   * @returns Cache key\n   */\n  private getCacheKey(path: string, options: SignedUrlOptions): string {\n    // Create a stable JSON representation of options\n    const optionsKey = JSON.stringify({\n      expiresIn: options.expiresIn || this.defaultExpiresIn,\n      download: options.download || false,\n      transform: options.transform || {}\n    });\n    \n    return `${path}:${optionsKey}`;\n  }\n  \n  /**\n   * Get a cached URL if it exists and is not expired\n   * @param cacheKey - Cache key\n   * @returns Cached URL or null if not found or expired\n   */\n  private getCachedUrl(cacheKey: string): string | null {\n    const cached = this.signedUrlCache.get(cacheKey);\n    \n    if (!cached) {\n      return null;\n    }\n    \n    // Check if the URL is about to expire (within buffer time)\n    const now = Date.now();\n    if (cached.expiresAt - now <= this.cacheBufferTime * 1000) {\n      // URL is about to expire, remove it from cache\n      this.signedUrlCache.delete(cacheKey);\n      return null;\n    }\n    \n    return cached.url;\n  }\n  \n  /**\n   * Cache a signed URL\n   * @param cacheKey - Cache key\n   * @param url - Signed URL\n   * @param expiresIn - Expiration time in seconds\n   */\n  private cacheSignedUrl(cacheKey: string, url: string, expiresIn: number): void {\n    // Calculate expiration timestamp\n    const expiresAt = Date.now() + expiresIn * 1000;\n    \n    // Store in cache\n    this.signedUrlCache.set(cacheKey, { url, expiresAt });\n    \n    // Set up automatic cache cleanup\n    setTimeout(() => {\n      this.signedUrlCache.delete(cacheKey);\n    }, (expiresIn - this.cacheBufferTime) * 1000);\n  }\n  \n  /**\n   * Clear all cached URLs for a specific path\n   * @param path - Path to clear cache for\n   */\n  private clearCacheForPath(path: string): void {\n    // Find and remove all cache entries for this path\n    for (const key of this.signedUrlCache.keys()) {\n      if (key.startsWith(`${path}:`)) {\n        this.signedUrlCache.delete(key);\n      }\n    }\n  }\n  \n  /**\n   * Clear the entire URL cache\n   */\n  clearCache(): void {\n    this.signedUrlCache.clear();\n  }\n\n  /**\n   * Convert a base-64 string to Uint8Array (React-Native friendly)\n   * @param base64 - Base-64 encoded data (without data-URI prefix)\n   */\n  private base64ToUint8Array(base64: string): Uint8Array {\n    // atob is available in React Native >= 0.64 / Expo SDK 41+. Add fallback if needed.\n    // Use atob when available (modern React-Native & Expo provide it).\n    // For environments without atob (very old RN versions), perform\n    // a manual base-64 decoding.\n    const binaryString = globalThis.atob\n      ? globalThis.atob(base64)\n      : (() => {\n          const chars =\n            'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n          let str = '';\n          let i = 0;\n          for (; i < base64.length; i += 4) {\n            const enc1 = chars.indexOf(base64.charAt(i));\n            const enc2 = chars.indexOf(base64.charAt(i + 1));\n            const enc3 = chars.indexOf(base64.charAt(i + 2));\n            const enc4 = chars.indexOf(base64.charAt(i + 3));\n\n            const chr1 = (enc1 << 2) | (enc2 >> 4);\n            const chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            const chr3 = ((enc3 & 3) << 6) | enc4;\n\n            str += String.fromCharCode(chr1);\n            if (enc3 !== 64) str += String.fromCharCode(chr2);\n            if (enc4 !== 64) str += String.fromCharCode(chr3);\n          }\n          return str;\n        })();\n\n    const len = binaryString.length;\n    const bytes = new Uint8Array(len);\n    for (let i = 0; i < len; i++) {\n      bytes[i] = binaryString.charCodeAt(i);\n    }\n    return bytes;\n  }\n}\n\n// Export a singleton instance\nexport const storageService = new StorageService();\n"],"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","ignoreList":[]}