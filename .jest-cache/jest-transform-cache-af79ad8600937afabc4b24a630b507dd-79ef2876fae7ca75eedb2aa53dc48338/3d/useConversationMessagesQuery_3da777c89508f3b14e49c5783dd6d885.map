{"version":3,"names":["useQuery","useQueryClient","useMutation","useEffect","useState","useRef","supabase","messagingService","cov_c751kqvb4","s","useConversationMessagesQuery","conversationId","userId","f","queryClient","_ref","_ref2","_slicedToArray","isSubscribed","setIsSubscribed","hasMarkedAsReadRef","_ref3","queryKey","queryFn","_queryFn","_asyncToGenerator","b","_ref4","rpc","input_convo_id","data","error","console","warn","message","Array","isArray","Error","rows","map","row","message_id","conversation_id","id","sender_id","message_text","created_at","read_by_user_ids","sender_profile","err","getMessages","apply","arguments","enabled","staleTime","cacheTime","retry","retryDelay","attempt","Math","min","onError","onSuccess","current","length","markConversationAsRead","then","invalidateQueries","catch","messages","isLoading","rawError","refetch","formattedError","channel","subscribeToMessages","newMessage","setQueryData","oldData","some","msg","concat","_toConsumableArray","markMessageAsRead","unsubscribe","sendMessageMutation","mutationFn","_mutationFn","_ref5","_conversation$partici","messageText","conversation","getQueryData","recipientId","participants","user_id","type","sendMessage","sendGroupMessage","_x","onMutate","_onMutate","_ref6","cancelQueries","optimisticMessage","Date","now","toISOString","_x2","_","context","_context$optimisticMe","__","filter","_context$optimisticMe2","allMessagesRead","every","_message$read_by_user","includes","mutate","isSending","isPending"],"sources":["useConversationMessagesQuery.ts"],"sourcesContent":["import { useQuery, useQueryClient, useMutation } from '@tanstack/react-query';\nimport { useEffect, useState, useRef } from 'react';\nimport { supabase } from '../supabase';\nimport * as messagingService from '../services/messagingService';\nimport { Message } from '../services/messagingService';\n\n/**\n * Custom hook for fetching and managing messages for a specific conversation with React Query\n * Includes real-time updates and optimized data fetching\n * \n * Integration with PostgreSQL RPC functions:\n * - Uses 'get_conversation_messages' RPC function with 'input_convo_id' parameter\n * - Defined in migration: 20250711120000_create_message_rpc.sql\n * - Maps returned fields (message_id, etc.) to Message interface properties\n * - Falls back to messagingService.getMessages() if RPC fails\n */\nexport const useConversationMessagesQuery = (\n  conversationId: string | null,\n  userId: string | null\n) => {\n  const queryClient = useQueryClient();\n  const [isSubscribed, setIsSubscribed] = useState(false);\n  /**\n   * Track whether we've already called `markConversationAsRead`\n   * for the current conversation to avoid an infinite render loop.\n   */\n  const hasMarkedAsReadRef = useRef<string | null>(null);\n\n  // Main query to fetch messages for the conversation\n  const {\n    data: messages,\n    isLoading,\n    error: rawError,\n    refetch\n  } = useQuery<Message[], Error>({\n    queryKey: ['messages', conversationId],\n    queryFn: async () => {\n      if (!conversationId) return [];\n      \n      try {\n        // Use the RPC function for optimized fetching\n        // This calls the PostgreSQL function 'get_conversation_messages' defined in\n        // migration 20250711120000_create_message_rpc.sql\n        const { data, error } = await supabase\n          .rpc('get_conversation_messages', { \n            // Parameter name must match the SQL function parameter\n            input_convo_id: conversationId \n          });\n          \n        if (error) {\n          console.warn('[useConversationMessagesQuery] RPC error:', error.message);\n          throw error;\n        }\n\n        // Validate returned data structure\n        if (!data || !Array.isArray(data)) {\n          console.warn('[useConversationMessagesQuery] RPC returned no data or invalid format');\n          throw new Error('Invalid data returned from RPC');\n        }\n\n        // Map SQL result fields to match our Message interface\n        // The field names from the RPC function (message_id, etc.) need to be mapped to our interface\n        const rows = data as any[];\n        return rows.map((row) => {\n          // Verify required fields exist\n          if (!row.message_id || !row.conversation_id) {\n            console.warn('[useConversationMessagesQuery] Missing required fields in message:', row);\n          }\n          \n          // Transform the data to match the Message interface\n          return {\n            id: row.message_id,\n            conversation_id: row.conversation_id,\n            sender_id: row.sender_id,\n            message_text: row.message_text,\n            created_at: row.created_at,\n            read_by_user_ids: row.read_by_user_ids,\n            sender_profile: row.sender_profile\n          } as Message;\n        });\n      } catch (err) {\n        console.error('Error fetching messages with RPC, falling back to service:', err);\n        // Fallback to the service method if RPC fails\n        return await messagingService.getMessages(conversationId);\n      }\n    },\n    enabled: !!conversationId,\n    staleTime: 1000 * 60, // Consider data fresh for 1 minute\n    cacheTime: 1000 * 60 * 10, // Keep in cache for 10 minutes\n    // Retry a few times with exponential back-off\n    retry: 3,\n    retryDelay: attempt => Math.min(1000 * 2 ** attempt, 30_000),\n    // Log errors for easier debugging / observability\n    onError: (err) => {\n      /* eslint-disable no-console */\n      console.error('[useConversationMessagesQuery] fetch error:', err);\n      /* eslint-enable no-console */\n    },\n    // Mark conversation as read when messages are successfully fetched\n    onSuccess: (data) => {\n      // Reset the ref whenever the user switches conversations\n      if (hasMarkedAsReadRef.current !== conversationId) {\n        hasMarkedAsReadRef.current = null;\n      }\n\n      // Preconditions\n      if (\n        !conversationId ||\n        !userId ||\n        !data ||\n        data.length === 0 ||\n        hasMarkedAsReadRef.current === conversationId // already marked\n      ) {\n        return;\n      }\n\n      messagingService\n        .markConversationAsRead(conversationId, userId)\n        .then(() => {\n          // Remember that we've marked this conversation\n          hasMarkedAsReadRef.current = conversationId;\n\n          // Update the conversations list to reflect read status\n          queryClient.invalidateQueries({\n            queryKey: ['conversations', userId],\n          });\n        })\n        .catch(err =>\n          console.error('Error marking conversation as read:', err)\n        );\n    }\n  });\n\n  // Structured error exposed to consumers\n  const formattedError = rawError\n    ? {\n        message: rawError.message,\n        retry: () => refetch(),\n      }\n    : null;\n\n  // Setup real-time subscription for new messages in this conversation\n  useEffect(() => {\n    if (!conversationId || isSubscribed) return;\n\n    // Subscribe to messages table for real-time updates for this conversation\n    const channel = messagingService.subscribeToMessages(\n      conversationId,\n      (newMessage) => {\n        // Update the messages cache when a new message arrives\n        queryClient.setQueryData(['messages', conversationId], (oldData: Message[] | undefined) => {\n          if (!oldData) return [newMessage];\n          \n          // Check if message already exists to prevent duplicates\n          if (oldData.some(msg => msg.id === newMessage.id)) {\n            return oldData;\n          }\n          \n          return [...oldData, newMessage];\n        });\n        \n        // If the message is from someone else, mark it as read\n        if (userId && newMessage.sender_id !== userId) {\n          messagingService.markMessageAsRead(newMessage.id, userId);\n        }\n      }\n    );\n\n    setIsSubscribed(true);\n\n    // Cleanup subscription on unmount\n    return () => {\n      channel.unsubscribe();\n      setIsSubscribed(false);\n    };\n  }, [conversationId, queryClient, userId, isSubscribed]);\n\n  // Mutation for sending a new message\n  const sendMessageMutation = useMutation({\n    mutationFn: async ({ messageText }: { messageText: string }) => {\n      if (!userId || !conversationId) throw new Error('Missing required parameters');\n      \n      // Get the conversation to find the recipient\n      const conversation = queryClient.getQueryData<any>(['conversation', conversationId]);\n      const recipientId = conversation?.participants?.[0]?.user_id || '';\n      \n      if (conversation?.type === 'direct' || !conversation?.type) {\n        return await messagingService.sendMessage(userId, recipientId, messageText, conversationId);\n      } else {\n        return await messagingService.sendGroupMessage(userId, conversationId, messageText);\n      }\n    },\n    onMutate: async ({ messageText }) => {\n      if (!userId || !conversationId) return;\n      \n      // Cancel any outgoing refetches\n      await queryClient.cancelQueries({ queryKey: ['messages', conversationId] });\n      \n      // Create optimistic message\n      const optimisticMessage: Partial<Message> = {\n        id: `temp-${Date.now()}`,\n        conversation_id: conversationId,\n        sender_id: userId,\n        message_text: messageText,\n        created_at: new Date().toISOString(),\n        read_by_user_ids: [userId],\n        sender_profile: {\n          id: userId\n        }\n      };\n      \n      // Add optimistic message to the messages list\n      queryClient.setQueryData(['messages', conversationId], (oldData: Message[] | undefined) => {\n        if (!oldData) return [optimisticMessage as Message];\n        return [...oldData, optimisticMessage as Message];\n      });\n      \n      return { optimisticMessage };\n    },\n    onSuccess: (newMessage, _, context) => {\n      if (!conversationId) return;\n      \n      // Replace optimistic message with the real one\n      queryClient.setQueryData(['messages', conversationId], (oldData: Message[] | undefined) => {\n        if (!oldData) return [newMessage];\n        \n        return oldData.map(message => \n          message.id === (context?.optimisticMessage as Message)?.id ? newMessage : message\n        );\n      });\n      \n      // Update the conversations list with the new message\n      queryClient.invalidateQueries({\n        queryKey: ['conversations', userId],\n      });\n    },\n    onError: (_, __, context) => {\n      if (!conversationId) return;\n      \n      // Remove the optimistic message on error\n      queryClient.setQueryData(['messages', conversationId], (oldData: Message[] | undefined) => {\n        if (!oldData) return [];\n        \n        return oldData.filter(message => \n          message.id !== (context?.optimisticMessage as Message)?.id\n        );\n      });\n    }\n  });\n\n  // Check if all messages have been read\n  const allMessagesRead = messages?.every(message => \n    message.read_by_user_ids?.includes(userId || '')\n  ) || false;\n\n  return {\n    messages: messages || [],\n    isLoading,\n    error: formattedError,\n    refetch,\n    allMessagesRead,\n    sendMessage: (messageText: string) => sendMessageMutation.mutate({ messageText }),\n    isSending: sendMessageMutation.isPending\n  };\n};\n"],"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","ignoreList":[]}