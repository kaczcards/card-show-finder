c428aca61c115008aad5d126869fc415
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
describe('JavaScript Environment', function () {
  it('supports basic operations', function () {
    expect(1 + 1).toBe(2);
    expect('hello').toHaveLength(5);
    expect([1, 2, 3]).toContain(2);
    expect({
      name: 'test'
    }).toHaveProperty('name');
  });
  it('supports async/await', (0, _asyncToGenerator2.default)(function* () {
    var result = yield Promise.resolve('async works');
    expect(result).toBe('async works');
  }));
});
describe('TypeScript Environment', function () {
  it('supports TypeScript types', function () {
    var user = {
      id: 1,
      name: 'Test User'
    };
    expect(user.id).toBe(1);
    expect(user.name).toBe('Test User');
    expect(user.active).toBeUndefined();
  });
  it('supports TypeScript generics', function () {
    function getFirst(array) {
      return array[0];
    }
    expect(getFirst([1, 2, 3])).toBe(1);
    expect(getFirst(['a', 'b', 'c'])).toBe('a');
    expect(getFirst([])).toBeUndefined();
  });
});
describe('Jest Test Environment', function () {
  it('supports mocks', function () {
    var mockFn = jest.fn();
    mockFn('test');
    expect(mockFn).toHaveBeenCalled();
    expect(mockFn).toHaveBeenCalledWith('test');
  });
  it('supports snapshots', function () {
    var data = {
      timestamp: new Date().toISOString().split('T')[0],
      message: 'Smoke test complete',
      success: true
    };
    expect(data).toMatchSnapshot({
      timestamp: expect.any(String)
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZXNjcmliZSIsIml0IiwiZXhwZWN0IiwidG9CZSIsInRvSGF2ZUxlbmd0aCIsInRvQ29udGFpbiIsIm5hbWUiLCJ0b0hhdmVQcm9wZXJ0eSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsImRlZmF1bHQiLCJyZXN1bHQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInVzZXIiLCJpZCIsImFjdGl2ZSIsInRvQmVVbmRlZmluZWQiLCJnZXRGaXJzdCIsImFycmF5IiwibW9ja0ZuIiwiamVzdCIsImZuIiwidG9IYXZlQmVlbkNhbGxlZCIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwiZGF0YSIsInRpbWVzdGFtcCIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsInNwbGl0IiwibWVzc2FnZSIsInN1Y2Nlc3MiLCJ0b01hdGNoU25hcHNob3QiLCJhbnkiLCJTdHJpbmciXSwic291cmNlcyI6WyJzbW9rZS51bml0LnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBTbW9rZSBUZXN0IGZvciBKZXN0ICsgVHlwZVNjcmlwdCBDb25maWd1cmF0aW9uXG4gKiBcbiAqIFRoaXMgYmFzaWMgdGVzdCB2ZXJpZmllcyB0aGF0OlxuICogMS4gSmVzdCBpcyBwcm9wZXJseSBjb25maWd1cmVkIGFuZCBydW5uaW5nXG4gKiAyLiBUeXBlU2NyaXB0IGNvbXBpbGF0aW9uIGlzIHdvcmtpbmdcbiAqIDMuIEJhc2ljIHRlc3QgYXNzZXJ0aW9ucyBmdW5jdGlvbiBjb3JyZWN0bHlcbiAqL1xuXG4vLyBUZXN0IGJhc2ljIEphdmFTY3JpcHQgZnVuY3Rpb25hbGl0eVxuZGVzY3JpYmUoJ0phdmFTY3JpcHQgRW52aXJvbm1lbnQnLCAoKSA9PiB7XG4gIGl0KCdzdXBwb3J0cyBiYXNpYyBvcGVyYXRpb25zJywgKCkgPT4ge1xuICAgIGV4cGVjdCgxICsgMSkudG9CZSgyKTtcbiAgICBleHBlY3QoJ2hlbGxvJykudG9IYXZlTGVuZ3RoKDUpO1xuICAgIGV4cGVjdChbMSwgMiwgM10pLnRvQ29udGFpbigyKTtcbiAgICBleHBlY3QoeyBuYW1lOiAndGVzdCcgfSkudG9IYXZlUHJvcGVydHkoJ25hbWUnKTtcbiAgfSk7XG5cbiAgaXQoJ3N1cHBvcnRzIGFzeW5jL2F3YWl0JywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IFByb21pc2UucmVzb2x2ZSgnYXN5bmMgd29ya3MnKTtcbiAgICBleHBlY3QocmVzdWx0KS50b0JlKCdhc3luYyB3b3JrcycpO1xuICB9KTtcbn0pO1xuXG4vLyBUZXN0IFR5cGVTY3JpcHQgZnVuY3Rpb25hbGl0eVxuZGVzY3JpYmUoJ1R5cGVTY3JpcHQgRW52aXJvbm1lbnQnLCAoKSA9PiB7XG4gIC8vIERlZmluZSBhIFR5cGVTY3JpcHQgaW50ZXJmYWNlXG4gIGludGVyZmFjZSBVc2VyIHtcbiAgICBpZDogbnVtYmVyO1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBhY3RpdmU/OiBib29sZWFuO1xuICB9XG5cbiAgaXQoJ3N1cHBvcnRzIFR5cGVTY3JpcHQgdHlwZXMnLCAoKSA9PiB7XG4gICAgLy8gQ3JlYXRlIGFuIG9iamVjdCB3aXRoIHRoZSBpbnRlcmZhY2VcbiAgICBjb25zdCB1c2VyOiBVc2VyID0ge1xuICAgICAgaWQ6IDEsXG4gICAgICBuYW1lOiAnVGVzdCBVc2VyJ1xuICAgIH07XG5cbiAgICAvLyBUeXBlU2NyaXB0IGFzc2VydGlvbnNcbiAgICBleHBlY3QodXNlci5pZCkudG9CZSgxKTtcbiAgICBleHBlY3QodXNlci5uYW1lKS50b0JlKCdUZXN0IFVzZXInKTtcbiAgICBleHBlY3QodXNlci5hY3RpdmUpLnRvQmVVbmRlZmluZWQoKTtcbiAgfSk7XG5cbiAgaXQoJ3N1cHBvcnRzIFR5cGVTY3JpcHQgZ2VuZXJpY3MnLCAoKSA9PiB7XG4gICAgLy8gVGVzdCB3aXRoIGdlbmVyaWNzXG4gICAgZnVuY3Rpb24gZ2V0Rmlyc3Q8VD4oYXJyYXk6IFRbXSk6IFQgfCB1bmRlZmluZWQge1xuICAgICAgcmV0dXJuIGFycmF5WzBdO1xuICAgIH1cblxuICAgIGV4cGVjdChnZXRGaXJzdChbMSwgMiwgM10pKS50b0JlKDEpO1xuICAgIGV4cGVjdChnZXRGaXJzdChbJ2EnLCAnYicsICdjJ10pKS50b0JlKCdhJyk7XG4gICAgZXhwZWN0KGdldEZpcnN0KFtdKSkudG9CZVVuZGVmaW5lZCgpO1xuICB9KTtcbn0pO1xuXG4vLyBUZXN0IEplc3QgZW52aXJvbm1lbnRcbmRlc2NyaWJlKCdKZXN0IFRlc3QgRW52aXJvbm1lbnQnLCAoKSA9PiB7XG4gIGl0KCdzdXBwb3J0cyBtb2NrcycsICgpID0+IHtcbiAgICBjb25zdCBtb2NrRm4gPSBqZXN0LmZuKCk7XG4gICAgbW9ja0ZuKCd0ZXN0Jyk7XG4gICAgXG4gICAgZXhwZWN0KG1vY2tGbikudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIGV4cGVjdChtb2NrRm4pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCd0ZXN0Jyk7XG4gIH0pO1xuXG4gIGl0KCdzdXBwb3J0cyBzbmFwc2hvdHMnLCAoKSA9PiB7XG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLnNwbGl0KCdUJylbMF0sIC8vIEp1c3QgdGhlIGRhdGUgcGFydCBmb3Igc3RhYmlsaXR5XG4gICAgICBtZXNzYWdlOiAnU21va2UgdGVzdCBjb21wbGV0ZScsXG4gICAgICBzdWNjZXNzOiB0cnVlXG4gICAgfTtcbiAgICBcbiAgICAvLyBUaGlzIHdpbGwgY3JlYXRlIGEgc25hcHNob3QgZmlsZSBvbiBmaXJzdCBydW5cbiAgICBleHBlY3QoZGF0YSkudG9NYXRjaFNuYXBzaG90KHtcbiAgICAgIHRpbWVzdGFtcDogZXhwZWN0LmFueShTdHJpbmcpIC8vIE1ha2Ugc25hcHNob3Qgc3RhYmxlXG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7O0FBVUFBLFFBQVEsQ0FBQyx3QkFBd0IsRUFBRSxZQUFNO0VBQ3ZDQyxFQUFFLENBQUMsMkJBQTJCLEVBQUUsWUFBTTtJQUNwQ0MsTUFB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