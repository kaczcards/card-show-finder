{"version":3,"names":["useState","useEffect","showSeriesService","supabase","cov_to4rgmctv","s","useUnclaimedShows","organizerId","f","_ref","_ref2","_slicedToArray","unclaimedItems","setUnclaimedItems","_ref3","_ref4","isLoading","setIsLoading","_ref5","_ref6","error","setError","fetchUnclaimedShows","_ref7","_asyncToGenerator","_ref9","_ref11","console","warn","_ref8","from","select","is","rawSeries","data","seriesErr","b","mappedSeries","map","series","id","name","organizer_id","description","averageRating","average_rating","reviewCount","review_count","createdAt","created_at","updatedAt","updated_at","seriesIds","upcomingSeriesShows","length","_ref1","_ref0","in","gte","Date","toISOString","rawSeriesShows","showsErr","show","mapShowRow","seriesMeta","Map","meta","get","seriesId","nextShowDate","startDate","upcomingCount","set","unclaimedSeries","filter","has","Object","assign","_ref10","order","ascending","rawStandalone","standaloneErr","unclaimedStandaloneShows","combinedItems","concat","_toConsumableArray","type","dateValue","item","getTime","sort","a","err","Error","apply","arguments","refreshUnclaimedShows"],"sources":["useUnclaimedShows.ts"],"sourcesContent":["// src/hooks/useUnclaimedShows.ts\nimport { useState, useEffect } from 'react';\nimport { ShowSeries, Show } from '../types';\nimport { showSeriesService } from '../services/showSeriesService';\nimport { supabase } from '../supabase';\n\n// Interface for combined unclaimed items (shows or series)\nexport interface UnclaimedItem {\n  type: 'series' | 'show';\n  data: ShowSeries | Show;\n}\n\n/**\n * Custom hook to fetch and manage unclaimed shows data\n * @param organizerId The organizer ID (used for claiming shows later)\n * @returns Object containing unclaimed items, loading state, and error state\n */\nexport const useUnclaimedShows = (organizerId: string) => {\n  // State for unclaimed items (shows and series)\n  const [unclaimedItems, setUnclaimedItems] = useState<UnclaimedItem[]>([]);\n  // Loading state - start with true as we'll fetch data immediately\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  // Error state - null when no errors\n  const [error, setError] = useState<Error | null>(null);\n\n  // Function to fetch unclaimed shows and series\n  const fetchUnclaimedShows = async () => {\n    try {\n      console.warn('[_useUnclaimedShows] Fetching unclaimed series & showsâ€¦');\n      setIsLoading(true);\n      setError(null);\n\n      /* ------------------------------------ *\n       * 1. Unclaimed SERIES (organizer_id IS NULL)\n       * ------------------------------------ */\n      const { data: rawSeries, error: seriesErr } = await supabase\n        .from('show_series')\n        .select('*')\n        .is('organizer_id', null);\n\n      if (seriesErr) throw seriesErr;\n\n      // Map raw series to ShowSeries objects with camelCase properties\n      const mappedSeries = (rawSeries ?? []).map(series => ({\n        id: series.id,\n        name: series.name,\n        organizerId: series.organizer_id,\n        description: series.description,\n        averageRating: series.average_rating,\n        reviewCount: series.review_count,\n        createdAt: series.created_at,\n        updatedAt: series.updated_at\n      }));\n\n      const seriesIds = mappedSeries.map(s => s.id);\n\n      /* ------------------------------------ *\n       * 2. Upcoming shows that belong to ANY of\n       *    those unclaimed series\n       * ------------------------------------ */\n      let upcomingSeriesShows: Show[] = [];\n      if (seriesIds.length > 0) {\n        const { data: rawSeriesShows, error: showsErr } = await supabase\n          .from('shows')\n          .select('*')\n          .in('series_id', seriesIds)\n          .gte('end_date', new Date().toISOString());\n\n        if (showsErr) throw showsErr;\n        \n        // Map raw shows to Show objects using the service helper\n        upcomingSeriesShows = (rawSeriesShows ?? []).map(show => \n          showSeriesService.mapShowRow(show)\n        );\n      }\n\n      // Build per-series aggregates (nextShowDate & upcomingCount)\n      const seriesMeta = new Map<\n        string,\n        { nextShowDate: string | Date; upcomingCount: number }\n      >();\n\n      for (const show of upcomingSeriesShows) {\n        const meta = seriesMeta.get(show.seriesId!) || {\n          nextShowDate: show.startDate,\n          upcomingCount: 0,\n        };\n        meta.upcomingCount += 1;\n        if (new Date(show.startDate) < new Date(meta.nextShowDate)) {\n          meta.nextShowDate = show.startDate;\n        }\n        seriesMeta.set(show.seriesId!, meta);\n      }\n\n      // Merge meta into mapped series & filter out series with 0 upcoming\n      const unclaimedSeries: ShowSeries[] = mappedSeries\n        .filter(s => seriesMeta.has(s.id))\n        .map(s => ({\n          ...s,\n          nextShowDate: seriesMeta.get(s.id)!.nextShowDate,\n          upcomingCount: seriesMeta.get(s.id)!.upcomingCount,\n        }));\n\n      /* ------------------------------------ *\n       * 3. Stand-alone unclaimed upcoming shows\n       * ------------------------------------ */\n      const { data: rawStandalone, error: standaloneErr } = await supabase\n        .from('shows')\n        .select('*')\n        .is('organizer_id', null)\n        .is('series_id', null)\n        .gte('end_date', new Date().toISOString())\n        .order('start_date', { ascending: true });\n\n      if (standaloneErr) throw standaloneErr;\n\n      // Map raw standalone shows to Show objects using the service helper\n      const unclaimedStandaloneShows: Show[] = (rawStandalone ?? []).map(show => \n        showSeriesService.mapShowRow(show)\n      );\n\n      /* ------------------------------------ *\n       * 4. Combine & sort by upcoming date ASC\n       * ------------------------------------ */\n      const combinedItems: UnclaimedItem[] = [\n        ...unclaimedSeries.map(s => ({ type: 'series' as const, data: s })),\n        ...unclaimedStandaloneShows.map(show => ({ type: 'show' as const, data: show })),\n      ];\n\n      // Sort by date using properly typed objects with camelCase properties\n      const dateValue = (item: UnclaimedItem) =>\n        item.type === 'series'\n          ? new Date((item.data as ShowSeries).nextShowDate!).getTime()\n          : new Date((item.data as Show).startDate).getTime();\n\n      combinedItems.sort((a, b) => dateValue(a) - dateValue(b));\n\n      setUnclaimedItems(combinedItems);\n      console.warn(`[_useUnclaimedShows] Done. Items: ${combinedItems.length}`);\n    } catch (err) {\n      console.error('[_useUnclaimedShows] Error:', err);\n      setError(\n        err instanceof Error\n          ? err\n          : new Error('Failed to load unclaimed shows. Please try again.'),\n      );\n      setUnclaimedItems([]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  // Fetch data when the component mounts or when organizerId changes\n  useEffect(() => {\n    fetchUnclaimedShows();\n  }, [organizerId]);\n  \n  // Return all states and a function to refresh the data\n  return { \n    unclaimedItems, \n    isLoading, \n    error,\n    refreshUnclaimedShows: fetchUnclaimedShows \n  };\n};\n"],"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","ignoreList":[]}