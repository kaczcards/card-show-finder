04a8f08fadc282a72720f569ea2767e2
function cov_f1wkvrkx() {
  var path = "/Users/kevin/card-show-finder/src/utils/polyfills.ts";
  var hash = "fd9aa6c4847f0fa5ad6d9f94e6fa1394ae03d994";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kevin/card-show-finder/src/utils/polyfills.ts",
    statementMap: {
      "0": {
        start: {
          line: 21,
          column: 0
        },
        end: {
          line: 46,
          column: 1
        }
      },
      "1": {
        start: {
          line: 23,
          column: 2
        },
        end: {
          line: 26,
          column: 6
        }
      },
      "2": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 26,
          column: 6
        }
      },
      "3": {
        start: {
          line: 36,
          column: 2
        },
        end: {
          line: 45,
          column: 4
        }
      },
      "4": {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 44,
          column: 5
        }
      },
      "5": {
        start: {
          line: 38,
          column: 6
        },
        end: {
          line: 38,
          column: 47
        }
      },
      "6": {
        start: {
          line: 40,
          column: 6
        },
        end: {
          line: 43,
          column: 8
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 36,
            column: 31
          },
          end: {
            line: 36,
            column: 32
          }
        },
        loc: {
          start: {
            line: 36,
            column: 51
          },
          end: {
            line: 45,
            column: 3
          }
        },
        line: 36
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 21,
            column: 0
          },
          end: {
            line: 46,
            column: 1
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 0
          },
          end: {
            line: 46,
            column: 1
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 21
      },
      "1": {
        loc: {
          start: {
            line: 23,
            column: 2
          },
          end: {
            line: 26,
            column: 6
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 23,
            column: 2
          },
          end: {
            line: 26,
            column: 6
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 23
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "fd9aa6c4847f0fa5ad6d9f94e6fa1394ae03d994"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_f1wkvrkx = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_f1wkvrkx();
cov_f1wkvrkx().s[0]++;
if (typeof globalThis.structuredClone !== 'function') {
  cov_f1wkvrkx().b[0][0]++;
  cov_f1wkvrkx().s[1]++;
  if (__DEV__) {
    cov_f1wkvrkx().b[1][0]++;
    cov_f1wkvrkx().s[2]++;
    console.warn('[_polyfills] structuredClone not found – installing lightweight polyfill.');
  } else {
    cov_f1wkvrkx().b[1][1]++;
  }
  cov_f1wkvrkx().s[3]++;
  globalThis.structuredClone = function (value) {
    cov_f1wkvrkx().f[0]++;
    cov_f1wkvrkx().s[4]++;
    try {
      cov_f1wkvrkx().s[5]++;
      return JSON.parse(JSON.stringify(value));
    } catch (_unused) {
      cov_f1wkvrkx().s[6]++;
      throw new Error('[_polyfills] structuredClone polyfill failed – input may ' + 'contain non-serialisable values.');
    }
  };
} else {
  cov_f1wkvrkx().b[0][1]++;
}
export {};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnbG9iYWxUaGlzIiwic3RydWN0dXJlZENsb25lIiwiY292X2Yxd2t2cmt4IiwiYiIsInMiLCJfX0RFVl9fIiwiY29uc29sZSIsIndhcm4iLCJ2YWx1ZSIsImYiLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJfdW51c2VkIiwiRXJyb3IiXSwic291cmNlcyI6WyJwb2x5ZmlsbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBwb2x5ZmlsbHMudHNcbiAqXG4gKiBDZW50cmFsaXNlZCBwb2x5ZmlsbHMgZm9yIEFQSXMgdGhhdCBhcmUgbm90IHlldCBjb25zaXN0ZW50bHlcbiAqIGF2YWlsYWJsZSBpbiBhbGwgUmVhY3QtTmF0aXZlIHJ1bnRpbWVzIChIZXJtZXMgLyBKU0MpLlxuICpcbiAqIElNUE9SVEFOVDogIEFsd2F5cyAqZmVhdHVyZS1kZXRlY3QqIGJlZm9yZSBkZWZpbmluZyBhIHBvbHlmaWxsIHRvXG4gKiBhdm9pZCDigJxkdXBsaWNhdGUgaWRlbnRpZmllcuKAnSBUeXBlU2NyaXB0IG9yIHJ1bnRpbWUgZXJyb3JzIHdoZW4gdGhlXG4gKiBob3N0IGVudmlyb25tZW50IGV2ZW50dWFsbHkgZ2FpbnMgbmF0aXZlIHN1cHBvcnQuXG4gKlxuICogVXNhZ2UgKGVudHJ5LXBvaW50IOKAkyBBcHAudHN4IG9yIGluZGV4LnRzKTpcbiAqICAgaW1wb3J0ICcuL3NyYy91dGlscy9wb2x5ZmlsbHMnO1xuICovXG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuLyogc3RydWN0dXJlZENsb25lICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbi8vIEhlcm1lcyBzdGFydGVkIHNoaXBwaW5nIHN0cnVjdHVyZWRDbG9uZSBpbiBSTiAwLjc5LCBidXQgb2xkZXIgc2ltdWxhdG9ycyAvXG4vLyBkZXZpY2VzIG9yIEpTQy1iYXNlZCBydW50aW1lcyBtYXkgc3RpbGwgYmUgbWlzc2luZyBpdC4gIFN1cGFiYXNl4oCZcyByZWFsdGltZVxuLy8gUG9zdGdyZXMgY2xpZW50IGFuZCB2YXJpb3VzIFJlYWN0LVF1ZXJ5IHV0aWxzIHJlbHkgb24gdGhpcyBBUEkuXG5pZiAodHlwZW9mIGdsb2JhbFRoaXMuc3RydWN0dXJlZENsb25lICE9PSAnZnVuY3Rpb24nKSB7XG4gIC8vIE9ubHkgbG9nIHRoaXMgZGlhZ25vc3RpYyBpbiBkZXZlbG9wbWVudCBidWlsZHNcbiAgaWYgKF9fREVWX18pXG4gICAgY29uc29sZS53YXJuKFxuICAgICAgJ1tfcG9seWZpbGxzXSBzdHJ1Y3R1cmVkQ2xvbmUgbm90IGZvdW5kIOKAkyBpbnN0YWxsaW5nIGxpZ2h0d2VpZ2h0IHBvbHlmaWxsLicsXG4gICAgKTtcblxuICAvLyBBICp2ZXJ5KiBzbWFsbCBzdWJzZXQgaW1wbGVtZW50YXRpb24gdGhhdCBpcyBzdWZmaWNpZW50IGZvciBvdXIgdXNhZ2VcbiAgLy8gKHBsYWluIG9iamVjdHMsIF9hcnJheXMsIG51bWJlcnMsIHN0cmluZ3MsIGJvb2xlYW5zLCBudWxsKS4gIEl0IHdpbGxcbiAgLy8gdGhyb3cgZm9yIGZ1bmN0aW9ucywgY2xhc3MgaW5zdGFuY2VzLCBEYXRlcywgTWFwcywgU2V0cywgZXRjLiwgbWlycm9yaW5nXG4gIC8vIHRoZSBuYXRpdmUgYmVoYXZpb3VyIG9mIHRocm93aW5nIG9uIG5vbi1zZXJpYWxpc2FibGUgaW5wdXQuXG4gIC8vIElmIHdlIGV2ZXIgbmVlZCBmdWxsIHNwZWMgY29tcGxpYW5jZSB3ZSBjYW4gcmVwbGFjZSB0aGlzIHdpdGhcbiAgLy8gYEB1bmdhcC9zdHJ1Y3R1cmVkLWNsb25lYCBvciBhbm90aGVyIG1vcmUgY29tcGxldGUgc2hpbS5cbiAgIFxuICAvLyBAdHMtaWdub3JlIOKAkyBhZGQgdG8gZ2xvYmFsIHNjb3BlXG4gIGdsb2JhbFRoaXMuc3RydWN0dXJlZENsb25lID0gPFQ+KHZhbHVlOiBUKTogVCA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XG4gICAgfSBjYXRjaCB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdbX3BvbHlmaWxsc10gc3RydWN0dXJlZENsb25lIHBvbHlmaWxsIGZhaWxlZCDigJMgaW5wdXQgbWF5ICcgK1xuICAgICAgICAgICdjb250YWluIG5vbi1zZXJpYWxpc2FibGUgdmFsdWVzLicsXG4gICAgICApO1xuICAgIH1cbiAgfTtcbn1cblxuLy8gRXhwb3J0IG5vdGhpbmcg4oCTIHRoaXMgbW9kdWxlIGlzIGltcG9ydGVkIGZvciBpdHMgc2lkZS1lZmZlY3RzIG9ubHkuXG5leHBvcnQge307XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBb0JBLElBQUksT0FBT0EsVUFBVSxDQUFDQyxlQUFlLEtBQUssVUFBVSxFQUFFO0VBQUFDLFlBQUEsR0FBQUMsQ0FBQTtFQUFBRCxZQUFBLEdBQUFFLENBQUE7RUFFcEQsSUFBSUMsT0FBTyxFQUNUO0lBQUFILFlBQUEsR0FBQUMsQ0FBQTtJQUFBRCxZQUFBLEdBQUFFLENBQUE7SUFBQUUsT0FBTyxDQUFDQyxJQUFJLENBQ1YsMkVBQ0YsQ0FBQztFQUFBLENBQUM7SUFBQUwsWUFBQSxHQUFBQyxDQUFBO0VBQUE7RUFBQUQsWUFBQSxHQUFBRSxDQUFBO0VBVUpKLFVBQVUsQ0FBQ0MsZUFBZSxHQUFHLFVBQUlPLEtBQVEsRUFBUTtJQUFBTixZQUFBLEdBQUFPLENBQUE7SUFBQVAsWUFBQSxHQUFBRSxDQUFBO0lBQy9DLElBQUk7TUFBQUYsWUFBQSxHQUFBRSxDQUFBO01BQ0YsT0FBT00sSUFBSSxDQUFDQyxLQUFLLENBQUNELElBQUksQ0FBQ0UsU0FBUyxDQUFDSixLQUFLLENBQUMsQ0FBQztJQUMxQyxDQUFDLENBQUMsT0FBQUssT0FBQSxFQUFNO01BQUFYLFlBQUEsR0FBQUUsQ0FBQTtNQUNOLE1BQU0sSUFBSVUsS0FBSyxDQUNiLDJEQUEyRCxHQUN6RCxrQ0FDSixDQUFDO0lBQ0g7RUFDRixDQUFDO0FBQ0gsQ0FBQztFQUFBWixZQUFBLEdBQUFDLENBQUE7QUFBQTtBQUdEIiwiaWdub3JlTGlzdCI6W119