{"version":3,"names":["supabase","calculateDistanceBetweenCoordinates","safeOverlaps","cov_2e6bcnjtba","s","hexToBytes","hex","f","clean","startsWith","b","slice","len","length","Error","bytes","Uint8Array","i","parseInt","substr","readUint32","view","offset","littleEndian","getUint32","readFloat64","getFloat64","parseWkbPoint","DataView","buffer","getUint8","rawType","hasSrid","wkbType","WKB_POINT","x","y","isFinite","latitude","longitude","_unused","normalizeAddress","str","toLowerCase","trim","replace","DEBUG_SHOW_ID","mapDbShowToAppShow","row","_ref","_ref2","_ref3","_ref4","_ref5","Object","assign","id","title","location","address","startDate","start_date","endDate","end_date","startTime","start_time","endTime","end_time","entryFee","entry_fee","description","undefined","imageUrl","image_url","rating","coordinates","Array","isArray","pt","status","organizerId","organizer_id","features","categories","createdAt","created_at","updatedAt","updated_at","seriesId","series_id","websiteUrl","website_url","getShows","_ref6","_asyncToGenerator","filters","arguments","_ref7","_ref8","toIso","d","Date","toISOString","now","_radius","radius","isNaN","Math","abs","__DEV__","console","warn","lat","long","radius_miles","filter_start_date","filter_end_date","debugShowId","_ref9","rpc","nearbyData","data","nearbyError","error","message","found","some","targetShow","find","filteredData","today","targetShowBeforeFilter","targetEndDate","isPastShow","filter","show","showEndDate","isValid","maxEntryFee","cat","includes","every","feature","foundAfter","map","_ref0","_ref1","_ref10","center_lat","center_lng","max_entry_fee","show_categories","show_features","_ref11","rpcData","rpcError","foundRaw","foundFiltered","_ref12","fbData","fbError","showStartDate","filterStartDate","filterEndDate","query","from","select","eq","order","ascending","rangeStart","rangeEnd","lte","gte","_ref13","err","_ref14","apply","getPaginatedShows","_ref15","params","getDirectPaginatedShows","_ref16","_ref17","_ref18","pagination","totalCount","pageSize","currentPage","page","totalPages","_x","_ref19","_ref20","_ref20$radius","_ref20$startDate","_ref20$endDate","_ref20$maxEntryFee","_ref20$categories","_ref20$features","_ref20$keyword","keyword","_ref20$dealerCardType","dealerCardTypes","_ref20$pageSize","_ref20$page","countQuery","count","_ref21","countError","_ref22","queryError","dbgRow","r","_dbgRow$coordinates","hasCoordArray","coordArray","coordType","cleanKeyword","hasDealerTypeFilter","showIds","_ref23","in","partRows","partErr","partsMap","forEach","_ref24","arr","showid","push","normDealerTypes","t","toString","participants","passesDealerType","p","card_types","ct","passesKeyword","_ref25","_show$title","_show$description","_show$location","_show$address","inShowFields","inDealerFields","_ref26","_ref27","spec","specialty","note","notable_items","advErr","coordsByAddress","Map","hasValidCoords","coords","normalizedAddr","set","size","isDefaultCoordinates","showCoords","fallbackCoords","get","_unused2","normalizedAddress","borrowedCoords","distance","coordsUser","coordsShow","passes","remains","totalFilteredCount","startIndex","endIndex","min","paginatedData","mappedShows","ceil","_ref28","_ref29","_ref30","_x2","_getAllActiveShowsFallback","_ref31","_ref32","_ref32$startDate","_ref32$endDate","_ref32$pageSize","_ref32$page","dataQuery","_ref33","head","range","_ref34","dataError","_ref35","_ref36","_ref37","_x3","_calculateDistance","lat1","lon1","lat2","lon2","R","dLat","PI","dLon","a","sin","cos","c","atan2","sqrt","getShowById","_ref38","_ref39","single","_ref40","_x4","createShow","getUpcomingShows","_ref41","_ref42","userId","_ref43","participantRows","participantError","Boolean","showQuery","_ref44","showRows","showError","mapped","_ref45","_x5","claimShow","_ref46","showId","_ref48","_ref47","profile","profileErr","success","roleOk","role","paidOk","is_paid","_ref49","update","claimed","claimed_by","claimed_at","or","updatedShow","updateError","_count","_ref50","insert","show_id","user_id","orgError","_x6","_x7","updateShow","_ref51","_ref52","updates","payload","payloadWithCoords","payloadWithoutCoords","attemptUpdate","_ref53","pl","_x9","_ref54","test","_yield$attemptUpdate","_ref55","_x8","deleteShow"],"sources":["showService.ts"],"sourcesContent":["/**\n * Show Service\n *\n * This file contains helpers for fetching shows from Supabase.\n */\n\nimport { supabase } from '../supabase';\nimport { Show, ShowStatus } from '../types';\nimport { calculateDistanceBetweenCoordinates } from './locationService';\nimport { safeOverlaps } from '../utils/postgrest';\n\n/* ------------------------------------------------------------------ */\n/* WKB (hex) → Lat/Lng helpers                                         */\n/* ------------------------------------------------------------------ */\n\n// Convert hex string to byte array\nconst hexToBytes = (hex: string): Uint8Array => {\n  // Strip optional 0x prefix (common in PostGIS EWKB output)\n  const clean = hex.startsWith('0x') ? hex.slice(2) : hex;\n  const len = clean.length;\n\n  // Guard against odd-length strings which would break parsing\n  if (len % 2 !== 0) {\n    throw new Error(`[showService] Invalid WKB hex string length: ${len}`);\n  }\n\n  const bytes = new Uint8Array(len / 2);\n  for (let i = 0; i < len; i += 2) {\n    bytes[i / 2] = parseInt(clean.substr(i, 2), 16);\n  }\n  return bytes;\n};\n\n// Read 32-bit uint respecting endianness\nconst readUint32 = (\n  view: DataView,\n  offset: number,\n  littleEndian: boolean\n): number => view.getUint32(offset, littleEndian);\n\n// Read 64-bit float (Float64) respecting endianness\nconst readFloat64 = (\n  view: DataView,\n  offset: number,\n  littleEndian: boolean\n): number => view.getFloat64(offset, littleEndian);\n\n/**\n * Parse a PostGIS WKB POINT (optionally preceded by SRID / EWKB flag).\n * Supports little/big-endian, 2-D POINT only.\n *\n * Returns { latitude, longitude } or null if parsing fails.\n */\nconst parseWkbPoint = (\n  hex: string\n): { latitude: number; longitude: number } | null => {\n  try {\n    if (!hex || typeof hex !== 'string') return null;\n\n    const bytes = hexToBytes(hex);\n    if (bytes.length < 21) return null; // minimal POINT length\n\n    const view = new DataView(bytes.buffer);\n\n    // Byte 0: 1 = little-endian, 0 = big-endian\n    const littleEndian = view.getUint8(0) === 1;\n\n    // Bytes 1-4: geometry type (uint32). 0x20000000 flag means SRID present.\n    const rawType = readUint32(view, 1, littleEndian);\n    const hasSrid = (rawType & 0x20000000) !== 0;\n    const wkbType = rawType & 0xFFFF; // strip flags\n    const WKB_POINT = 1;\n    if (wkbType !== WKB_POINT) return null;\n\n    let offset = 5;\n    if (hasSrid) {\n      // Skip SRID (uint32)\n      offset += 4;\n    }\n\n    // Read coordinates (Float64 x, y)\n    const x = readFloat64(view, offset, littleEndian);\n    const y = readFloat64(view, offset + 8, littleEndian);\n\n    // PostGIS POINT stores X = longitude, Y = latitude\n    if (isFinite(x) && isFinite(y)) {\n      return { latitude: y, longitude: x };\n    }\n    return null;\n  } catch {\n    // Swallow any parsing error – return null to indicate failure\n    return null;\n  }\n};\n\n/**\n * Normalize an address string for consistent comparison.\n * Lowercases, trims, collapses whitespace, and removes punctuation except commas.\n * Returns empty string for falsy inputs.\n */\nconst normalizeAddress = (str?: string): string => {\n  if (!str) return '';\n  \n  return str\n    .toLowerCase()\n    .trim()\n    .replace(/\\s+/g, ' ')  // collapse multiple spaces to single space\n    .replace(/[^\\w\\s,]/g, ''); // remove punctuation except commas\n};\n\n/**\n * Convert a raw Supabase row into an app `Show` object.\n */\n/* ------------------------------------------------------------------ */\n/* Debug helper – track a single show end-to-end                        */\n/* ------------------------------------------------------------------ */\nconst DEBUG_SHOW_ID = '46437e96-79e3-443e-9ad6-f43ebf660cc3';\n\nconst mapDbShowToAppShow = (row: any): Show => ({\n  id: row.id,\n  title: row.title,\n  location: row.location,\n  address: row.address,\n  startDate: row.start_date,\n  endDate: row.end_date,\n  startTime: row.start_time,\n  endTime: row.end_time,\n  entryFee: row.entry_fee,\n  description: row.description ?? undefined,\n  imageUrl: row.image_url ?? undefined,\n  rating: row.rating ?? undefined,\n  // Prefer explicit latitude / longitude columns (added in updated Supabase functions);\n  // fall back to legacy PostGIS object when they are not present.\n  coordinates:\n    typeof row.latitude === 'number' && typeof row.longitude === 'number'\n      ? {\n          latitude: row.latitude,\n          longitude: row.longitude,\n        }\n      : row.coordinates &&\n        row.coordinates.coordinates &&\n        Array.isArray(row.coordinates.coordinates) &&\n        row.coordinates.coordinates.length >= 2\n      ? {\n          latitude: row.coordinates.coordinates[1],\n          longitude: row.coordinates.coordinates[0],\n        }\n      : undefined,\n  // WKB hex string fallback (EWKB)\n  ...(typeof row.coordinates === 'string'\n    ? (() => {\n        const pt = parseWkbPoint(row.coordinates);\n        return pt\n          ? {\n              coordinates: {\n                latitude: pt.latitude,\n                longitude: pt.longitude,\n              },\n            }\n          : {};\n      })()\n    : {}),\n  status: row.status as ShowStatus,\n  organizerId: row.organizer_id,\n  features: row.features ?? {},\n  categories: row.categories ?? [],\n  createdAt: row.created_at,\n  updatedAt: row.updated_at,\n  seriesId: row.series_id,\n  websiteUrl: row.website_url,\n});\n\n/**\n * Fetch a list of active shows.\n *\n * The caller supplies a `ShowFilters` object that may contain:\n *   • latitude / longitude / radius → geo-filtered RPC\n *   • startDate / endDate / maxEntryFee / categories / features, etc.\n *\n * The function always returns an **array of Show objects** (may be empty) and\n * throws on error – this aligns with `HomeScreen.tsx`, which expects a plain\n * array.\n */\nimport { ShowFilters } from '../types';\n\n/* ------------------------------------------------------------------ */\n/* Pagination helper types                                             */\n/* ------------------------------------------------------------------ */\n\n/**\n * Metadata describing pagination state returned from the\n * `get_paginated_shows` RPC.\n */\nexport interface PaginationMeta {\n  totalCount: number;\n  pageSize: number;\n  currentPage: number;\n  totalPages: number;\n}\n\n/**\n * Params accepted by `getPaginatedShows`.\n * Inherits all normal ShowFilters plus `pageSize` & `page`.\n * `latitude` and `longitude` are **required** because the RPC\n * is geo-aware – calling code (e.g. HomeScreen) must supply them.\n */\nexport interface PaginatedShowsParams extends ShowFilters {\n  latitude: number;\n  longitude: number;\n  /** Number of rows per page (default: 20) */\n  pageSize?: number;\n  /** 1-based page index (default: 1)            */\n  page?: number;\n}\n\n/**\n * Shape returned by `getPaginatedShows`.\n */\nexport interface PaginatedShowsResult {\n  data: Show[];\n  pagination: PaginationMeta;\n  error: string | null;\n}\n\nexport const getShows = async (filters: ShowFilters = {}): Promise<Show[]> => {\n  try {\n    // Ensure filters is a valid object\n    filters = filters || {};\n\n    /* -----------------------------------------------------------\n     * Derive **normalized** filter values so every query path\n     * (RPCs & basic SELECT) uses the exact same parameters.\n     * --------------------------------------------------------- */\n    const toIso = (d: Date | string | null): string =>\n      d instanceof Date ? d.toISOString() : d || '';\n\n    // Default date range: today → +30 days (ISO strings)\n    const startDate = toIso(\n      filters.startDate ?? new Date()\n    );\n    const endDate = toIso(\n      filters.endDate ?? new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)\n    );\n\n    // Default radius: 25 mi\n    const _radius =\n      typeof filters.radius === 'number' && !isNaN(filters.radius)\n        ? filters.radius\n        : 25;\n    \n    /* -----------------------------------------------------------\n     * 1. Geo-aware query via nearby_shows RPC when lat/lng present\n     * --------------------------------------------------------- */\n    if (\n      typeof filters.latitude === 'number' &&\n      typeof filters.longitude === 'number' &&\n      !isNaN(filters.latitude) &&\n      !isNaN(filters.longitude)\n    ) {\n      const radius = typeof filters.radius === 'number' ? filters.radius : 25;\n\n      /* ---------- Sanity-check lat / lng values ---------- */\n      if (Math.abs(filters.latitude) > 90 || Math.abs(filters.longitude) > 180) {\n        if (__DEV__)\n        console.warn(\n          '[showService] Suspicious coordinates detected – latitude / longitude might be swapped:',\n          { latitude: filters.latitude, longitude: filters.longitude }\n        );\n      }\n\n      if (__DEV__)\n      console.warn('[showService] Calling nearby_shows with params:', {\n        lat: filters.latitude,\n        long: filters.longitude,\n        radius_miles: radius,\n        filter_start_date: startDate,\n        filter_end_date: endDate,\n        debugShowId: DEBUG_SHOW_ID, // helpful when grepping logs\n      });\n\n      // Call the new nearby_shows function as primary method\n      const { data: nearbyData, error: nearbyError } = await supabase.rpc(\n        'nearby_shows',\n        {\n          lat: filters.latitude,\n          long: filters.longitude,\n          radius_miles: radius,\n          filter_start_date: startDate, // Always include a date range\n          filter_end_date: endDate,    // to filter out past shows\n        }\n      );\n\n      if (nearbyError) {\n        if (__DEV__)\n        console.warn(\n          '[showService] nearby_shows RPC failed – attempting fallback',\n          nearbyError.message\n        );\n      } else {\n        if (__DEV__)\n        console.warn(\n          `[showService] nearby_shows returned ${((nearbyData && Array.isArray(nearbyData)) ? nearbyData.length : 0)} show(s)`\n        );\n\n        /* ----- DEBUG: Is target show present in raw nearby_shows data? ---- */\n        if (Array.isArray(nearbyData)) {\n          const found = nearbyData.some((s: any) => s.id === DEBUG_SHOW_ID);\n          if (__DEV__)\n          console.warn(\n            `[showService][DEBUG_SHOW] Target show ${\n              found ? 'FOUND' : 'NOT found'\n            } in raw nearby_shows payload`\n          );\n\n          // If found, get the show details for further debugging\n          if (found) {\n            const targetShow = nearbyData.find((s: any) => s.id === DEBUG_SHOW_ID);\n          if (__DEV__)\n          console.warn(\n              `[showService][DEBUG_SHOW] Target show details:`,\n              {\n                id: targetShow.id,\n                title: targetShow.title,\n                start_date: targetShow.start_date,\n                end_date: targetShow.end_date,\n                status: targetShow.status\n              }\n            );\n          }\n        }\n        \n        // Apply additional filters that weren't handled by the RPC\n        let filteredData = nearbyData;\n        \n        // Ensure we're not showing past shows\n        if (Array.isArray(filteredData)) {\n          const today = new Date();\n          if (__DEV__)\n          console.warn(`[showService][DEBUG_SHOW] Today's date for filtering: ${today.toISOString()}`);\n          \n          // Check if target show exists before filtering\n          const targetShowBeforeFilter = filteredData.find((s: any) => s.id === DEBUG_SHOW_ID);\n          \n          if (targetShowBeforeFilter) {\n            const targetEndDate = new Date(targetShowBeforeFilter.end_date);\n            const isPastShow = targetEndDate < today;\n            \n            console.warn(\n              `[showService][DEBUG_SHOW] Target show end_date: ${targetEndDate.toISOString()} | Today: ${today.toISOString()} | Is past show? ${isPastShow ? 'YES' : 'NO'}`\n            );\n          }\n          \n          filteredData = filteredData.filter(show => {\n            // Parse the end date, ensuring timezone issues don't cause off-by-one errors\n            const showEndDate = new Date(show.end_date);\n            const isValid = showEndDate >= today;\n            \n            // Debug logging specifically for our target show\n            if (show.id === DEBUG_SHOW_ID) {\n              if (__DEV__)\n              console.warn(\n                `[showService][DEBUG_SHOW] Filtering decision: show.end_date (${showEndDate.toISOString()}) ${isValid ? '>=' : '<'} today (${today.toISOString()}) => ${isValid ? 'KEEP' : 'FILTER OUT'}`\n              );\n            }\n            \n            return isValid;\n          });\n          \n          if (__DEV__)\n          console.warn(`[showService] Filtered out past shows. ${filteredData.length} shows remaining.`);\n        }\n        \n        // Filter by max entry fee if specified\n        if (typeof filters.maxEntryFee === 'number' && Array.isArray(filteredData)) {\n          filteredData = filteredData.filter(show => \n            show.entry_fee <= filters.maxEntryFee!\n          );\n        }\n        \n        // Filter by categories if specified\n        if (filters.categories && Array.isArray(filters.categories) && \n            filters.categories.length > 0 && Array.isArray(filteredData)) {\n          filteredData = filteredData.filter(show => \n            show.categories && \n            filters.categories!.some(cat => show.categories.includes(cat))\n          );\n        }\n        \n        // Filter by features if specified\n        if (filters.features && Array.isArray(filters.features) && \n            filters.features.length > 0 && Array.isArray(filteredData)) {\n          filteredData = filteredData.filter(show => \n            show.features && \n            filters.features!.every(feature => show.features[feature] === true)\n          );\n        }\n        \n        /* ----- DEBUG: Is target show present after client-side filters? ---- */\n        if (Array.isArray(filteredData)) {\n          const foundAfter = filteredData.some((s: any) => s.id === DEBUG_SHOW_ID);\n          if (__DEV__)\n          console.warn(\n            `[showService][DEBUG_SHOW] Target show ${\n              foundAfter ? 'REMAINS' : 'WAS FILTERED OUT'\n            } after nearby_shows client-side filters`\n          );\n        }\n\n        return Array.isArray(filteredData) ? filteredData.map(mapDbShowToAppShow) : [];\n      }\n\n      /* -------------------------------------------------------\n       * 1b. Fallback to find_filtered_shows if nearby_shows fails\n       * ----------------------------------------------------- */\n      if (__DEV__)\n      console.warn('[showService] Falling back to find_filtered_shows with params:', {\n        center_lat: filters.latitude,\n        center_lng: filters.longitude,\n        radius_miles: radius,\n        start_date: startDate,\n        end_date: endDate,\n        max_entry_fee: filters.maxEntryFee ?? null,\n        show_categories: filters.categories ?? null,\n        show_features: filters.features ?? null,\n      });\n\n      const { data: rpcData, error: rpcError } = await supabase.rpc(\n        'find_filtered_shows',\n        {\n          // Primary/filter-aware RPC parameters\n          center_lat: typeof filters.latitude === 'number' ? filters.latitude : null,\n          center_lng: typeof filters.longitude === 'number' ? filters.longitude : null,\n          radius_miles: typeof filters.radius === 'number' ? filters.radius : 25,\n          start_date: startDate,\n          end_date: endDate,\n          max_entry_fee: typeof filters.maxEntryFee === 'number' ? filters.maxEntryFee : null,\n          show_categories: Array.isArray(filters.categories) ? filters.categories : null,\n          show_features: filters.features || null,\n        }\n      );\n\n      if (rpcError) {\n        if (__DEV__)\n        console.warn(\n          '[showService] find_filtered_shows RPC failed – attempting second fallback',\n          rpcError.message\n        );\n      } else {\n        if (__DEV__)\n        console.warn(\n          `[showService] find_filtered_shows returned ${((rpcData && Array.isArray(rpcData)) ? rpcData.length : 0)} show(s)`\n        );\n        \n        /* ----- DEBUG: Target show in raw find_filtered_shows payload? ----- */\n        if (Array.isArray(rpcData)) {\n          const foundRaw = rpcData.some((s: any) => s.id === DEBUG_SHOW_ID);\n          if (__DEV__)\n          console.warn(\n            `[showService][DEBUG_SHOW] Target show ${\n              foundRaw ? 'FOUND' : 'NOT found'\n            } in raw find_filtered_shows payload`\n          );\n          \n          // If found, get the show details for further debugging\n          if (foundRaw) {\n            const targetShow = rpcData.find((s: any) => s.id === DEBUG_SHOW_ID);\n            console.warn(\n              `[showService][DEBUG_SHOW] Target show details from find_filtered_shows:`,\n              {\n                id: targetShow.id,\n                title: targetShow.title,\n                start_date: targetShow.start_date,\n                end_date: targetShow.end_date,\n                status: targetShow.status\n              }\n            );\n          }\n        }\n\n        // Ensure we're not showing past shows\n        let filteredData = rpcData;\n        if (Array.isArray(filteredData)) {\n          const today = new Date();\n          if (__DEV__)\n          console.warn(`[showService][DEBUG_SHOW] Today's date for filtering (find_filtered): ${today.toISOString()}`);\n          \n          // Check if target show exists before filtering\n          const targetShowBeforeFilter = filteredData.find((s: any) => s.id === DEBUG_SHOW_ID);\n          \n          if (targetShowBeforeFilter) {\n            const targetEndDate = new Date(targetShowBeforeFilter.end_date);\n            const isPastShow = targetEndDate < today;\n            \n            console.warn(\n              `[showService][DEBUG_SHOW] Target show end_date (find_filtered): ${targetEndDate.toISOString()} | Today: ${today.toISOString()} | Is past show? ${isPastShow ? 'YES' : 'NO'}`\n            );\n          }\n          \n          filteredData = filteredData.filter(show => {\n            // Parse the end date, ensuring timezone issues don't cause off-by-one errors\n            const showEndDate = new Date(show.end_date);\n            const isValid = showEndDate >= today;\n            \n            // Debug logging specifically for our target show\n            if (show.id === DEBUG_SHOW_ID) {\n              if (__DEV__)\n              console.warn(\n                `[showService][DEBUG_SHOW] Filtering decision (find_filtered): show.end_date (${showEndDate.toISOString()}) ${isValid ? '>=' : '<'} today (${today.toISOString()}) => ${isValid ? 'KEEP' : 'FILTER OUT'}`\n              );\n            }\n            \n            return isValid;\n          });\n          \n          if (__DEV__)\n          console.warn(`[showService] Filtered out past shows. ${filteredData.length} shows remaining.`);\n        }\n        \n        /* ----- DEBUG: Target show after filters (find_filtered_shows) ----- */\n        if (Array.isArray(filteredData)) {\n          const foundFiltered = filteredData.some((s: any) => s.id === DEBUG_SHOW_ID);\n          if (__DEV__)\n          console.warn(\n            `[showService][DEBUG_SHOW] Target show ${\n              foundFiltered ? 'REMAINS' : 'WAS FILTERED OUT'\n            } after find_filtered_shows client-side filters`\n          );\n        }\n\n        return Array.isArray(filteredData) ? filteredData.map(mapDbShowToAppShow) : [];\n      }\n\n      /* -------------------------------------------------------\n       * 1c. Fallback to simple radius-only RPC if the above fails\n       * ----------------------------------------------------- */\n      const { data: fbData, error: fbError } = await supabase.rpc(\n        'find_shows_within_radius',\n        {\n          center_lat: typeof filters.latitude === 'number' ? filters.latitude : null,\n          center_lng: typeof filters.longitude === 'number' ? filters.longitude : null,\n          radius_miles: radius,\n        }\n      );\n\n      if (fbError) {\n        if (__DEV__)\n        console.warn(\n          '[showService] find_shows_within_radius fallback failed – will use basic query',\n          fbError.message\n        );\n        // fall through to non-spatial query below\n      } else {\n        if (__DEV__)\n        console.warn(\n          '[showService] find_shows_within_radius params:',\n          { center_lat: filters.latitude, center_lng: filters.longitude, radius_miles: radius }\n        );\n        if (__DEV__)\n        console.warn(\n          `[showService] find_shows_within_radius returned ${((fbData && Array.isArray(fbData)) ? fbData.length : 0)} show(s)`\n        );\n        \n        // Apply date filtering since this RPC doesn't do it\n        let filteredData = Array.isArray(fbData) ? fbData : [];\n        \n        // Ensure we're not showing past shows\n        if (Array.isArray(filteredData)) {\n          const today = new Date();\n          filteredData = filteredData.filter(show => {\n            // Parse the end date, ensuring timezone issues don't cause off-by-one errors\n            const showEndDate = new Date(show.end_date);\n            return showEndDate >= today;\n          });\n          \n          if (__DEV__)\n          console.warn(`[showService] Filtered out past shows. ${filteredData.length} shows remaining.`);\n        }\n        \n        // Apply date range filtering\n        filteredData = filteredData.filter(show => {\n          const showStartDate = new Date(show.start_date);\n          const filterStartDate = new Date(startDate);\n          const filterEndDate = new Date(endDate);\n          return showStartDate >= filterStartDate && showStartDate <= filterEndDate;\n        });\n        \n        return filteredData.map(mapDbShowToAppShow);\n      }\n    }\n\n    /* -----------------------------------------------------------\n     * 2. Basic (non-spatial) SELECT with optional filters\n     * --------------------------------------------------------- */\n    let query = supabase\n      .from('shows')\n      .select('*')\n      .eq('status', 'ACTIVE')\n      .order('start_date', { ascending: true });\n\n    /* -----------------------------------------------------------\n     * Date-range logic: include any show that **overlaps** the\n     * selected range rather than only shows that START inside it.\n     *  start_date ≤ rangeEnd  AND  end_date ≥ rangeStart\n     * --------------------------------------------------------- */\n    const rangeStart = startDate; // already ISO string\n    const rangeEnd = endDate;     // already ISO string\n    query = query.lte('start_date', rangeEnd as any);\n    query = query.gte('end_date', rangeStart as any);\n    \n    if (typeof filters.maxEntryFee === 'number') {\n      query = query.lte('entry_fee', filters.maxEntryFee);\n    }\n    query = safeOverlaps(query, 'categories', filters.categories as any);\n\n    /* ---------- Log basic-query filters for debugging ---------- */\n    if (__DEV__)\n    console.warn('[showService] Executing basic query with filters:', {\n      startDate: rangeStart,\n      endDate: rangeEnd,\n      maxEntryFee: filters.maxEntryFee,\n      categories: filters.categories,\n      status: 'ACTIVE',\n    });\n\n    const { data, error } = await query;\n\n    if (error) throw error;\n\n    if (__DEV__)\n    console.warn(\n      `[showService] basic query returned ${((data && Array.isArray(data)) ? data.length : 0)} show(s)`\n    );\n    \n    // Ensure we're not showing past shows\n    let filteredData = data;\n    if (Array.isArray(filteredData)) {\n      const today = new Date();\n      \n      // Check if target show exists before filtering\n      const targetShowBeforeFilter = filteredData.find((s: any) => s.id === DEBUG_SHOW_ID);\n      \n      if (targetShowBeforeFilter) {\n        const targetEndDate = new Date(targetShowBeforeFilter.end_date);\n        const isPastShow = targetEndDate < today;\n        \n        if (__DEV__)\n        console.warn(\n          `[showService][DEBUG_SHOW] Target show end_date (basic query): ${targetEndDate.toISOString()} | Today: ${today.toISOString()} | Is past show? ${isPastShow ? 'YES' : 'NO'}`\n        );\n      }\n      \n      filteredData = filteredData.filter(show => {\n        // Parse the end date, ensuring timezone issues don't cause off-by-one errors\n        const showEndDate = new Date(show.end_date);\n        const isValid = showEndDate >= today;\n        \n        // Debug logging specifically for our target show\n        if (show.id === DEBUG_SHOW_ID) {\n          console.warn(\n            `[showService][DEBUG_SHOW] Filtering decision (basic query): show.end_date (${showEndDate.toISOString()}) ${isValid ? '>=' : '<'} today (${today.toISOString()}) => ${isValid ? 'KEEP' : 'FILTER OUT'}`\n          );\n        }\n        \n        return isValid;\n      });\n      \n      if (__DEV__)\n      console.warn(`[showService] Filtered out past shows. ${filteredData.length} shows remaining.`);\n    }\n    \n    return Array.isArray(filteredData) ? filteredData.map(mapDbShowToAppShow) : [];\n  } catch (err: any) {\n    console.error('Error fetching shows:', err);\n    throw new Error(err.message ?? 'Failed to fetch shows');\n  }\n  \n  // Safety return if we somehow get here without data\n  return [];\n};\n\n/* ------------------------------------------------------------------ */\n/* Paginated / infinite-scroll helper                                  */\n/* ------------------------------------------------------------------ */\n\n/**\n * Fetch shows in **paged** chunks using the `nearby_shows` RPC.\n * Designed for infinite-scroll lists (Home screen, etc.).\n */\nexport const getPaginatedShows = async (\n  params: PaginatedShowsParams\n): Promise<PaginatedShowsResult> => {\n  try {\n    // 🔄  PRODUCTION APPROACH: use the reliable direct-query helper\n    if (__DEV__)\n      console.warn(\n        '[showService] getPaginatedShows → using direct query (RPC bypass)',\n      );\n    return await getDirectPaginatedShows(params);\n  } catch (err: any) {\n    console.error('[showService] Error in getPaginatedShows:', err);\n    return {\n      data: [],\n      pagination: {\n        totalCount: 0,\n        pageSize: params.pageSize ?? 20,\n        currentPage: params.page ?? 1,\n        totalPages: 0,\n      },\n      error: err.message ?? 'Failed to fetch paginated shows',\n    };\n  }\n};\n\n/**\n * Direct implementation for getPaginatedShows that uses Supabase queries\n * (bypasses the broken nearby_shows RPC).\n */\nconst getDirectPaginatedShows = async (\n  params: PaginatedShowsParams\n): Promise<PaginatedShowsResult> => {\n  try {\n    const {\n      latitude,\n      longitude,\n      radius = 25,\n      startDate = new Date(),\n      endDate = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\n      maxEntryFee = null,\n      categories = null,\n      features = null,\n      keyword = undefined,\n      dealerCardTypes = undefined,\n      pageSize = 20,\n      page = 1,\n    } = params;\n\n    const toIso = (d: Date | string | null): string =>\n      d instanceof Date ? d.toISOString() : d || '';\n    \n    if (__DEV__)\n      console.warn(\n        '[showService] getDirectPaginatedShows executing with params:',\n        {\n      latitude, longitude, radius, \n      startDate: toIso(startDate),\n      endDate: toIso(endDate)\n        },\n      );\n    \n    if (__DEV__)\n      console.warn(\n        '[showService] Using direct query for coordinate extraction',\n      );\n    let countQuery = supabase\n      .from('shows')\n      .select('id', { count: 'exact' })\n      .eq('status', 'ACTIVE');\n    \n    // Apply date filters\n    // Overlap logic: show starts on/before rangeEnd AND ends on/after rangeStart\n    countQuery = countQuery.lte('start_date', toIso(endDate) as any);\n    countQuery = countQuery.gte('end_date', toIso(startDate) as any);\n    \n    \n    // Apply other filters\n    if (typeof maxEntryFee === 'number') {\n      countQuery = countQuery.lte('entry_fee', maxEntryFee);\n    }\n    \n    countQuery = safeOverlaps(countQuery, 'categories', categories as any);\n    \n    // Execute count query\n    const { count, error: countError } = await countQuery;\n    \n    if (countError) {\n      console.error('[showService] Error getting count:', countError);\n      throw countError;\n    }\n    \n    // Now use the new RPC function that properly extracts coordinates\n    console.warn('[showService] Using direct query for coordinate extraction');\n\n    // Primary: direct query (no RPC dependency)\n    const { data, error: queryError } = await supabase\n      .from('shows')\n      .select('*')\n      .eq('status', 'ACTIVE')\n      // Overlap logic: include shows whose date span intersects the range\n      .lte('start_date', toIso(endDate))\n      .gte('end_date', toIso(startDate))\n      .order('start_date');\n\n    if (queryError) {\n      console.error('[showService] Direct query failed:', queryError);\n      throw queryError;\n    }\n\n    /* ------------------------------------------------------------------\n     * DEBUG – inspect target show immediately after raw direct query\n     * ----------------------------------------------------------------*/\n    if (Array.isArray(data)) {\n      const dbgRow: any | undefined = data.find((r: any) => r.id === DEBUG_SHOW_ID);\n      if (dbgRow) {\n        console.warn('[showService][DEBUG_SHOW] Found target show in raw direct query:', {\n          id: dbgRow.id,\n          title: dbgRow.title,\n          start_date: dbgRow.start_date,\n          end_date: dbgRow.end_date,\n          latitude: dbgRow.latitude,\n          longitude: dbgRow.longitude,\n          hasCoordArray:\n            !!dbgRow.coordinates &&\n            !!dbgRow.coordinates.coordinates &&\n            Array.isArray(dbgRow.coordinates.coordinates),\n          coordArray: dbgRow.coordinates?.coordinates,\n          coordType: typeof dbgRow.coordinates,\n        });\n      } else {\n        console.warn('[showService][DEBUG_SHOW] Target show NOT in raw direct query result');\n      }\n    }\n\n    // Process the data to add coordinates\n    let filteredData: any[] = data || [];\n\n    if (__DEV__)\n      console.warn(\n        `[showService] Direct query returned ${filteredData.length} raw show(s)`,\n      );\n    \n    // Apply additional filters that weren't handled by the RPC\n    \n    // Apply status filter (RPC already filters for ACTIVE, but double-check)\n    filteredData = filteredData.filter(show => show.status === 'ACTIVE');\n    \n    // Apply max entry fee filter if specified\n    if (typeof maxEntryFee === 'number') {\n      filteredData = filteredData.filter(show => show.entry_fee <= maxEntryFee);\n    }\n    \n    // Apply categories filter if specified\n    if (categories && Array.isArray(categories) && categories.length > 0) {\n      filteredData = filteredData.filter(show => \n        show.categories && \n        categories.some(cat => show.categories.includes(cat))\n      );\n    }\n    \n    // Apply features filter if specified\n    if (features && Array.isArray(features) && features.length > 0) {\n      filteredData = filteredData.filter(show => \n        show.features && \n        features.every(feature => show.features[feature] === true)\n      );\n    }\n\n    /* ------------------------------------------------------------------\n     * Advanced Dealer / Keyword Filtering\n     * ------------------------------------------------------------------\n     * If the caller supplied a free-text keyword and/or dealerCardTypes,\n     * we need to look at show_participants (dealer booth info) in\n     * addition to the basic show fields we’ve already filtered on.\n     * ----------------------------------------------------------------*/\n    const cleanKeyword =\n      typeof keyword === 'string' && keyword.trim().length\n        ? keyword.trim().toLowerCase()\n        : undefined;\n    const hasDealerTypeFilter =\n      Array.isArray(dealerCardTypes) && dealerCardTypes.length > 0;\n\n    if (cleanKeyword || hasDealerTypeFilter) {\n      try {\n        // Build quick lookup of participants by show\n        const showIds = filteredData.map(s => s.id);\n\n        if (showIds.length > 0) {\n          const { data: partRows, error: partErr } = await supabase\n            .from('show_participants')\n            .select('showid, specialty, notable_items, card_types')\n            .in('showid', showIds);\n\n          if (partErr) {\n            console.warn(\n              '[showService] Participant lookup failed – skipping dealer filters',\n              partErr.message,\n            );\n          } else {\n            const partsMap: Record<\n              string,\n              Array<{\n                specialty?: string | null;\n                notable_items?: string | null;\n                card_types?: string[] | null;\n              }>\n            > = {};\n\n            (partRows || []).forEach(row => {\n              const arr = partsMap[row.showid] ?? [];\n              arr.push(row);\n              partsMap[row.showid] = arr;\n            });\n\n            // Normalise dealer card type strings once for comparison\n            const normDealerTypes = (dealerCardTypes || []).map(t =>\n              t.toString().toLowerCase(),\n            );\n\n            filteredData = filteredData.filter(show => {\n              const participants = partsMap[show.id] || [];\n\n              /* Dealer card-type filtering */\n              let passesDealerType = true;\n              if (hasDealerTypeFilter) {\n                passesDealerType = participants.some(p => {\n                  if (!Array.isArray(p.card_types)) return false;\n                  return p.card_types.some(ct =>\n                    normDealerTypes.includes(ct.toString().toLowerCase()),\n                  );\n                });\n              }\n\n              /* Keyword filtering */\n              let passesKeyword = true;\n              if (cleanKeyword) {\n                const inShowFields =\n                  (show.title?.toLowerCase().includes(cleanKeyword) ||\n                    show.description?.toLowerCase().includes(cleanKeyword) ||\n                    show.location?.toLowerCase().includes(cleanKeyword) ||\n                    show.address?.toLowerCase().includes(cleanKeyword)) ??\n                  false;\n\n                const inDealerFields = participants.some(p => {\n                  const spec =\n                    (p.specialty ?? '').toString().toLowerCase() || '';\n                  const note =\n                    (p.notable_items ?? '').toString().toLowerCase() || '';\n                  return (\n                    spec.includes(cleanKeyword) || note.includes(cleanKeyword)\n                  );\n                });\n\n                passesKeyword = inShowFields || inDealerFields;\n              }\n\n              return passesDealerType && passesKeyword;\n            });\n          }\n        }\n      } catch (advErr) {\n        console.warn(\n          '[showService] Advanced dealer/keyword filter failed – proceeding without it',\n          advErr,\n        );\n      }\n    }\n    \n    // Build a map of coordinates by address from shows that have coordinates\n    const coordsByAddress = new Map<string, { latitude: number; longitude: number }>();\n    \n    filteredData.forEach(show => {\n      // Only include entries that have valid coordinates\n      let hasValidCoords = false;\n      let coords: { latitude: number; longitude: number } | null = null;\n      \n      // Check for explicit latitude/longitude\n      if (typeof show.latitude === 'number' && typeof show.longitude === 'number') {\n        coords = { latitude: show.latitude, longitude: show.longitude };\n        hasValidCoords = true;\n      }\n      // Check for PostGIS point\n      else if (\n        show.coordinates &&\n        show.coordinates.coordinates &&\n        Array.isArray(show.coordinates.coordinates) &&\n        show.coordinates.coordinates.length >= 2\n      ) {\n        coords = {\n          latitude: show.coordinates.coordinates[1],\n          longitude: show.coordinates.coordinates[0]\n        };\n        hasValidCoords = true;\n      }\n      // Check for WKB hex string\n      else if (typeof show.coordinates === 'string') {\n        const pt = parseWkbPoint(show.coordinates);\n        if (pt) {\n          coords = pt;\n          hasValidCoords = true;\n        }\n      }\n      \n      // If we found valid coordinates and have an address, add to the map\n      if (hasValidCoords && coords && show.address) {\n        const normalizedAddr = normalizeAddress(show.address);\n        if (normalizedAddr) {\n          coordsByAddress.set(normalizedAddr, coords);\n        }\n      }\n    });\n    \n    if (__DEV__ && coordsByAddress.size > 0) {\n      console.warn(\n        `[showService] Built coordinates map from ${coordsByAddress.size} addresses with known coordinates`\n      );\n    }\n    \n    // Filter results for shows within the radius\n    // (since we can't do this in the query without the RPC)\n    /* ------------------------------------------------------------------\n     * Skip distance filtering if we're using the default (0,0) placeholder\n     * coordinates.  Applying the radius filter in that case removes every\n     * show because all real-world coordinates are far from (0,0).\n     * ------------------------------------------------------------------ */\n    const isDefaultCoordinates =\n      Math.abs(latitude) < 0.1 && Math.abs(longitude) < 0.1;\n\n    if (radius && !isDefaultCoordinates) {\n      if (__DEV__)\n        console.warn(\n        `[showService] Applying distance filtering with coordinates (${latitude}, ${longitude})`\n      );\n\n      filteredData = filteredData.filter(show => {\n        // Extract coordinates using the same logic as mapDbShowToAppShow\n        let showCoords;\n        \n        // Method 1: Check for explicit latitude/longitude properties\n        if (typeof show.latitude === 'number' && typeof show.longitude === 'number') {\n          showCoords = {\n            latitude: show.latitude,\n            longitude: show.longitude\n          };\n        }\n        // Method 2: Check for PostGIS point format\n        else if (show.coordinates &&\n          show.coordinates.coordinates &&\n          Array.isArray(show.coordinates.coordinates) &&\n          show.coordinates.coordinates.length >= 2) {\n          showCoords = {\n            latitude: show.coordinates.coordinates[1],\n            longitude: show.coordinates.coordinates[0]\n          };\n        // Method 3: WKB hex string\n        } else if (typeof show.coordinates === 'string') {\n          const pt = parseWkbPoint(show.coordinates);\n          if (pt) {\n            showCoords = {\n              latitude: pt.latitude,\n              longitude: pt.longitude,\n            };\n          }\n        }\n        \n        // If no coordinates yet, try to find them by address\n        if (!showCoords && show.address) {\n          const normalizedAddr = normalizeAddress(show.address);\n          const fallbackCoords = coordsByAddress.get(normalizedAddr);\n          \n          if (fallbackCoords) {\n            showCoords = fallbackCoords;\n            \n            // Also assign these coordinates to the show object for mapping\n            // Use a try/catch to handle readonly properties\n            try {\n              show.latitude = fallbackCoords.latitude;\n              show.longitude = fallbackCoords.longitude;\n            } catch {\n              // If properties are readonly, we can still use showCoords for distance calc\n              if (__DEV__) {\n                console.warn('[showService] Could not assign fallback coordinates to show object (readonly properties)');\n              }\n            }\n            \n            // Debug log for target show\n            if (show.id === DEBUG_SHOW_ID) {\n              console.warn('[showService][DEBUG_SHOW] Applied fallback coordinates from address match:', {\n                address: show.address,\n                normalizedAddress: normalizedAddr,\n                borrowedCoords: fallbackCoords\n              });\n            }\n          }\n        }\n        \n        // Skip shows without valid coordinates\n        if (!showCoords) return false;\n        \n        const distance = calculateDistanceBetweenCoordinates(\n          { latitude, longitude },\n          showCoords\n        );\n\n        /* ----------- DEBUG distance calc for target show ------------- */\n        if (show.id === DEBUG_SHOW_ID) {\n          console.warn('[showService][DEBUG_SHOW] Distance filter evaluation:', {\n            coordsUser: { latitude, longitude },\n            coordsShow: showCoords,\n            distance,\n            radius,\n            passes: distance <= radius,\n          });\n        }\n\n        return distance <= radius;\n      });\n\n      /* After distance filtering – did target remain? */\n      if (Array.isArray(filteredData)) {\n        const remains = filteredData.some((s: any) => s.id === DEBUG_SHOW_ID);\n        console.warn(\n          `[showService][DEBUG_SHOW] Target show ${\n            remains ? 'REMAINS' : 'REMOVED'\n          } after distance filtering`,\n        );\n      }\n    } else if (isDefaultCoordinates) {\n      if (__DEV__)\n        console.warn(\n        `[showService] Skipping distance filtering – default coordinates detected (${latitude}, ${longitude})`\n      );\n    }\n    \n    // Apply pagination to the filtered data\n    const totalFilteredCount = filteredData.length;\n    const startIndex = (page - 1) * pageSize;\n    const endIndex = Math.min(startIndex + pageSize, totalFilteredCount);\n    const paginatedData = filteredData.slice(startIndex, endIndex);\n    \n    if (__DEV__)\n      console.warn(\n        `[showService] getDirectPaginatedShows found ${paginatedData.length} shows (from ${totalFilteredCount} filtered, ${count} total)`,\n      );\n\n    /* Final page check for DEBUG_SHOW */\n    if (paginatedData.some((s: any) => s.id === DEBUG_SHOW_ID)) {\n      console.warn('[showService][DEBUG_SHOW] Target show IS in final paginated page');\n    } else {\n      console.warn('[showService][DEBUG_SHOW] Target show NOT in final paginated page');\n    }\n    \n    // Map to app format\n    const mappedShows = paginatedData.map(mapDbShowToAppShow);\n    \n    // Calculate pagination info\n    const totalPages = Math.ceil(totalFilteredCount / pageSize);\n    \n    return {\n      data: mappedShows,\n      pagination: {\n        totalCount: totalFilteredCount,\n        pageSize,\n        currentPage: page,\n        totalPages,\n      },\n      error: null,\n    };\n  } catch (err: any) {\n    console.error('[showService] Error in getDirectPaginatedShows:', err);\n    return {\n      data: [],\n      pagination: {\n        totalCount: 0,\n        pageSize: params.pageSize ?? 20,\n        currentPage: params.page ?? 1,\n        totalPages: 0,\n      },\n      error: err.message ?? 'Failed to fetch paginated shows',\n    };\n  }\n};\n\n/**\n * Completely bypass all location filtering if we're still not getting results.\n * This ensures users always see shows even if there are issues with coordinates.\n */\nconst _getAllActiveShowsFallback = async (\n  params: PaginatedShowsParams\n): Promise<PaginatedShowsResult> => {\n  try {\n    const {\n      startDate = new Date(),\n      endDate = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\n      pageSize = 20,\n      page = 1,\n    } = params;\n\n    if (__DEV__)\n      console.warn(\n        '[showService] Using emergency getAllActiveShowsFallback without coordinate filtering',\n      );\n    \n    const toIso = (d: Date | string | null): string =>\n      d instanceof Date ? d.toISOString() : d || '';\n    \n    // Simple query - just get active shows\n    let dataQuery = supabase\n      .from('shows')\n      .select('*')\n      .eq('status', 'ACTIVE');\n    \n    // Apply minimal filtering to ensure we don't show past shows\n    const today = new Date();\n    dataQuery = dataQuery.gte('end_date', today.toISOString() as any);\n    \n    // Only apply date filtering to start date to match what we promise users\n    dataQuery = dataQuery.gte('start_date', toIso(startDate) as any);\n    dataQuery = dataQuery.lte('start_date', toIso(endDate) as any);\n    \n    // Get total count first using the recommended Supabase pattern\n    const { count, error: countError } = await supabase\n      .from('shows')\n      .select('*', { count: 'exact', head: true })\n      .gte('start_date', toIso(startDate) as any)\n      .lte('end_date', toIso(endDate) as any);\n    \n    if (countError) {\n      console.error('[showService] Error getting count in emergency fallback:', countError);\n      throw countError;\n    }\n    \n    // Now apply pagination to the same query\n    dataQuery = dataQuery\n      .order('start_date', { ascending: true })\n      .range((page - 1) * pageSize, page * pageSize - 1);\n    \n    const { data, error: dataError } = await dataQuery;\n    \n    if (dataError) {\n      console.error('[showService] Error getting data in emergency fallback:', dataError);\n      throw dataError;\n    }\n    \n    if (__DEV__)\n      console.warn(\n        `[showService] Emergency getAllActiveShowsFallback found ${data.length} shows (from ${count} total)`,\n      );\n    \n    // Map to app format\n    const mappedShows = data.map(mapDbShowToAppShow);\n    \n    // Calculate pagination info\n    const totalCount = count || 0;\n    const totalPages = Math.ceil(totalCount / pageSize);\n    \n    return {\n      data: mappedShows,\n      pagination: {\n        totalCount,\n        pageSize,\n        currentPage: page,\n        totalPages,\n      },\n      error: null,\n    };\n  } catch (err: any) {\n    console.error('[showService] Error in emergency fallback:', err);\n    return {\n      data: [],\n      pagination: {\n        totalCount: 0,\n        pageSize: params.pageSize ?? 20,\n        currentPage: params.page ?? 1,\n        totalPages: 0,\n      },\n      error: err.message ?? 'Failed to fetch shows',\n    };\n  }\n};\n\n/**\n * Calculate distance between two points using the Haversine formula\n * @returns Distance in miles\n */\nconst _calculateDistance = (lat1: number, lon1: number, lat2: number, lon2: number): number => {\n  const R = 3958.8; // Earth's radius in miles\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLon = (lon2 - lon1) * Math.PI / 180;\n  const a = \n    Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * \n    Math.sin(dLon/2) * Math.sin(dLon/2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n  return R * c;\n};\n\n/**\n * Fetch a single show by ID.\n */\nexport const getShowById = async (\n  id: string\n): Promise<{ data: Show | null; error: string | null }> => {\n  try {\n    const { data, error } = await supabase\n      .from('shows')\n      .select('*')\n      .eq('id', id)\n      .single();\n\n    if (error) {\n      throw error;\n    }\n\n    if (!data) {\n      return { data: null, error: 'Show not found' };\n    }\n\n    return { data: mapDbShowToAppShow(data), error: null };\n  } catch (err: any) {\n    console.error('Error fetching show by id:', err);\n    return { data: null, error: err.message ?? 'Unknown error' };\n  }\n};\n\n/**\n * Create a new show (stub)\n */\nexport const createShow = () => {\n  throw new Error('createShow not implemented');\n};\n\n/**\n * Fetch upcoming (or otherwise date-filtered) shows a user is planning to attend.\n *\n * Looks up the `show_participants` table for the supplied `userId` and then\n * fetches matching shows from `shows`, with optional date-range constraints.\n *\n * @param params - { userId, startDate, endDate? }\n * @returns { data, error } shape – `data` will be an array of `Show`s.\n */\nexport const getUpcomingShows = async (params: {\n  userId: string;\n  startDate: Date | string;\n  endDate?: Date | string;\n}): Promise<{ data: Show[] | null; error: string | null }> => {\n  try {\n    const { userId, startDate, endDate } = params;\n\n    if (!userId) {\n      return { data: null, error: 'Invalid userId' };\n    }\n\n    /* -----------------------------------------------------------\n     * 1. Fetch show IDs the user plans to attend\n     * --------------------------------------------------------- */\n    const { data: participantRows, error: participantError } = await supabase\n      .from('show_participants')\n      // use lowercase column names in db\n      .select('showid')\n      .eq('userid', userId);\n\n    if (participantError) {\n      throw participantError;\n    }\n\n    if (!participantRows || participantRows.length === 0) {\n      // User is not signed up for any shows\n      return { data: [], error: null };\n    }\n\n    const showIds = participantRows\n      .map((row: any) => row.showid)\n      .filter(Boolean);\n\n    // Early-exit guard: nothing to look up → return empty list\n    if (showIds.length === 0) {\n      return { data: [], error: null };\n    }\n\n    /* -----------------------------------------------------------\n     * 2. Fetch shows matching those IDs + date filters\n     * --------------------------------------------------------- */\n    let showQuery = supabase\n      .from('shows')\n      .select('*')\n      .in('id', showIds)\n      .order('start_date', { ascending: true });\n\n    if (startDate) {\n      showQuery = showQuery.gte('start_date', startDate as any);\n    }\n    if (endDate) {\n      showQuery = showQuery.lte('end_date', endDate as any);\n    }\n    \n    // Also ensure the end_date is not in the past\n    const today = new Date();\n    showQuery = showQuery.gte('end_date', today.toISOString() as any);\n\n    const { data: showRows, error: showError } = await showQuery;\n\n    if (showError) {\n      throw showError;\n    }\n    \n    // Ensure we're not showing past shows\n    let filteredData = showRows;\n    if (Array.isArray(filteredData)) {\n      const today = new Date();\n      filteredData = filteredData.filter(show => {\n        // Parse the end date, ensuring timezone issues don't cause off-by-one errors\n        const showEndDate = new Date(show.end_date);\n        return showEndDate >= today;\n      });\n      \n      if (__DEV__)\n        console.warn(\n          `[showService] Filtered out past shows. ${filteredData.length} shows remaining.`,\n        );\n    }\n\n    const mapped = Array.isArray(filteredData)\n      ? filteredData.map(mapDbShowToAppShow)\n      : [];\n\n    return { data: mapped, error: null };\n  } catch (err: any) {\n    console.error('Error fetching upcoming shows for user:', err);\n    return { data: null, error: err.message ?? 'Unknown error' };\n  }\n};\n\n/**\n * Claims a show for a show organizer.\n *\n * 1. Marks the show row as claimed (`claimed`, `claimed_by`, `claimed_at`).\n * 2. Inserts a row in the `show_organizers` join table so we can\n *    easily query which organisers manage which shows.\n *\n * On success returns `{ success: true, data: <updated show row> }`\n * On failure returns `{ success: false, message: <reason> }`\n */\nexport const claimShow = async (\n  showId: string,\n  userId: string\n): Promise<{ success: boolean; data?: any; message?: string }> => {\n  try {\n    /* --------------------------------------------------------\n     * 0. Verify user is a (paid) show organiser\n     * ------------------------------------------------------ */\n    const { data: profile, error: profileErr } = await supabase\n      .from('profiles')\n      .select('role, is_paid')\n      .eq('id', userId)\n      .single();\n\n    if (profileErr) throw profileErr;\n    if (!profile) {\n      return {\n        success: false,\n        message: 'User profile not found',\n      };\n    }\n\n    const roleOk =\n      (profile.role ?? '').toString().toLowerCase() ===\n      'show_organizer';\n    const paidOk =\n      profile.is_paid === undefined\n        ? true // tolerate missing column\n        : !!profile.is_paid;\n\n    if (!roleOk || !paidOk) {\n      return {\n        success: false,\n        message:\n          'Only paid Show Organizers can claim shows. Please upgrade your plan.',\n      };\n    }\n\n    /* --------------------------------------------------------\n     * 1. Atomically flag the show as claimed IF not yet claimed\n     *    — PostgREST will return 0 rows if the condition fails.\n     * ------------------------------------------------------ */\n    const {\n      data: updatedShow,\n      error: updateError,\n      count: _count,\n    } = await supabase\n        .from('shows')\n        .update({\n          claimed: true,\n          claimed_by: userId,\n          claimed_at: new Date().toISOString(),\n        })\n        .eq('id', showId)\n        .or('claimed.is.null,claimed.eq.false') // only update unclaimed\n        .select('*')\n        .single();\n\n    if (updateError) throw updateError;\n\n    if (!updatedShow) {\n      return {\n        success: false,\n        message: 'Show has already been claimed by another organiser.',\n      };\n    }\n\n    /* --------------------------------------------------------\n     * 2. Insert organiser ↔ show relation (ignore duplicates)\n     * ------------------------------------------------------ */\n    const { error: orgError } = await supabase.from('show_organizers').insert([\n      {\n        show_id: showId,\n        user_id: userId,\n        role: 'owner',\n        created_at: new Date().toISOString(),\n      },\n    ]);\n\n    if (orgError) throw orgError;\n\n    return { success: true, data: updatedShow };\n  } catch (err: any) {\n    console.error('API error in claimShow:', err);\n    return { success: false, message: err.message || 'Failed to claim show' };\n  }\n};\n\n/**\n * Update an existing show (stub)\n */\nexport const updateShow = async (params: {\n  id: string;\n  updates: {\n    title?: string;\n    description?: string | null;\n    location?: string;\n    address?: string;\n    startDate?: string;\n    endDate?: string;\n    entryFee?: number;\n    imageUrl?: string | null;\n    latitude?: number;\n    longitude?: number;\n    features?: Record<string, boolean> | null;\n    categories?: string[] | null;\n    status?: ShowStatus;\n  };\n}): Promise<{ data: Show | null; error: string | null }> => {\n  try {\n    const { id, updates } = params;\n    if (!id) {\n      return { data: null, error: 'Invalid show id' };\n    }\n\n    /* --------------------------------------------------------\n     * Build payload with snake_case keys for DB columns\n     * Only include properties that are defined.\n     * ------------------------------------------------------ */\n    const payload: Record<string, any> = {};\n\n    if (updates.title !== undefined) payload.title = updates.title;\n    if (updates.description !== undefined)\n      payload.description = updates.description;\n    if (updates.location !== undefined) payload.location = updates.location;\n    if (updates.address !== undefined) payload.address = updates.address;\n    if (updates.startDate !== undefined) payload.start_date = updates.startDate;\n    if (updates.endDate !== undefined) payload.end_date = updates.endDate;\n    if (updates.entryFee !== undefined) payload.entry_fee = updates.entryFee;\n    if (updates.imageUrl !== undefined) payload.image_url = updates.imageUrl;\n    if (updates.latitude !== undefined) payload.latitude = updates.latitude;\n    if (updates.longitude !== undefined) payload.longitude = updates.longitude;\n    if (updates.features !== undefined) payload.features = updates.features;\n    if (updates.categories !== undefined) payload.categories = updates.categories;\n    if (updates.status !== undefined) payload.status = updates.status;\n\n    // Always update the timestamp\n    payload.updated_at = new Date().toISOString();\n\n    /* --------------------------------------------------------\n     * Execute update  – retry without lat/lng if those cols are\n     * missing (older DB schemas)\n     * ------------------------------------------------------ */\n    const payloadWithCoords = { ...payload };\n    const payloadWithoutCoords = { ...payload };\n    delete payloadWithoutCoords.latitude;\n    delete payloadWithoutCoords.longitude;\n\n    const attemptUpdate = async (pl: Record<string, any>) =>\n      supabase\n        .from('shows')\n        .update(pl)\n        .eq('id', id)\n        .select('*')\n        .single();\n\n    let { data, error } = await attemptUpdate(payloadWithCoords);\n\n    // If error references missing column(s) → retry sans coords\n    if (\n      error &&\n      /latitude|longitude|schema cache|column|does not exist/i.test(\n        error.message,\n      )\n    ) {\n      if (__DEV__)\n        console.warn(\n          '[showService] Latitude/Longitude columns not found – retrying update without coordinate fields',\n        );\n      ({ data, error } = await attemptUpdate(payloadWithoutCoords));\n    }\n\n    if (error) {\n      console.error('[showService] Error updating show:', error);\n      return { data: null, error: error.message };\n    }\n\n    return { data: data ? mapDbShowToAppShow(data) : null, error: null };\n  } catch (err: any) {\n    console.error('[showService] Exception in updateShow:', err);\n    return { data: null, error: err.message ?? 'Failed to update show' };\n  }\n};\n\n/**\n * Delete a show (stub)\n */\nexport const deleteShow = () => {\n  throw new Error('deleteShow not implemented');\n};\n"],"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","ignoreList":[]}