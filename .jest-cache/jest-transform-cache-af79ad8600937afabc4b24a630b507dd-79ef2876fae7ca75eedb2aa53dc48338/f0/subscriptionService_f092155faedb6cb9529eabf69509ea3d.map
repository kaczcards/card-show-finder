{"version":3,"names":["supabase","createPaymentSheetForSubscription","SubscriptionPlanType","SubscriptionDuration","SUBSCRIPTION_PLANS","calculateExpiryDate","cov_15z3stinmo","s","hasActiveSubscription","user","f","b","accountType","subscriptionStatus","subscriptionExpiry","expiryDate","Date","isInTrialPeriod","paymentStatus","timeRemaining","getSubscriptionTimeRemaining","days","now","diffMs","getTime","hours","Math","floor","isSubscriptionExpired","getSubscriptionDetails","planType","DEALER","ORGANIZER","plan","find","p","type","duration","ANNUAL","isTrialPeriod","isPaid","status","expiry","isActive","initiateSubscriptionPurchase","_ref","_asyncToGenerator","userId","planId","stripeCtx","id","success","error","stripeResult","initPaymentSheet","presentPaymentSheet","_ref2","from","update","payment_status","eq","select","single","profile","data","updateError","console","transactionId","subscription_expiry","undefined","mockTransactionId","random","_ref3","account_type","subscription_status","toISOString","updated_at","message","_x","_x2","_x3","apply","arguments","renewSubscription","_ref4","_x4","_x5","cancelSubscription","_ref5","_ref6","userData","fetchError","_ref7","_x6","checkAndUpdateSubscriptionStatus","_ref8","_ref9","_ref0","_x7","getAvailablePlans","filter","formatExpiryDate","date","toLocaleDateString","year","month","day","canAccessDealerFeatures","canAccessOrganizerFeatures"],"sources":["subscriptionService.ts"],"sourcesContent":["// src/services/subscriptionService.ts\nimport { supabase } from '../supabase';\nimport { User } from '../types';\nimport { createPaymentSheetForSubscription } from './stripePaymentService';\nimport {\n  SubscriptionPlan,\n  SubscriptionPlanType,\n  SubscriptionDuration,\n  SUBSCRIPTION_PLANS,\n  StripePaymentResult,\n  calculateExpiryDate\n} from './subscriptionTypes';\n\n/**\n * Result of a payment operation\n */\nexport interface PaymentResult {\n  success: boolean;\n  transactionId?: string;\n  error?: string;\n  subscriptionExpiry?: Date;\n}\n\n/**\n * Check if a user has an active subscription\n * @param user The user to check\n * @returns Boolean indicating if the subscription is active\n */\nexport const hasActiveSubscription = (user: User): boolean => {\n  if (!user) return false;\n  \n  // Free collector accounts don't have subscriptions\n  if (user.accountType === 'collector') return false;\n  \n  // Check if the subscription status is active\n  if (user.subscriptionStatus !== 'active') return false;\n  \n  // Check if the subscription has expired\n  if (user.subscriptionExpiry) {\n    const expiryDate = new Date(user.subscriptionExpiry);\n    return expiryDate > new Date();\n  }\n  \n  return false;\n};\n\n/**\n * Check if a user is in their trial period\n * @param user The user to check\n * @returns Boolean indicating if the user is in trial period\n */\nexport const isInTrialPeriod = (user: User): boolean => {\n  if (!user || !hasActiveSubscription(user)) return false;\n  \n  // Check if payment_status is explicitly set to 'trial'\n  if (user.paymentStatus === 'trial') return true;\n  \n  // Legacy check for users without payment_status field\n  // If they have less than 7 days remaining and no payment_status,\n  // they're likely in a trial period\n  if (!user.paymentStatus || user.paymentStatus === 'none') {\n    const timeRemaining = getSubscriptionTimeRemaining(user);\n    if (timeRemaining && timeRemaining.days < 7) {\n      return true;\n    }\n  }\n  \n  return false;\n};\n\n/**\n * Get the time remaining in a user's subscription\n * @param user The user to check\n * @returns Object with days, hours remaining or null if no active subscription\n */\nexport const getSubscriptionTimeRemaining = (user: User): { days: number, hours: number } | null => {\n  if (!hasActiveSubscription(user) || !user.subscriptionExpiry) {\n    return null;\n  }\n  \n  const now = new Date();\n  const expiryDate = new Date(user.subscriptionExpiry);\n  const diffMs = expiryDate.getTime() - now.getTime();\n  \n  // If already expired\n  if (diffMs <= 0) return { days: 0, hours: 0 };\n  \n  const days = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n  const hours = Math.floor((diffMs % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n  \n  return { days, hours };\n};\n\n/**\n * Check if a user's subscription has expired\n * @param user The user to check\n * @returns Boolean indicating if the subscription is expired\n */\nexport const isSubscriptionExpired = (user: User): boolean => {\n  if (!user || user.accountType === 'collector') return false;\n  \n  if (user.subscriptionStatus === 'expired') return true;\n  \n  if (user.subscriptionExpiry) {\n    const expiryDate = new Date(user.subscriptionExpiry);\n    return expiryDate <= new Date();\n  }\n  \n  return false;\n};\n\n/**\n * Get subscription details for a user\n * @param user The user to get subscription details for\n * @returns Object with subscription details or null if no subscription\n */\nexport const getSubscriptionDetails = (user: User): {\n  accountType: string;\n  status: string;\n  expiry: Date | null;\n  isActive: boolean;\n  timeRemaining: { days: number, hours: number } | null;\n  plan: SubscriptionPlan | null;\n  isPaid: boolean;\n  isTrialPeriod: boolean;\n} | null => {\n  if (!user || user.accountType === 'collector') {\n    return null;\n  }\n  \n  // Find the plan that matches the user's account type\n  const planType = user.accountType === 'dealer' \n    ? SubscriptionPlanType.DEALER \n    : SubscriptionPlanType.ORGANIZER;\n    \n  // Default to the annual plan as it's the most common\n  const plan = SUBSCRIPTION_PLANS.find(p => \n    p.type === planType && p.duration === SubscriptionDuration.ANNUAL\n  ) || null;\n  \n  // Check if user is in trial period\n  const isTrialPeriod = isInTrialPeriod(user);\n  \n  // Check if user has paid (either explicitly marked as paid or has active subscription but not in trial)\n  const isPaid = user.paymentStatus === 'paid' || \n                (hasActiveSubscription(user) && !isTrialPeriod);\n  \n  return {\n    accountType: user.accountType,\n    status: user.subscriptionStatus,\n    expiry: user.subscriptionExpiry ? new Date(user.subscriptionExpiry) : null,\n    isActive: hasActiveSubscription(user),\n    timeRemaining: getSubscriptionTimeRemaining(user),\n    plan,\n    isPaid,\n    isTrialPeriod\n  };\n};\n\n/**\n * Initiate a subscription purchase\n * @param userId The ID of the user making the purchase\n * @param planId The ID of the plan being purchased\n * @param stripeCtx Optional Stripe helpers (initPaymentSheet, presentPaymentSheet) â€“\n *                  if provided we run the real payment flow, otherwise we fall back\n *                  to the legacy mock implementation (useful for unit tests / Storybook).\n * @returns Promise with the payment result\n */\nexport const initiateSubscriptionPurchase = async (\n  userId: string,\n  planId: string,\n  stripeCtx?: {\n    initPaymentSheet: (params: any) => Promise<any>;\n    presentPaymentSheet: () => Promise<any>;\n  }\n): Promise<PaymentResult> => {\n  try {\n    // Find the selected plan\n    const plan = SUBSCRIPTION_PLANS.find(p => p.id === planId);\n    if (!plan) {\n      return {\n        success: false,\n        error: 'Invalid subscription plan selected'\n      };\n    }\n    \n    /* ------------------------------------------------------------------\n     * 1. Real payment flow via Stripe (preferred)\n     * ------------------------------------------------------------------ */\n    if (stripeCtx) {\n      const stripeResult: StripePaymentResult =\n        await createPaymentSheetForSubscription(\n          userId,\n          planId,\n          stripeCtx.initPaymentSheet,\n          stripeCtx.presentPaymentSheet\n        );\n\n      if (!stripeResult.success) {\n        return {\n          success: false,\n          error: stripeResult.error || 'Stripe payment failed',\n        };\n      }\n\n      /* After a successful payment, the stripePaymentService already\n       * updates the user profile with the correct expiry date and role.\n       * We need to also update the payment_status to 'paid'\n       */\n      const { data: profile, error: updateError } = await supabase\n        .from('profiles')\n        .update({ payment_status: 'paid' })\n        .eq('id', userId)\n        .select('subscription_expiry')\n        .single();\n\n      if (updateError) {\n        console.error('Error updating payment status:', updateError);\n      }\n\n      return {\n        success: true,\n        transactionId: stripeResult.transactionId,\n        subscriptionExpiry: profile?.subscription_expiry\n          ? new Date(profile.subscription_expiry)\n          : undefined,\n      };\n    }\n    \n    /* ------------------------------------------------------------------\n     * 2. Legacy mock payment (development fallback)\n     * ------------------------------------------------------------------ */\n    // For demonstration purposes, we'll simulate a successful payment\n    const mockTransactionId = `tx_${Date.now()}_${Math.floor(Math.random() * 1000)}`;\n    \n    // Calculate when the subscription will expire\n    const expiryDate = calculateExpiryDate(plan);\n    \n    // Update the user's profile with the new subscription information\n    const { error } = await supabase\n      .from('profiles')\n      .update({\n        account_type: plan.type,\n        subscription_status: 'active',\n        payment_status: 'paid', // Mark as paid immediately for prepaid subscriptions\n        subscription_expiry: expiryDate.toISOString(),\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', userId);\n    \n    if (error) {\n      console.error('Error updating subscription status:', error);\n      return {\n        success: false,\n        error: 'Failed to update subscription status'\n      };\n    }\n    \n    return {\n      success: true,\n      transactionId: mockTransactionId,\n      subscriptionExpiry: expiryDate\n    };\n  } catch (error: any) {\n    console.error('Error processing subscription purchase:', error);\n    return {\n      success: false,\n      error: error.message || 'Failed to process payment'\n    };\n  }\n};\n\n/**\n * Renew an existing subscription\n * @param userId The ID of the user renewing their subscription\n * @param planId The ID of the plan being renewed\n * @returns Promise with the payment result\n */\nexport const renewSubscription = async (\n  userId: string,\n  planId: string\n): Promise<PaymentResult> => {\n  // Forward to initiateSubscriptionPurchase so we keep one code-path\n  return initiateSubscriptionPurchase(userId, planId);\n};\n\n/**\n * Cancel a user's subscription\n * @param userId The ID of the user cancelling their subscription\n * @returns Promise with the result of the cancellation\n */\nexport const cancelSubscription = async (\n  userId: string\n): Promise<{ success: boolean, error?: string }> => {\n  try {\n    // Get the user's current subscription details\n    const { data: userData, error: fetchError } = await supabase\n      .from('profiles')\n      .select('subscription_expiry, account_type, payment_status')\n      .eq('id', userId)\n      .single();\n    \n    if (fetchError) {\n      throw fetchError;\n    }\n    \n    // Update the subscription status to indicate it's cancelled\n    // but allow the user to continue using it until the expiry date\n    const { error } = await supabase\n      .from('profiles')\n      .update({\n        subscription_status: 'expired',\n        // If they're in trial and cancel, reset payment_status to 'none'\n        // If they've paid, keep their payment_status as 'paid' until expiry\n        payment_status: userData.payment_status === 'trial' ? 'none' : userData.payment_status,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', userId);\n    \n    if (error) {\n      throw error;\n    }\n    \n    return { success: true };\n  } catch (error: any) {\n    console.error('Error cancelling subscription:', error);\n    return {\n      success: false,\n      error: error.message || 'Failed to cancel subscription'\n    };\n  }\n};\n\n/**\n * Check for and update expired subscriptions\n * This would typically be called by a server-side cron job,\n * but can be checked on app startup as well\n * @param userId The ID of the user to check\n * @returns Promise indicating if any update was made\n */\nexport const checkAndUpdateSubscriptionStatus = async (\n  userId: string\n): Promise<boolean> => {\n  try {\n    // Get the user's current subscription details\n    const { data: userData, error: fetchError } = await supabase\n      .from('profiles')\n      .select('subscription_expiry, subscription_status, account_type, payment_status')\n      .eq('id', userId)\n      .single();\n    \n    if (fetchError || !userData) {\n      return false;\n    }\n    \n    // If the user doesn't have a subscription or it's already marked as expired, do nothing\n    if (\n      userData.account_type === 'collector' || \n      userData.subscription_status === 'none' ||\n      userData.subscription_status === 'expired'\n    ) {\n      return false;\n    }\n    \n    // Check if the subscription has expired\n    if (userData.subscription_expiry) {\n      const expiryDate = new Date(userData.subscription_expiry);\n      const now = new Date();\n      \n      if (expiryDate <= now && userData.subscription_status === 'active') {\n        // Update the subscription status to expired\n        const { error } = await supabase\n          .from('profiles')\n          .update({\n            subscription_status: 'expired',\n            payment_status: 'none', // Reset payment status when subscription expires\n            updated_at: now.toISOString()\n          })\n          .eq('id', userId);\n        \n        if (!error) {\n          return true; // Status was updated\n        }\n      }\n    }\n    \n    return false; // No update was needed\n  } catch (error) {\n    console.error('Error checking subscription status:', error);\n    return false;\n  }\n};\n\n/**\n * Get available subscription plans for a specific account type\n * @param accountType The account type to get plans for\n * @returns Array of subscription plans\n */\nexport const getAvailablePlans = (\n  accountType: 'dealer' | 'organizer'\n): SubscriptionPlan[] => {\n  const planType = accountType === 'dealer' \n    ? SubscriptionPlanType.DEALER \n    : SubscriptionPlanType.ORGANIZER;\n  \n  return SUBSCRIPTION_PLANS.filter(plan => plan.type === planType);\n};\n\n/**\n * Format the subscription expiry date for display\n * @param expiryDate The expiry date to format\n * @returns Formatted date string\n */\nexport const formatExpiryDate = (expiryDate: Date | string | null): string => {\n  if (!expiryDate) return 'No expiration date';\n  \n  const date = typeof expiryDate === 'string' ? new Date(expiryDate) : expiryDate;\n  \n  return date.toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n};\n\n/**\n * Check if a user can access dealer features\n * @param user The user to check\n * @returns Boolean indicating if the user can access dealer features\n */\nexport const canAccessDealerFeatures = (user: User | null): boolean => {\n  if (!user) return false;\n  \n  // Organizers also have dealer privileges\n  if (user.accountType === 'organizer') return hasActiveSubscription(user);\n  \n  return user.accountType === 'dealer' && hasActiveSubscription(user);\n};\n\n/**\n * Check if a user can access organizer features\n * @param user The user to check\n * @returns Boolean indicating if the user can access organizer features\n */\nexport const canAccessOrganizerFeatures = (user: User | null): boolean => {\n  if (!user) return false;\n  \n  return user.accountType === 'organizer' && hasActiveSubscription(user);\n};\n"],"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","ignoreList":[]}