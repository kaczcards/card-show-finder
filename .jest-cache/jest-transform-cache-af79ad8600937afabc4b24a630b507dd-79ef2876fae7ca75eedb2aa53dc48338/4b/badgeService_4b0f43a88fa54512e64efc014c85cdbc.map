{"version":3,"names":["supabase","BadgeTier","cov_qzs28n10m","s","getAllBadgeDefinitions","_ref","_asyncToGenerator","f","_ref2","from","select","order","ascending","data","error","b","map","badge","id","name","description","imageUrl","image_url","requirement","tier","_error","console","apply","arguments","getUserBadges","_ref3","userId","_ref4","eq","userBadgesData","userBadgesError","length","badgeIds","badge_id","_ref5","in","badgeDefsData","badgeDefsError","userBadge","badgeDef","find","def","dateEarned","earned_at","filter","_x","getUnearnedBadges","_ref6","allBadges","userBadges","earnedBadgeIds","includes","_x2","getUserFeaturedBadges","_ref7","limit","undefined","tieredBadges","sort","a","tierPriority","_defineProperty","BRONZE","SILVER","GOLD","PLATINUM","tierDiff","dateA","Date","dateB","getTime","slice","_x3","getUserNextBadge","_ref9","unearnedBadges","_ref0","single","profileData","profileError","attendanceCount","show_attendance_count","attendanceBadges","_ref1","badgeDefinitions","badgeError","nextBadgeDef","requirement_count","highestBadgeDef","_x4","getBadgeProgress","_ref10","badgeId","_ref11","_ref12","current","required","percent","Math","min","_x5","_x6"],"sources":["badgeService.ts"],"sourcesContent":["import { supabase } from '../supabase';\nimport { Badge, BadgeTier } from '../types';\n\n/**\n * Get all badge definitions from the database\n */\nexport const getAllBadgeDefinitions = async (): Promise<Badge[]> => {\n  try {\n    const { data, error } = await supabase\n      .from('badges_definitions')\n      .select('*')\n      .order('requirement_count', { ascending: true });\n    \n    if (error) {\n      throw error;\n    }\n\n    if (!data) {\n      return [];\n    }\n    \n    // Map the database records to our Badge type\n    return data.map(badge => ({\n      id: badge.id,\n      name: badge.name,\n      description: badge.description,\n      imageUrl: badge.image_url,\n      requirement: badge.requirement,\n      tier: badge.tier as BadgeTier,\n    }));\n  } catch (_error) {\n    console.error('Error fetching badge definitions:', _error);\n    return []; // Return empty array instead of throwing to prevent UI crashes\n  }\n};\n\n/**\n * Get a user's earned badges\n * @param userId The ID of the user\n */\nexport const getUserBadges = async (userId: string): Promise<Badge[]> => {\n  try {\n    // Step 1: Get the user's badge IDs and earned dates\n    const { data: userBadgesData, error: userBadgesError } = await supabase\n      .from('user_badges')\n      .select('badge_id, earned_at')\n      .eq('user_id', userId);\n    \n    if (userBadgesError) {\n      throw userBadgesError;\n    }\n    \n    if (!userBadgesData || userBadgesData.length === 0) {\n      return [];\n    }\n    \n    // Step 2: Get the badge definitions for those badge IDs\n    const badgeIds = userBadgesData.map(badge => badge.badge_id);\n    const { data: badgeDefsData, error: badgeDefsError } = await supabase\n      .from('badges_definitions')\n      .select('*')\n      .in('id', badgeIds);\n    \n    if (badgeDefsError) {\n      throw badgeDefsError;\n    }\n    \n    if (!badgeDefsData) {\n      return [];\n    }\n    \n    // Step 3: Combine the data\n    return userBadgesData.map(userBadge => {\n      // Find the corresponding badge definition\n      const badgeDef = badgeDefsData.find(def => def.id === userBadge.badge_id);\n\n      if (!badgeDef) {\n        return null; // Skip if no matching definition found\n      }\n      \n      // Map to our Badge type\n      return {\n        id: badgeDef.id,\n        name: badgeDef.name,\n        description: badgeDef.description,\n        imageUrl: badgeDef.image_url,\n        requirement: badgeDef.requirement,\n        tier: badgeDef.tier as BadgeTier,\n        dateEarned: userBadge.earned_at,\n      };\n    }).filter(badge => badge !== null) as Badge[]; // Remove any nulls\n  } catch (_error) {\n    console.error('Error fetching user badges:', _error);\n    return []; // Return empty array instead of throwing to prevent UI crashes\n  }\n};\n\n/**\n * Get badges a user has not yet earned\n * @param userId The ID of the user\n */\nexport const getUnearnedBadges = async (userId: string): Promise<Badge[]> => {\n  try {\n    // First, get all badge definitions\n    const allBadges = await getAllBadgeDefinitions();\n    \n    // Then, get the user's earned badges\n    const userBadges = await getUserBadges(userId);\n    \n    // Get the IDs of the user's earned badges\n    const earnedBadgeIds = userBadges.map(badge => badge.id);\n    \n    // Filter out the badges the user has already earned\n    return allBadges.filter(badge => !earnedBadgeIds.includes(badge.id));\n  } catch (_error) {\n    console.error('Error fetching unearned badges:', _error);\n    return []; // Return empty array instead of throwing to prevent UI crashes\n  }\n};\n\n/**\n * Get a user's featured badges (most recent or highest tier)\n * @param userId The ID of the user\n * @param limit The maximum number of badges to return\n */\nexport const getUserFeaturedBadges = async (userId: string, limit: number = 3): Promise<Badge[]> => {\n  try {\n    const userBadges = await getUserBadges(userId);\n\n    if (userBadges.length === 0) {\n      return [];\n    }\n    \n    // Sort badges by tier priority and then by date earned\n    const tieredBadges = userBadges.sort((a, b) => {\n      // Define tier priorities (higher number = higher priority)\n      const tierPriority = {\n        [BadgeTier.BRONZE]: 1,\n        [BadgeTier.SILVER]: 2,\n        [BadgeTier.GOLD]: 3,\n        [BadgeTier.PLATINUM]: 4,\n      };\n      \n      // First, sort by tier priority (highest first)\n      const tierDiff = tierPriority[b.tier] - tierPriority[a.tier];\n      if (tierDiff !== 0) {\n        return tierDiff;\n      }\n      \n      // If tiers are the same, sort by date earned (most recent first)\n      const dateA = new Date(a.dateEarned || 0);\n      const dateB = new Date(b.dateEarned || 0);\n      return dateB.getTime() - dateA.getTime();\n    });\n    \n    return tieredBadges.slice(0, limit);\n  } catch (_error) {\n    console.error('Error fetching featured badges:', _error);\n    return []; // Return empty array instead of throwing to prevent UI crashes\n  }\n};\n\n/**\n * Get a user's next badge to earn (lowest requirement badge not yet earned)\n * @param userId The ID of the user\n */\nexport const getUserNextBadge = async (userId: string): Promise<Badge | null> => {\n  try {\n    const unearnedBadges = await getUnearnedBadges(userId);\n\n    if (unearnedBadges.length === 0) {\n      return null;\n    }\n    \n    // Get the user's show attendance count from profile\n    const { data: profileData, error: profileError } = await supabase\n      .from('profiles')\n      .select('show_attendance_count')\n      .eq('id', userId)\n      .single();\n    \n    if (profileError) {\n      console.error('Error fetching profile data:', profileError);\n      return null; // Return null instead of throwing\n    }\n    \n    const attendanceCount = profileData?.show_attendance_count || 0;\n    \n    // Filter attendance badges and find the one with the lowest requirement above current count\n    const attendanceBadges = unearnedBadges.filter(\n      badge => badge.requirement === 'show_attendance'\n    );\n    \n    if (attendanceBadges.length === 0) {\n      return null;\n    }\n    \n    // Get badge definitions to access requirement_count\n    const { data: badgeDefinitions, error: badgeError } = await supabase\n      .from('badges_definitions')\n      .select('*')\n      .in('id', attendanceBadges.map(badge => badge.id))\n      .order('requirement_count', { ascending: true });\n    \n    if (badgeError) {\n      console.error('Error fetching badge definitions:', badgeError);\n      return null; // Return null instead of throwing\n    }\n    \n    if (!badgeDefinitions || badgeDefinitions.length === 0) {\n      return null;\n    }\n    \n    // Find the next badge to earn (lowest requirement_count above current attendance)\n    const nextBadgeDef = badgeDefinitions.find(\n      badge => badge.requirement_count > attendanceCount\n    );\n    \n    if (!nextBadgeDef) {\n      // If no badge found above current count, return the highest requirement badge\n      const highestBadgeDef = badgeDefinitions[badgeDefinitions.length - 1];\n      \n      // Map to our Badge type\n      return {\n        id: highestBadgeDef.id,\n        name: highestBadgeDef.name,\n        description: highestBadgeDef.description,\n        imageUrl: highestBadgeDef.image_url,\n        requirement: highestBadgeDef.requirement,\n        tier: highestBadgeDef.tier as BadgeTier,\n      };\n    }\n    \n    // Map to our Badge type\n    return {\n      id: nextBadgeDef.id,\n      name: nextBadgeDef.name,\n      description: nextBadgeDef.description,\n      imageUrl: nextBadgeDef.image_url,\n      requirement: nextBadgeDef.requirement,\n      tier: nextBadgeDef.tier as BadgeTier,\n    };\n  } catch (_error) {\n    console.error('Error fetching next badge:', _error);\n    return null; // Return null instead of throwing to prevent UI crashes\n  }\n};\n\n/**\n * Get badge progress information for a user\n * @param userId The ID of the user\n * @param badgeId The ID of the badge to check progress for\n */\nexport const getBadgeProgress = async (\n  userId: string,\n  badgeId: string\n): Promise<{\n  current: number;\n  required: number;\n  percent: number;\n} | null> => {\n  try {\n    // Get the badge definition\n    const { data: badgeDef, error: badgeError } = await supabase\n      .from('badges_definitions')\n      .select('*')\n      .eq('id', badgeId)\n      .single();\n    if (badgeError) {\n      console.error('Error fetching badge definition:', badgeError);\n      return null; // Return null instead of throwing\n    }\n    \n    if (!badgeDef) {\n      console.error('Badge not found');\n      return null; // Return null instead of throwing\n    }\n    \n    // Get the user's profile to check progress\n    const { data: profileData, error: profileError } = await supabase\n      .from('profiles')\n      .select('show_attendance_count')\n      .eq('id', userId)\n      .single();\n    if (profileError) {\n      console.error('Error fetching profile data:', profileError);\n      return null; // Return null instead of throwing\n    }\n\n    const current = profileData?.show_attendance_count || 0;\n    const required = badgeDef.requirement_count || 0;\n\n    // Calculate percentage (cap at 100%)\n    const percent = Math.min((current / required) * 100, 100);\n\n    return {\n      current,\n      required,\n      percent,\n    };\n  } catch (_error) {\n    console.error('Error getting badge progress:', _error);\n    return null; // Return null instead of throwing to prevent UI crashes\n  }\n};\n"],"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","ignoreList":[]}