73b78ec88fcad82a20e485292137dd55
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["a", "b"];
describe('Smoke Test Suite', function () {
  describe('Basic Jest Functionality', function () {
    it('should run tests', function () {
      expect(true).toBe(true);
    });
    it('should support basic assertions', function () {
      expect(1).toBe(1);
      expect('test').toBe('test');
      expect({
        a: 1
      }).toEqual({
        a: 1
      });
    });
    it('should support matcher negation', function () {
      expect(1).not.toBe(2);
      expect('test').not.toBe('other');
    });
  });
  describe('TypeScript Compilation', function () {
    it('should compile TypeScript interfaces', function () {
      var user = {
        id: 1,
        name: 'Test User'
      };
      expect(user.id).toBe(1);
      expect(user.name).toBe('Test User');
    });
    it('should compile TypeScript type aliases', function () {
      var add = function add(a, b) {
        return a + b;
      };
      var subtract = function subtract(a, b) {
        return a - b;
      };
      expect(add(2, 3)).toBe(5);
      expect(subtract(5, 3)).toBe(2);
    });
    it('should support optional properties', function () {
      var user1 = {
        id: 1,
        name: 'User 1'
      };
      var user2 = {
        id: 2,
        name: 'User 2',
        email: 'user2@example.com'
      };
      expect(user1.email).toBeUndefined();
      expect(user2.email).toBe('user2@example.com');
    });
  });
  describe('Basic Arithmetic', function () {
    it('should perform addition correctly', function () {
      expect(1 + 2).toBe(3);
      expect(0.1 + 0.2).toBeCloseTo(0.3);
    });
    it('should perform subtraction correctly', function () {
      expect(5 - 3).toBe(2);
      expect(10 - 5 - 3).toBe(2);
    });
    it('should perform multiplication correctly', function () {
      expect(2 * 3).toBe(6);
      expect(0.1 * 0.2).toBeCloseTo(0.02);
    });
    it('should perform division correctly', function () {
      expect(6 / 2).toBe(3);
      expect(1 / 3).toBeCloseTo(0.333, 2);
    });
  });
  describe('String Operations', function () {
    it('should concatenate strings', function () {
      expect('Hello' + ' ' + 'World').toBe('Hello World');
    });
    it('should support template literals', function () {
      var name = 'Jest';
      expect(`Hello ${name}`).toBe('Hello Jest');
    });
    it('should support string methods', function () {
      var str = 'Hello World';
      expect(str.toLowerCase()).toBe('hello world');
      expect(str.toUpperCase()).toBe('HELLO WORLD');
      expect(str.split(' ')).toEqual(['Hello', 'World']);
      expect(str.replace('World', 'Jest')).toBe('Hello Jest');
    });
  });
  describe('Array Operations', function () {
    it('should create and manipulate arrays', function () {
      var arr = [1, 2, 3];
      expect(arr.length).toBe(3);
      expect(arr[0]).toBe(1);
    });
    it('should support array methods', function () {
      var arr = [1, 2, 3];
      expect(arr.map(function (x) {
        return x * 2;
      })).toEqual([2, 4, 6]);
      expect(arr.filter(function (x) {
        return x > 1;
      })).toEqual([2, 3]);
      expect(arr.reduce(function (acc, val) {
        return acc + val;
      }, 0)).toBe(6);
    });
    it('should support array spread operator', function () {
      var arr1 = [1, 2];
      var arr2 = [3, 4];
      expect([].concat(arr1, arr2)).toEqual([1, 2, 3, 4]);
    });
    it('should support array destructuring', function () {
      var a = 1,
        b = 2,
        rest = [3, 4, 5];
      expect(a).toBe(1);
      expect(b).toBe(2);
      expect(rest).toEqual([3, 4, 5]);
    });
  });
  describe('Object Operations', function () {
    it('should create and access object properties', function () {
      var obj = {
        a: 1,
        b: 'test',
        c: true
      };
      expect(obj.a).toBe(1);
      expect(obj.b).toBe('test');
      expect(obj.c).toBe(true);
    });
    it('should support object spread operator', function () {
      var obj1 = {
        a: 1,
        b: 2
      };
      var obj2 = {
        b: 3,
        c: 4
      };
      expect(Object.assign({}, obj1, obj2)).toEqual({
        a: 1,
        b: 3,
        c: 4
      });
    });
    it('should support object destructuring', function () {
      var obj = {
        a: 1,
        b: 2,
        c: 3
      };
      var a = obj.a,
        b = obj.b,
        rest = (0, _objectWithoutProperties2.default)(obj, _excluded);
      expect(a).toBe(1);
      expect(b).toBe(2);
      expect(rest).toEqual({
        c: 3
      });
    });
    it('should support computed property names', function () {
      var key = 'dynamicKey';
      var obj = (0, _defineProperty2.default)({}, key, 'value');
      expect(obj.dynamicKey).toBe('value');
    });
  });
  describe('Async/Await Functionality', function () {
    it('should support promises', function () {
      return Promise.resolve(42).then(function (value) {
        expect(value).toBe(42);
      });
    });
    it('should support async/await', (0, _asyncToGenerator2.default)(function* () {
      var value = yield Promise.resolve(42);
      expect(value).toBe(42);
    }));
    it('should handle promise rejection', (0, _asyncToGenerator2.default)(function* () {
      yield expect(Promise.reject(new Error('Test error'))).rejects.toThrow('Test error');
    }));
    it('should handle multiple async operations', (0, _asyncToGenerator2.default)(function* () {
      var results = yield Promise.all([Promise.resolve(1), Promise.resolve(2), Promise.resolve(3)]);
      expect(results).toEqual([1, 2, 3]);
    }));
  });
  describe('Test Environment', function () {
    it('should have access to Jest globals', function () {
      expect(typeof describe).toBe('function');
      expect(typeof it).toBe('function');
      expect(typeof expect).toBe('function');
      expect(typeof beforeEach).toBe('function');
      expect(typeof afterEach).toBe('function');
    });
    it('should support mocks', function () {
      var mockFn = jest.fn();
      mockFn('test');
      expect(mockFn).toHaveBeenCalledTimes(1);
      expect(mockFn).toHaveBeenCalledWith('test');
    });
    it('should support spies', function () {
      var obj = {
        method: function method(value) {
          return `Hello ${value}`;
        }
      };
      var spy = jest.spyOn(obj, 'method');
      obj.method('World');
      expect(spy).toHaveBeenCalledTimes(1);
      expect(spy).toHaveBeenCalledWith('World');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,