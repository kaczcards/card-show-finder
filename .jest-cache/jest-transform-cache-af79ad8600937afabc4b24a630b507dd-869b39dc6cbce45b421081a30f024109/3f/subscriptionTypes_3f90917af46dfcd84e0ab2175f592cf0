9bd1fb932b0165ab45337d18a1768f89
"use strict";

/* istanbul ignore next */
function cov_1qpb250xb1() {
  var path = "/Users/kevin/card-show-finder/src/services/subscriptionTypes.ts";
  var hash = "eba1e3f66976539fdbb2de325f8b69bcd20822bc";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kevin/card-show-finder/src/services/subscriptionTypes.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 128
        }
      },
      "2": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 11,
          column: 87
        }
      },
      "3": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 9,
          column: 46
        }
      },
      "4": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 52
        }
      },
      "5": {
        start: {
          line: 16,
          column: 0
        },
        end: {
          line: 19,
          column: 87
        }
      },
      "6": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 17,
          column: 74
        }
      },
      "7": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 18,
          column: 73
        }
      },
      "8": {
        start: {
          line: 23,
          column: 0
        },
        end: {
          line: 98,
          column: 2
        }
      },
      "9": {
        start: {
          line: 104,
          column: 28
        },
        end: {
          line: 120,
          column: 1
        }
      },
      "10": {
        start: {
          line: 105,
          column: 16
        },
        end: {
          line: 105,
          column: 26
        }
      },
      "11": {
        start: {
          line: 108,
          column: 22
        },
        end: {
          line: 108,
          column: 41
        }
      },
      "12": {
        start: {
          line: 110,
          column: 4
        },
        end: {
          line: 118,
          column: 5
        }
      },
      "13": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 28
        }
      },
      "14": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 18
        }
      },
      "15": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 27
        }
      },
      "16": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 18
        }
      },
      "17": {
        start: {
          line: 119,
          column: 4
        },
        end: {
          line: 119,
          column: 59
        }
      },
      "18": {
        start: {
          line: 121,
          column: 0
        },
        end: {
          line: 121,
          column: 50
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 1
          },
          end: {
            line: 8,
            column: 2
          }
        },
        loc: {
          start: {
            line: 8,
            column: 33
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 16,
            column: 1
          },
          end: {
            line: 16,
            column: 2
          }
        },
        loc: {
          start: {
            line: 16,
            column: 33
          },
          end: {
            line: 19,
            column: 1
          }
        },
        line: 16
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 104,
            column: 28
          },
          end: {
            line: 104,
            column: 29
          }
        },
        loc: {
          start: {
            line: 104,
            column: 38
          },
          end: {
            line: 120,
            column: 1
          }
        },
        line: 104
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 11,
            column: 3
          },
          end: {
            line: 11,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 11,
            column: 3
          },
          end: {
            line: 11,
            column: 23
          }
        }, {
          start: {
            line: 11,
            column: 28
          },
          end: {
            line: 11,
            column: 84
          }
        }],
        line: 11
      },
      "1": {
        loc: {
          start: {
            line: 19,
            column: 3
          },
          end: {
            line: 19,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 19,
            column: 3
          },
          end: {
            line: 19,
            column: 23
          }
        }, {
          start: {
            line: 19,
            column: 28
          },
          end: {
            line: 19,
            column: 84
          }
        }],
        line: 19
      },
      "2": {
        loc: {
          start: {
            line: 110,
            column: 4
          },
          end: {
            line: 118,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 111,
            column: 8
          },
          end: {
            line: 113,
            column: 18
          }
        }, {
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 114,
            column: 42
          }
        }, {
          start: {
            line: 115,
            column: 8
          },
          end: {
            line: 117,
            column: 18
          }
        }],
        line: 110
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0, 0]
    },
    inputSourceMap: {
      file: "/Users/kevin/card-show-finder/src/services/subscriptionTypes.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/kevin/card-show-finder/src/services/subscriptionTypes.ts"],
      sourcesContent: ["// src/services/subscriptionTypes.ts\nimport { UserRole } from './userRoleService';\n\n/**\n * Subscription plan types available in the app\n */\nexport enum SubscriptionPlanType {\n  DEALER = 'dealer',\n  ORGANIZER = 'organizer'\n}\n\n/**\n * Subscription plan durations in months\n */\nexport enum SubscriptionDuration {\n  MONTHLY = 1,\n  ANNUAL = 12\n}\n\n/**\n * Subscription plan details\n */\nexport interface SubscriptionPlan {\n  id: string;\n  type: SubscriptionPlanType;\n  name: string;\n  description: string;\n  price: number; // Price in USD\n  duration: SubscriptionDuration; // Duration in months\n  features: string[];\n  /** Free-trial length in days (optional, e.g. 7-day trial) */\n  trialDays?: number;\n  isPopular?: boolean;\n}\n\n/**\n * Represents the outcome of a payment operation.\n */\nexport interface StripePaymentResult {\n  success: boolean;\n  error?: string;\n  transactionId?: string;\n}\n\n/**\n * Available subscription plans\n */\nexport const SUBSCRIPTION_PLANS: SubscriptionPlan[] = [\n  /* ---------- MVP DEALER ---------- */\n  {\n    id: 'mvp-dealer-monthly',\n    type: SubscriptionPlanType.DEALER,\n    name: 'MVP Dealer Monthly',\n    description: 'Preview inventory, interact with collectors & more (monthly)',\n    price: 29,\n    duration: SubscriptionDuration.MONTHLY,\n    trialDays: 7,\n    features: [\n      'Preview inventory for upcoming shows you attend',\n      'Interact with collectors planning to attend those shows',\n      'View want lists of collectors within a 25-mile radius',\n      'Share external links (website, eBay, WhatNot, etc.)',\n      'Dealer badge on profile'\n    ]\n  },\n  {\n    id: 'mvp-dealer-annual',\n    type: SubscriptionPlanType.DEALER,\n    name: 'MVP Dealer Annual',\n    description: 'Save 25% with annual billing',\n    price: 261, // $29 \xD7 12 \xD7 0.75\n    duration: SubscriptionDuration.ANNUAL,\n    trialDays: 7,\n    isPopular: true,\n    features: [\n      'Preview inventory for upcoming shows you attend',\n      'Interact with collectors planning to attend those shows',\n      'View want lists of collectors within a 25-mile radius',\n      'Share external links (website, eBay, WhatNot, etc.)',\n      'Dealer badge on profile',\n      'Featured dealer status'\n    ]\n  },\n\n  /* ---------- SHOW ORGANIZER ---------- */\n  {\n    id: 'show-organizer-monthly',\n    type: SubscriptionPlanType.ORGANIZER,\n    name: 'Show Organizer Monthly',\n    description: 'Organize shows & engage dealers/collectors (monthly)',\n    price: 49,\n    duration: SubscriptionDuration.MONTHLY,\n    trialDays: 7,\n    features: [\n      'All MVP Dealer features',\n      'Claim ownership of recurring shows',\n      'Message dealers & collectors before/after shows',\n      'Edit upcoming show times, dates & details',\n      'Respond to collector reviews',\n      'Promote your events',\n      'Access attendee data'\n    ]\n  },\n  {\n    id: 'show-organizer-annual',\n    type: SubscriptionPlanType.ORGANIZER,\n    name: 'Show Organizer Annual',\n    description: 'Save 25% with annual billing',\n    price: 441, // $49 \xD7 12 \xD7 0.75\n    duration: SubscriptionDuration.ANNUAL,\n    trialDays: 7,\n    isPopular: true,\n    features: [\n      'All MVP Dealer features',\n      'Claim ownership of recurring shows',\n      'Message dealers & collectors before/after shows',\n      'Edit upcoming show times, dates & details',\n      'Respond to collector reviews',\n      'Promote your events',\n      'Access attendee data',\n      'Featured show placement'\n    ]\n  }\n];\n\n/**\n * Helper function to calculate the expiry date based on the current date and plan duration\n * @param plan The subscription plan\n * @returns Date when the subscription will expire\n */\nexport const calculateExpiryDate = (plan: SubscriptionPlan): Date => {\n  const now = new Date();\n\n  // We purposely ignore `trialDays` here; trials are applied in higher-level\n  // payment logic.  This helper strictly converts *paid* duration \u2192 expiry.\n  const MS_IN_DAY = 24 * 60 * 60 * 1000;\n\n  let daysToAdd: number;\n  switch (plan.duration) {\n    case SubscriptionDuration.ANNUAL:\n      daysToAdd = 365;           // Fixed-length year to keep math explicit\n      break;\n    case SubscriptionDuration.MONTHLY:\n    default:\n      daysToAdd = 30;            // Fixed-length \u201Cbilling month\u201D\n      break;\n  }\n\n  return new Date(now.getTime() + daysToAdd * MS_IN_DAY);\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "eba1e3f66976539fdbb2de325f8b69bcd20822bc"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1qpb250xb1 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1qpb250xb1();
cov_1qpb250xb1().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1qpb250xb1().s[1]++;
exports.calculateExpiryDate = exports.SUBSCRIPTION_PLANS = exports.SubscriptionDuration = exports.SubscriptionPlanType = void 0;
/**
 * Subscription plan types available in the app
 */
var SubscriptionPlanType;
/* istanbul ignore next */
cov_1qpb250xb1().s[2]++;
(function (SubscriptionPlanType) {
  /* istanbul ignore next */
  cov_1qpb250xb1().f[0]++;
  cov_1qpb250xb1().s[3]++;
  SubscriptionPlanType["DEALER"] = "dealer";
  /* istanbul ignore next */
  cov_1qpb250xb1().s[4]++;
  SubscriptionPlanType["ORGANIZER"] = "organizer";
})(
/* istanbul ignore next */
(cov_1qpb250xb1().b[0][0]++, SubscriptionPlanType) ||
/* istanbul ignore next */
(cov_1qpb250xb1().b[0][1]++, exports.SubscriptionPlanType = SubscriptionPlanType = {}));
/**
 * Subscription plan durations in months
 */
var SubscriptionDuration;
/* istanbul ignore next */
cov_1qpb250xb1().s[5]++;
(function (SubscriptionDuration) {
  /* istanbul ignore next */
  cov_1qpb250xb1().f[1]++;
  cov_1qpb250xb1().s[6]++;
  SubscriptionDuration[SubscriptionDuration["MONTHLY"] = 1] = "MONTHLY";
  /* istanbul ignore next */
  cov_1qpb250xb1().s[7]++;
  SubscriptionDuration[SubscriptionDuration["ANNUAL"] = 12] = "ANNUAL";
})(
/* istanbul ignore next */
(cov_1qpb250xb1().b[1][0]++, SubscriptionDuration) ||
/* istanbul ignore next */
(cov_1qpb250xb1().b[1][1]++, exports.SubscriptionDuration = SubscriptionDuration = {}));
/**
 * Available subscription plans
 */
/* istanbul ignore next */
cov_1qpb250xb1().s[8]++;
exports.SUBSCRIPTION_PLANS = [/* ---------- MVP DEALER ---------- */
{
  id: 'mvp-dealer-monthly',
  type: SubscriptionPlanType.DEALER,
  name: 'MVP Dealer Monthly',
  description: 'Preview inventory, interact with collectors & more (monthly)',
  price: 29,
  duration: SubscriptionDuration.MONTHLY,
  trialDays: 7,
  features: ['Preview inventory for upcoming shows you attend', 'Interact with collectors planning to attend those shows', 'View want lists of collectors within a 25-mile radius', 'Share external links (website, eBay, WhatNot, etc.)', 'Dealer badge on profile']
}, {
  id: 'mvp-dealer-annual',
  type: SubscriptionPlanType.DEALER,
  name: 'MVP Dealer Annual',
  description: 'Save 25% with annual billing',
  price: 261,
  // $29 × 12 × 0.75
  duration: SubscriptionDuration.ANNUAL,
  trialDays: 7,
  isPopular: true,
  features: ['Preview inventory for upcoming shows you attend', 'Interact with collectors planning to attend those shows', 'View want lists of collectors within a 25-mile radius', 'Share external links (website, eBay, WhatNot, etc.)', 'Dealer badge on profile', 'Featured dealer status']
}, /* ---------- SHOW ORGANIZER ---------- */
{
  id: 'show-organizer-monthly',
  type: SubscriptionPlanType.ORGANIZER,
  name: 'Show Organizer Monthly',
  description: 'Organize shows & engage dealers/collectors (monthly)',
  price: 49,
  duration: SubscriptionDuration.MONTHLY,
  trialDays: 7,
  features: ['All MVP Dealer features', 'Claim ownership of recurring shows', 'Message dealers & collectors before/after shows', 'Edit upcoming show times, dates & details', 'Respond to collector reviews', 'Promote your events', 'Access attendee data']
}, {
  id: 'show-organizer-annual',
  type: SubscriptionPlanType.ORGANIZER,
  name: 'Show Organizer Annual',
  description: 'Save 25% with annual billing',
  price: 441,
  // $49 × 12 × 0.75
  duration: SubscriptionDuration.ANNUAL,
  trialDays: 7,
  isPopular: true,
  features: ['All MVP Dealer features', 'Claim ownership of recurring shows', 'Message dealers & collectors before/after shows', 'Edit upcoming show times, dates & details', 'Respond to collector reviews', 'Promote your events', 'Access attendee data', 'Featured show placement']
}];
/**
 * Helper function to calculate the expiry date based on the current date and plan duration
 * @param plan The subscription plan
 * @returns Date when the subscription will expire
 */
/* istanbul ignore next */
cov_1qpb250xb1().s[9]++;
const calculateExpiryDate = plan => {
  /* istanbul ignore next */
  cov_1qpb250xb1().f[2]++;
  const now =
  /* istanbul ignore next */
  (cov_1qpb250xb1().s[10]++, new Date());
  // We purposely ignore `trialDays` here; trials are applied in higher-level
  // payment logic.  This helper strictly converts *paid* duration → expiry.
  const MS_IN_DAY =
  /* istanbul ignore next */
  (cov_1qpb250xb1().s[11]++, 24 * 60 * 60 * 1000);
  let daysToAdd;
  /* istanbul ignore next */
  cov_1qpb250xb1().s[12]++;
  switch (plan.duration) {
    case SubscriptionDuration.ANNUAL:
      /* istanbul ignore next */
      cov_1qpb250xb1().b[2][0]++;
      cov_1qpb250xb1().s[13]++;
      daysToAdd = 365; // Fixed-length year to keep math explicit
      /* istanbul ignore next */
      cov_1qpb250xb1().s[14]++;
      break;
    case SubscriptionDuration.MONTHLY:
      /* istanbul ignore next */
      cov_1qpb250xb1().b[2][1]++;
    default:
      /* istanbul ignore next */
      cov_1qpb250xb1().b[2][2]++;
      cov_1qpb250xb1().s[15]++;
      daysToAdd = 30; // Fixed-length “billing month”
      /* istanbul ignore next */
      cov_1qpb250xb1().s[16]++;
      break;
  }
  /* istanbul ignore next */
  cov_1qpb250xb1().s[17]++;
  return new Date(now.getTime() + daysToAdd * MS_IN_DAY);
};
/* istanbul ignore next */
cov_1qpb250xb1().s[18]++;
exports.calculateExpiryDate = calculateExpiryDate;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,