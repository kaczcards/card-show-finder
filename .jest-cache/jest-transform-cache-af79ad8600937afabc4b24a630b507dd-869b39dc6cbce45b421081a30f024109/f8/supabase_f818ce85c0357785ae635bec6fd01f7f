a174d7a8a7fa3e412db3d212a06711e8
"use strict";

/* istanbul ignore next */
function cov_1sukd5hs0x() {
  var path = "/Users/kevin/card-show-finder/src/supabase.ts";
  var hash = "eeba0c8e631144655975a43e4cdb32ddea29958f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kevin/card-show-finder/src/supabase.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 113
        }
      },
      "4": {
        start: {
          line: 7,
          column: 22
        },
        end: {
          line: 7,
          column: 54
        }
      },
      "5": {
        start: {
          line: 8,
          column: 24
        },
        end: {
          line: 8,
          column: 93
        }
      },
      "6": {
        start: {
          line: 9,
          column: 25
        },
        end: {
          line: 9,
          column: 67
        }
      },
      "7": {
        start: {
          line: 11,
          column: 20
        },
        end: {
          line: 11,
          column: 121
        }
      },
      "8": {
        start: {
          line: 12,
          column: 24
        },
        end: {
          line: 12,
          column: 134
        }
      },
      "9": {
        start: {
          line: 19,
          column: 0
        },
        end: {
          line: 22,
          column: 62
        }
      },
      "10": {
        start: {
          line: 26,
          column: 0
        },
        end: {
          line: 30,
          column: 1
        }
      },
      "11": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 29,
          column: 86
        }
      },
      "12": {
        start: {
          line: 39,
          column: 24
        },
        end: {
          line: 46,
          column: 2
        }
      },
      "13": {
        start: {
          line: 51,
          column: 0
        },
        end: {
          line: 51,
          column: 37
        }
      },
      "14": {
        start: {
          line: 58,
          column: 30
        },
        end: {
          line: 66,
          column: 1
        }
      },
      "15": {
        start: {
          line: 59,
          column: 4
        },
        end: {
          line: 65,
          column: 5
        }
      },
      "16": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 60,
          column: 68
        }
      },
      "17": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 70
        }
      },
      "18": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 21
        }
      },
      "19": {
        start: {
          line: 67,
          column: 0
        },
        end: {
          line: 67,
          column: 54
        }
      },
      "20": {
        start: {
          line: 72,
          column: 20
        },
        end: {
          line: 77,
          column: 1
        }
      },
      "21": {
        start: {
          line: 73,
          column: 4
        },
        end: {
          line: 75,
          column: 5
        }
      },
      "22": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 92
        }
      },
      "23": {
        start: {
          line: 76,
          column: 4
        },
        end: {
          line: 76,
          column: 29
        }
      },
      "24": {
        start: {
          line: 78,
          column: 0
        },
        end: {
          line: 78,
          column: 34
        }
      },
      "25": {
        start: {
          line: 83,
          column: 31
        },
        end: {
          line: 93,
          column: 1
        }
      },
      "26": {
        start: {
          line: 84,
          column: 4
        },
        end: {
          line: 91,
          column: 7
        }
      },
      "27": {
        start: {
          line: 92,
          column: 4
        },
        end: {
          line: 92,
          column: 29
        }
      },
      "28": {
        start: {
          line: 94,
          column: 0
        },
        end: {
          line: 94,
          column: 56
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 58,
            column: 30
          },
          end: {
            line: 58,
            column: 31
          }
        },
        loc: {
          start: {
            line: 58,
            column: 36
          },
          end: {
            line: 66,
            column: 1
          }
        },
        line: 58
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 72,
            column: 20
          },
          end: {
            line: 72,
            column: 21
          }
        },
        loc: {
          start: {
            line: 72,
            column: 26
          },
          end: {
            line: 77,
            column: 1
          }
        },
        line: 72
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 83,
            column: 31
          },
          end: {
            line: 83,
            column: 32
          }
        },
        loc: {
          start: {
            line: 83,
            column: 37
          },
          end: {
            line: 93,
            column: 1
          }
        },
        line: 83
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 11,
            column: 20
          },
          end: {
            line: 11,
            column: 121
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 11,
            column: 20
          },
          end: {
            line: 11,
            column: 56
          }
        }, {
          start: {
            line: 11,
            column: 60
          },
          end: {
            line: 11,
            column: 115
          }
        }, {
          start: {
            line: 11,
            column: 119
          },
          end: {
            line: 11,
            column: 121
          }
        }],
        line: 11
      },
      "4": {
        loc: {
          start: {
            line: 12,
            column: 24
          },
          end: {
            line: 12,
            column: 134
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 12,
            column: 24
          },
          end: {
            line: 12,
            column: 65
          }
        }, {
          start: {
            line: 12,
            column: 69
          },
          end: {
            line: 12,
            column: 128
          }
        }, {
          start: {
            line: 12,
            column: 132
          },
          end: {
            line: 12,
            column: 134
          }
        }],
        line: 12
      },
      "5": {
        loc: {
          start: {
            line: 20,
            column: 24
          },
          end: {
            line: 20,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 24
          },
          end: {
            line: 20,
            column: 35
          }
        }, {
          start: {
            line: 20,
            column: 39
          },
          end: {
            line: 20,
            column: 48
          }
        }],
        line: 20
      },
      "6": {
        loc: {
          start: {
            line: 21,
            column: 24
          },
          end: {
            line: 21,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 21,
            column: 24
          },
          end: {
            line: 21,
            column: 52
          }
        }, {
          start: {
            line: 21,
            column: 56
          },
          end: {
            line: 21,
            column: 65
          }
        }],
        line: 21
      },
      "7": {
        loc: {
          start: {
            line: 26,
            column: 0
          },
          end: {
            line: 30,
            column: 1
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 26,
            column: 0
          },
          end: {
            line: 30,
            column: 1
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 26
      },
      "8": {
        loc: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 26,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 26,
            column: 16
          }
        }, {
          start: {
            line: 26,
            column: 20
          },
          end: {
            line: 26,
            column: 36
          }
        }],
        line: 26
      },
      "9": {
        loc: {
          start: {
            line: 60,
            column: 23
          },
          end: {
            line: 60,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 60,
            column: 23
          },
          end: {
            line: 60,
            column: 40
          }
        }, {
          start: {
            line: 60,
            column: 44
          },
          end: {
            line: 60,
            column: 66
          }
        }],
        line: 60
      },
      "10": {
        loc: {
          start: {
            line: 73,
            column: 4
          },
          end: {
            line: 75,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 4
          },
          end: {
            line: 75,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0, 0],
      "4": [0, 0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/kevin/card-show-finder/src/supabase.ts",
      mappings: ";;;;;;AAAA,uDAAqD;AACrD,8FAAqE;AACrE,oEAAuC;AAEvC,8DAA8D;AAC9D,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,wBAAwB,IAAI,wBAAS,CAAC,UAAU,EAAE,KAAK,EAAE,WAAW,IAAI,EAAE,CAAC;AAC3G,MAAM,eAAe,GAAG,OAAO,CAAC,GAAG,CAAC,6BAA6B,IAAI,wBAAS,CAAC,UAAU,EAAE,KAAK,EAAE,eAAe,IAAI,EAAE,CAAC;AAExH,gFAAgF;AAChF,gFAAgF;AAChF,gFAAgF;AAChF,0EAA0E;AAC1E,wEAAwE;AACxE,yCAAyC;AACzC,OAAO,CAAC,GAAG,CACT,2DAA2D;IAC3D,oBAAoB,WAAW,IAAI,SAAS,IAAI;IAChD,oBAAoB,eAAe,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,SAAS,KAAK;IAClE,wDAAwD,CACzD,CAAC;AAEF,gFAAgF;AAChF,gFAAgF;AAChF,gFAAgF;AAEhF,IAAI,CAAC,WAAW,IAAI,CAAC,eAAe,EAAE,CAAC;IACrC,sEAAsE;IACtE,OAAO,CAAC,KAAK,CACX,oCAAoC;QAClC,4EAA4E,CAC/E,CAAC;AACJ,CAAC;AAED,gFAAgF;AAChF,gFAAgF;AAChF,gFAAgF;AAEhF;;;;GAIG;AACH,IAAI,iBAAiB,GAAG,IAAA,0BAAY,EAAC,WAAW,EAAE,eAAe,EAAE;IACjE,IAAI,EAAE;QACJ,OAAO,EAAE,uBAAY;QACrB,gBAAgB,EAAE,IAAI;QACtB,cAAc,EAAE,IAAI;QACpB,kBAAkB,EAAE,KAAK,EAAE,4CAA4C;KACxE;CACF,CAAC,CAAC;AAEH;;;GAGG;AACU,QAAA,QAAQ,GAAG,iBAAiB,CAAC;AAE1C,gFAAgF;AAChF,gFAAgF;AAChF,gFAAgF;AAEhF;;GAEG;AACI,MAAM,qBAAqB,GAAG,GAAY,EAAE;IACjD,IAAI,CAAC;QACH,OAAO,OAAO,CAAC,iBAAiB,IAAI,iBAAiB,CAAC,IAAI,CAAC,CAAC;IAC9D,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,OAAO,CAAC,KAAK,CAAC,yCAAyC,EAAE,GAAG,CAAC,CAAC;QAC9D,OAAO,KAAK,CAAC;IACf,CAAC;AACH,CAAC,CAAC;AAPW,QAAA,qBAAqB,yBAOhC;AAEF;;;GAGG;AACI,MAAM,WAAW,GAAG,GAAG,EAAE;IAC9B,IAAI,CAAC,IAAA,6BAAqB,GAAE,EAAE,CAAC;QAC7B,MAAM,IAAI,KAAK,CACb,kEAAkE,CACnE,CAAC;IACJ,CAAC;IACD,OAAO,iBAAiB,CAAC;AAC3B,CAAC,CAAC;AAPW,QAAA,WAAW,eAOtB;AAEF;;;GAGG;AACI,MAAM,sBAAsB,GAAG,GAAG,EAAE;IACzC,iBAAiB,GAAG,IAAA,0BAAY,EAAC,WAAW,EAAE,eAAe,EAAE;QAC7D,IAAI,EAAE;YACJ,OAAO,EAAE,uBAAY;YACrB,gBAAgB,EAAE,IAAI;YACtB,cAAc,EAAE,IAAI;YACpB,kBAAkB,EAAE,KAAK;SAC1B;KACF,CAAC,CAAC;IACH,OAAO,iBAAiB,CAAC;AAC3B,CAAC,CAAC;AAVW,QAAA,sBAAsB,0BAUjC",
      names: [],
      sources: ["/Users/kevin/card-show-finder/src/supabase.ts"],
      sourcesContent: ["import { createClient } from '@supabase/supabase-js';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport Constants from 'expo-constants';\n\n// Supabase configuration - ideally from environment variables\nconst supabaseUrl = process.env.EXPO_PUBLIC_SUPABASE_URL || Constants.expoConfig?.extra?.supabaseUrl || '';\nconst supabaseAnonKey = process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY || Constants.expoConfig?.extra?.supabaseAnonKey || '';\n\n/* -------------------------------------------------------------------------- */\n/*  \uD83D\uDD0D DIAGNOSTICS \u2013 PRINT SUPABASE CREDS IN DEV                              */\n/* -------------------------------------------------------------------------- */\n// NOTE: These values are **public** (anon key & project URL) so it's safe\n// to log them for debugging.  Remove or wrap behind an env\u2010guard before\n// shipping production builds if desired.\nconsole.log(\n  '\\n================= [SUPABASE CONFIG] =================\\n' +\n  `\u2022 SUPABASE URL : ${supabaseUrl || '<EMPTY>'}\\n` +\n  `\u2022 ANON KEY     : ${supabaseAnonKey?.slice(0, 8) || '<EMPTY>'}\u2026\\n` +\n  '====================================================\\n'\n);\n\n/* -------------------------------------------------------------------------- */\n/* 1. Guard-rails / configuration validation                                  */\n/* -------------------------------------------------------------------------- */\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  // Fail fast \u2013 running with a broken client leads to subtle bugs later\n  console.error(\n    '[Supabase] Missing configuration. ' +\n      'Ensure EXPO_PUBLIC_SUPABASE_URL and EXPO_PUBLIC_SUPABASE_ANON_KEY are set.'\n  );\n}\n\n/* -------------------------------------------------------------------------- */\n/* 2. Singleton client creation                                               */\n/* -------------------------------------------------------------------------- */\n\n/**\n * Internal holder for the Supabase singleton.\n * We keep it in a `let` so tests (or a logout flow) can force-recreate it\n * via `recreateSupabaseClient()`.\n */\nlet supabaseSingleton = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    storage: AsyncStorage,\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: false, // we never use browser-based auth redirects\n  },\n});\n\n/**\n * Public accessor used throughout the codebase to avoid importing\n * `createClient` elsewhere.  Always returns **the same** instance.\n */\nexport const supabase = supabaseSingleton;\n\n/* -------------------------------------------------------------------------- */\n/* 3. Helper utilities                                                        */\n/* -------------------------------------------------------------------------- */\n\n/**\n * Defensive check used by legacy code (`isSupabaseInitialized()`).\n */\nexport const isSupabaseInitialized = (): boolean => {\n  try {\n    return Boolean(supabaseSingleton && supabaseSingleton.auth);\n  } catch (err) {\n    console.error('[Supabase] initialization check failed:', err);\n    return false;\n  }\n};\n\n/**\n * Provides the singleton client or throws a descriptive error.\n * Prefer this helper in newly-written code so errors surface early.\n */\nexport const getSupabase = () => {\n  if (!isSupabaseInitialized()) {\n    throw new Error(\n      '[Supabase] Client not initialised \u2013 check environment variables.'\n    );\n  }\n  return supabaseSingleton;\n};\n\n/**\n * Optional helper to **re**create the client (e.g. after logout to purge\n * cached auth state, or inside E2E tests).  Most apps will never need this.\n */\nexport const recreateSupabaseClient = () => {\n  supabaseSingleton = createClient(supabaseUrl, supabaseAnonKey, {\n    auth: {\n      storage: AsyncStorage,\n      autoRefreshToken: true,\n      persistSession: true,\n      detectSessionInUrl: false,\n    },\n  });\n  return supabaseSingleton;\n};\n\n// Export types from Supabase for use in other files\nexport type { User, Session } from '@supabase/supabase-js';\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "eeba0c8e631144655975a43e4cdb32ddea29958f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1sukd5hs0x = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1sukd5hs0x();
var __importDefault =
/* istanbul ignore next */
(cov_1sukd5hs0x().s[0]++,
/* istanbul ignore next */
(cov_1sukd5hs0x().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1sukd5hs0x().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_1sukd5hs0x().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_1sukd5hs0x().f[0]++;
  cov_1sukd5hs0x().s[1]++;
  return /* istanbul ignore next */(cov_1sukd5hs0x().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_1sukd5hs0x().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_1sukd5hs0x().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_1sukd5hs0x().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_1sukd5hs0x().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1sukd5hs0x().s[3]++;
exports.recreateSupabaseClient = exports.getSupabase = exports.isSupabaseInitialized = exports.supabase = void 0;
const supabase_js_1 =
/* istanbul ignore next */
(cov_1sukd5hs0x().s[4]++, require("@supabase/supabase-js"));
const async_storage_1 =
/* istanbul ignore next */
(cov_1sukd5hs0x().s[5]++, __importDefault(require("@react-native-async-storage/async-storage")));
const expo_constants_1 =
/* istanbul ignore next */
(cov_1sukd5hs0x().s[6]++, __importDefault(require("expo-constants")));
// Supabase configuration - ideally from environment variables
const supabaseUrl =
/* istanbul ignore next */
(cov_1sukd5hs0x().s[7]++,
/* istanbul ignore next */
(cov_1sukd5hs0x().b[3][0]++, process.env.EXPO_PUBLIC_SUPABASE_URL) ||
/* istanbul ignore next */
(cov_1sukd5hs0x().b[3][1]++, expo_constants_1.default.expoConfig?.extra?.supabaseUrl) ||
/* istanbul ignore next */
(cov_1sukd5hs0x().b[3][2]++, ''));
const supabaseAnonKey =
/* istanbul ignore next */
(cov_1sukd5hs0x().s[8]++,
/* istanbul ignore next */
(cov_1sukd5hs0x().b[4][0]++, process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY) ||
/* istanbul ignore next */
(cov_1sukd5hs0x().b[4][1]++, expo_constants_1.default.expoConfig?.extra?.supabaseAnonKey) ||
/* istanbul ignore next */
(cov_1sukd5hs0x().b[4][2]++, ''));
/* -------------------------------------------------------------------------- */
/*  🔍 DIAGNOSTICS – PRINT SUPABASE CREDS IN DEV                              */
/* -------------------------------------------------------------------------- */
// NOTE: These values are **public** (anon key & project URL) so it's safe
// to log them for debugging.  Remove or wrap behind an env‐guard before
// shipping production builds if desired.
/* istanbul ignore next */
cov_1sukd5hs0x().s[9]++;
console.log('\n================= [SUPABASE CONFIG] =================\n' + `• SUPABASE URL : ${
/* istanbul ignore next */
(cov_1sukd5hs0x().b[5][0]++, supabaseUrl) ||
/* istanbul ignore next */
(cov_1sukd5hs0x().b[5][1]++, '<EMPTY>')}\n` + `• ANON KEY     : ${
/* istanbul ignore next */
(cov_1sukd5hs0x().b[6][0]++, supabaseAnonKey?.slice(0, 8)) ||
/* istanbul ignore next */
(cov_1sukd5hs0x().b[6][1]++, '<EMPTY>')}…\n` + '====================================================\n');
/* -------------------------------------------------------------------------- */
/* 1. Guard-rails / configuration validation                                  */
/* -------------------------------------------------------------------------- */
/* istanbul ignore next */
cov_1sukd5hs0x().s[10]++;
if (
/* istanbul ignore next */
(cov_1sukd5hs0x().b[8][0]++, !supabaseUrl) ||
/* istanbul ignore next */
(cov_1sukd5hs0x().b[8][1]++, !supabaseAnonKey)) {
  /* istanbul ignore next */
  cov_1sukd5hs0x().b[7][0]++;
  cov_1sukd5hs0x().s[11]++;
  // Fail fast – running with a broken client leads to subtle bugs later
  console.error('[Supabase] Missing configuration. ' + 'Ensure EXPO_PUBLIC_SUPABASE_URL and EXPO_PUBLIC_SUPABASE_ANON_KEY are set.');
} else
/* istanbul ignore next */
{
  cov_1sukd5hs0x().b[7][1]++;
}
/* -------------------------------------------------------------------------- */
/* 2. Singleton client creation                                               */
/* -------------------------------------------------------------------------- */
/**
 * Internal holder for the Supabase singleton.
 * We keep it in a `let` so tests (or a logout flow) can force-recreate it
 * via `recreateSupabaseClient()`.
 */
let supabaseSingleton =
/* istanbul ignore next */
(cov_1sukd5hs0x().s[12]++, (0, supabase_js_1.createClient)(supabaseUrl, supabaseAnonKey, {
  auth: {
    storage: async_storage_1.default,
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: false // we never use browser-based auth redirects
  }
}));
/**
 * Public accessor used throughout the codebase to avoid importing
 * `createClient` elsewhere.  Always returns **the same** instance.
 */
/* istanbul ignore next */
cov_1sukd5hs0x().s[13]++;
exports.supabase = supabaseSingleton;
/* -------------------------------------------------------------------------- */
/* 3. Helper utilities                                                        */
/* -------------------------------------------------------------------------- */
/**
 * Defensive check used by legacy code (`isSupabaseInitialized()`).
 */
/* istanbul ignore next */
cov_1sukd5hs0x().s[14]++;
const isSupabaseInitialized = () => {
  /* istanbul ignore next */
  cov_1sukd5hs0x().f[1]++;
  cov_1sukd5hs0x().s[15]++;
  try {
    /* istanbul ignore next */
    cov_1sukd5hs0x().s[16]++;
    return Boolean(
    /* istanbul ignore next */
    (cov_1sukd5hs0x().b[9][0]++, supabaseSingleton) &&
    /* istanbul ignore next */
    (cov_1sukd5hs0x().b[9][1]++, supabaseSingleton.auth));
  } catch (err) {
    /* istanbul ignore next */
    cov_1sukd5hs0x().s[17]++;
    console.error('[Supabase] initialization check failed:', err);
    /* istanbul ignore next */
    cov_1sukd5hs0x().s[18]++;
    return false;
  }
};
/* istanbul ignore next */
cov_1sukd5hs0x().s[19]++;
exports.isSupabaseInitialized = isSupabaseInitialized;
/**
 * Provides the singleton client or throws a descriptive error.
 * Prefer this helper in newly-written code so errors surface early.
 */
/* istanbul ignore next */
cov_1sukd5hs0x().s[20]++;
const getSupabase = () => {
  /* istanbul ignore next */
  cov_1sukd5hs0x().f[2]++;
  cov_1sukd5hs0x().s[21]++;
  if (!(0, exports.isSupabaseInitialized)()) {
    /* istanbul ignore next */
    cov_1sukd5hs0x().b[10][0]++;
    cov_1sukd5hs0x().s[22]++;
    throw new Error('[Supabase] Client not initialised – check environment variables.');
  } else
  /* istanbul ignore next */
  {
    cov_1sukd5hs0x().b[10][1]++;
  }
  cov_1sukd5hs0x().s[23]++;
  return supabaseSingleton;
};
/* istanbul ignore next */
cov_1sukd5hs0x().s[24]++;
exports.getSupabase = getSupabase;
/**
 * Optional helper to **re**create the client (e.g. after logout to purge
 * cached auth state, or inside E2E tests).  Most apps will never need this.
 */
/* istanbul ignore next */
cov_1sukd5hs0x().s[25]++;
const recreateSupabaseClient = () => {
  /* istanbul ignore next */
  cov_1sukd5hs0x().f[3]++;
  cov_1sukd5hs0x().s[26]++;
  supabaseSingleton = (0, supabase_js_1.createClient)(supabaseUrl, supabaseAnonKey, {
    auth: {
      storage: async_storage_1.default,
      autoRefreshToken: true,
      persistSession: true,
      detectSessionInUrl: false
    }
  });
  /* istanbul ignore next */
  cov_1sukd5hs0x().s[27]++;
  return supabaseSingleton;
};
/* istanbul ignore next */
cov_1sukd5hs0x().s[28]++;
exports.recreateSupabaseClient = recreateSupabaseClient;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,