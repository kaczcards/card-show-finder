{"version":3,"names":["cov_qzs28n10m","actualCoverage","s","supabase_1","require","types_1","getAllBadgeDefinitions","f","data","error","supabase","from","select","order","ascending","b","map","badge","id","name","description","imageUrl","image_url","requirement","tier","console","exports","getUserBadges","userId","userBadgesData","userBadgesError","eq","length","badgeIds","badge_id","badgeDefsData","badgeDefsError","in","userBadge","badgeDef","find","def","dateEarned","earned_at","filter","getUnearnedBadges","allBadges","userBadges","earnedBadgeIds","includes","getUserFeaturedBadges","limit","tieredBadges","sort","a","tierPriority","BadgeTier","BRONZE","SILVER","GOLD","PLATINUM","tierDiff","dateA","Date","dateB","getTime","slice","getUserNextBadge","unearnedBadges","profileData","profileError","single","attendanceCount","show_attendance_count","attendanceBadges","badgeDefinitions","badgeError","nextBadgeDef","requirement_count","highestBadgeDef","getBadgeProgress","badgeId","current","required","percent","Math","min"],"sources":["/Users/kevin/card-show-finder/src/services/badgeService.ts"],"sourcesContent":["import { supabase } from '../supabase';\nimport { Badge, BadgeTier } from '../types';\n\n/**\n * Get all badge definitions from the database\n */\nexport const getAllBadgeDefinitions = async (): Promise<Badge[]> => {\n  try {\n    const { data, error } = await supabase\n      .from('badges_definitions')\n      .select('*')\n      .order('requirement_count', { ascending: true });\n    \n    if (error) {\n      throw error;\n    }\n    \n    if (!data) {\n      return [];\n    }\n    \n    // Map the database records to our Badge type\n    return data.map(badge => ({\n      id: badge.id,\n      name: badge.name,\n      description: badge.description,\n      imageUrl: badge.image_url,\n      requirement: badge.requirement,\n      tier: badge.tier as BadgeTier,\n    }));\n  } catch (error) {\n    console.error('Error fetching badge definitions:', error);\n    return []; // Return empty array instead of throwing to prevent UI crashes\n  }\n};\n\n/**\n * Get a user's earned badges\n * @param userId The ID of the user\n */\nexport const getUserBadges = async (userId: string): Promise<Badge[]> => {\n  try {\n    // Step 1: Get the user's badge IDs and earned dates\n    const { data: userBadgesData, error: userBadgesError } = await supabase\n      .from('user_badges')\n      .select('badge_id, earned_at')\n      .eq('user_id', userId);\n    \n    if (userBadgesError) {\n      throw userBadgesError;\n    }\n    \n    if (!userBadgesData || userBadgesData.length === 0) {\n      return [];\n    }\n    \n    // Step 2: Get the badge definitions for those badge IDs\n    const badgeIds = userBadgesData.map(badge => badge.badge_id);\n    const { data: badgeDefsData, error: badgeDefsError } = await supabase\n      .from('badges_definitions')\n      .select('*')\n      .in('id', badgeIds);\n    \n    if (badgeDefsError) {\n      throw badgeDefsError;\n    }\n    \n    if (!badgeDefsData) {\n      return [];\n    }\n    \n    // Step 3: Combine the data\n    return userBadgesData.map(userBadge => {\n      // Find the corresponding badge definition\n      const badgeDef = badgeDefsData.find(def => def.id === userBadge.badge_id);\n      \n      if (!badgeDef) {\n        return null; // Skip if no matching definition found\n      }\n      \n      // Map to our Badge type\n      return {\n        id: badgeDef.id,\n        name: badgeDef.name,\n        description: badgeDef.description,\n        imageUrl: badgeDef.image_url,\n        requirement: badgeDef.requirement,\n        tier: badgeDef.tier as BadgeTier,\n        dateEarned: userBadge.earned_at,\n      };\n    }).filter(badge => badge !== null) as Badge[]; // Remove any nulls\n  } catch (error) {\n    console.error('Error fetching user badges:', error);\n    return []; // Return empty array instead of throwing to prevent UI crashes\n  }\n};\n\n/**\n * Get badges a user has not yet earned\n * @param userId The ID of the user\n */\nexport const getUnearnedBadges = async (userId: string): Promise<Badge[]> => {\n  try {\n    // First, get all badge definitions\n    const allBadges = await getAllBadgeDefinitions();\n    \n    // Then, get the user's earned badges\n    const userBadges = await getUserBadges(userId);\n    \n    // Get the IDs of the user's earned badges\n    const earnedBadgeIds = userBadges.map(badge => badge.id);\n    \n    // Filter out the badges the user has already earned\n    return allBadges.filter(badge => !earnedBadgeIds.includes(badge.id));\n  } catch (error) {\n    console.error('Error fetching unearned badges:', error);\n    return []; // Return empty array instead of throwing to prevent UI crashes\n  }\n};\n\n/**\n * Get a user's featured badges (most recent or highest tier)\n * @param userId The ID of the user\n * @param limit The maximum number of badges to return\n */\nexport const getUserFeaturedBadges = async (userId: string, limit: number = 3): Promise<Badge[]> => {\n  try {\n    const userBadges = await getUserBadges(userId);\n    \n    if (userBadges.length === 0) {\n      return [];\n    }\n    \n    // Sort badges by tier priority and then by date earned\n    const tieredBadges = userBadges.sort((a, b) => {\n      // Define tier priorities (higher number = higher priority)\n      const tierPriority = {\n        [BadgeTier.BRONZE]: 1,\n        [BadgeTier.SILVER]: 2,\n        [BadgeTier.GOLD]: 3,\n        [BadgeTier.PLATINUM]: 4,\n      };\n      \n      // First, sort by tier priority (highest first)\n      const tierDiff = tierPriority[b.tier] - tierPriority[a.tier];\n      if (tierDiff !== 0) {\n        return tierDiff;\n      }\n      \n      // If tiers are the same, sort by date earned (most recent first)\n      const dateA = new Date(a.dateEarned || 0);\n      const dateB = new Date(b.dateEarned || 0);\n      return dateB.getTime() - dateA.getTime();\n    });\n    \n    // Return the top badges based on the limit\n    return tieredBadges.slice(0, limit);\n  } catch (error) {\n    console.error('Error fetching featured badges:', error);\n    return []; // Return empty array instead of throwing to prevent UI crashes\n  }\n};\n\n/**\n * Get a user's next badge to earn (lowest requirement badge not yet earned)\n * @param userId The ID of the user\n */\nexport const getUserNextBadge = async (userId: string): Promise<Badge | null> => {\n  try {\n    const unearnedBadges = await getUnearnedBadges(userId);\n    \n    if (unearnedBadges.length === 0) {\n      return null;\n    }\n    \n    // Get the user's show attendance count from profile\n    const { data: profileData, error: profileError } = await supabase\n      .from('profiles')\n      .select('show_attendance_count')\n      .eq('id', userId)\n      .single();\n    \n    if (profileError) {\n      console.error('Error fetching profile data:', profileError);\n      return null; // Return null instead of throwing\n    }\n    \n    const attendanceCount = profileData?.show_attendance_count || 0;\n    \n    // Filter attendance badges and find the one with the lowest requirement above current count\n    const attendanceBadges = unearnedBadges.filter(\n      badge => badge.requirement === 'show_attendance'\n    );\n    \n    if (attendanceBadges.length === 0) {\n      return null;\n    }\n    \n    // Get badge definitions to access requirement_count\n    const { data: badgeDefinitions, error: badgeError } = await supabase\n      .from('badges_definitions')\n      .select('*')\n      .in('id', attendanceBadges.map(badge => badge.id))\n      .order('requirement_count', { ascending: true });\n    \n    if (badgeError) {\n      console.error('Error fetching badge definitions:', badgeError);\n      return null; // Return null instead of throwing\n    }\n    \n    if (!badgeDefinitions || badgeDefinitions.length === 0) {\n      return null;\n    }\n    \n    // Find the next badge to earn (lowest requirement_count above current attendance)\n    const nextBadgeDef = badgeDefinitions.find(\n      badge => badge.requirement_count > attendanceCount\n    );\n    \n    if (!nextBadgeDef) {\n      // If no badge found above current count, return the highest requirement badge\n      const highestBadgeDef = badgeDefinitions[badgeDefinitions.length - 1];\n      \n      // Map to our Badge type\n      return {\n        id: highestBadgeDef.id,\n        name: highestBadgeDef.name,\n        description: highestBadgeDef.description,\n        imageUrl: highestBadgeDef.image_url,\n        requirement: highestBadgeDef.requirement,\n        tier: highestBadgeDef.tier as BadgeTier,\n      };\n    }\n    \n    // Map to our Badge type\n    return {\n      id: nextBadgeDef.id,\n      name: nextBadgeDef.name,\n      description: nextBadgeDef.description,\n      imageUrl: nextBadgeDef.image_url,\n      requirement: nextBadgeDef.requirement,\n      tier: nextBadgeDef.tier as BadgeTier,\n    };\n  } catch (error) {\n    console.error('Error fetching next badge:', error);\n    return null; // Return null instead of throwing to prevent UI crashes\n  }\n};\n\n/**\n * Get badge progress information for a user\n * @param userId The ID of the user\n * @param badgeId The ID of the badge to check progress for\n */\nexport const getBadgeProgress = async (userId: string, badgeId: string): Promise<{\n  current: number;\n  required: number;\n  percent: number;\n} | null> => {\n  try {\n    // Get the badge definition\n    const { data: badgeDef, error: badgeError } = await supabase\n      .from('badges_definitions')\n      .select('*')\n      .eq('id', badgeId)\n      .single();\n    \n    if (badgeError) {\n      console.error('Error fetching badge definition:', badgeError);\n      return null; // Return null instead of throwing\n    }\n    \n    if (!badgeDef) {\n      console.error('Badge not found');\n      return null; // Return null instead of throwing\n    }\n    \n    // Get the user's profile to check progress\n    const { data: profileData, error: profileError } = await supabase\n      .from('profiles')\n      .select('show_attendance_count')\n      .eq('id', userId)\n      .single();\n    \n    if (profileError) {\n      console.error('Error fetching profile data:', profileError);\n      return null; // Return null instead of throwing\n    }\n    \n    const current = profileData?.show_attendance_count || 0;\n    const required = badgeDef.requirement_count || 0;\n    \n    // Calculate percentage (cap at 100%)\n    const percent = Math.min((current / required) * 100, 100);\n    \n    return {\n      current,\n      required,\n      percent,\n    };\n  } catch (error) {\n    console.error('Error getting badge progress:', error);\n    return null; // Return null instead of throwing to prevent UI crashes\n  }\n};\n"],"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","ignoreList":[]}