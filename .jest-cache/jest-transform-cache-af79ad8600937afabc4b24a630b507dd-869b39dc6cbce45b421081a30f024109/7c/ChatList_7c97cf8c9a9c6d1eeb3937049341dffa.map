{"version":3,"names":["React","useState","useRef","View","FlatList","StyleSheet","TextInput","TouchableOpacity","KeyboardAvoidingView","Platform","Ionicons","useConversationsQuery","useConversationMessagesQuery","ChatItem","EmptyState","ErrorState","LoadingState","MessageBubble","ConversationHeader","jsx","_jsx","jsxs","_jsxs","cov_wm9uwet3d","s","ChatList","_ref","userId","onSelectConversation","onCreateNewConversation","initialConversationId","f","_ref2","_ref3","_slicedToArray","selectedConversation","setSelectedConversation","_ref4","_ref5","messageText","setMessageText","_ref6","conversations","isLoadingConversations","isLoading","conversationsError","error","refetchConversations","refetch","markConversationAsRead","sendMessage","isSending","conversationsList","processedInitialIdRef","useEffect","b","length","current","conversation","find","c","id","handleSelectConversation","_ref7","messages","isLoadingMessages","messagesError","sendConversationMessage","isSendingMessage","handleBackToList","handleSendMessage","trim","renderConversationList","_ref8","message","onRetry","retry","style","styles","container","children","data","renderItem","_ref9","item","onSelect","isSelected","keyExtractor","refreshing","onRefresh","ListEmptyComponent","title","subtitle","contentContainerStyle","fullScreenContainer","listContainer","newConversationButton","onPress","name","size","color","renderConversationDetail","behavior","OS","undefined","keyboardVerticalOffset","onBack","iconName","_ref0","isCurrentUser","sender_id","isOptimistic","startsWith","messagesList","inverted","inputContainer","textInput","placeholder","value","onChangeText","multiline","maxLength","editable","accessible","accessibilityLabel","accessibilityHint","returnKeyType","onSubmitEditing","sendButton","disabledButton","disabled","accessibilityRole","accessibilityState","busy","create","flex","backgroundColor","flexGrow","paddingBottom","padding","flexDirection","alignItems","borderTopWidth","borderTopColor","paddingVertical","paddingHorizontal","borderRadius","maxHeight","marginRight","width","height","justifyContent","opacity","position","right","bottom","elevation","shadowColor","shadowOffset","shadowOpacity","shadowRadius"],"sources":["ChatList.tsx"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport {\n  View,\n  FlatList,\n  StyleSheet,\n  TextInput,\n  TouchableOpacity,\n  KeyboardAvoidingView,\n  Platform\n} from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { Conversation, Message } from '../../services/messagingService';\nimport { useConversationsQuery, useConversationMessagesQuery } from '../../hooks';\nimport {\n  ChatItem,\n  EmptyState,\n  ErrorState,\n  LoadingState,\n  MessageBubble,\n  ConversationHeader\n} from './components';\n\ninterface ChatListProps {\n  userId: string | null;\n  onSelectConversation?: (conversation: Conversation) => void;\n  onCreateNewConversation?: () => void;\n  initialConversationId?: string;\n}\n\nconst ChatList: React.FC<ChatListProps> = ({\n  userId,\n  onSelectConversation,\n  onCreateNewConversation,\n  initialConversationId\n}) => {\n  // State for managing UI\n  const [selectedConversation, setSelectedConversation] = useState<Conversation | null>(null);\n  const [messageText, setMessageText] = useState('');\n\n  // Use React Query hooks for data fetching\n  const {\n    conversations,\n    isLoading: isLoadingConversations,\n    error: conversationsError,\n    refetch: refetchConversations,\n    markConversationAsRead,\n    sendMessage,\n    isSending\n  } = useConversationsQuery(userId);\n\n  /**\n   * React Query sometimes infers the `conversations` result as\n   * `never[] | NonNullable<NoInfer<TQueryFnData>>` which causes all of the\n   * downstream `length`, `find`, etc. property accesses to error out. We know\n   * that our hook always returns an array of `Conversation` objects (defaulting\n   * to an empty array), so cast it once here and use the strongly-typed alias\n   * everywhere else. This keeps the rest of the component code clean while\n   * satisfying TypeScript.\n   */\n  const conversationsList: Conversation[] = conversations as Conversation[];\n\n  // Find initial conversation if provided\n  // Track which initialConversationId we have already processed so we don't trigger\n  // handleSelectConversation on every render (which caused an infinite loop).\n  const processedInitialIdRef = useRef<string | null>(null);\n\n  React.useEffect(() => {\n    if (\n      initialConversationId &&\n      conversationsList.length > 0 &&\n      processedInitialIdRef.current !== initialConversationId\n    ) {\n      const conversation = conversationsList.find(\n        (c: Conversation) => c.id === initialConversationId\n      );\n      if (conversation) {\n        handleSelectConversation(conversation);\n        // Set the ref to prevent infinite loop\n        processedInitialIdRef.current = initialConversationId;\n      }\n    }\n  }, [initialConversationId, conversations]);\n\n  // Fetch messages for the selected conversation\n  const {\n    messages,\n    isLoading: isLoadingMessages,\n    error: messagesError,\n    sendMessage: sendConversationMessage,\n    isSending: isSendingMessage\n  } = useConversationMessagesQuery(\n    selectedConversation?.id || null,\n    userId\n  );\n\n  // Handle selecting a conversation\n  const handleSelectConversation = (conversation: Conversation) => {\n    setSelectedConversation(conversation);\n    \n    // Mark conversation as read\n    if (userId) {\n      markConversationAsRead(conversation.id);\n    }\n    \n    // Call external handler if provided\n    if (onSelectConversation) {\n      onSelectConversation(conversation);\n    }\n  };\n\n  // Handle going back to the conversation list\n  const handleBackToList = () => {\n    setSelectedConversation(null);\n  };\n\n  // Handle sending a message\n  const handleSendMessage = () => {\n    if (!messageText.trim() || !selectedConversation || !userId) return;\n    \n    // Send the message\n    sendConversationMessage(messageText.trim());\n    \n    // Clear the input\n    setMessageText('');\n  };\n\n  // Render conversation list view\n  const renderConversationList = () => {\n    if (isLoadingConversations && conversationsList.length === 0) {\n      return <LoadingState />;\n    }\n\n    if (conversationsError) {\n      return (\n        <ErrorState \n          error={conversationsError.message} \n          onRetry={conversationsError.retry ?? refetchConversations}\n        />\n      );\n    }\n\n    return (\n      <View style={styles.container}>\n        <FlatList\n          data={conversationsList}\n          renderItem={({ item }) => (\n            <ChatItem\n              conversation={item}\n              onSelect={handleSelectConversation}\n              isSelected={selectedConversation?.id === item.id}\n            />\n          )}\n          keyExtractor={(item) => item.id}\n          refreshing={isLoadingConversations && conversationsList.length > 0}\n          onRefresh={refetchConversations}\n          ListEmptyComponent={\n            <EmptyState \n              title=\"No conversations yet\"\n              subtitle=\"When you message a dealer or show organizer, your conversations will appear here\"\n            />\n          }\n          contentContainerStyle={\n            conversationsList.length === 0 ? styles.fullScreenContainer : styles.listContainer\n            /**\n             * We intentionally keep the original `conversations` prop for\n             * FlatList `data` above to avoid unnecessary re-renders caused by\n             * a new reference.  The style computation, however, only needs the\n             * array length so we reference the typed alias here.\n             */\n          }\n        />\n        \n        {onCreateNewConversation && (\n          <TouchableOpacity\n            style={styles.newConversationButton}\n            onPress={onCreateNewConversation}\n          >\n            <Ionicons name=\"create\" size={24} color=\"#fff\" />\n          </TouchableOpacity>\n        )}\n      </View>\n    );\n  };\n\n  // Render conversation detail view\n  const renderConversationDetail = () => {\n    if (!selectedConversation) return null;\n\n    return (\n      <KeyboardAvoidingView \n        style={styles.container} \n        behavior={Platform.OS === 'ios' ? 'padding' : undefined}\n        keyboardVerticalOffset={Platform.OS === 'ios' ? 90 : 0}\n      >\n        <ConversationHeader\n          conversation={selectedConversation}\n          onBack={handleBackToList}\n        />\n        \n        {isLoadingMessages && messages.length === 0 ? (\n          <LoadingState message=\"Loading messages...\" />\n        ) : messagesError ? (\n          <ErrorState \n            error={messagesError.message}\n            title=\"Couldn't load messages\" \n            onRetry={messagesError.retry}\n          />\n        ) : messages.length === 0 ? (\n          <EmptyState \n            title=\"No messages yet\"\n            subtitle=\"Start the conversation by sending a message\"\n            iconName=\"chatbubbles-outline\"\n          />\n        ) : (\n          <FlatList\n            data={messages}\n            renderItem={({ item }) => (\n              <MessageBubble\n                message={item}\n                isCurrentUser={userId === item.sender_id}\n                isOptimistic={item.id.startsWith('temp-')}\n              />\n            )}\n            keyExtractor={(item) => item.id}\n            contentContainerStyle={styles.messagesList}\n            inverted={false}\n          />\n        )}\n        \n        <View style={styles.inputContainer}>\n          <TextInput\n            style={styles.textInput}\n            placeholder=\"Type a message...\"\n            value={messageText}\n            onChangeText={setMessageText}\n            multiline\n            maxLength={500}\n            editable={!isSendingMessage}\n            accessible\n            accessibilityLabel=\"Message input field\"\n            accessibilityHint=\"Enter the message you want to send\"\n            returnKeyType=\"send\"\n            onSubmitEditing={handleSendMessage}\n          />\n          <TouchableOpacity\n            style={[\n              styles.sendButton,\n              (!messageText.trim() || isSendingMessage) && styles.disabledButton\n            ]}\n            disabled={!messageText.trim() || isSendingMessage}\n            onPress={handleSendMessage}\n            accessibilityRole=\"button\"\n            accessibilityLabel=\"Send message\"\n            accessibilityState={{ disabled: !messageText.trim() || isSendingMessage, busy: isSendingMessage }}\n          >\n            {isSendingMessage ? (\n              <Ionicons name=\"hourglass-outline\" size={20} color=\"#fff\" />\n            ) : (\n              <Ionicons name=\"send\" size={20} color=\"#fff\" />\n            )}\n          </TouchableOpacity>\n        </View>\n      </KeyboardAvoidingView>\n    );\n  };\n\n  // Main render\n  return selectedConversation ? renderConversationDetail() : renderConversationList();\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#F5F5F5',\n  },\n  fullScreenContainer: {\n    flexGrow: 1,\n    paddingBottom: 100, // Extra padding at bottom for scroll effect\n  },\n  listContainer: {\n    paddingBottom: 20,\n  },\n  messagesList: {\n    padding: 16,\n    flexGrow: 1,\n  },\n  inputContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: '#FFF',\n    borderTopWidth: 1,\n    borderTopColor: '#E1E1E1',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  textInput: {\n    flex: 1,\n    backgroundColor: '#F0F0F0',\n    borderRadius: 20,\n    paddingHorizontal: 16,\n    paddingVertical: 10,\n    maxHeight: 100,\n    marginRight: 8,\n  },\n  sendButton: {\n    backgroundColor: '#FF6A00',\n    width: 40,\n    height: 40,\n    borderRadius: 20,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  disabledButton: {\n    opacity: 0.5,\n  },\n  newConversationButton: {\n    position: 'absolute',\n    right: 16,\n    bottom: 16,\n    width: 56,\n    height: 56,\n    borderRadius: 28,\n    backgroundColor: '#FF6A00',\n    justifyContent: 'center',\n    alignItems: 'center',\n    elevation: 5,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.3,\n    shadowRadius: 3,\n  },\n});\n\nexport default ChatList;\n"],"mappingsgBAAgB,EAChBC,oBAAoB,EACpBC,QAAQ,QACH,cAAc;AACrB,SAASC,QAAQ,QAAQ,oBAAoB;AAE7C,SAASC,qBAAqB,EAAEC,4BAA4B,QAAQ,aAAa;AACjF,SACEC,QAAQ,EACRC,UAAU,EACVC,UAAU,EACVC,YAAY,EACZC,aAAa,EACbC,kBAAkB,QACb,cAAc;AAAC,SAAAC,GAAA,IAAAC,IAAA,EAAAC,IAAA,IAAAC,KAAA;AAAAC,aAAA,GAAAC,CAAA;AAStB,IAAMC,QAAiC,GAAG,SAApCA,QAAiCA,CAAAC,IAAA,EAKjC;EAAA,IAJJC,MAAM,GAAAD,IAAA,CAANC,MAAM;IACNC,oBAAoB,GAAAF,IAAA,CAApBE,oBAAoB;IACpBC,uBAAuB,GAAAH,IAAA,CAAvBG,uBAAuB;IACvBC,qBAAqB,GAAAJ,IAAA,CAArBI,qBAAqB;EAAAP,aAAA,GAAAQ,CAAA;EAGrB,IAAAC,KAAA,IAAAT,aAAA,GAAAC,CAAA,OAAwDvB,QAAQ,CAAsB,IAAI,CAAC;IAAAgC,KAAA,GAAAC,cAAA,CAAAF,KAAA;IAApFG,oBAAoB,GAAAF,KAAA;IAAEG,uBAAuB,GAAAH,KAAA;EACpD,IAAAI,KAAA,IAAAd,aAAA,GAAAC,CAAA,OAAsCvB,QAAQ,CAAC,EAAE,CAAC;IAAAqC,KAAA,GAAAJ,cAAA,CAAAG,KAAA;IAA3CE,WAAW,GAAAD,KAAA;IAAEE,cAAc,GAAAF,KAAA;EAGlC,IAAAG,KAAA,IAAAlB,aAAA,GAAAC,CAAA,OAQIb,qBAAqB,CAACgB,MAAM,CAAC;IAP/Be,aAAa,GAAAD,KAAA,CAAbC,aAAa;IACFC,sBAAsB,GAAAF,KAAA,CAAjCG,SAAS;IACFC,kBAAkB,GAAAJ,KAAA,CAAzBK,KAAK;IACIC,oBAAoB,GAAAN,KAAA,CAA7BO,OAAO;IACPC,sBAAsB,GAAAR,KAAA,CAAtBQ,sBAAsB;IACtBC,WAAW,GAAAT,KAAA,CAAXS,WAAW;IACXC,SAAS,GAAAV,KAAA,CAATU,SAAS;EAYX,IAAMC,iBAAiC,IAAA7B,aAAA,GAAAC,CAAA,OAAGkB,aAAa,CAAkB;EAKzE,IAAMW,qBAAqB,IAAA9B,aAAA,GAAAC,CAAA,OAAGtB,MAAM,CAAgB,IAAI,CAAC;EAACqB,aAAA,GAAAC,CAAA;EAE1DxB,KAAK,CAACsD,SAAS,CAAC,YAAM;IAAA/B,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAC,CAAA;IACpB,IACE,CAAAD,aAAA,GAAAgC,CAAA,UAAAzB,qBAAqB,MAAAP,aAAA,GAAAgC,CAAA,UACrBH,iBAAiB,CAACI,MAAM,GAAG,CAAC,MAAAjC,aAAA,GAAAgC,CAAA,UAC5BF,qBAAqB,CAACI,OAAO,KAAK3B,qBAAqB,GACvD;MAAAP,aAAA,GAAAgC,CAAA;MACA,IAAMG,YAAY,IAAAnC,aAAA,GAAAC,CAAA,OAAG4B,iBAAiB,CAACO,IAAI,CACzC,UAACC,CAAe,EAAK;QAAArC,aAAA,GAAAQ,CAAA;QAAAR,aAAA,GAAAC,CAAA;QAAA,OAAAoC,CAAC,CAACC,EAAE,KAAK/B,qBAAqB;MAAD,CACpD,CAAC;MAACP,aAAA,GAAAC,CAAA;MACF,IAAIkC,YAAY,EAAE;QAAAnC,aAAA,GAAAgC,CAAA;QAAAhC,aAAA,GAAAC,CAAA;QAChBsC,wBAAwB,CAACJ,YAAY,CAAC;QAACnC,aAAA,GAAAC,CAAA;QAEvC6B,qBAAqB,CAACI,OAAO,GAAG3B,qBAAqB;MACvD,CAAC;QAAAP,aAAA,GAAAgC,CAAA;MAAA;IACH,CAAC;MAAAhC,aAAA,GAAAgC,CAAA;IAAA;EACH,CAAC,EAAE,CAACzB,qBAAqB,EAAEY,aAAa,CAAC,CAAC;EAG1C,IAAAqB,KAAA,IAAAxC,aAAA,GAAAC,CAAA,QAMIZ,4BAA4B,CAC9B,CAAAW,aAAA,GAAAgC,CAAA,UAAApB,oBAAoB,oBAApBA,oBAAoB,CAAE0B,EAAE,MAAAtC,aAAA,GAAAgC,CAAA,UAAI,IAAI,GAChC5B,MACF,CAAC;IARCqC,QAAQ,GAAAD,KAAA,CAARC,QAAQ;IACGC,iBAAiB,GAAAF,KAAA,CAA5BnB,SAAS;IACFsB,aAAa,GAAAH,KAAA,CAApBjB,KAAK;IACQqB,uBAAuB,GAAAJ,KAAA,CAApCb,WAAW;IACAkB,gBAAgB,GAAAL,KAAA,CAA3BZ,SAAS;EAIT5B,aAAA,GAAAC,CAAA;EAGF,IAAMsC,wBAAwB,GAAG,SAA3BA,wBAAwBA,CAAIJ,YAA0B,EAAK;IAAAnC,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAC,CAAA;IAC/DY,uBAAuB,CAACsB,YAAY,CAAC;IAACnC,aAAA,GAAAC,CAAA;IAGtC,IAAIG,MAAM,EAAE;MAAAJ,aAAA,GAAAgC,CAAA;MAAAhC,aAAA,GAAAC,CAAA;MACVyB,sBAAsB,CAACS,YAAY,CAACG,EAAE,CAAC;IACzC,CAAC;MAAAtC,aAAA,GAAAgC,CAAA;IAAA;IAAAhC,aAAA,GAAAC,CAAA;IAGD,IAAII,oBAAoB,EAAE;MAAAL,aAAA,GAAAgC,CAAA;MAAAhC,aAAA,GAAAC,CAAA;MACxBI,oBAAoB,CAAC8B,YAAY,CAAC;IACpC,CAAC;MAAAnC,aAAA,GAAAgC,CAAA;IAAA;EACH,CAAC;EAAChC,aAAA,GAAAC,CAAA;EAGF,IAAM6C,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAA,EAAS;IAAA9C,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAC,CAAA;IAC7BY,uBAAuB,CAAC,IAAI,CAAC;EAC/B,CAAC;EAACb,aAAA,GAAAC,CAAA;EAGF,IAAM8C,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAA,EAAS;IAAA/C,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAC,CAAA;IAC9B,IAAI,CAAAD,aAAA,GAAAgC,CAAA,WAAChB,WAAW,CAACgC,IAAI,CAAC,CAAC,MAAAhD,aAAA,GAAAgC,CAAA,UAAI,CAACpB,oBAAoB,MAAAZ,aAAA,GAAAgC,CAAA,UAAI,CAAC5B,MAAM,GAAE;MAAAJ,aAAA,GAAAgC,CAAA;MAAAhC,aAAA,GAAAC,CAAA;MAAA;IAAM,CAAC;MAAAD,aAAA,GAAAgC,CAAA;IAAA;IAAAhC,aAAA,GAAAC,CAAA;IAGpE2C,uBAAuB,CAAC5B,WAAW,CAACgC,IAAI,CAAC,CAAC,CAAC;IAAChD,aAAA,GAAAC,CAAA;IAG5CgB,cAAc,CAAC,EAAE,CAAC;EACpB,CAAC;EAACjB,aAAA,GAAAC,CAAA;EAGF,IAAMgD,sBAAsB,GAAG,SAAzBA,sBAAsBA,CAAA,EAAS;IAAAjD,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAC,CAAA;IACnC,IAAI,CAAAD,aAAA,GAAAgC,CAAA,UAAAZ,sBAAsB,MAAApB,aAAA,GAAAgC,CAAA,UAAIH,iBAAiB,CAACI,MAAM,KAAK,CAAC,GAAE;MAAAjC,aAAA,GAAAgC,CAAA;MAAAhC,aAAA,GAAAC,CAAA;MAC5D,OAAOJ,IAAA,CAACJ,YAAY,IAAE,CAAC;IACzB,CAAC;MAAAO,aAAA,GAAAgC,CAAA;IAAA;IAAAhC,aAAA,GAAAC,CAAA;IAED,IAAIqB,kBAAkB,EAAE;MAAA,IAAA4B,KAAA;MAAAlD,aAAA,GAAAgC,CAAA;MAAAhC,aAAA,GAAAC,CAAA;MACtB,OACEJ,IAAA,CAACL,UAAU;QACT+B,KAAK,EAAED,kBAAkB,CAAC6B,OAAQ;QAClCC,OAAO,GAAAF,KAAA,IAAAlD,aAAA,GAAAgC,CAAA,WAAEV,kBAAkB,CAAC+B,KAAK,aAAAH,KAAA,IAAAlD,aAAA,GAAAgC,CAAA,WAAIR,oBAAoB;MAAC,CAC3D,CAAC;IAEN,CAAC;MAAAxB,aAAA,GAAAgC,CAAA;IAAA;IAAAhC,aAAA,GAAAC,CAAA;IAED,OACEF,KAAA,CAACnB,IAAI;MAAC0E,KAAK,EAAEC,MAAM,CAACC,SAAU;MAAAC,QAAA,GAC5B5D,IAAA,CAAChB,QAAQ;QACP6E,IAAI,EAAE7B,iBAAkB;QACxB8B,UAAU,EAAE,SAAZA,UAAUA,CAAAC,KAAA,EACR;UAAA,IADaC,IAAI,GAAAD,KAAA,CAAJC,IAAI;UAAA7D,aAAA,GAAAQ,CAAA;UAAAR,aAAA,GAAAC,CAAA;UACjB,OAAAJ,IAAA,CAACP,QAAQ;YACP6C,YAAY,EAAE0B,IAAK;YACnBC,QAAQ,EAAEvB,wBAAyB;YACnCwB,UAAU,EAAE,CAAAnD,oBAAoB,oBAApBA,oBAAoB,CAAE0B,EAAE,MAAKuB,IAAI,CAACvB;UAAG,CAClD,CAAC;QAAD,CACD;QACF0B,YAAY,EAAE,SAAdA,YAAYA,CAAGH,IAAI,EAAK;UAAA7D,aAAA,GAAAQ,CAAA;UAAAR,aAAA,GAAAC,CAAA;UAAA,OAAA4D,IAAI,CAACvB,EAAE;QAAD,CAAE;QAChC2B,UAAU,EAAE,CAAAjE,aAAA,GAAAgC,CAAA,WAAAZ,sBAAsB,MAAApB,aAAA,GAAAgC,CAAA,WAAIH,iBAAiB,CAACI,MAAM,GAAG,CAAC,CAAC;QACnEiC,SAAS,EAAE1C,oBAAqB;QAChC2C,kBAAkB,EAChBtE,IAAA,CAACN,UAAU;UACT6E,KAAK,EAAC,sBAAsB;UAC5BC,QAAQ,EAAC;QAAkF,CAC5F,CACF;QACDC,qBAAqB,EACnBzC,iBAAiB,CAACI,MAAM,KAAK,CAAC,IAAAjC,aAAA,GAAAgC,CAAA,WAAGuB,MAAM,CAACgB,mBAAmB,KAAAvE,aAAA,GAAAgC,CAAA,WAAGuB,MAAM,CAACiB,aAAa;MAOnF,CACF,CAAC,EAED,CAAAxE,aAAA,GAAAgC,CAAA,WAAA1B,uBAAuB,MAAAN,aAAA,GAAAgC,CAAA,WACtBnC,IAAA,CAACb,gBAAgB;QACfsE,KAAK,EAAEC,MAAM,CAACkB,qBAAsB;QACpCC,OAAO,EAAEpE,uBAAwB;QAAAmD,QAAA,EAEjC5D,IAAA,CAACV,QAAQ;UAACwF,IAAI,EAAC,QAAQ;UAACC,IAAI,EAAE,EAAG;UAACC,KAAK,EAAC;QAAM,CAAE;MAAC,CACjC,CAAC,CACpB;IAAA,CACG,CAAC;EAEX,CAAC;EAAC7E,aAAA,GAAAC,CAAA;EAGF,IAAM6E,wBAAwB,GAAG,SAA3BA,wBAAwBA,CAAA,EAAS;IAAA9E,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAC,CAAA;IACrC,IAAI,CAACW,oBAAoB,EAAE;MAAAZ,aAAA,GAAAgC,CAAA;MAAAhC,aAAA,GAAAC,CAAA;MAAA,OAAO,IAAI;IAAA,CAAC;MAAAD,aAAA,GAAAgC,CAAA;IAAA;IAAAhC,aAAA,GAAAC,CAAA;IAEvC,OACEF,KAAA,CAACd,oBAAoB;MACnBqE,KAAK,EAAEC,MAAM,CAACC,SAAU;MACxBuB,QAAQ,EAAE7F,QAAQ,CAAC8F,EAAE,KAAK,KAAK,IAAAhF,aAAA,GAAAgC,CAAA,WAAG,SAAS,KAAAhC,aAAA,GAAAgC,CAAA,WAAGiD,SAAS,CAAC;MACxDC,sBAAsB,EAAEhG,QAAQ,CAAC8F,EAAE,KAAK,KAAK,IAAAhF,aAAA,GAAAgC,CAAA,WAAG,EAAE,KAAAhC,aAAA,GAAAgC,CAAA,WAAG,CAAC,CAAC;MAAAyB,QAAA,GAEvD5D,IAAA,CAACF,kBAAkB;QACjBwC,YAAY,EAAEvB,oBAAqB;QACnCuE,MAAM,EAAErC;MAAiB,CAC1B,CAAC,EAED,CAAA9C,aAAA,GAAAgC,CAAA,WAAAU,iBAAiB,MAAA1C,aAAA,GAAAgC,CAAA,WAAIS,QAAQ,CAACR,MAAM,KAAK,CAAC,KAAAjC,aAAA,GAAAgC,CAAA,WACzCnC,IAAA,CAACJ,YAAY;QAAC0D,OAAO,EAAC;MAAqB,CAAE,CAAC,KAAAnD,aAAA,GAAAgC,CAAA,WAC5CW,aAAa,IAAA3C,aAAA,GAAAgC,CAAA,WACfnC,IAAA,CAACL,UAAU;QACT+B,KAAK,EAAEoB,aAAa,CAACQ,OAAQ;QAC7BiB,KAAK,EAAC,wBAAwB;QAC9BhB,OAAO,EAAET,aAAa,CAACU;MAAM,CAC9B,CAAC,KAAArD,aAAA,GAAAgC,CAAA,WACAS,QAAQ,CAACR,MAAM,KAAK,CAAC,IAAAjC,aAAA,GAAAgC,CAAA,WACvBnC,IAAA,CAACN,UAAU;QACT6E,KAAK,EAAC,iBAAiB;QACvBC,QAAQ,EAAC,6CAA6C;QACtDe,QAAQ,EAAC;MAAqB,CAC/B,CAAC,KAAApF,aAAA,GAAAgC,CAAA,WAEFnC,IAAA,CAAChB,QAAQ;QACP6E,IAAI,EAAEjB,QAAS;QACfkB,UAAU,EAAE,SAAZA,UAAUA,CAAA0B,KAAA,EACR;UAAA,IADaxB,IAAI,GAAAwB,KAAA,CAAJxB,IAAI;UAAA7D,aAAA,GAAAQ,CAAA;UAAAR,aAAA,GAAAC,CAAA;UACjB,OAAAJ,IAAA,CAACH,aAAa;YACZyD,OAAO,EAAEU,IAAK;YACdyB,aAAa,EAAElF,MAAM,KAAKyD,IAAI,CAAC0B,SAAU;YACzCC,YAAY,EAAE3B,IAAI,CAACvB,EAAE,CAACmD,UAAU,CAAC,OAAO;UAAE,CAC3C,CAAC;QAAD,CACD;QACFzB,YAAY,EAAE,SAAdA,YAAYA,CAAGH,IAAI,EAAK;UAAA7D,aAAA,GAAAQ,CAAA;UAAAR,aAAA,GAAAC,CAAA;UAAA,OAAA4D,IAAI,CAACvB,EAAE;QAAD,CAAE;QAChCgC,qBAAqB,EAAEf,MAAM,CAACmC,YAAa;QAC3CC,QAAQ,EAAE;MAAM,CACjB,CAAC,CACH,IAED5F,KAAA,CAACnB,IAAI;QAAC0E,KAAK,EAAEC,MAAM,CAACqC,cAAe;QAAAnC,QAAA,GACjC5D,IAAA,CAACd,SAAS;UACRuE,KAAK,EAAEC,MAAM,CAACsC,SAAU;UACxBC,WAAW,EAAC,mBAAmB;UAC/BC,KAAK,EAAE/E,WAAY;UACnBgF,YAAY,EAAE/E,cAAe;UAC7BgF,SAAS;UACTC,SAAS,EAAE,GAAI;UACfC,QAAQ,EAAE,CAACtD,gBAAiB;UAC5BuD,UAAU;UACVC,kBAAkB,EAAC,qBAAqB;UACxCC,iBAAiB,EAAC,oCAAoC;UACtDC,aAAa,EAAC,MAAM;UACpBC,eAAe,EAAEzD;QAAkB,CACpC,CAAC,EACFlD,IAAA,CAACb,gBAAgB;UACfsE,KAAK,EAAE,CACLC,MAAM,CAACkD,UAAU,EACjB,CAAC,CAAAzG,aAAA,GAAAgC,CAAA,YAAChB,WAAW,CAACgC,IAAI,CAAC,CAAC,MAAAhD,aAAA,GAAAgC,CAAA,WAAIa,gBAAgB,OAAA7C,aAAA,GAAAgC,CAAA,WAAKuB,MAAM,CAACmD,cAAc,EAClE;UACFC,QAAQ,EAAE,CAAA3G,aAAA,GAAAgC,CAAA,YAAChB,WAAW,CAACgC,IAAI,CAAC,CAAC,MAAAhD,aAAA,GAAAgC,CAAA,WAAIa,gBAAgB,CAAC;UAClD6B,OAAO,EAAE3B,iBAAkB;UAC3B6D,iBAAiB,EAAC,QAAQ;UAC1BP,kBAAkB,EAAC,cAAc;UACjCQ,kBAAkB,EAAE;YAAEF,QAAQ,EAAE,CAAA3G,aAAA,GAAAgC,CAAA,YAAChB,WAAW,CAACgC,IAAI,CAAC,CAAC,MAAAhD,aAAA,GAAAgC,CAAA,WAAIa,gBAAgB;YAAEiE,IAAI,EAAEjE;UAAiB,CAAE;UAAAY,QAAA,EAEjGZ,gBAAgB,IAAA7C,aAAA,GAAAgC,CAAA,WACfnC,IAAA,CAACV,QAAQ;YAACwF,IAAI,EAAC,mBAAmB;YAACC,IAAI,EAAE,EAAG;YAACC,KAAK,EAAC;UAAM,CAAE,CAAC,KAAA7E,aAAA,GAAAgC,CAAA,WAE5DnC,IAAA,CAACV,QAAQ;YAACwF,IAAI,EAAC,MAAM;YAACC,IAAI,EAAE,EAAG;YAACC,KAAK,EAAC;UAAM,CAAE,CAAC;QAChD,CACe,CAAC;MAAA,CACf,CAAC;IAAA,CACa,CAAC;EAE3B,CAAC;EAAC7E,aAAA,GAAAC,CAAA;EAGF,OAAOW,oBAAoB,IAAAZ,aAAA,GAAAgC,CAAA,WAAG8C,wBAAwB,CAAC,CAAC,KAAA9E,aAAA,GAAAgC,CAAA,WAAGiB,sBAAsB,CAAC,CAAC;AACrF,CAAC;AAED,IAAMM,MAAM,IAAAvD,aAAA,GAAAC,CAAA,QAAGnB,UAAU,CAACiI,MAAM,CAAC;EAC/BvD,SAAS,EAAE;IACTwD,IAAI,EAAE,CAAC;IACPC,eAAe,EAAE;EACnB,CAAC;EACD1C,mBAAmB,EAAE;IACnB2C,QAAQ,EAAE,CAAC;IACXC,aAAa,EAAE;EACjB,CAAC;EACD3C,aAAa,EAAE;IACb2C,aAAa,EAAE;EACjB,CAAC;EACDzB,YAAY,EAAE;IACZ0B,OAAO,EAAE,EAAE;IACXF,QAAQ,EAAE;EACZ,CAAC;EACDtB,cAAc,EAAE;IACdyB,aAAa,EAAE,KAAK;IACpBC,UAAU,EAAE,QAAQ;IACpBL,eAAe,EAAE,MAAM;IACvBM,cAAc,EAAE,CAAC;IACjBC,cAAc,EAAE,SAAS;IACzBC,eAAe,EAAE,CAAC;IAClBC,iBAAiB,EAAE;EACrB,CAAC;EACD7B,SAAS,EAAE;IACTmB,IAAI,EAAE,CAAC;IACPC,eAAe,EAAE,SAAS;IAC1BU,YAAY,EAAE,EAAE;IAChBD,iBAAiB,EAAE,EAAE;IACrBD,eAAe,EAAE,EAAE;IACnBG,SAAS,EAAE,GAAG;IACdC,WAAW,EAAE;EACf,CAAC;EACDpB,UAAU,EAAE;IACVQ,eAAe,EAAE,SAAS;IAC1Ba,KAAK,EAAE,EAAE;IACTC,MAAM,EAAE,EAAE;IACVJ,YAAY,EAAE,EAAE;IAChBL,UAAU,EAAE,QAAQ;IACpBU,cAAc,EAAE;EAClB,CAAC;EACDtB,cAAc,EAAE;IACduB,OAAO,EAAE;EACX,CAAC;EACDxD,qBAAqB,EAAE;IACrByD,QAAQ,EAAE,UAAU;IACpBC,KAAK,EAAE,EAAE;IACTC,MAAM,EAAE,EAAE;IACVN,KAAK,EAAE,EAAE;IACTC,MAAM,EAAE,EAAE;IACVJ,YAAY,EAAE,EAAE;IAChBV,eAAe,EAAE,SAAS;IAC1Be,cAAc,EAAE,QAAQ;IACxBV,UAAU,EAAE,QAAQ;IACpBe,SAAS,EAAE,CAAC;IACZC,WAAW,EAAE,MAAM;IACnBC,YAAY,EAAE;MAAET,KAAK,EAAE,CAAC;MAAEC,MAAM,EAAE;IAAE,CAAC;IACrCS,aAAa,EAAE,GAAG;IAClBC,YAAY,EAAE;EAChB;AACF,CAAC,CAAC;AAEF,eAAevI,QAAQ","ignoreList":[]}