7cd705f6857e2e43fa6f374a47932780
_getJestObj().mock('../../src/supabase', function () {
  return {
    supabase: {
      from: jest.fn().mockReturnThis(),
      select: jest.fn().mockReturnThis(),
      update: jest.fn().mockReturnThis(),
      insert: jest.fn().mockReturnThis(),
      eq: jest.fn().mockReturnThis(),
      single: jest.fn()
    }
  };
});
_getJestObj().mock('../../src/services/stripePaymentService', function () {
  return {
    createPaymentSheetForSubscription: jest.fn()
  };
});
_getJestObj().mock('../../src/services/subscriptionTypes', function () {
  var original = jest.requireActual('../../src/services/subscriptionTypes');
  return Object.assign({}, original, {
    SUBSCRIPTION_PLANS: [{
      id: 'dealer-monthly',
      name: 'MVP Dealer Monthly',
      description: 'Monthly subscription for MVP Dealers',
      price: 9.99,
      type: 'dealer',
      duration: 'monthly',
      features: ['Feature 1', 'Feature 2']
    }, {
      id: 'dealer-annual',
      name: 'MVP Dealer Annual',
      description: 'Annual subscription for MVP Dealers',
      price: 99.99,
      type: 'dealer',
      duration: 'annual',
      features: ['Feature 1', 'Feature 2', 'Feature 3']
    }, {
      id: 'organizer-monthly',
      name: 'Show Organizer Monthly',
      description: 'Monthly subscription for Show Organizers',
      price: 19.99,
      type: 'organizer',
      duration: 'monthly',
      features: ['Feature A', 'Feature B']
    }, {
      id: 'organizer-annual',
      name: 'Show Organizer Annual',
      description: 'Annual subscription for Show Organizers',
      price: 199.99,
      type: 'organizer',
      duration: 'annual',
      features: ['Feature A', 'Feature B', 'Feature C']
    }],
    SubscriptionPlanType: {
      DEALER: 'dealer',
      ORGANIZER: 'organizer'
    },
    SubscriptionDuration: {
      MONTHLY: 'monthly',
      ANNUAL: 'annual'
    },
    _calculateExpiryDate: jest.fn().mockImplementation(function () {
      var date = new Date();
      date.setDate(date.getDate() + 30);
      return date;
    })
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _mockdate = _interopRequireDefault(require("mockdate"));
var _subscriptionService = require("../../src/services/subscriptionService");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('subscriptionService', function () {
  var consoleErrorSpy;
  var mockUserId = 'user-123';
  var mockPlanId = 'dealer-monthly';
  var mockInvalidPlanId = 'invalid-plan';
  var mockSupabase = require('../../src/supabase').supabase;
  var mockStripePaymentService = require('../../src/services/stripePaymentService');
  beforeEach(function () {
    jest.clearAllMocks();
    consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation(function () {});
    _mockdate.default.reset();
  });
  afterEach(function () {
    consoleErrorSpy.mockRestore();
  });
  describe('hasActiveSubscription', function () {
    test('should return false for null/undefined user', function () {
      expect((0, _subscriptionService.hasActiveSubscription)(null)).toBe(false);
      expect((0, _subscriptionService.hasActiveSubscription)(undefined)).toBe(false);
    });
    test('should return false for collector account type', function () {
      var user = {
        id: 'user-123',
        accountType: 'collector',
        subscriptionStatus: 'active',
        subscriptionExpiry: new Date(Date.now() + 86400000).toISOString()
      };
      expect((0, _subscriptionService.hasActiveSubscription)(user)).toBe(false);
    });
    test('should return false for inactive subscription status', function () {
      var user = {
        id: 'user-123',
        accountType: 'dealer',
        subscriptionStatus: 'expired',
        subscriptionExpiry: new Date(Date.now() + 86400000).toISOString()
      };
      expect((0, _subscriptionService.hasActiveSubscription)(user)).toBe(false);
    });
    test('should return false for expired subscription', function () {
      var user = {
        id: 'user-123',
        accountType: 'dealer',
        subscriptionStatus: 'active',
        subscriptionExpiry: new Date(Date.now() - 86400000).toISOString()
      };
      expect((0, _subscriptionService.hasActiveSubscription)(user)).toBe(false);
    });
    test('should return false for missing expiry date', function () {
      var user = {
        id: 'user-123',
        accountType: 'dealer',
        subscriptionStatus: 'active'
      };
      expect((0, _subscriptionService.hasActiveSubscription)(user)).toBe(false);
    });
    test('should return true for active subscription with future expiry', function () {
      var user = {
        id: 'user-123',
        accountType: 'dealer',
        subscriptionStatus: 'active',
        subscriptionExpiry: new Date(Date.now() + 86400000).toISOString()
      };
      expect((0, _subscriptionService.hasActiveSubscription)(user)).toBe(true);
    });
    test('should handle invalid date format', function () {
      var user = {
        id: 'user-123',
        accountType: 'dealer',
        subscriptionStatus: 'active',
        subscriptionExpiry: 'invalid-date'
      };
      expect((0, _subscriptionService.hasActiveSubscription)(user)).toBe(false);
    });
    test('should handle expiry date at exact current time', function () {
      var now = new Date('2025-07-15T12:00:00Z');
      _mockdate.default.set(now);
      var user = {
        id: 'user-123',
        accountType: 'dealer',
        subscriptionStatus: 'active',
        subscriptionExpiry: now.toISOString()
      };
      expect((0, _subscriptionService.hasActiveSubscription)(user)).toBe(false);
      _mockdate.default.reset();
    });
  });
  describe('isInTrialPeriod', function () {
    test('should return false for null/undefined user', function () {
      expect((0, _subscriptionService.isInTrialPeriod)(null)).toBe(false);
      expect((0, _subscriptionService.isInTrialPeriod)(undefined)).toBe(false);
    });
    test('should return false for inactive subscription', function () {
      var user = {
        id: 'user-123',
        accountType: 'dealer',
        subscriptionStatus: 'expired',
        paymentStatus: 'trial'
      };
      expect((0, _subscriptionService.isInTrialPeriod)(user)).toBe(false);
    });
    test('should return true for active subscription with trial payment status', function () {
      var user = {
        id: 'user-123',
        accountType: 'dealer',
        subscriptionStatus: 'active',
        subscriptionExpiry: new Date(Date.now() + 86400000).toISOString(),
        paymentStatus: 'trial'
      };
      expect((0, _subscriptionService.isInTrialPeriod)(user)).toBe(true);
    });
    test('should return false for active subscription with paid payment status', function () {
      var user = {
        id: 'user-123',
        accountType: 'dealer',
        subscriptionStatus: 'active',
        subscriptionExpiry: new Date(Date.now() + 86400000).toISOString(),
        paymentStatus: 'paid'
      };
      expect((0, _subscriptionService.isInTrialPeriod)(user)).toBe(false);
    });
    test('should handle legacy trial detection with less than 7 days remaining', function () {
      var sixDaysFromNow = new Date();
      sixDaysFromNow.setDate(sixDaysFromNow.getDate() + 6);
      var user = {
        id: 'user-123',
        accountType: 'dealer',
        subscriptionStatus: 'active',
        subscriptionExpiry: sixDaysFromNow.toISOString(),
        paymentStatus: 'none'
      };
      expect((0, _subscriptionService.isInTrialPeriod)(user)).toBe(true);
    });
    test('should handle legacy trial detection with more than 7 days remaining', function () {
      var tenDaysFromNow = new Date();
      tenDaysFromNow.setDate(tenDaysFromNow.getDate() + 10);
      var user = {
        id: 'user-123',
        accountType: 'dealer',
        subscriptionStatus: 'active',
        subscriptionExpiry: tenDaysFromNow.toISOString(),
        paymentStatus: 'none'
      };
      expect((0, _subscriptionService.isInTrialPeriod)(user)).toBe(false);
    });
    test('should handle missing payment status', function () {
      var sixDaysFromNow = new Date();
      sixDaysFromNow.setDate(sixDaysFromNow.getDate() + 6);
      var user = {
        id: 'user-123',
        accountType: 'dealer',
        subscriptionStatus: 'active',
        subscriptionExpiry: sixDaysFromNow.toISOString()
      };
      expect((0, _subscriptionService.isInTrialPeriod)(user)).toBe(true);
    });
    test('should handle edge case with exactly 7 days remaining', function () {
      var sevenDaysFromNow = new Date();
      sevenDaysFromNow.setDate(sevenDaysFromNow.getDate() + 7);
      var user = {
        id: 'user-123',
        accountType: 'dealer',
        subscriptionStatus: 'active',
        subscriptionExpiry: sevenDaysFromNow.toISOString(),
        paymentStatus: 'none'
      };
      expect((0, _subscriptionService.isInTrialPeriod)(user)).toBe(false);
    });
    test('should handle invalid expiry date', function () {
      var user = {
        id: 'user-123',
        accountType: 'dealer',
        subscriptionStatus: 'active',
        subscriptionExpiry: 'invalid-date',
        paymentStatus: 'none'
      };
      expect((0, _subscriptionService.isInTrialPeriod)(user)).toBe(false);
    });
  });
  describe('getSubscriptionTimeRemaining', function () {
    test('should return null for null/undefined user', function () {
      expect((0, _subscriptionService.getSubscriptionTimeRemaining)(null)).toBeNull();
      expect((0, _subscriptionService.getSubscriptionTimeRemaining)(undefined)).toBeNull();
    });
    test('should return null for inactive subscription', function () {
      var user = {
        id: 'user-123',
        accountType: 'dealer',
        subscriptionStatus: 'expired',
        subscriptionExpiry: new Date(Date.now() + 86400000).toISOString()
      };
      expect((0, _subscriptionService.getSubscriptionTimeRemaining)(user)).toBeNull();
    });
    test('should return null for missing expiry date', function () {
      var user = {
        id: 'user-123',
        accountType: 'dealer',
        subscriptionStatus: 'active'
      };
      expect((0, _subscriptionService.getSubscriptionTimeRemaining)(user)).toBeNull();
    });
    test('should return correct time remaining for future expiry', function () {
      var now = new Date('2025-07-15T12:00:00Z');
      _mockdate.default.set(now);
      var expiryDate = new Date(now);
      expiryDate.setDate(expiryDate.getDate() + 2);
      expiryDate.setHours(expiryDate.getHours() + 6);
      var user = {
        id: 'user-123',
        accountType: 'dealer',
        subscriptionStatus: 'active',
        subscriptionExpiry: expiryDate.toISOString()
      };
      var timeRemaining = (0, _subscriptionService.getSubscriptionTimeRemaining)(user);
      expect(timeRemaining).toEqual({
        days: 2,
        hours: 6
      });
      _mockdate.default.reset();
    });
    test('should return zero days and hours for expired subscription', function () {
      var now = new Date('2025-07-15T12:00:00Z');
      _mockdate.default.set(now);
      var expiryDate = new Date(now);
      expiryDate.setDate(expiryDate.getDate() - 1);
      var user = {
        id: 'user-123',
        accountType: 'dealer',
        subscriptionStatus: 'active',
        subscriptionExpiry: expiryDate.toISOString()
      };
      var timeRemaining = (0, _subscriptionService.getSubscriptionTimeRemaining)(user);
      expect(timeRemaining).toEqual({
        days: 0,
        hours: 0
      });
      _mockdate.default.reset();
    });
    test('should handle timezone differences correctly', function () {
      var utcNow = new Date('2025-07-15T12:00:00Z');
      _mockdate.default.set(utcNow);
      var utcExpiry = new Date(utcNow);
      utcExpiry.setDate(utcExpiry.getDate() + 1);
      var user = {
        id: 'user-123',
        accountType: 'dealer',
        subscriptionStatus: 'active',
        subscriptionExpiry: utcExpiry.toISOString()
      };
      var timeRemaining = (0, _subscriptionService.getSubscriptionTimeRemaining)(user);
      expect(timeRemaining).toEqual({
        days: 1,
        hours: 0
      });
      _mockdate.default.reset();
    });
    test('should handle DST transitions correctly', function () {
      var beforeDst = new Date('2025-03-08T12:00:00Z');
      _mockdate.default.set(beforeDst);
      var afterDst = new Date(beforeDst);
      afterDst.setDate(afterDst.getDate() + 2);
      var user = {
        id: 'user-123',
        accountType: 'dealer',
        subscriptionStatus: 'active',
        subscriptionExpiry: afterDst.toISOString()
      };
      var timeRemaining = (0, _subscriptionService.getSubscriptionTimeRemaining)(user);
      expect(timeRemaining == null ? void 0 : timeRemaining.days).toBeGreaterThanOrEqual(1);
      expect(timeRemaining == null ? void 0 : timeRemaining.days).toBeLessThanOrEqual(2);
      _mockdate.default.reset();
    });
    test('should handle invalid expiry date', function () {
      var user = {
        id: 'user-123',
        accountType: 'dealer',
        subscriptionStatus: 'active',
        subscriptionExpiry: 'invalid-date'
      };
      expect((0, _subscriptionService.getSubscriptionTimeRemaining)(user)).toBeNull();
    });
  });
  describe('isSubscriptionExpired', function () {
    test('should return false for null/undefined user', function () {
      expect((0, _subscriptionService.isSubscriptionExpired)(null)).toBe(false);
      expect((0, _subscriptionService.isSubscriptionExpired)(undefined)).toBe(false);
    });
    test('should return false for collector account type', function () {
      var user = {
        id: 'user-123',
        accountType: 'collector',
        subscriptionStatus: 'expired',
        subscriptionExpiry: new Date(Date.now() - 86400000).toISOString()
      };
      expect((0, _subscriptionService.isSubscriptionExpired)(user)).toBe(false);
    });
    test('should return true for expired status', function () {
      var user = {
        id: 'user-123',
        accountType: 'dealer',
        subscriptionStatus: 'expired',
        subscriptionExpiry: new Date(Date.now() + 86400000).toISOString()
      };
      expect((0, _subscriptionService.isSubscriptionExpired)(user)).toBe(true);
    });
    test('should return true for past expiry date', function () {
      var user = {
        id: 'user-123',
        accountType: 'dealer',
        subscriptionStatus: 'active',
        subscriptionExpiry: new Date(Date.now() - 86400000).toISOString()
      };
      expect((0, _subscriptionService.isSubscriptionExpired)(user)).toBe(true);
    });
    test('should return false for future expiry date', function () {
      var user = {
        id: 'user-123',
        accountType: 'dealer',
        subscriptionStatus: 'active',
        subscriptionExpiry: new Date(Date.now() + 86400000).toISOString()
      };
      expect((0, _subscriptionService.isSubscriptionExpired)(user)).toBe(false);
    });
    test('should return false for missing expiry date', function () {
      var user = {
        id: 'user-123',
        accountType: 'dealer',
        subscriptionStatus: 'active'
      };
      expect((0, _subscriptionService.isSubscriptionExpired)(user)).toBe(false);
    });
    test('should handle expiry date at exact current time', function () {
      var now = new Date('2025-07-15T12:00:00Z');
      _mockdate.default.set(now);
      var user = {
        id: 'user-123',
        accountType: 'dealer',
        subscriptionStatus: 'active',
        subscriptionExpiry: now.toISOString()
      };
      expect((0, _subscriptionService.isSubscriptionExpired)(user)).toBe(true);
      _mockdate.default.reset();
    });
    test('should handle invalid date format', function () {
      var user = {
        id: 'user-123',
        accountType: 'dealer',
        subscriptionStatus: 'active',
        subscriptionExpiry: 'invalid-date'
      };
      expect((0, _subscriptionService.isSubscriptionExpired)(user)).toBe(false);
    });
  });
  describe('getSubscriptionDetails', function () {
    test('should return null for null/undefined user', function () {
      expect((0, _subscriptionService.getSubscriptionDetails)(null)).toBeNull();
      expect((0, _subscriptionService.getSubscriptionDetails)(undefined)).toBeNull();
    });
    test('should return null for collector account type', function () {
      var user = {
        id: 'user-123',
        accountType: 'collector'
      };
      expect((0, _subscriptionService.getSubscriptionDetails)(user)).toBeNull();
    });
    test('should return correct details for dealer with active subscription', function () {
      var now = new Date('2025-07-15T12:00:00Z');
      _mockdate.default.set(now);
      var expiryDate = new Date(now);
      expiryDate.setDate(expiryDate.getDate() + 30);
      var user = {
        id: 'user-123',
        accountType: 'dealer',
        subscriptionStatus: 'active',
        subscriptionExpiry: expiryDate.toISOString(),
        paymentStatus: 'paid'
      };
      var details = (0, _subscriptionService.getSubscriptionDetails)(user);
      expect(details).toEqual({
        accountType: 'dealer',
        status: 'active',
        expiry: expect.any(Date),
        isActive: true,
        timeRemaining: {
          days: 30,
          hours: 0
        },
        plan: expect.objectContaining({
          id: 'dealer-annual',
          type: 'dealer',
          duration: 'annual'
        }),
        isPaid: true,
        isTrialPeriod: false
      });
      _mockdate.default.reset();
    });
    test('should return correct details for organizer with active subscription', function () {
      var now = new Date('2025-07-15T12:00:00Z');
      _mockdate.default.set(now);
      var expiryDate = new Date(now);
      expiryDate.setDate(expiryDate.getDate() + 30);
      var user = {
        id: 'user-123',
        accountType: 'organizer',
        subscriptionStatus: 'active',
        subscriptionExpiry: expiryDate.toISOString(),
        paymentStatus: 'paid'
      };
      var details = (0, _subscriptionService.getSubscriptionDetails)(user);
      expect(details).toEqual({
        accountType: 'organizer',
        status: 'active',
        expiry: expect.any(Date),
        isActive: true,
        timeRemaining: {
          days: 30,
          hours: 0
        },
        plan: expect.objectContaining({
          id: 'organizer-annual',
          type: 'organizer',
          duration: 'annual'
        }),
        isPaid: true,
        isTrialPeriod: false
      });
      _mockdate.default.reset();
    });
    test('should handle expired subscription', function () {
      var now = new Date('2025-07-15T12:00:00Z');
      _mockdate.default.set(now);
      var expiryDate = new Date(now);
      expiryDate.setDate(expiryDate.getDate() - 30);
      var user = {
        id: 'user-123',
        accountType: 'dealer',
        subscriptionStatus: 'active',
        subscriptionExpiry: expiryDate.toISOString(),
        paymentStatus: 'paid'
      };
      var details = (0, _subscriptionService.getSubscriptionDetails)(user);
      expect(details).toEqual({
        accountType: 'dealer',
        status: 'active',
        expiry: expect.any(Date),
        isActive: false,
        timeRemaining: {
          days: 0,
          hours: 0
        },
        plan: expect.objectContaining({
          id: 'dealer-annual',
          type: 'dealer',
          duration: 'annual'
        }),
        isPaid: true,
        isTrialPeriod: false
      });
      _mockdate.default.reset();
    });
    test('should handle trial subscription', function () {
      var now = new Date('2025-07-15T12:00:00Z');
      _mockdate.default.set(now);
      var expiryDate = new Date(now);
      expiryDate.setDate(expiryDate.getDate() + 5);
      var user = {
        id: 'user-123',
        accountType: 'dealer',
        subscriptionStatus: 'active',
        subscriptionExpiry: expiryDate.toISOString(),
        paymentStatus: 'trial'
      };
      var details = (0, _subscriptionService.getSubscriptionDetails)(user);
      expect(details).toEqual({
        accountType: 'dealer',
        status: 'active',
        expiry: expect.any(Date),
        isActive: true,
        timeRemaining: {
          days: 5,
          hours: 0
        },
        plan: expect.objectContaining({
          id: 'dealer-annual',
          type: 'dealer',
          duration: 'annual'
        }),
        isPaid: false,
        isTrialPeriod: true
      });
      _mockdate.default.reset();
    });
    test('should handle missing expiry date', function () {
      var user = {
        id: 'user-123',
        accountType: 'dealer',
        subscriptionStatus: 'active',
        paymentStatus: 'paid'
      };
      var details = (0, _subscriptionService.getSubscriptionDetails)(user);
      expect(details).toEqual({
        accountType: 'dealer',
        status: 'active',
        expiry: null,
        isActive: false,
        timeRemaining: null,
        plan: expect.objectContaining({
          id: 'dealer-annual',
          type: 'dealer',
          duration: 'annual'
        }),
        isPaid: true,
        isTrialPeriod: false
      });
    });
    test('should handle corrupted expiry date', function () {
      var _details$expiry;
      var user = {
        id: 'user-123',
        accountType: 'dealer',
        subscriptionStatus: 'active',
        subscriptionExpiry: 'invalid-date',
        paymentStatus: 'paid'
      };
      var details = (0, _subscriptionService.getSubscriptionDetails)(user);
      expect(details == null ? void 0 : details.expiry).toBeInstanceOf(Date);
      expect(Number.isNaN(details == null || (_details$expiry = details.expiry) == null ? void 0 : _details$expiry.getTime())).toBe(true);
      expect(details == null ? void 0 : details.isActive).toBe(false);
      expect(details == null ? void 0 : details.timeRemaining).toBeNull();
    });
    test('should handle missing payment status', function () {
      var now = new Date('2025-07-15T12:00:00Z');
      _mockdate.default.set(now);
      var expiryDate = new Date(now);
      expiryDate.setDate(expiryDate.getDate() + 30);
      var user = {
        id: 'user-123',
        accountType: 'dealer',
        subscriptionStatus: 'active',
        subscriptionExpiry: expiryDate.toISOString()
      };
      var details = (0, _subscriptionService.getSubscriptionDetails)(user);
      expect(details == null ? void 0 : details.isPaid).toBe(true);
      expect(details == null ? void 0 : details.isTrialPeriod).toBe(false);
      _mockdate.default.reset();
    });
    test('should handle unknown account type', function () {
      var user = {
        id: 'user-123',
        accountType: 'unknown',
        subscriptionStatus: 'active',
        subscriptionExpiry: new Date(Date.now() + 86400000).toISOString()
      };
      var details = (0, _subscriptionService.getSubscriptionDetails)(user);
      expect(details == null ? void 0 : details.plan).toBeNull();
    });
  });
  describe('initiateSubscriptionPurchase', function () {
    beforeEach(function () {
      mockSupabase.from.mockReturnThis();
      mockSupabase.update.mockReturnThis();
      mockSupabase.eq.mockReturnThis();
      mockSupabase.select.mockReturnThis();
      mockSupabase.single.mockResolvedValue({
        data: {
          subscription_expiry: new Date(Date.now() + 86400000 * 30).toISOString()
        },
        error: null
      });
      mockStripePaymentService.createPaymentSheetForSubscription.mockResolvedValue({
        success: true,
        transactionId: 'mock-transaction-id'
      });
    });
    test('should handle invalid plan ID', (0, _asyncToGenerator2.default)(function* () {
      var result = yield (0, _subscriptionService.initiateSubscriptionPurchase)(mockUserId, mockInvalidPlanId);
      expect(result).toEqual({
        success: false,
        error: 'Invalid subscription plan selected'
      });
      expect(mockSupabase.from).not.toHaveBeenCalled();
      expect(mockStripePaymentService.createPaymentSheetForSubscription).not.toHaveBeenCalled();
    }));
    test('should use Stripe for payment when context provided', (0, _asyncToGenerator2.default)(function* () {
      var mockStripeCtx = {
        initPaymentSheet: jest.fn(),
        presentPaymentSheet: jest.fn()
      };
      var result = yield (0, _subscriptionService.initiateSubscriptionPurchase)(mockUserId, mockPlanId, mockStripeCtx);
      expect(result.success).toBe(true);
      expect(result.transactionId).toBe('mock-transaction-id');
      expect(mockStripePaymentService.createPaymentSheetForSubscription).toHaveBeenCalledWith(mockUserId, mockPlanId, mockStripeCtx.initPaymentSheet, mockStripeCtx.presentPaymentSheet);
      expect(mockSupabase.from).toHaveBeenCalledWith('profiles');
      expect(mockSupabase.update).toHaveBeenCalledWith({
        payment_status: 'paid'
      });
    }));
    test('should handle Stripe payment failure', (0, _asyncToGenerator2.default)(function* () {
      mockStripePaymentService.createPaymentSheetForSubscription.mockResolvedValue({
        success: false,
        error: 'Payment failed'
      });
      var mockStripeCtx = {
        initPaymentSheet: jest.fn(),
        presentPaymentSheet: jest.fn()
      };
      var result = yield (0, _subscriptionService.initiateSubscriptionPurchase)(mockUserId, mockPlanId, mockStripeCtx);
      expect(result).toEqual({
        success: false,
        error: 'Payment failed'
      });
      expect(mockSupabase.update).not.toHaveBeenCalled();
    }));
    test('should handle database error after successful payment', (0, _asyncToGenerator2.default)(function* () {
      mockSupabase.single.mockResolvedValue({
        data: null,
        error: {
          message: 'Database error'
        }
      });
      var mockStripeCtx = {
        initPaymentSheet: jest.fn(),
        presentPaymentSheet: jest.fn()
      };
      var result = yield (0, _subscriptionService.initiateSubscriptionPurchase)(mockUserId, mockPlanId, mockStripeCtx);
      expect(result.success).toBe(true);
      expect(result.transactionId).toBe('mock-transaction-id');
      expect(consoleErrorSpy).toHaveBeenCalledWith('Error updating payment status:', expect.anything());
    }));
    test('should use mock payment flow when no Stripe context provided', (0, _asyncToGenerator2.default)(function* () {
      var result = yield (0, _subscriptionService.initiateSubscriptionPurchase)(mockUserId, mockPlanId);
      expect(result.success).toBe(true);
      expect(result.transactionId).toMatch(/^tx_\d+_\d+$/);
      expect(mockStripePaymentService.createPaymentSheetForSubscription).not.toHaveBeenCalled();
      expect(mockSupabase.from).toHaveBeenCalledWith('profiles');
      expect(mockSupabase.update).toHaveBeenCalledWith(expect.objectContaining({
        account_type: 'dealer',
        subscription_status: 'active',
        payment_status: 'paid',
        subscription_expiry: expect.any(String)
      }));
    }));
    test('should handle database error in mock payment flow', (0, _asyncToGenerator2.default)(function* () {
      mockSupabase.eq.mockReturnValue({
        error: {
          message: 'Database error'
        },
        data: null
      });
      var result = yield (0, _subscriptionService.initiateSubscriptionPurchase)(mockUserId, mockPlanId);
      expect(result).toEqual({
        success: false,
        error: 'Failed to update subscription status'
      });
      expect(consoleErrorSpy).toHaveBeenCalledWith('Error updating subscription status:', expect.anything());
    }));
    test('should handle network timeout', (0, _asyncToGenerator2.default)(function* () {
      mockSupabase.eq.mockImplementation(function () {
        return new Promise(function (_, reject) {
          setTimeout(function () {
            reject(new Error('Network timeout'));
          }, 30000);
        });
      });
      jest.useFakeTimers();
      var purchasePromise = (0, _subscriptionService.initiateSubscriptionPurchase)(mockUserId, mockPlanId);
      jest.advanceTimersByTime(31000);
      var result = yield purchasePromise;
      expect(result.success).toBe(false);
      expect(result.error).toBe('Network timeout');
      jest.useRealTimers();
    }));
    test('should handle unexpected errors', (0, _asyncToGenerator2.default)(function* () {
      mockSupabase.from.mockImplementation(function () {
        throw new Error('Unexpected error');
      });
      var result = yield (0, _subscriptionService.initiateSubscriptionPurchase)(mockUserId, mockPlanId);
      expect(result.success).toBe(false);
      expect(result.error).toBe('Unexpected error');
      expect(consoleErrorSpy).toHaveBeenCalledWith('Error processing subscription purchase:', expect.any(Error));
    }));
  });
  describe('renewSubscription', function () {
    test('should execute renewal process successfully', (0, _asyncToGenerator2.default)(function* () {
      mockSupabase.from.mockReturnThis();
      mockSupabase.update.mockReturnThis();
      mockSupabase.eq.mockReturnThis();
      mockSupabase.single.mockResolvedValue({
        data: {
          subscription_expiry: new Date(Date.now() + 86400000 * 30).toISOString()
        },
        error: null
      });
      var result = yield (0, _subscriptionService.renewSubscription)(mockUserId, mockPlanId);
      expect(result.success).toBe(true);
      expect(result.transactionId).toMatch(/^tx_\d+_\d+$/);
      expect(mockSupabase.from).toHaveBeenCalledWith('profiles');
      expect(mockSupabase.update).toHaveBeenCalledWith(expect.objectContaining({
        account_type: 'dealer',
        subscription_status: 'active',
        payment_status: 'paid'
      }));
    }));
  });
  describe('cancelSubscription', function () {
    beforeEach(function () {
      mockSupabase.from.mockReturnThis();
      mockSupabase.select.mockReturnThis();
      mockSupabase.update.mockReturnThis();
      mockSupabase.eq.mockReturnThis();
      mockSupabase.single.mockResolvedValue({
        data: {
          subscription_expiry: new Date(Date.now() + 86400000).toISOString(),
          account_type: 'dealer',
          payment_status: 'paid'
        },
        error: null
      });
    });
    test('should cancel subscription successfully', (0, _asyncToGenerator2.default)(function* () {
      var result = yield (0, _subscriptionService.cancelSubscription)(mockUserId);
      expect(result).toEqual({
        success: true
      });
      expect(mockSupabase.from).toHaveBeenCalledWith('profiles');
      expect(mockSupabase.select).toHaveBeenCalledWith('subscription_expiry, account_type, payment_status');
      expect(mockSupabase.update).toHaveBeenCalledWith({
        subscription_status: 'expired',
        payment_status: 'paid',
        updated_at: expect.any(String)
      });
    }));
    test('should reset payment status for trial subscriptions', (0, _asyncToGenerator2.default)(function* () {
      mockSupabase.single.mockResolvedValueOnce({
        data: {
          subscription_expiry: new Date(Date.now() + 86400000).toISOString(),
          account_type: 'dealer',
          payment_status: 'trial'
        },
        error: null
      });
      var result = yield (0, _subscriptionService.cancelSubscription)(mockUserId);
      expect(result).toEqual({
        success: true
      });
      expect(mockSupabase.update).toHaveBeenCalledWith({
        subscription_status: 'expired',
        payment_status: 'none',
        updated_at: expect.any(String)
      });
    }));
    test('should handle fetch error', (0, _asyncToGenerator2.default)(function* () {
      mockSupabase.single.mockResolvedValueOnce({
        data: null,
        error: {
          message: 'Failed to fetch user data'
        }
      });
      var result = yield (0, _subscriptionService.cancelSubscription)(mockUserId);
      expect(result).toEqual({
        success: false,
        error: 'Failed to fetch user data'
      });
      expect(mockSupabase.update).not.toHaveBeenCalled();
      expect(consoleErrorSpy).toHaveBeenCalled();
    }));
    test('should handle update error', (0, _asyncToGenerator2.default)(function* () {
      mockSupabase.single.mockResolvedValueOnce({
        data: {
          subscription_expiry: new Date(Date.now() + 86400000).toISOString(),
          account_type: 'dealer',
          payment_status: 'paid'
        },
        error: null
      });
      mockSupabase.eq.mockReturnValueOnce(mockSupabase);
      mockSupabase.eq.mockReturnValueOnce({
        error: {
          message: 'Failed to update subscription'
        },
        data: null
      });
      var result = yield (0, _subscriptionService.cancelSubscription)(mockUserId);
      expect(result).toEqual({
        success: false,
        error: 'Failed to update subscription'
      });
      expect(consoleErrorSpy).toHaveBeenCalled();
    }));
    test('should handle unexpected errors', (0, _asyncToGenerator2.default)(function* () {
      mockSupabase.from.mockImplementation(function () {
        throw new Error('Unexpected error');
      });
      var result = yield (0, _subscriptionService.cancelSubscription)(mockUserId);
      expect(result).toEqual({
        success: false,
        error: 'Unexpected error'
      });
      expect(consoleErrorSpy).toHaveBeenCalledWith('Error cancelling subscription:', expect.any(Error));
    }));
  });
  describe('checkAndUpdateSubscriptionStatus', function () {
    beforeEach(function () {
      mockSupabase.from.mockReturnThis();
      mockSupabase.select.mockReturnThis();
      mockSupabase.update.mockReturnThis();
      mockSupabase.eq.mockReturnThis();
      mockSupabase.single.mockResolvedValue({
        data: {
          subscription_expiry: new Date(Date.now() + 86400000).toISOString(),
          subscription_status: 'active',
          account_type: 'dealer',
          payment_status: 'paid'
        },
        error: null
      });
    });
    test('should not update active subscription with future expiry', (0, _asyncToGenerator2.default)(function* () {
      var result = yield (0, _subscriptionService.checkAndUpdateSubscriptionStatus)(mockUserId);
      expect(result).toBe(false);
      expect(mockSupabase.from).toHaveBeenCalledWith('profiles');
      expect(mockSupabase.select).toHaveBeenCalledWith('subscription_expiry, subscription_status, account_type, payment_status');
      expect(mockSupabase.update).not.toHaveBeenCalled();
    }));
    test('should update expired subscription', (0, _asyncToGenerator2.default)(function* () {
      mockSupabase.single.mockResolvedValueOnce({
        data: {
          subscription_expiry: new Date(Date.now() - 86400000).toISOString(),
          subscription_status: 'active',
          account_type: 'dealer',
          payment_status: 'paid'
        },
        error: null
      });
      mockSupabase.single.mockResolvedValueOnce({
        data: {},
        error: null
      });
      var result = yield (0, _subscriptionService.checkAndUpdateSubscriptionStatus)(mockUserId);
      expect(result).toBe(true);
      expect(mockSupabase.update).toHaveBeenCalledWith({
        subscription_status: 'expired',
        payment_status: 'none',
        updated_at: expect.any(String)
      });
    }));
    test('should not update already expired subscription', (0, _asyncToGenerator2.default)(function* () {
      mockSupabase.single.mockResolvedValueOnce({
        data: {
          subscription_expiry: new Date(Date.now() - 86400000).toISOString(),
          subscription_status: 'expired',
          account_type: 'dealer',
          payment_status: 'none'
        },
        error: null
      });
      var result = yield (0, _subscriptionService.checkAndUpdateSubscriptionStatus)(mockUserId);
      expect(result).toBe(false);
      expect(mockSupabase.update).not.toHaveBeenCalled();
    }));
    test('should not update collector account', (0, _asyncToGenerator2.default)(function* () {
      mockSupabase.single.mockResolvedValueOnce({
        data: {
          subscription_expiry: new Date(Date.now() - 86400000).toISOString(),
          subscription_status: 'active',
          account_type: 'collector',
          payment_status: 'none'
        },
        error: null
      });
      var result = yield (0, _subscriptionService.checkAndUpdateSubscriptionStatus)(mockUserId);
      expect(result).toBe(false);
      expect(mockSupabase.update).not.toHaveBeenCalled();
    }));
    test('should handle fetch error', (0, _asyncToGenerator2.default)(function* () {
      mockSupabase.single.mockResolvedValueOnce({
        data: null,
        error: {
          message: 'Failed to fetch user data'
        }
      });
      var result = yield (0, _subscriptionService.checkAndUpdateSubscriptionStatus)(mockUserId);
      expect(result).toBe(false);
      expect(mockSupabase.update).not.toHaveBeenCalled();
    }));
    test('should handle update error', (0, _asyncToGenerator2.default)(function* () {
      mockSupabase.single.mockResolvedValueOnce({
        data: {
          subscription_expiry: new Date(Date.now() - 86400000).toISOString(),
          subscription_status: 'active',
          account_type: 'dealer',
          payment_status: 'paid'
        },
        error: null
      });
      mockSupabase.single.mockResolvedValueOnce({
        data: null,
        error: {
          message: 'Failed to update subscription'
        }
      });
      var result = yield (0, _subscriptionService.checkAndUpdateSubscriptionStatus)(mockUserId);
      expect(result).toBe(false);
      expect(consoleErrorSpy).not.toHaveBeenCalled();
    }));
    test('should handle missing user data', (0, _asyncToGenerator2.default)(function* () {
      mockSupabase.from.mockClear();
      mockSupabase.select.mockClear();
      mockSupabase.eq.mockClear();
      mockSupabase.update.mockClear();
      mockSupabase.single.mockResolvedValueOnce({
        data: null,
        error: null
      });
      var result = yield (0, _subscriptionService.checkAndUpdateSubscriptionStatus)(mockUserId);
      expect(result).toBe(false);
      expect(mockSupabase.update).not.toHaveBeenCalled();
    }));
    test('should handle unexpected errors', (0, _asyncToGenerator2.default)(function* () {
      mockSupabase.from.mockImplementation(function () {
        throw new Error('Unexpected error');
      });
      var result = yield (0, _subscriptionService.checkAndUpdateSubscriptionStatus)(mockUserId);
      expect(result).toBe(false);
      expect(consoleErrorSpy).toHaveBeenCalledWith('Error checking subscription status:', expect.any(Error));
    }));
    test('should handle missing expiry date', (0, _asyncToGenerator2.default)(function* () {
      mockSupabase.single.mockResolvedValueOnce({
        data: {
          subscription_status: 'active',
          account_type: 'dealer',
          payment_status: 'paid'
        },
        error: null
      });
      var result = yield (0, _subscriptionService.checkAndUpdateSubscriptionStatus)(mockUserId);
      expect(result).toBe(false);
      expect(mockSupabase.update).not.toHaveBeenCalled();
    }));
    test('should handle invalid expiry date', (0, _asyncToGenerator2.default)(function* () {
      mockSupabase.single.mockResolvedValueOnce({
        data: {
          subscription_expiry: 'invalid-date',
          subscription_status: 'active',
          account_type: 'dealer',
          payment_status: 'paid'
        },
        error: null
      });
      var result = yield (0, _subscriptionService.checkAndUpdateSubscriptionStatus)(mockUserId);
      expect(result).toBe(false);
      expect(mockSupabase.update).not.toHaveBeenCalled();
    }));
  });
  describe('getAvailablePlans', function () {
    test('should return dealer plans for dealer account type', function () {
      var plans = (0, _subscriptionService.getAvailablePlans)('dealer');
      expect(plans.length).toBe(2);
      expect(plans.every(function (plan) {
        return plan.type === 'dealer';
      })).toBe(true);
      expect(plans.map(function (plan) {
        return plan.id;
      })).toEqual(expect.arrayContaining(['dealer-monthly', 'dealer-annual']));
    });
    test('should return organizer plans for organizer account type', function () {
      var plans = (0, _subscriptionService.getAvailablePlans)('organizer');
      expect(plans.length).toBe(2);
      expect(plans.every(function (plan) {
        return plan.type === 'organizer';
      })).toBe(true);
      expect(plans.map(function (plan) {
        return plan.id;
      })).toEqual(expect.arrayContaining(['organizer-monthly', 'organizer-annual']));
    });
  });
  describe('formatExpiryDate', function () {
    test('should format date string correctly', function () {
      var formatted = (0, _subscriptionService.formatExpiryDate)('2025-07-15T12:00:00Z');
      expect(formatted).toMatch(/July 15, 2025/);
    });
    test('should format Date object correctly', function () {
      var formatted = (0, _subscriptionService.formatExpiryDate)(new Date('2025-07-15T12:00:00Z'));
      expect(formatted).toMatch(/July 15, 2025/);
    });
    test('should handle null date', function () {
      var formatted = (0, _subscriptionService.formatExpiryDate)(null);
      expect(formatted).toBe('No expiration date');
    });
    test('should handle invalid date string', function () {
      var formatted = (0, _subscriptionService.formatExpiryDate)('invalid-date');
      expect(formatted).toMatch(/Invalid Date/);
    });
  });
  describe('canAccessDealerFeatures', function () {
    test('should return false for null/undefined user', function () {
      expect((0, _subscriptionService.canAccessDealerFeatures)(null)).toBe(false);
      expect((0, _subscriptionService.canAccessDealerFeatures)(undefined)).toBe(false);
    });
    test('should return false for collector account type', function () {
      var user = {
        id: 'user-123',
        accountType: 'collector'
      };
      expect((0, _subscriptionService.canAccessDealerFeatures)(user)).toBe(false);
    });
    test('should return false for dealer with inactive subscription', function () {
      var user = {
        id: 'user-123',
        accountType: 'dealer',
        subscriptionStatus: 'expired'
      };
      expect((0, _subscriptionService.canAccessDealerFeatures)(user)).toBe(false);
    });
    test('should return true for dealer with active subscription', function () {
      var user = {
        id: 'user-123',
        accountType: 'dealer',
        subscriptionStatus: 'active',
        subscriptionExpiry: new Date(Date.now() + 86400000).toISOString()
      };
      expect((0, _subscriptionService.canAccessDealerFeatures)(user)).toBe(true);
    });
    test('should return true for organizer with active subscription', function () {
      var user = {
        id: 'user-123',
        accountType: 'organizer',
        subscriptionStatus: 'active',
        subscriptionExpiry: new Date(Date.now() + 86400000).toISOString()
      };
      expect((0, _subscriptionService.canAccessDealerFeatures)(user)).toBe(true);
    });
    test('should return false for organizer with inactive subscription', function () {
      var user = {
        id: 'user-123',
        accountType: 'organizer',
        subscriptionStatus: 'expired'
      };
      expect((0, _subscriptionService.canAccessDealerFeatures)(user)).toBe(false);
    });
  });
  describe('canAccessOrganizerFeatures', function () {
    test('should return false for null/undefined user', function () {
      expect((0, _subscriptionService.canAccessOrganizerFeatures)(null)).toBe(false);
      expect((0, _subscriptionService.canAccessOrganizerFeatures)(undefined)).toBe(false);
    });
    test('should return false for collector account type', function () {
      var user = {
        id: 'user-123',
        accountType: 'collector'
      };
      expect((0, _subscriptionService.canAccessOrganizerFeatures)(user)).toBe(false);
    });
    test('should return false for dealer account type', function () {
      var user = {
        id: 'user-123',
        accountType: 'dealer',
        subscriptionStatus: 'active',
        subscriptionExpiry: new Date(Date.now() + 86400000).toISOString()
      };
      expect((0, _subscriptionService.canAccessOrganizerFeatures)(user)).toBe(false);
    });
    test('should return false for organizer with inactive subscription', function () {
      var user = {
        id: 'user-123',
        accountType: 'organizer',
        subscriptionStatus: 'expired'
      };
      expect((0, _subscriptionService.canAccessOrganizerFeatures)(user)).toBe(false);
    });
    test('should return true for organizer with active subscription', function () {
      var user = {
        id: 'user-123',
        accountType: 'organizer',
        subscriptionStatus: 'active',
        subscriptionExpiry: new Date(Date.now() + 86400000).toISOString()
      };
      expect((0, _subscriptionService.canAccessOrganizerFeatures)(user)).toBe(true);
    });
  });
  describe('Performance Tests', function () {
    test('should efficiently process multiple subscription checks', function () {
      var userCount = 1000;
      var users = Array(userCount).fill(null).map(function (_, i) {
        return {
          id: `user-${i}`,
          accountType: i % 3 === 0 ? 'collector' : i % 3 === 1 ? 'dealer' : 'organizer',
          subscriptionStatus: i % 5 === 0 ? 'expired' : 'active',
          subscriptionExpiry: i % 7 === 0 ? new Date(Date.now() - 86400000).toISOString() : new Date(Date.now() + 86400000).toISOString(),
          paymentStatus: i % 11 === 0 ? 'trial' : 'paid'
        };
      });
      var startTime = performance.now();
      users.forEach(function (user) {
        (0, _subscriptionService.hasActiveSubscription)(user);
        (0, _subscriptionService.isInTrialPeriod)(user);
        (0, _subscriptionService.getSubscriptionTimeRemaining)(user);
        (0, _subscriptionService.isSubscriptionExpired)(user);
        (0, _subscriptionService.getSubscriptionDetails)(user);
        (0, _subscriptionService.canAccessDealerFeatures)(user);
        (0, _subscriptionService.canAccessOrganizerFeatures)(user);
      });
      var endTime = performance.now();
      var duration = endTime - startTime;
      expect(duration).toBeLessThan(1000);
    });
    test('should handle concurrent subscription operations', (0, _asyncToGenerator2.default)(function* () {
      mockSupabase.from.mockReturnThis();
      mockSupabase.select.mockReturnThis();
      mockSupabase.update.mockReturnThis();
      mockSupabase.eq.mockReturnThis();
      mockSupabase.single.mockResolvedValue({
        data: {
          subscription_expiry: new Date(Date.now() - 86400000).toISOString(),
          subscription_status: 'active',
          account_type: 'dealer',
          payment_status: 'paid'
        },
        error: null
      });
      var startTime = performance.now();
      yield Promise.all([(0, _subscriptionService.checkAndUpdateSubscriptionStatus)(mockUserId), (0, _subscriptionService.checkAndUpdateSubscriptionStatus)(mockUserId), (0, _subscriptionService.checkAndUpdateSubscriptionStatus)(mockUserId), (0, _subscriptionService.cancelSubscription)(mockUserId), (0, _subscriptionService.cancelSubscription)(mockUserId), (0, _subscriptionService.initiateSubscriptionPurchase)(mockUserId, mockPlanId), (0, _subscriptionService.initiateSubscriptionPurchase)(mockUserId, mockPlanId), (0, _subscriptionService.renewSubscription)(mockUserId, mockPlanId), (0, _subscriptionService.renewSubscription)(mockUserId, mockPlanId), (0, _subscriptionService.checkAndUpdateSubscriptionStatus)(mockUserId)]);
      var endTime = performance.now();
      var duration = endTime - startTime;
      expect(duration).toBeLessThan(5000);
    }));
  });
  describe('Edge Cases', function () {
    test('should handle subscription expiring exactly at current time', function () {
      var now = new Date('2025-07-15T12:00:00Z');
      _mockdate.default.set(now);
      var user = {
        id: 'user-123',
        accountType: 'dealer',
        subscriptionStatus: 'active',
        subscriptionExpiry: now.toISOString()
      };
      expect((0, _subscriptionService.hasActiveSubscription)(user)).toBe(false);
      expect((0, _subscriptionService.isSubscriptionExpired)(user)).toBe(true);
      _mockdate.default.reset();
    });
    test('should handle subscription expiring 1 millisecond in the future', function () {
      var now = new Date('2025-07-15T12:00:00.000Z');
      _mockdate.default.set(now);
      var futureDate = new Date('2025-07-15T12:00:00.001Z');
      var user = {
        id: 'user-123',
        accountType: 'dealer',
        subscriptionStatus: 'active',
        subscriptionExpiry: futureDate.toISOString()
      };
      expect((0, _subscriptionService.hasActiveSubscription)(user)).toBe(true);
      expect((0, _subscriptionService.isSubscriptionExpired)(user)).toBe(false);
      _mockdate.default.reset();
    });
    test('should handle subscription expiring 1 millisecond in the past', function () {
      var now = new Date('2025-07-15T12:00:00.000Z');
      _mockdate.default.set(now);
      var pastDate = new Date('2025-07-15T11:59:59.999Z');
      var user = {
        id: 'user-123',
        accountType: 'dealer',
        subscriptionStatus: 'active',
        subscriptionExpiry: pastDate.toISOString()
      };
      expect((0, _subscriptionService.hasActiveSubscription)(user)).toBe(false);
      expect((0, _subscriptionService.isSubscriptionExpired)(user)).toBe(true);
      _mockdate.default.reset();
    });
    test('should handle date parsing across different timezones', function () {
      var dateInPST = '2025-07-15T12:00:00-07:00';
      var dateInEST = '2025-07-15T15:00:00-04:00';
      var dateInUTC = '2025-07-15T19:00:00Z';
      var user1 = {
        id: 'user-123',
        accountType: 'dealer',
        subscriptionStatus: 'active',
        subscriptionExpiry: dateInPST
      };
      var user2 = {
        id: 'user-123',
        accountType: 'dealer',
        subscriptionStatus: 'active',
        subscriptionExpiry: dateInEST
      };
      var user3 = {
        id: 'user-123',
        accountType: 'dealer',
        subscriptionStatus: 'active',
        subscriptionExpiry: dateInUTC
      };
      _mockdate.default.set('2025-07-15T18:00:00Z');
      expect((0, _subscriptionService.hasActiveSubscription)(user1)).toBe(true);
      expect((0, _subscriptionService.hasActiveSubscription)(user2)).toBe(true);
      expect((0, _subscriptionService.hasActiveSubscription)(user3)).toBe(true);
      _mockdate.default.set('2025-07-15T20:00:00Z');
      expect((0, _subscriptionService.isSubscriptionExpired)(user1)).toBe(true);
      expect((0, _subscriptionService.isSubscriptionExpired)(user2)).toBe(true);
      expect((0, _subscriptionService.isSubscriptionExpired)(user3)).toBe(true);
      _mockdate.default.reset();
    });
    test('should handle leap year dates correctly', function () {
      _mockdate.default.set('2024-02-28T12:00:00Z');
      var leapDayExpiry = '2024-02-29T12:00:00Z';
      var user = {
        id: 'user-123',
        accountType: 'dealer',
        subscriptionStatus: 'active',
        subscriptionExpiry: leapDayExpiry
      };
      expect((0, _subscriptionService.hasActiveSubscription)(user)).toBe(true);
      var timeRemaining = (0, _subscriptionService.getSubscriptionTimeRemaining)(user);
      expect(timeRemaining == null ? void 0 : timeRemaining.days).toBe(1);
      _mockdate.default.reset();
    });
    test('should handle daylight saving time transitions', function () {
      _mockdate.default.set('2025-03-08T12:00:00Z');
      var afterDstExpiry = '2025-03-09T12:00:00Z';
      var user = {
        id: 'user-123',
        accountType: 'dealer',
        subscriptionStatus: 'active',
        subscriptionExpiry: afterDstExpiry
      };
      expect((0, _subscriptionService.hasActiveSubscription)(user)).toBe(true);
      var timeRemaining = (0, _subscriptionService.getSubscriptionTimeRemaining)(user);
      expect(timeRemaining == null ? void 0 : timeRemaining.days).toBe(1);
      _mockdate.default.reset();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,