{"version":3,"names":["Location","cov_1udnmm8pjh","s","__importStar","require","supabase_1","async_storage_1","__importDefault","requestLocationPermissions","f","status","requestForegroundPermissionsAsync","error","console","exports","checkLocationPermissions","getForegroundPermissionsAsync","getCurrentLocation","hasPermission","b","permissionGranted","location","getCurrentPositionAsync","accuracy","Accuracy","Balanced","latitude","coords","longitude","geocodeAddress","address","results","geocodeAsync","length","reverseGeocodeCoordinates","coordinates","reverseGeocodeAsync","ZIP_CACHE_KEY_PREFIX","getZipFromCache","zipCode","raw","default","getItem","JSON","parse","err","warn","setZipCache","data","setItem","stringify","clearZipCodeCache","removeItem","info","keys","getAllKeys","zipKeys","filter","key","startsWith","multiRemove","getZipCodeCoordinates","cached","zipCodeDataFromDb","fetchError","supabase","from","select","eq","single","code","zip_code","city","state","addressInfo","newZipCodeData","region","subregion","calculateDistance","lat1","lon1","lat2","lon2","R","dLat","Math","PI","dLon","a","sin","cos","c","atan2","sqrt","calculateDistanceBetweenCoordinates","point1","point2","getNearbyZipCodes","centerZipCode","radiusMiles","centerData","Error","rpc","center_lat","center_lng","radius_miles","map","item","message","formatCoordinates","toFixed","getDirectionsUrl","destination","label","query"],"sources":["/Users/kevin/card-show-finder/src/services/locationService.ts"],"sourcesContent":["import * as Location from 'expo-location';\nimport { supabase } from '../supabase';\nimport { Coordinates, ZipCodeData } from '../types';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n/**\n * Request location permissions from the user\n * @returns Promise with boolean indicating if permissions were granted\n */\nexport const requestLocationPermissions = async (): Promise<boolean> => {\n  try {\n    const { status } = await Location.requestForegroundPermissionsAsync();\n    return status === 'granted';\n  } catch (error: any) {\n    console.error('Error requesting location permissions:', error);\n    return false;\n  }\n};\n\n/**\n * Check if location permissions are granted\n * @returns Promise with boolean indicating if permissions are granted\n */\nexport const checkLocationPermissions = async (): Promise<boolean> => {\n  try {\n    const { status } = await Location.getForegroundPermissionsAsync();\n    return status === 'granted';\n  } catch (error: any) {\n    console.error('Error checking location permissions:', error);\n    return false;\n  }\n};\n\n/**\n * Get the current location of the device\n * @returns Promise with coordinates or null if location cannot be determined\n */\nexport const getCurrentLocation = async (): Promise<Coordinates | null> => {\n  try {\n    const hasPermission = await checkLocationPermissions();\n    \n    if (!hasPermission) {\n      const permissionGranted = await requestLocationPermissions();\n      if (!permissionGranted) {\n        return null;\n      }\n    }\n    \n    const location = await Location.getCurrentPositionAsync({\n      accuracy: Location.Accuracy.Balanced,\n    });\n    \n    return {\n      latitude: location.coords.latitude,\n      longitude: location.coords.longitude,\n    };\n  } catch (error: any) {\n    console.error('Error getting current location:', error);\n    return null;\n  }\n};\n\n/**\n * Geocode an address to coordinates\n * @param address Full address string\n * @returns Promise with coordinates or null if geocoding fails\n */\nexport const geocodeAddress = async (address: string): Promise<Coordinates | null> => {\n  try {\n    const results = await Location.geocodeAsync(address);\n    \n    if (results.length === 0) {\n      return null;\n    }\n    \n    return {\n      latitude: results[0].latitude,\n      longitude: results[0].longitude,\n    };\n  } catch (error: any) {\n    console.error('Error geocoding address:', error);\n    return null;\n  }\n};\n\n/**\n * Reverse geocode coordinates to an address\n * @param coordinates Latitude and longitude\n * @returns Promise with address or null if reverse geocoding fails\n */\nexport const reverseGeocodeCoordinates = async (\n  coordinates: Coordinates\n): Promise<Location.LocationGeocodedAddress | null> => {\n  try {\n    const results = await Location.reverseGeocodeAsync({\n      latitude: coordinates.latitude,\n      longitude: coordinates.longitude,\n    });\n    \n    if (results.length === 0) {\n      return null;\n    }\n    \n    return results[0];\n  } catch (error: any) {\n    console.error('Error reverse geocoding coordinates:', error);\n    return null;\n  }\n};\n\n/**\n * AsyncStorage key prefix for caching ZIP code lookups\n */\nconst ZIP_CACHE_KEY_PREFIX = '@zip_cache:';\n\n/**\n * Retrieve ZIP code data from AsyncStorage cache\n */\nconst getZipFromCache = async (zipCode: string): Promise<ZipCodeData | null> => {\n  try {\n    const raw = await AsyncStorage.getItem(`${ZIP_CACHE_KEY_PREFIX}${zipCode}`);\n    return raw ? (JSON.parse(raw) as ZipCodeData) : null;\n  } catch (err) {\n    console.warn('[locationService] Failed to read ZIP cache', err);\n    return null;\n  }\n};\n\n/**\n * Save ZIP code data to AsyncStorage cache\n */\nconst setZipCache = async (data: ZipCodeData): Promise<void> => {\n  try {\n    await AsyncStorage.setItem(\n      `${ZIP_CACHE_KEY_PREFIX}${data.zipCode}`,\n      JSON.stringify(data)\n    );\n  } catch (err) {\n    console.warn('[locationService] Failed to write ZIP cache', err);\n  }\n};\n\n/**\n * Clear ZIP code cache from AsyncStorage\n * @param zipCode Optional specific ZIP code to clear, if not provided all ZIP caches will be cleared\n * @returns Promise<void>\n */\nexport const clearZipCodeCache = async (zipCode?: string): Promise<void> => {\n  try {\n    if (zipCode) {\n      // Clear specific ZIP code\n      await AsyncStorage.removeItem(`${ZIP_CACHE_KEY_PREFIX}${zipCode}`);\n      console.info(`[locationService] Cleared cache for ZIP code ${zipCode}`);\n    } else {\n      // Get all keys and clear only ZIP code caches\n      const keys = await AsyncStorage.getAllKeys();\n      const zipKeys = keys.filter(key => key.startsWith(ZIP_CACHE_KEY_PREFIX));\n      if (zipKeys.length > 0) {\n        await AsyncStorage.multiRemove(zipKeys);\n        console.info(\n          `[locationService] Cleared all ZIP code caches (${zipKeys.length} entries)`\n        );\n      }\n    }\n  } catch (error: any) {\n    console.error('Error clearing ZIP code cache:', error);\n  }\n};\n\n/**\n * Get coordinates for a ZIP code\n * @param zipCode ZIP code string\n * @returns Promise with ZipCodeData or null if not found\n */\nexport const getZipCodeCoordinates = async (zipCode: string): Promise<ZipCodeData | null> => {\n  try {\n    /* ---------------------------------\n     * 1. Check client-side cache first\n     * --------------------------------- */\n    const cached = await getZipFromCache(zipCode);\n    if (cached) {\n      return cached;\n    }\n\n    // First check if we have the ZIP code in our database\n    const { data: zipCodeDataFromDb, error: fetchError } = await supabase\n      .from('zip_codes') // Assuming a 'zip_codes' table\n      .select('*')\n      .eq('zip_code', zipCode)\n      .single();\n\n    if (fetchError && fetchError.code !== 'PGRST116') { // PGRST116 means no rows found\n      throw fetchError;\n    }\n\n    if (zipCodeDataFromDb) {\n      return {\n        zipCode: zipCodeDataFromDb.zip_code,\n        city: zipCodeDataFromDb.city,\n        state: zipCodeDataFromDb.state,\n        coordinates: {\n          latitude: zipCodeDataFromDb.latitude,\n          longitude: zipCodeDataFromDb.longitude,\n        },\n      };\n    }\n\n    // If not found, geocode it and save to database\n    const address = zipCode + ', USA'; // Simple address format for geocoding\n    const coordinates = await geocodeAddress(address);\n\n    if (!coordinates) {\n      return null;\n    }\n\n    // Get city and state from reverse geocoding\n    const addressInfo = await reverseGeocodeCoordinates(coordinates);\n\n    if (!addressInfo) {\n      return null;\n    }\n\n    const newZipCodeData: ZipCodeData = {\n      zipCode,\n      city: addressInfo.city || 'Unknown',\n      state: addressInfo.region || addressInfo.subregion || 'Unknown',\n      coordinates,\n    };\n\n    /**\n     * NOTE:\n     * We intentionally **skip inserting** the newly-geocoded ZIP code into the\n     * `zip_codes` table because the table is protected by an RLS policy that\n     * only allows inserts from server-side (service-role) contexts.  \n     * Trying to insert here would raise error 42501.\n     */\n    console.info(\n      `[locationService] ZIP code ${zipCode} geocoded on-device â€“ not cached in DB due to RLS.`\n    );\n\n    // Cache newly geocoded result for future requests\n    await setZipCache(newZipCodeData);\n\n    return newZipCodeData;\n  } catch (error: any) {\n    console.error('Error getting ZIP code coordinates:', error);\n    return null;\n  }\n};\n\n/**\n * Calculate distance between two coordinates using the Haversine formula\n * @param lat1 Latitude of first point\n * @param lon1 Longitude of first point\n * @param lat2 Latitude of second point\n * @param lon2 Longitude of second point\n * @returns Distance in miles\n */\nexport const calculateDistance = (\n  lat1: number,\n  lon1: number,\n  lat2: number,\n  lon2: number\n): number => {\n  const R = 3958.8; // Earth's radius in miles\n  const dLat = (lat2 - lat1) * (Math.PI / 180);\n  const dLon = (lon2 - lon1) * (Math.PI / 180);\n  const a =\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(lat1 * (Math.PI / 180)) *\n      Math.cos(lat2 * (Math.PI / 180)) *\n      Math.sin(dLon / 2) *\n      Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c;\n};\n\n/**\n * Calculate distance between two coordinate objects\n * @param point1 First coordinate\n * @param point2 Second coordinate\n * @returns Distance in miles\n */\nexport const calculateDistanceBetweenCoordinates = (\n  point1: Coordinates,\n  point2: Coordinates\n): number => {\n  return calculateDistance(\n    point1.latitude,\n    point1.longitude,\n    point2.latitude,\n    point2.longitude\n  );\n};\n\n/**\n * Get nearby ZIP codes within a radius\n * @param centerZipCode Center ZIP code\n * @param radiusMiles Radius in miles\n * @returns Promise with array of nearby ZIP codes\n */\nexport const getNearbyZipCodes = async (\n  centerZipCode: string,\n  radiusMiles: number\n): Promise<string[]> => {\n  try {\n    // Get coordinates for the center ZIP code\n    const centerData = await getZipCodeCoordinates(centerZipCode);\n    \n    if (!centerData) {\n      throw new Error(`ZIP code ${centerZipCode} not found`);\n    }\n    \n    // Query for nearby ZIP codes using PostGIS\n    const { data, error } = await supabase.rpc('nearby_zip_codes', {\n      center_lat: centerData.coordinates.latitude,\n      center_lng: centerData.coordinates.longitude,\n      radius_miles: radiusMiles\n    });\n    \n    if (error) throw error;\n    \n    return (data || []).map(item => item.zip_code);\n  } catch (error: any) {\n    console.error('Error getting nearby ZIP codes:', error);\n    throw new Error(error.message || 'Failed to get nearby ZIP codes');\n  }\n};\n\n/**\n * Format coordinates as a string\n * @param coordinates Latitude and longitude\n * @returns Formatted string (e.g., \"37.7749,-122.4194\")\n */\nexport const formatCoordinates = (coordinates: Coordinates): string => {\n  return `${coordinates.latitude.toFixed(6)},${coordinates.longitude.toFixed(6)}`;\n};\n\n/**\n * Get directions URL to a location (opens in maps app)\n * @param destination Destination coordinates\n * @param label Optional label for the destination\n * @returns URL string that can be opened with Linking\n */\nexport const getDirectionsUrl = (\n  destination: Coordinates,\n  label?: string\n): string => {\n  const query = label \n    ? `${label}@${destination.latitude},${destination.longitude}`\n    : `${destination.latitude},${destination.longitude}`;\n    \n  // This URL format works with both iOS and Android\n  return `https://www.google.com/maps/dir/?api=1&destination=${query}`;\n};"],"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","ignoreList":[]}