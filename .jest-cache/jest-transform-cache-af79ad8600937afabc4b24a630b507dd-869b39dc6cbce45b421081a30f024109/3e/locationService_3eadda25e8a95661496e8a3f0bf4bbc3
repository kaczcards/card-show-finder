470be3207825661a07adbddfcf724d93
"use strict";

/* istanbul ignore next */
function cov_1udnmm8pjh() {
  var path = "/Users/kevin/card-show-finder/src/services/locationService.ts";
  var hash = "dd87cdf95cfa5f5f124bc55af0100565d35aa10c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kevin/card-show-finder/src/services/locationService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 12,
          column: 3
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "2": {
        start: {
          line: 3,
          column: 26
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "3": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 52
        }
      },
      "4": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 7,
          column: 5
        }
      },
      "5": {
        start: {
          line: 6,
          column: 6
        },
        end: {
          line: 6,
          column: 68
        }
      },
      "6": {
        start: {
          line: 6,
          column: 51
        },
        end: {
          line: 6,
          column: 63
        }
      },
      "7": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 39
        }
      },
      "8": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "9": {
        start: {
          line: 10,
          column: 26
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "10": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 17
        }
      },
      "11": {
        start: {
          line: 13,
          column: 25
        },
        end: {
          line: 17,
          column: 2
        }
      },
      "12": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 72
        }
      },
      "13": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 21
        }
      },
      "14": {
        start: {
          line: 18,
          column: 19
        },
        end: {
          line: 34,
          column: 4
        }
      },
      "15": {
        start: {
          line: 19,
          column: 18
        },
        end: {
          line: 26,
          column: 5
        }
      },
      "16": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 24,
          column: 10
        }
      },
      "17": {
        start: {
          line: 21,
          column: 21
        },
        end: {
          line: 21,
          column: 23
        }
      },
      "18": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "19": {
        start: {
          line: 22,
          column: 29
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "20": {
        start: {
          line: 22,
          column: 77
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "21": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 22
        }
      },
      "22": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 26
        }
      },
      "23": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 33,
          column: 6
        }
      },
      "24": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "25": {
        start: {
          line: 28,
          column: 35
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "26": {
        start: {
          line: 29,
          column: 21
        },
        end: {
          line: 29,
          column: 23
        }
      },
      "27": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "28": {
        start: {
          line: 30,
          column: 25
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "29": {
        start: {
          line: 30,
          column: 38
        },
        end: {
          line: 30,
          column: 50
        }
      },
      "30": {
        start: {
          line: 30,
          column: 56
        },
        end: {
          line: 30,
          column: 57
        }
      },
      "31": {
        start: {
          line: 30,
          column: 78
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "32": {
        start: {
          line: 30,
          column: 102
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "33": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 40
        }
      },
      "34": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 22
        }
      },
      "35": {
        start: {
          line: 35,
          column: 22
        },
        end: {
          line: 37,
          column: 1
        }
      },
      "36": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 36,
          column: 62
        }
      },
      "37": {
        start: {
          line: 38,
          column: 0
        },
        end: {
          line: 38,
          column: 62
        }
      },
      "38": {
        start: {
          line: 39,
          column: 0
        },
        end: {
          line: 39,
          column: 386
        }
      },
      "39": {
        start: {
          line: 40,
          column: 17
        },
        end: {
          line: 40,
          column: 55
        }
      },
      "40": {
        start: {
          line: 41,
          column: 19
        },
        end: {
          line: 41,
          column: 41
        }
      },
      "41": {
        start: {
          line: 42,
          column: 24
        },
        end: {
          line: 42,
          column: 93
        }
      },
      "42": {
        start: {
          line: 47,
          column: 35
        },
        end: {
          line: 56,
          column: 1
        }
      },
      "43": {
        start: {
          line: 48,
          column: 4
        },
        end: {
          line: 55,
          column: 5
        }
      },
      "44": {
        start: {
          line: 49,
          column: 27
        },
        end: {
          line: 49,
          column: 77
        }
      },
      "45": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 50,
          column: 36
        }
      },
      "46": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 71
        }
      },
      "47": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 54,
          column: 21
        }
      },
      "48": {
        start: {
          line: 57,
          column: 0
        },
        end: {
          line: 57,
          column: 64
        }
      },
      "49": {
        start: {
          line: 62,
          column: 33
        },
        end: {
          line: 71,
          column: 1
        }
      },
      "50": {
        start: {
          line: 63,
          column: 4
        },
        end: {
          line: 70,
          column: 5
        }
      },
      "51": {
        start: {
          line: 64,
          column: 27
        },
        end: {
          line: 64,
          column: 73
        }
      },
      "52": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 65,
          column: 36
        }
      },
      "53": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 68,
          column: 69
        }
      },
      "54": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 69,
          column: 21
        }
      },
      "55": {
        start: {
          line: 72,
          column: 0
        },
        end: {
          line: 72,
          column: 60
        }
      },
      "56": {
        start: {
          line: 77,
          column: 27
        },
        end: {
          line: 98,
          column: 1
        }
      },
      "57": {
        start: {
          line: 78,
          column: 4
        },
        end: {
          line: 97,
          column: 5
        }
      },
      "58": {
        start: {
          line: 79,
          column: 30
        },
        end: {
          line: 79,
          column: 75
        }
      },
      "59": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 85,
          column: 9
        }
      },
      "60": {
        start: {
          line: 81,
          column: 38
        },
        end: {
          line: 81,
          column: 85
        }
      },
      "61": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 84,
          column: 13
        }
      },
      "62": {
        start: {
          line: 83,
          column: 16
        },
        end: {
          line: 83,
          column: 28
        }
      },
      "63": {
        start: {
          line: 86,
          column: 25
        },
        end: {
          line: 88,
          column: 10
        }
      },
      "64": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 92,
          column: 10
        }
      },
      "65": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 95,
          column: 64
        }
      },
      "66": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 96,
          column: 20
        }
      },
      "67": {
        start: {
          line: 99,
          column: 0
        },
        end: {
          line: 99,
          column: 48
        }
      },
      "68": {
        start: {
          line: 105,
          column: 23
        },
        end: {
          line: 120,
          column: 1
        }
      },
      "69": {
        start: {
          line: 106,
          column: 4
        },
        end: {
          line: 119,
          column: 5
        }
      },
      "70": {
        start: {
          line: 107,
          column: 24
        },
        end: {
          line: 107,
          column: 60
        }
      },
      "71": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 110,
          column: 9
        }
      },
      "72": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 24
        }
      },
      "73": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 114,
          column: 10
        }
      },
      "74": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 117,
          column: 57
        }
      },
      "75": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 118,
          column: 20
        }
      },
      "76": {
        start: {
          line: 121,
          column: 0
        },
        end: {
          line: 121,
          column: 40
        }
      },
      "77": {
        start: {
          line: 127,
          column: 34
        },
        end: {
          line: 142,
          column: 1
        }
      },
      "78": {
        start: {
          line: 128,
          column: 4
        },
        end: {
          line: 141,
          column: 5
        }
      },
      "79": {
        start: {
          line: 129,
          column: 24
        },
        end: {
          line: 132,
          column: 10
        }
      },
      "80": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 135,
          column: 9
        }
      },
      "81": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 24
        }
      },
      "82": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 136,
          column: 26
        }
      },
      "83": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 139,
          column: 69
        }
      },
      "84": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 140,
          column: 20
        }
      },
      "85": {
        start: {
          line: 143,
          column: 0
        },
        end: {
          line: 143,
          column: 62
        }
      },
      "86": {
        start: {
          line: 147,
          column: 29
        },
        end: {
          line: 147,
          column: 42
        }
      },
      "87": {
        start: {
          line: 151,
          column: 24
        },
        end: {
          line: 160,
          column: 1
        }
      },
      "88": {
        start: {
          line: 152,
          column: 4
        },
        end: {
          line: 159,
          column: 5
        }
      },
      "89": {
        start: {
          line: 153,
          column: 20
        },
        end: {
          line: 153,
          column: 94
        }
      },
      "90": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 154,
          column: 44
        }
      },
      "91": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 157,
          column: 72
        }
      },
      "92": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 158,
          column: 20
        }
      },
      "93": {
        start: {
          line: 164,
          column: 20
        },
        end: {
          line: 171,
          column: 1
        }
      },
      "94": {
        start: {
          line: 165,
          column: 4
        },
        end: {
          line: 170,
          column: 5
        }
      },
      "95": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 166,
          column: 110
        }
      },
      "96": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 169,
          column: 73
        }
      },
      "97": {
        start: {
          line: 177,
          column: 26
        },
        end: {
          line: 197,
          column: 1
        }
      },
      "98": {
        start: {
          line: 178,
          column: 4
        },
        end: {
          line: 196,
          column: 5
        }
      },
      "99": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 192,
          column: 9
        }
      },
      "100": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 181,
          column: 90
        }
      },
      "101": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 182,
          column: 84
        }
      },
      "102": {
        start: {
          line: 186,
          column: 25
        },
        end: {
          line: 186,
          column: 67
        }
      },
      "103": {
        start: {
          line: 187,
          column: 28
        },
        end: {
          line: 187,
          column: 84
        }
      },
      "104": {
        start: {
          line: 187,
          column: 47
        },
        end: {
          line: 187,
          column: 83
        }
      },
      "105": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 191,
          column: 13
        }
      },
      "106": {
        start: {
          line: 189,
          column: 16
        },
        end: {
          line: 189,
          column: 67
        }
      },
      "107": {
        start: {
          line: 190,
          column: 16
        },
        end: {
          line: 190,
          column: 106
        }
      },
      "108": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 195,
          column: 63
        }
      },
      "109": {
        start: {
          line: 198,
          column: 0
        },
        end: {
          line: 198,
          column: 46
        }
      },
      "110": {
        start: {
          line: 204,
          column: 30
        },
        end: {
          line: 266,
          column: 1
        }
      },
      "111": {
        start: {
          line: 205,
          column: 4
        },
        end: {
          line: 265,
          column: 5
        }
      },
      "112": {
        start: {
          line: 209,
          column: 23
        },
        end: {
          line: 209,
          column: 53
        }
      },
      "113": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 212,
          column: 9
        }
      },
      "114": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 211,
          column: 26
        }
      },
      "115": {
        start: {
          line: 214,
          column: 63
        },
        end: {
          line: 218,
          column: 21
        }
      },
      "116": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 221,
          column: 9
        }
      },
      "117": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 220,
          column: 29
        }
      },
      "118": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 232,
          column: 9
        }
      },
      "119": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 231,
          column: 14
        }
      },
      "120": {
        start: {
          line: 234,
          column: 24
        },
        end: {
          line: 234,
          column: 41
        }
      },
      "121": {
        start: {
          line: 235,
          column: 28
        },
        end: {
          line: 235,
          column: 70
        }
      },
      "122": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 238,
          column: 9
        }
      },
      "123": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 237,
          column: 24
        }
      },
      "124": {
        start: {
          line: 240,
          column: 28
        },
        end: {
          line: 240,
          column: 85
        }
      },
      "125": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 243,
          column: 9
        }
      },
      "126": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 242,
          column: 24
        }
      },
      "127": {
        start: {
          line: 244,
          column: 31
        },
        end: {
          line: 249,
          column: 9
        }
      },
      "128": {
        start: {
          line: 257,
          column: 8
        },
        end: {
          line: 257,
          column: 112
        }
      },
      "129": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 259,
          column: 42
        }
      },
      "130": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 260,
          column: 30
        }
      },
      "131": {
        start: {
          line: 263,
          column: 8
        },
        end: {
          line: 263,
          column: 68
        }
      },
      "132": {
        start: {
          line: 264,
          column: 8
        },
        end: {
          line: 264,
          column: 20
        }
      },
      "133": {
        start: {
          line: 267,
          column: 0
        },
        end: {
          line: 267,
          column: 54
        }
      },
      "134": {
        start: {
          line: 276,
          column: 26
        },
        end: {
          line: 287,
          column: 1
        }
      },
      "135": {
        start: {
          line: 277,
          column: 14
        },
        end: {
          line: 277,
          column: 20
        }
      },
      "136": {
        start: {
          line: 278,
          column: 17
        },
        end: {
          line: 278,
          column: 48
        }
      },
      "137": {
        start: {
          line: 279,
          column: 17
        },
        end: {
          line: 279,
          column: 48
        }
      },
      "138": {
        start: {
          line: 280,
          column: 14
        },
        end: {
          line: 284,
          column: 30
        }
      },
      "139": {
        start: {
          line: 285,
          column: 14
        },
        end: {
          line: 285,
          column: 60
        }
      },
      "140": {
        start: {
          line: 286,
          column: 4
        },
        end: {
          line: 286,
          column: 17
        }
      },
      "141": {
        start: {
          line: 288,
          column: 0
        },
        end: {
          line: 288,
          column: 46
        }
      },
      "142": {
        start: {
          line: 295,
          column: 44
        },
        end: {
          line: 297,
          column: 1
        }
      },
      "143": {
        start: {
          line: 296,
          column: 4
        },
        end: {
          line: 296,
          column: 112
        }
      },
      "144": {
        start: {
          line: 298,
          column: 0
        },
        end: {
          line: 298,
          column: 82
        }
      },
      "145": {
        start: {
          line: 305,
          column: 26
        },
        end: {
          line: 326,
          column: 1
        }
      },
      "146": {
        start: {
          line: 306,
          column: 4
        },
        end: {
          line: 325,
          column: 5
        }
      },
      "147": {
        start: {
          line: 308,
          column: 27
        },
        end: {
          line: 308,
          column: 82
        }
      },
      "148": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 311,
          column: 9
        }
      },
      "149": {
        start: {
          line: 310,
          column: 12
        },
        end: {
          line: 310,
          column: 67
        }
      },
      "150": {
        start: {
          line: 313,
          column: 32
        },
        end: {
          line: 317,
          column: 10
        }
      },
      "151": {
        start: {
          line: 318,
          column: 8
        },
        end: {
          line: 319,
          column: 24
        }
      },
      "152": {
        start: {
          line: 319,
          column: 12
        },
        end: {
          line: 319,
          column: 24
        }
      },
      "153": {
        start: {
          line: 320,
          column: 8
        },
        end: {
          line: 320,
          column: 55
        }
      },
      "154": {
        start: {
          line: 320,
          column: 40
        },
        end: {
          line: 320,
          column: 53
        }
      },
      "155": {
        start: {
          line: 323,
          column: 8
        },
        end: {
          line: 323,
          column: 64
        }
      },
      "156": {
        start: {
          line: 324,
          column: 8
        },
        end: {
          line: 324,
          column: 75
        }
      },
      "157": {
        start: {
          line: 327,
          column: 0
        },
        end: {
          line: 327,
          column: 46
        }
      },
      "158": {
        start: {
          line: 333,
          column: 26
        },
        end: {
          line: 335,
          column: 1
        }
      },
      "159": {
        start: {
          line: 334,
          column: 4
        },
        end: {
          line: 334,
          column: 84
        }
      },
      "160": {
        start: {
          line: 336,
          column: 0
        },
        end: {
          line: 336,
          column: 46
        }
      },
      "161": {
        start: {
          line: 343,
          column: 25
        },
        end: {
          line: 349,
          column: 1
        }
      },
      "162": {
        start: {
          line: 344,
          column: 18
        },
        end: {
          line: 346,
          column: 60
        }
      },
      "163": {
        start: {
          line: 348,
          column: 4
        },
        end: {
          line: 348,
          column: 73
        }
      },
      "164": {
        start: {
          line: 350,
          column: 0
        },
        end: {
          line: 350,
          column: 44
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 2,
            column: 75
          }
        },
        loc: {
          start: {
            line: 2,
            column: 96
          },
          end: {
            line: 9,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 6,
            column: 38
          },
          end: {
            line: 6,
            column: 39
          }
        },
        loc: {
          start: {
            line: 6,
            column: 49
          },
          end: {
            line: 6,
            column: 65
          }
        },
        line: 6
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 9,
            column: 7
          }
        },
        loc: {
          start: {
            line: 9,
            column: 28
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 9
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 13,
            column: 81
          }
        },
        loc: {
          start: {
            line: 13,
            column: 95
          },
          end: {
            line: 15,
            column: 1
          }
        },
        line: 13
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 15,
            column: 6
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 15
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 18,
            column: 51
          },
          end: {
            line: 18,
            column: 52
          }
        },
        loc: {
          start: {
            line: 18,
            column: 63
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 18
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 19,
            column: 18
          },
          end: {
            line: 19,
            column: 19
          }
        },
        loc: {
          start: {
            line: 19,
            column: 30
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 19
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 20,
            column: 49
          }
        },
        loc: {
          start: {
            line: 20,
            column: 61
          },
          end: {
            line: 24,
            column: 9
          }
        },
        line: 20
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 27,
            column: 12
          }
        },
        loc: {
          start: {
            line: 27,
            column: 26
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 27
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 35,
            column: 56
          },
          end: {
            line: 35,
            column: 57
          }
        },
        loc: {
          start: {
            line: 35,
            column: 71
          },
          end: {
            line: 37,
            column: 1
          }
        },
        line: 35
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 47,
            column: 35
          },
          end: {
            line: 47,
            column: 36
          }
        },
        loc: {
          start: {
            line: 47,
            column: 47
          },
          end: {
            line: 56,
            column: 1
          }
        },
        line: 47
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 62,
            column: 33
          },
          end: {
            line: 62,
            column: 34
          }
        },
        loc: {
          start: {
            line: 62,
            column: 45
          },
          end: {
            line: 71,
            column: 1
          }
        },
        line: 62
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 77,
            column: 27
          },
          end: {
            line: 77,
            column: 28
          }
        },
        loc: {
          start: {
            line: 77,
            column: 39
          },
          end: {
            line: 98,
            column: 1
          }
        },
        line: 77
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 105,
            column: 23
          },
          end: {
            line: 105,
            column: 24
          }
        },
        loc: {
          start: {
            line: 105,
            column: 42
          },
          end: {
            line: 120,
            column: 1
          }
        },
        line: 105
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 127,
            column: 34
          },
          end: {
            line: 127,
            column: 35
          }
        },
        loc: {
          start: {
            line: 127,
            column: 57
          },
          end: {
            line: 142,
            column: 1
          }
        },
        line: 127
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 151,
            column: 24
          },
          end: {
            line: 151,
            column: 25
          }
        },
        loc: {
          start: {
            line: 151,
            column: 43
          },
          end: {
            line: 160,
            column: 1
          }
        },
        line: 151
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 164,
            column: 20
          },
          end: {
            line: 164,
            column: 21
          }
        },
        loc: {
          start: {
            line: 164,
            column: 36
          },
          end: {
            line: 171,
            column: 1
          }
        },
        line: 164
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 177,
            column: 26
          },
          end: {
            line: 177,
            column: 27
          }
        },
        loc: {
          start: {
            line: 177,
            column: 45
          },
          end: {
            line: 197,
            column: 1
          }
        },
        line: 177
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 187,
            column: 40
          },
          end: {
            line: 187,
            column: 41
          }
        },
        loc: {
          start: {
            line: 187,
            column: 47
          },
          end: {
            line: 187,
            column: 83
          }
        },
        line: 187
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 204,
            column: 30
          },
          end: {
            line: 204,
            column: 31
          }
        },
        loc: {
          start: {
            line: 204,
            column: 49
          },
          end: {
            line: 266,
            column: 1
          }
        },
        line: 204
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 276,
            column: 26
          },
          end: {
            line: 276,
            column: 27
          }
        },
        loc: {
          start: {
            line: 276,
            column: 54
          },
          end: {
            line: 287,
            column: 1
          }
        },
        line: 276
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 295,
            column: 44
          },
          end: {
            line: 295,
            column: 45
          }
        },
        loc: {
          start: {
            line: 295,
            column: 64
          },
          end: {
            line: 297,
            column: 1
          }
        },
        line: 295
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 305,
            column: 26
          },
          end: {
            line: 305,
            column: 27
          }
        },
        loc: {
          start: {
            line: 305,
            column: 64
          },
          end: {
            line: 326,
            column: 1
          }
        },
        line: 305
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 320,
            column: 32
          },
          end: {
            line: 320,
            column: 33
          }
        },
        loc: {
          start: {
            line: 320,
            column: 40
          },
          end: {
            line: 320,
            column: 53
          }
        },
        line: 320
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 333,
            column: 26
          },
          end: {
            line: 333,
            column: 27
          }
        },
        loc: {
          start: {
            line: 333,
            column: 43
          },
          end: {
            line: 335,
            column: 1
          }
        },
        line: 333
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 343,
            column: 25
          },
          end: {
            line: 343,
            column: 26
          }
        },
        loc: {
          start: {
            line: 343,
            column: 49
          },
          end: {
            line: 349,
            column: 1
          }
        },
        line: 343
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 12,
            column: 3
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 9,
            column: 1
          }
        }, {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 12,
            column: 1
          }
        }],
        line: 2
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 5
      },
      "4": {
        loc: {
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 13
          }
        }, {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "5": {
        loc: {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 34
          },
          end: {
            line: 5,
            column: 47
          }
        }, {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "6": {
        loc: {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 63
          }
        }, {
          start: {
            line: 5,
            column: 67
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "7": {
        loc: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 10
      },
      "8": {
        loc: {
          start: {
            line: 13,
            column: 25
          },
          end: {
            line: 17,
            column: 2
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 26
          },
          end: {
            line: 13,
            column: 30
          }
        }, {
          start: {
            line: 13,
            column: 34
          },
          end: {
            line: 13,
            column: 57
          }
        }, {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "9": {
        loc: {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 15,
            column: 1
          }
        }, {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "10": {
        loc: {
          start: {
            line: 18,
            column: 19
          },
          end: {
            line: 34,
            column: 4
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 18,
            column: 24
          }
        }, {
          start: {
            line: 18,
            column: 28
          },
          end: {
            line: 18,
            column: 45
          }
        }, {
          start: {
            line: 18,
            column: 50
          },
          end: {
            line: 34,
            column: 4
          }
        }],
        line: 18
      },
      "11": {
        loc: {
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 20,
            column: 44
          }
        }, {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 24,
            column: 9
          }
        }],
        line: 20
      },
      "12": {
        loc: {
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "13": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "14": {
        loc: {
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 15
          }
        }, {
          start: {
            line: 28,
            column: 19
          },
          end: {
            line: 28,
            column: 33
          }
        }],
        line: 28
      },
      "15": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "16": {
        loc: {
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "17": {
        loc: {
          start: {
            line: 35,
            column: 22
          },
          end: {
            line: 37,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 35,
            column: 23
          },
          end: {
            line: 35,
            column: 27
          }
        }, {
          start: {
            line: 35,
            column: 31
          },
          end: {
            line: 35,
            column: 51
          }
        }, {
          start: {
            line: 35,
            column: 56
          },
          end: {
            line: 37,
            column: 1
          }
        }],
        line: 35
      },
      "18": {
        loc: {
          start: {
            line: 36,
            column: 11
          },
          end: {
            line: 36,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 36,
            column: 37
          },
          end: {
            line: 36,
            column: 40
          }
        }, {
          start: {
            line: 36,
            column: 43
          },
          end: {
            line: 36,
            column: 61
          }
        }],
        line: 36
      },
      "19": {
        loc: {
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 36,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 36,
            column: 15
          }
        }, {
          start: {
            line: 36,
            column: 19
          },
          end: {
            line: 36,
            column: 33
          }
        }],
        line: 36
      },
      "20": {
        loc: {
          start: {
            line: 80,
            column: 8
          },
          end: {
            line: 85,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 8
          },
          end: {
            line: 85,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 80
      },
      "21": {
        loc: {
          start: {
            line: 82,
            column: 12
          },
          end: {
            line: 84,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 82,
            column: 12
          },
          end: {
            line: 84,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 82
      },
      "22": {
        loc: {
          start: {
            line: 108,
            column: 8
          },
          end: {
            line: 110,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 8
          },
          end: {
            line: 110,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 108
      },
      "23": {
        loc: {
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 135,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 135,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 133
      },
      "24": {
        loc: {
          start: {
            line: 154,
            column: 15
          },
          end: {
            line: 154,
            column: 43
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 154,
            column: 21
          },
          end: {
            line: 154,
            column: 36
          }
        }, {
          start: {
            line: 154,
            column: 39
          },
          end: {
            line: 154,
            column: 43
          }
        }],
        line: 154
      },
      "25": {
        loc: {
          start: {
            line: 179,
            column: 8
          },
          end: {
            line: 192,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 179,
            column: 8
          },
          end: {
            line: 192,
            column: 9
          }
        }, {
          start: {
            line: 184,
            column: 13
          },
          end: {
            line: 192,
            column: 9
          }
        }],
        line: 179
      },
      "26": {
        loc: {
          start: {
            line: 188,
            column: 12
          },
          end: {
            line: 191,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 188,
            column: 12
          },
          end: {
            line: 191,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 188
      },
      "27": {
        loc: {
          start: {
            line: 210,
            column: 8
          },
          end: {
            line: 212,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 210,
            column: 8
          },
          end: {
            line: 212,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 210
      },
      "28": {
        loc: {
          start: {
            line: 219,
            column: 8
          },
          end: {
            line: 221,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 219,
            column: 8
          },
          end: {
            line: 221,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 219
      },
      "29": {
        loc: {
          start: {
            line: 219,
            column: 12
          },
          end: {
            line: 219,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 219,
            column: 12
          },
          end: {
            line: 219,
            column: 22
          }
        }, {
          start: {
            line: 219,
            column: 26
          },
          end: {
            line: 219,
            column: 56
          }
        }],
        line: 219
      },
      "30": {
        loc: {
          start: {
            line: 222,
            column: 8
          },
          end: {
            line: 232,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 222,
            column: 8
          },
          end: {
            line: 232,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 222
      },
      "31": {
        loc: {
          start: {
            line: 236,
            column: 8
          },
          end: {
            line: 238,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 236,
            column: 8
          },
          end: {
            line: 238,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 236
      },
      "32": {
        loc: {
          start: {
            line: 241,
            column: 8
          },
          end: {
            line: 243,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 241,
            column: 8
          },
          end: {
            line: 243,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 241
      },
      "33": {
        loc: {
          start: {
            line: 246,
            column: 18
          },
          end: {
            line: 246,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 246,
            column: 18
          },
          end: {
            line: 246,
            column: 34
          }
        }, {
          start: {
            line: 246,
            column: 38
          },
          end: {
            line: 246,
            column: 47
          }
        }],
        line: 246
      },
      "34": {
        loc: {
          start: {
            line: 247,
            column: 19
          },
          end: {
            line: 247,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 247,
            column: 19
          },
          end: {
            line: 247,
            column: 37
          }
        }, {
          start: {
            line: 247,
            column: 41
          },
          end: {
            line: 247,
            column: 62
          }
        }, {
          start: {
            line: 247,
            column: 66
          },
          end: {
            line: 247,
            column: 75
          }
        }],
        line: 247
      },
      "35": {
        loc: {
          start: {
            line: 309,
            column: 8
          },
          end: {
            line: 311,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 309,
            column: 8
          },
          end: {
            line: 311,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 309
      },
      "36": {
        loc: {
          start: {
            line: 318,
            column: 8
          },
          end: {
            line: 319,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 318,
            column: 8
          },
          end: {
            line: 319,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 318
      },
      "37": {
        loc: {
          start: {
            line: 320,
            column: 16
          },
          end: {
            line: 320,
            column: 26
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 320,
            column: 16
          },
          end: {
            line: 320,
            column: 20
          }
        }, {
          start: {
            line: 320,
            column: 24
          },
          end: {
            line: 320,
            column: 26
          }
        }],
        line: 320
      },
      "38": {
        loc: {
          start: {
            line: 324,
            column: 24
          },
          end: {
            line: 324,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 324,
            column: 24
          },
          end: {
            line: 324,
            column: 37
          }
        }, {
          start: {
            line: 324,
            column: 41
          },
          end: {
            line: 324,
            column: 73
          }
        }],
        line: 324
      },
      "39": {
        loc: {
          start: {
            line: 344,
            column: 18
          },
          end: {
            line: 346,
            column: 60
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 345,
            column: 10
          },
          end: {
            line: 345,
            column: 69
          }
        }, {
          start: {
            line: 346,
            column: 10
          },
          end: {
            line: 346,
            column: 60
          }
        }],
        line: 344
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/kevin/card-show-finder/src/services/locationService.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/kevin/card-show-finder/src/services/locationService.ts"],
      sourcesContent: ["import * as Location from 'expo-location';\nimport { supabase } from '../supabase';\nimport { Coordinates, ZipCodeData } from '../types';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n/**\n * Request location permissions from the user\n * @returns Promise with boolean indicating if permissions were granted\n */\nexport const requestLocationPermissions = async (): Promise<boolean> => {\n  try {\n    const { status } = await Location.requestForegroundPermissionsAsync();\n    return status === 'granted';\n  } catch (error: any) {\n    console.error('Error requesting location permissions:', error);\n    return false;\n  }\n};\n\n/**\n * Check if location permissions are granted\n * @returns Promise with boolean indicating if permissions are granted\n */\nexport const checkLocationPermissions = async (): Promise<boolean> => {\n  try {\n    const { status } = await Location.getForegroundPermissionsAsync();\n    return status === 'granted';\n  } catch (error: any) {\n    console.error('Error checking location permissions:', error);\n    return false;\n  }\n};\n\n/**\n * Get the current location of the device\n * @returns Promise with coordinates or null if location cannot be determined\n */\nexport const getCurrentLocation = async (): Promise<Coordinates | null> => {\n  try {\n    const hasPermission = await checkLocationPermissions();\n    \n    if (!hasPermission) {\n      const permissionGranted = await requestLocationPermissions();\n      if (!permissionGranted) {\n        return null;\n      }\n    }\n    \n    const location = await Location.getCurrentPositionAsync({\n      accuracy: Location.Accuracy.Balanced,\n    });\n    \n    return {\n      latitude: location.coords.latitude,\n      longitude: location.coords.longitude,\n    };\n  } catch (error: any) {\n    console.error('Error getting current location:', error);\n    return null;\n  }\n};\n\n/**\n * Geocode an address to coordinates\n * @param address Full address string\n * @returns Promise with coordinates or null if geocoding fails\n */\nexport const geocodeAddress = async (address: string): Promise<Coordinates | null> => {\n  try {\n    const results = await Location.geocodeAsync(address);\n    \n    if (results.length === 0) {\n      return null;\n    }\n    \n    return {\n      latitude: results[0].latitude,\n      longitude: results[0].longitude,\n    };\n  } catch (error: any) {\n    console.error('Error geocoding address:', error);\n    return null;\n  }\n};\n\n/**\n * Reverse geocode coordinates to an address\n * @param coordinates Latitude and longitude\n * @returns Promise with address or null if reverse geocoding fails\n */\nexport const reverseGeocodeCoordinates = async (\n  coordinates: Coordinates\n): Promise<Location.LocationGeocodedAddress | null> => {\n  try {\n    const results = await Location.reverseGeocodeAsync({\n      latitude: coordinates.latitude,\n      longitude: coordinates.longitude,\n    });\n    \n    if (results.length === 0) {\n      return null;\n    }\n    \n    return results[0];\n  } catch (error: any) {\n    console.error('Error reverse geocoding coordinates:', error);\n    return null;\n  }\n};\n\n/**\n * AsyncStorage key prefix for caching ZIP code lookups\n */\nconst ZIP_CACHE_KEY_PREFIX = '@zip_cache:';\n\n/**\n * Retrieve ZIP code data from AsyncStorage cache\n */\nconst getZipFromCache = async (zipCode: string): Promise<ZipCodeData | null> => {\n  try {\n    const raw = await AsyncStorage.getItem(`${ZIP_CACHE_KEY_PREFIX}${zipCode}`);\n    return raw ? (JSON.parse(raw) as ZipCodeData) : null;\n  } catch (err) {\n    console.warn('[locationService] Failed to read ZIP cache', err);\n    return null;\n  }\n};\n\n/**\n * Save ZIP code data to AsyncStorage cache\n */\nconst setZipCache = async (data: ZipCodeData): Promise<void> => {\n  try {\n    await AsyncStorage.setItem(\n      `${ZIP_CACHE_KEY_PREFIX}${data.zipCode}`,\n      JSON.stringify(data)\n    );\n  } catch (err) {\n    console.warn('[locationService] Failed to write ZIP cache', err);\n  }\n};\n\n/**\n * Clear ZIP code cache from AsyncStorage\n * @param zipCode Optional specific ZIP code to clear, if not provided all ZIP caches will be cleared\n * @returns Promise<void>\n */\nexport const clearZipCodeCache = async (zipCode?: string): Promise<void> => {\n  try {\n    if (zipCode) {\n      // Clear specific ZIP code\n      await AsyncStorage.removeItem(`${ZIP_CACHE_KEY_PREFIX}${zipCode}`);\n      console.info(`[locationService] Cleared cache for ZIP code ${zipCode}`);\n    } else {\n      // Get all keys and clear only ZIP code caches\n      const keys = await AsyncStorage.getAllKeys();\n      const zipKeys = keys.filter(key => key.startsWith(ZIP_CACHE_KEY_PREFIX));\n      if (zipKeys.length > 0) {\n        await AsyncStorage.multiRemove(zipKeys);\n        console.info(\n          `[locationService] Cleared all ZIP code caches (${zipKeys.length} entries)`\n        );\n      }\n    }\n  } catch (error: any) {\n    console.error('Error clearing ZIP code cache:', error);\n  }\n};\n\n/**\n * Get coordinates for a ZIP code\n * @param zipCode ZIP code string\n * @returns Promise with ZipCodeData or null if not found\n */\nexport const getZipCodeCoordinates = async (zipCode: string): Promise<ZipCodeData | null> => {\n  try {\n    /* ---------------------------------\n     * 1. Check client-side cache first\n     * --------------------------------- */\n    const cached = await getZipFromCache(zipCode);\n    if (cached) {\n      return cached;\n    }\n\n    // First check if we have the ZIP code in our database\n    const { data: zipCodeDataFromDb, error: fetchError } = await supabase\n      .from('zip_codes') // Assuming a 'zip_codes' table\n      .select('*')\n      .eq('zip_code', zipCode)\n      .single();\n\n    if (fetchError && fetchError.code !== 'PGRST116') { // PGRST116 means no rows found\n      throw fetchError;\n    }\n\n    if (zipCodeDataFromDb) {\n      return {\n        zipCode: zipCodeDataFromDb.zip_code,\n        city: zipCodeDataFromDb.city,\n        state: zipCodeDataFromDb.state,\n        coordinates: {\n          latitude: zipCodeDataFromDb.latitude,\n          longitude: zipCodeDataFromDb.longitude,\n        },\n      };\n    }\n\n    // If not found, geocode it and save to database\n    const address = zipCode + ', USA'; // Simple address format for geocoding\n    const coordinates = await geocodeAddress(address);\n\n    if (!coordinates) {\n      return null;\n    }\n\n    // Get city and state from reverse geocoding\n    const addressInfo = await reverseGeocodeCoordinates(coordinates);\n\n    if (!addressInfo) {\n      return null;\n    }\n\n    const newZipCodeData: ZipCodeData = {\n      zipCode,\n      city: addressInfo.city || 'Unknown',\n      state: addressInfo.region || addressInfo.subregion || 'Unknown',\n      coordinates,\n    };\n\n    /**\n     * NOTE:\n     * We intentionally **skip inserting** the newly-geocoded ZIP code into the\n     * `zip_codes` table because the table is protected by an RLS policy that\n     * only allows inserts from server-side (service-role) contexts.  \n     * Trying to insert here would raise error 42501.\n     */\n    console.info(\n      `[locationService] ZIP code ${zipCode} geocoded on-device \u2013 not cached in DB due to RLS.`\n    );\n\n    // Cache newly geocoded result for future requests\n    await setZipCache(newZipCodeData);\n\n    return newZipCodeData;\n  } catch (error: any) {\n    console.error('Error getting ZIP code coordinates:', error);\n    return null;\n  }\n};\n\n/**\n * Calculate distance between two coordinates using the Haversine formula\n * @param lat1 Latitude of first point\n * @param lon1 Longitude of first point\n * @param lat2 Latitude of second point\n * @param lon2 Longitude of second point\n * @returns Distance in miles\n */\nexport const calculateDistance = (\n  lat1: number,\n  lon1: number,\n  lat2: number,\n  lon2: number\n): number => {\n  const R = 3958.8; // Earth's radius in miles\n  const dLat = (lat2 - lat1) * (Math.PI / 180);\n  const dLon = (lon2 - lon1) * (Math.PI / 180);\n  const a =\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(lat1 * (Math.PI / 180)) *\n      Math.cos(lat2 * (Math.PI / 180)) *\n      Math.sin(dLon / 2) *\n      Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c;\n};\n\n/**\n * Calculate distance between two coordinate objects\n * @param point1 First coordinate\n * @param point2 Second coordinate\n * @returns Distance in miles\n */\nexport const calculateDistanceBetweenCoordinates = (\n  point1: Coordinates,\n  point2: Coordinates\n): number => {\n  return calculateDistance(\n    point1.latitude,\n    point1.longitude,\n    point2.latitude,\n    point2.longitude\n  );\n};\n\n/**\n * Get nearby ZIP codes within a radius\n * @param centerZipCode Center ZIP code\n * @param radiusMiles Radius in miles\n * @returns Promise with array of nearby ZIP codes\n */\nexport const getNearbyZipCodes = async (\n  centerZipCode: string,\n  radiusMiles: number\n): Promise<string[]> => {\n  try {\n    // Get coordinates for the center ZIP code\n    const centerData = await getZipCodeCoordinates(centerZipCode);\n    \n    if (!centerData) {\n      throw new Error(`ZIP code ${centerZipCode} not found`);\n    }\n    \n    // Query for nearby ZIP codes using PostGIS\n    const { data, error } = await supabase.rpc('nearby_zip_codes', {\n      center_lat: centerData.coordinates.latitude,\n      center_lng: centerData.coordinates.longitude,\n      radius_miles: radiusMiles\n    });\n    \n    if (error) throw error;\n    \n    return (data || []).map(item => item.zip_code);\n  } catch (error: any) {\n    console.error('Error getting nearby ZIP codes:', error);\n    throw new Error(error.message || 'Failed to get nearby ZIP codes');\n  }\n};\n\n/**\n * Format coordinates as a string\n * @param coordinates Latitude and longitude\n * @returns Formatted string (e.g., \"37.7749,-122.4194\")\n */\nexport const formatCoordinates = (coordinates: Coordinates): string => {\n  return `${coordinates.latitude.toFixed(6)},${coordinates.longitude.toFixed(6)}`;\n};\n\n/**\n * Get directions URL to a location (opens in maps app)\n * @param destination Destination coordinates\n * @param label Optional label for the destination\n * @returns URL string that can be opened with Linking\n */\nexport const getDirectionsUrl = (\n  destination: Coordinates,\n  label?: string\n): string => {\n  const query = label \n    ? `${label}@${destination.latitude},${destination.longitude}`\n    : `${destination.latitude},${destination.longitude}`;\n    \n  // This URL format works with both iOS and Android\n  return `https://www.google.com/maps/dir/?api=1&destination=${query}`;\n};"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "dd87cdf95cfa5f5f124bc55af0100565d35aa10c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1udnmm8pjh = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1udnmm8pjh();
var __createBinding =
/* istanbul ignore next */
(cov_1udnmm8pjh().s[0]++,
/* istanbul ignore next */
(cov_1udnmm8pjh().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1udnmm8pjh().b[0][1]++, this.__createBinding) ||
/* istanbul ignore next */
(cov_1udnmm8pjh().b[0][2]++, Object.create ?
/* istanbul ignore next */
(cov_1udnmm8pjh().b[1][0]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_1udnmm8pjh().f[0]++;
  cov_1udnmm8pjh().s[1]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_1udnmm8pjh().b[2][0]++;
    cov_1udnmm8pjh().s[2]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_1udnmm8pjh().b[2][1]++;
  }
  var desc =
  /* istanbul ignore next */
  (cov_1udnmm8pjh().s[3]++, Object.getOwnPropertyDescriptor(m, k));
  /* istanbul ignore next */
  cov_1udnmm8pjh().s[4]++;
  if (
  /* istanbul ignore next */
  (cov_1udnmm8pjh().b[4][0]++, !desc) ||
  /* istanbul ignore next */
  (cov_1udnmm8pjh().b[4][1]++, "get" in desc ?
  /* istanbul ignore next */
  (cov_1udnmm8pjh().b[5][0]++, !m.__esModule) :
  /* istanbul ignore next */
  (cov_1udnmm8pjh().b[5][1]++,
  /* istanbul ignore next */
  (cov_1udnmm8pjh().b[6][0]++, desc.writable) ||
  /* istanbul ignore next */
  (cov_1udnmm8pjh().b[6][1]++, desc.configurable)))) {
    /* istanbul ignore next */
    cov_1udnmm8pjh().b[3][0]++;
    cov_1udnmm8pjh().s[5]++;
    desc = {
      enumerable: true,
      get: function () {
        /* istanbul ignore next */
        cov_1udnmm8pjh().f[1]++;
        cov_1udnmm8pjh().s[6]++;
        return m[k];
      }
    };
  } else
  /* istanbul ignore next */
  {
    cov_1udnmm8pjh().b[3][1]++;
  }
  cov_1udnmm8pjh().s[7]++;
  Object.defineProperty(o, k2, desc);
}) :
/* istanbul ignore next */
(cov_1udnmm8pjh().b[1][1]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_1udnmm8pjh().f[2]++;
  cov_1udnmm8pjh().s[8]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_1udnmm8pjh().b[7][0]++;
    cov_1udnmm8pjh().s[9]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_1udnmm8pjh().b[7][1]++;
  }
  cov_1udnmm8pjh().s[10]++;
  o[k2] = m[k];
})));
var __setModuleDefault =
/* istanbul ignore next */
(cov_1udnmm8pjh().s[11]++,
/* istanbul ignore next */
(cov_1udnmm8pjh().b[8][0]++, this) &&
/* istanbul ignore next */
(cov_1udnmm8pjh().b[8][1]++, this.__setModuleDefault) ||
/* istanbul ignore next */
(cov_1udnmm8pjh().b[8][2]++, Object.create ?
/* istanbul ignore next */
(cov_1udnmm8pjh().b[9][0]++, function (o, v) {
  /* istanbul ignore next */
  cov_1udnmm8pjh().f[3]++;
  cov_1udnmm8pjh().s[12]++;
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
}) :
/* istanbul ignore next */
(cov_1udnmm8pjh().b[9][1]++, function (o, v) {
  /* istanbul ignore next */
  cov_1udnmm8pjh().f[4]++;
  cov_1udnmm8pjh().s[13]++;
  o["default"] = v;
})));
var __importStar =
/* istanbul ignore next */
(cov_1udnmm8pjh().s[14]++,
/* istanbul ignore next */
(cov_1udnmm8pjh().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_1udnmm8pjh().b[10][1]++, this.__importStar) ||
/* istanbul ignore next */
(cov_1udnmm8pjh().b[10][2]++, function () {
  /* istanbul ignore next */
  cov_1udnmm8pjh().f[5]++;
  cov_1udnmm8pjh().s[15]++;
  var ownKeys = function (o) {
    /* istanbul ignore next */
    cov_1udnmm8pjh().f[6]++;
    cov_1udnmm8pjh().s[16]++;
    ownKeys =
    /* istanbul ignore next */
    (cov_1udnmm8pjh().b[11][0]++, Object.getOwnPropertyNames) ||
    /* istanbul ignore next */
    (cov_1udnmm8pjh().b[11][1]++, function (o) {
      /* istanbul ignore next */
      cov_1udnmm8pjh().f[7]++;
      var ar =
      /* istanbul ignore next */
      (cov_1udnmm8pjh().s[17]++, []);
      /* istanbul ignore next */
      cov_1udnmm8pjh().s[18]++;
      for (var k in o) {
        /* istanbul ignore next */
        cov_1udnmm8pjh().s[19]++;
        if (Object.prototype.hasOwnProperty.call(o, k)) {
          /* istanbul ignore next */
          cov_1udnmm8pjh().b[12][0]++;
          cov_1udnmm8pjh().s[20]++;
          ar[ar.length] = k;
        } else
        /* istanbul ignore next */
        {
          cov_1udnmm8pjh().b[12][1]++;
        }
      }
      /* istanbul ignore next */
      cov_1udnmm8pjh().s[21]++;
      return ar;
    });
    /* istanbul ignore next */
    cov_1udnmm8pjh().s[22]++;
    return ownKeys(o);
  };
  /* istanbul ignore next */
  cov_1udnmm8pjh().s[23]++;
  return function (mod) {
    /* istanbul ignore next */
    cov_1udnmm8pjh().f[8]++;
    cov_1udnmm8pjh().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_1udnmm8pjh().b[14][0]++, mod) &&
    /* istanbul ignore next */
    (cov_1udnmm8pjh().b[14][1]++, mod.__esModule)) {
      /* istanbul ignore next */
      cov_1udnmm8pjh().b[13][0]++;
      cov_1udnmm8pjh().s[25]++;
      return mod;
    } else
    /* istanbul ignore next */
    {
      cov_1udnmm8pjh().b[13][1]++;
    }
    var result =
    /* istanbul ignore next */
    (cov_1udnmm8pjh().s[26]++, {});
    /* istanbul ignore next */
    cov_1udnmm8pjh().s[27]++;
    if (mod != null) {
      /* istanbul ignore next */
      cov_1udnmm8pjh().b[15][0]++;
      cov_1udnmm8pjh().s[28]++;
      for (var k =
        /* istanbul ignore next */
        (cov_1udnmm8pjh().s[29]++, ownKeys(mod)), i =
        /* istanbul ignore next */
        (cov_1udnmm8pjh().s[30]++, 0); i < k.length; i++) {
        /* istanbul ignore next */
        cov_1udnmm8pjh().s[31]++;
        if (k[i] !== "default") {
          /* istanbul ignore next */
          cov_1udnmm8pjh().b[16][0]++;
          cov_1udnmm8pjh().s[32]++;
          __createBinding(result, mod, k[i]);
        } else
        /* istanbul ignore next */
        {
          cov_1udnmm8pjh().b[16][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_1udnmm8pjh().b[15][1]++;
    }
    cov_1udnmm8pjh().s[33]++;
    __setModuleDefault(result, mod);
    /* istanbul ignore next */
    cov_1udnmm8pjh().s[34]++;
    return result;
  };
}()));
var __importDefault =
/* istanbul ignore next */
(cov_1udnmm8pjh().s[35]++,
/* istanbul ignore next */
(cov_1udnmm8pjh().b[17][0]++, this) &&
/* istanbul ignore next */
(cov_1udnmm8pjh().b[17][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_1udnmm8pjh().b[17][2]++, function (mod) {
  /* istanbul ignore next */
  cov_1udnmm8pjh().f[9]++;
  cov_1udnmm8pjh().s[36]++;
  return /* istanbul ignore next */(cov_1udnmm8pjh().b[19][0]++, mod) &&
  /* istanbul ignore next */
  (cov_1udnmm8pjh().b[19][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_1udnmm8pjh().b[18][0]++, mod) :
  /* istanbul ignore next */
  (cov_1udnmm8pjh().b[18][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_1udnmm8pjh().s[37]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1udnmm8pjh().s[38]++;
exports.getDirectionsUrl = exports.formatCoordinates = exports.getNearbyZipCodes = exports.calculateDistanceBetweenCoordinates = exports.calculateDistance = exports.getZipCodeCoordinates = exports.clearZipCodeCache = exports.reverseGeocodeCoordinates = exports.geocodeAddress = exports.getCurrentLocation = exports.checkLocationPermissions = exports.requestLocationPermissions = void 0;
const Location =
/* istanbul ignore next */
(cov_1udnmm8pjh().s[39]++, __importStar(require("expo-location")));
const supabase_1 =
/* istanbul ignore next */
(cov_1udnmm8pjh().s[40]++, require("../supabase"));
const async_storage_1 =
/* istanbul ignore next */
(cov_1udnmm8pjh().s[41]++, __importDefault(require("@react-native-async-storage/async-storage")));
/**
 * Request location permissions from the user
 * @returns Promise with boolean indicating if permissions were granted
 */
/* istanbul ignore next */
cov_1udnmm8pjh().s[42]++;
const requestLocationPermissions = async () => {
  /* istanbul ignore next */
  cov_1udnmm8pjh().f[10]++;
  cov_1udnmm8pjh().s[43]++;
  try {
    const {
      status
    } =
    /* istanbul ignore next */
    (cov_1udnmm8pjh().s[44]++, await Location.requestForegroundPermissionsAsync());
    /* istanbul ignore next */
    cov_1udnmm8pjh().s[45]++;
    return status === 'granted';
  } catch (error) {
    /* istanbul ignore next */
    cov_1udnmm8pjh().s[46]++;
    console.error('Error requesting location permissions:', error);
    /* istanbul ignore next */
    cov_1udnmm8pjh().s[47]++;
    return false;
  }
};
/* istanbul ignore next */
cov_1udnmm8pjh().s[48]++;
exports.requestLocationPermissions = requestLocationPermissions;
/**
 * Check if location permissions are granted
 * @returns Promise with boolean indicating if permissions are granted
 */
/* istanbul ignore next */
cov_1udnmm8pjh().s[49]++;
const checkLocationPermissions = async () => {
  /* istanbul ignore next */
  cov_1udnmm8pjh().f[11]++;
  cov_1udnmm8pjh().s[50]++;
  try {
    const {
      status
    } =
    /* istanbul ignore next */
    (cov_1udnmm8pjh().s[51]++, await Location.getForegroundPermissionsAsync());
    /* istanbul ignore next */
    cov_1udnmm8pjh().s[52]++;
    return status === 'granted';
  } catch (error) {
    /* istanbul ignore next */
    cov_1udnmm8pjh().s[53]++;
    console.error('Error checking location permissions:', error);
    /* istanbul ignore next */
    cov_1udnmm8pjh().s[54]++;
    return false;
  }
};
/* istanbul ignore next */
cov_1udnmm8pjh().s[55]++;
exports.checkLocationPermissions = checkLocationPermissions;
/**
 * Get the current location of the device
 * @returns Promise with coordinates or null if location cannot be determined
 */
/* istanbul ignore next */
cov_1udnmm8pjh().s[56]++;
const getCurrentLocation = async () => {
  /* istanbul ignore next */
  cov_1udnmm8pjh().f[12]++;
  cov_1udnmm8pjh().s[57]++;
  try {
    const hasPermission =
    /* istanbul ignore next */
    (cov_1udnmm8pjh().s[58]++, await (0, exports.checkLocationPermissions)());
    /* istanbul ignore next */
    cov_1udnmm8pjh().s[59]++;
    if (!hasPermission) {
      /* istanbul ignore next */
      cov_1udnmm8pjh().b[20][0]++;
      const permissionGranted =
      /* istanbul ignore next */
      (cov_1udnmm8pjh().s[60]++, await (0, exports.requestLocationPermissions)());
      /* istanbul ignore next */
      cov_1udnmm8pjh().s[61]++;
      if (!permissionGranted) {
        /* istanbul ignore next */
        cov_1udnmm8pjh().b[21][0]++;
        cov_1udnmm8pjh().s[62]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_1udnmm8pjh().b[21][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1udnmm8pjh().b[20][1]++;
    }
    const location =
    /* istanbul ignore next */
    (cov_1udnmm8pjh().s[63]++, await Location.getCurrentPositionAsync({
      accuracy: Location.Accuracy.Balanced
    }));
    /* istanbul ignore next */
    cov_1udnmm8pjh().s[64]++;
    return {
      latitude: location.coords.latitude,
      longitude: location.coords.longitude
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_1udnmm8pjh().s[65]++;
    console.error('Error getting current location:', error);
    /* istanbul ignore next */
    cov_1udnmm8pjh().s[66]++;
    return null;
  }
};
/* istanbul ignore next */
cov_1udnmm8pjh().s[67]++;
exports.getCurrentLocation = getCurrentLocation;
/**
 * Geocode an address to coordinates
 * @param address Full address string
 * @returns Promise with coordinates or null if geocoding fails
 */
/* istanbul ignore next */
cov_1udnmm8pjh().s[68]++;
const geocodeAddress = async address => {
  /* istanbul ignore next */
  cov_1udnmm8pjh().f[13]++;
  cov_1udnmm8pjh().s[69]++;
  try {
    const results =
    /* istanbul ignore next */
    (cov_1udnmm8pjh().s[70]++, await Location.geocodeAsync(address));
    /* istanbul ignore next */
    cov_1udnmm8pjh().s[71]++;
    if (results.length === 0) {
      /* istanbul ignore next */
      cov_1udnmm8pjh().b[22][0]++;
      cov_1udnmm8pjh().s[72]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1udnmm8pjh().b[22][1]++;
    }
    cov_1udnmm8pjh().s[73]++;
    return {
      latitude: results[0].latitude,
      longitude: results[0].longitude
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_1udnmm8pjh().s[74]++;
    console.error('Error geocoding address:', error);
    /* istanbul ignore next */
    cov_1udnmm8pjh().s[75]++;
    return null;
  }
};
/* istanbul ignore next */
cov_1udnmm8pjh().s[76]++;
exports.geocodeAddress = geocodeAddress;
/**
 * Reverse geocode coordinates to an address
 * @param coordinates Latitude and longitude
 * @returns Promise with address or null if reverse geocoding fails
 */
/* istanbul ignore next */
cov_1udnmm8pjh().s[77]++;
const reverseGeocodeCoordinates = async coordinates => {
  /* istanbul ignore next */
  cov_1udnmm8pjh().f[14]++;
  cov_1udnmm8pjh().s[78]++;
  try {
    const results =
    /* istanbul ignore next */
    (cov_1udnmm8pjh().s[79]++, await Location.reverseGeocodeAsync({
      latitude: coordinates.latitude,
      longitude: coordinates.longitude
    }));
    /* istanbul ignore next */
    cov_1udnmm8pjh().s[80]++;
    if (results.length === 0) {
      /* istanbul ignore next */
      cov_1udnmm8pjh().b[23][0]++;
      cov_1udnmm8pjh().s[81]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1udnmm8pjh().b[23][1]++;
    }
    cov_1udnmm8pjh().s[82]++;
    return results[0];
  } catch (error) {
    /* istanbul ignore next */
    cov_1udnmm8pjh().s[83]++;
    console.error('Error reverse geocoding coordinates:', error);
    /* istanbul ignore next */
    cov_1udnmm8pjh().s[84]++;
    return null;
  }
};
/* istanbul ignore next */
cov_1udnmm8pjh().s[85]++;
exports.reverseGeocodeCoordinates = reverseGeocodeCoordinates;
/**
 * AsyncStorage key prefix for caching ZIP code lookups
 */
const ZIP_CACHE_KEY_PREFIX =
/* istanbul ignore next */
(cov_1udnmm8pjh().s[86]++, '@zip_cache:');
/**
 * Retrieve ZIP code data from AsyncStorage cache
 */
/* istanbul ignore next */
cov_1udnmm8pjh().s[87]++;
const getZipFromCache = async zipCode => {
  /* istanbul ignore next */
  cov_1udnmm8pjh().f[15]++;
  cov_1udnmm8pjh().s[88]++;
  try {
    const raw =
    /* istanbul ignore next */
    (cov_1udnmm8pjh().s[89]++, await async_storage_1.default.getItem(`${ZIP_CACHE_KEY_PREFIX}${zipCode}`));
    /* istanbul ignore next */
    cov_1udnmm8pjh().s[90]++;
    return raw ?
    /* istanbul ignore next */
    (cov_1udnmm8pjh().b[24][0]++, JSON.parse(raw)) :
    /* istanbul ignore next */
    (cov_1udnmm8pjh().b[24][1]++, null);
  } catch (err) {
    /* istanbul ignore next */
    cov_1udnmm8pjh().s[91]++;
    console.warn('[locationService] Failed to read ZIP cache', err);
    /* istanbul ignore next */
    cov_1udnmm8pjh().s[92]++;
    return null;
  }
};
/**
 * Save ZIP code data to AsyncStorage cache
 */
/* istanbul ignore next */
cov_1udnmm8pjh().s[93]++;
const setZipCache = async data => {
  /* istanbul ignore next */
  cov_1udnmm8pjh().f[16]++;
  cov_1udnmm8pjh().s[94]++;
  try {
    /* istanbul ignore next */
    cov_1udnmm8pjh().s[95]++;
    await async_storage_1.default.setItem(`${ZIP_CACHE_KEY_PREFIX}${data.zipCode}`, JSON.stringify(data));
  } catch (err) {
    /* istanbul ignore next */
    cov_1udnmm8pjh().s[96]++;
    console.warn('[locationService] Failed to write ZIP cache', err);
  }
};
/**
 * Clear ZIP code cache from AsyncStorage
 * @param zipCode Optional specific ZIP code to clear, if not provided all ZIP caches will be cleared
 * @returns Promise<void>
 */
/* istanbul ignore next */
cov_1udnmm8pjh().s[97]++;
const clearZipCodeCache = async zipCode => {
  /* istanbul ignore next */
  cov_1udnmm8pjh().f[17]++;
  cov_1udnmm8pjh().s[98]++;
  try {
    /* istanbul ignore next */
    cov_1udnmm8pjh().s[99]++;
    if (zipCode) {
      /* istanbul ignore next */
      cov_1udnmm8pjh().b[25][0]++;
      cov_1udnmm8pjh().s[100]++;
      // Clear specific ZIP code
      await async_storage_1.default.removeItem(`${ZIP_CACHE_KEY_PREFIX}${zipCode}`);
      /* istanbul ignore next */
      cov_1udnmm8pjh().s[101]++;
      console.info(`[locationService] Cleared cache for ZIP code ${zipCode}`);
    } else {
      /* istanbul ignore next */
      cov_1udnmm8pjh().b[25][1]++;
      // Get all keys and clear only ZIP code caches
      const keys =
      /* istanbul ignore next */
      (cov_1udnmm8pjh().s[102]++, await async_storage_1.default.getAllKeys());
      const zipKeys =
      /* istanbul ignore next */
      (cov_1udnmm8pjh().s[103]++, keys.filter(key => {
        /* istanbul ignore next */
        cov_1udnmm8pjh().f[18]++;
        cov_1udnmm8pjh().s[104]++;
        return key.startsWith(ZIP_CACHE_KEY_PREFIX);
      }));
      /* istanbul ignore next */
      cov_1udnmm8pjh().s[105]++;
      if (zipKeys.length > 0) {
        /* istanbul ignore next */
        cov_1udnmm8pjh().b[26][0]++;
        cov_1udnmm8pjh().s[106]++;
        await async_storage_1.default.multiRemove(zipKeys);
        /* istanbul ignore next */
        cov_1udnmm8pjh().s[107]++;
        console.info(`[locationService] Cleared all ZIP code caches (${zipKeys.length} entries)`);
      } else
      /* istanbul ignore next */
      {
        cov_1udnmm8pjh().b[26][1]++;
      }
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_1udnmm8pjh().s[108]++;
    console.error('Error clearing ZIP code cache:', error);
  }
};
/* istanbul ignore next */
cov_1udnmm8pjh().s[109]++;
exports.clearZipCodeCache = clearZipCodeCache;
/**
 * Get coordinates for a ZIP code
 * @param zipCode ZIP code string
 * @returns Promise with ZipCodeData or null if not found
 */
/* istanbul ignore next */
cov_1udnmm8pjh().s[110]++;
const getZipCodeCoordinates = async zipCode => {
  /* istanbul ignore next */
  cov_1udnmm8pjh().f[19]++;
  cov_1udnmm8pjh().s[111]++;
  try {
    /* ---------------------------------
     * 1. Check client-side cache first
     * --------------------------------- */
    const cached =
    /* istanbul ignore next */
    (cov_1udnmm8pjh().s[112]++, await getZipFromCache(zipCode));
    /* istanbul ignore next */
    cov_1udnmm8pjh().s[113]++;
    if (cached) {
      /* istanbul ignore next */
      cov_1udnmm8pjh().b[27][0]++;
      cov_1udnmm8pjh().s[114]++;
      return cached;
    } else
    /* istanbul ignore next */
    {
      cov_1udnmm8pjh().b[27][1]++;
    }
    // First check if we have the ZIP code in our database
    const {
      data: zipCodeDataFromDb,
      error: fetchError
    } =
    /* istanbul ignore next */
    (cov_1udnmm8pjh().s[115]++, await supabase_1.supabase.from('zip_codes') // Assuming a 'zip_codes' table
    .select('*').eq('zip_code', zipCode).single());
    /* istanbul ignore next */
    cov_1udnmm8pjh().s[116]++;
    if (
    /* istanbul ignore next */
    (cov_1udnmm8pjh().b[29][0]++, fetchError) &&
    /* istanbul ignore next */
    (cov_1udnmm8pjh().b[29][1]++, fetchError.code !== 'PGRST116')) {
      /* istanbul ignore next */
      cov_1udnmm8pjh().b[28][0]++;
      cov_1udnmm8pjh().s[117]++;
      // PGRST116 means no rows found
      throw fetchError;
    } else
    /* istanbul ignore next */
    {
      cov_1udnmm8pjh().b[28][1]++;
    }
    cov_1udnmm8pjh().s[118]++;
    if (zipCodeDataFromDb) {
      /* istanbul ignore next */
      cov_1udnmm8pjh().b[30][0]++;
      cov_1udnmm8pjh().s[119]++;
      return {
        zipCode: zipCodeDataFromDb.zip_code,
        city: zipCodeDataFromDb.city,
        state: zipCodeDataFromDb.state,
        coordinates: {
          latitude: zipCodeDataFromDb.latitude,
          longitude: zipCodeDataFromDb.longitude
        }
      };
    } else
    /* istanbul ignore next */
    {
      cov_1udnmm8pjh().b[30][1]++;
    }
    // If not found, geocode it and save to database
    const address =
    /* istanbul ignore next */
    (cov_1udnmm8pjh().s[120]++, zipCode + ', USA'); // Simple address format for geocoding
    const coordinates =
    /* istanbul ignore next */
    (cov_1udnmm8pjh().s[121]++, await (0, exports.geocodeAddress)(address));
    /* istanbul ignore next */
    cov_1udnmm8pjh().s[122]++;
    if (!coordinates) {
      /* istanbul ignore next */
      cov_1udnmm8pjh().b[31][0]++;
      cov_1udnmm8pjh().s[123]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1udnmm8pjh().b[31][1]++;
    }
    // Get city and state from reverse geocoding
    const addressInfo =
    /* istanbul ignore next */
    (cov_1udnmm8pjh().s[124]++, await (0, exports.reverseGeocodeCoordinates)(coordinates));
    /* istanbul ignore next */
    cov_1udnmm8pjh().s[125]++;
    if (!addressInfo) {
      /* istanbul ignore next */
      cov_1udnmm8pjh().b[32][0]++;
      cov_1udnmm8pjh().s[126]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1udnmm8pjh().b[32][1]++;
    }
    const newZipCodeData =
    /* istanbul ignore next */
    (cov_1udnmm8pjh().s[127]++, {
      zipCode,
      city:
      /* istanbul ignore next */
      (cov_1udnmm8pjh().b[33][0]++, addressInfo.city) ||
      /* istanbul ignore next */
      (cov_1udnmm8pjh().b[33][1]++, 'Unknown'),
      state:
      /* istanbul ignore next */
      (cov_1udnmm8pjh().b[34][0]++, addressInfo.region) ||
      /* istanbul ignore next */
      (cov_1udnmm8pjh().b[34][1]++, addressInfo.subregion) ||
      /* istanbul ignore next */
      (cov_1udnmm8pjh().b[34][2]++, 'Unknown'),
      coordinates
    });
    /**
     * NOTE:
     * We intentionally **skip inserting** the newly-geocoded ZIP code into the
     * `zip_codes` table because the table is protected by an RLS policy that
     * only allows inserts from server-side (service-role) contexts.
     * Trying to insert here would raise error 42501.
     */
    /* istanbul ignore next */
    cov_1udnmm8pjh().s[128]++;
    console.info(`[locationService] ZIP code ${zipCode} geocoded on-device – not cached in DB due to RLS.`);
    // Cache newly geocoded result for future requests
    /* istanbul ignore next */
    cov_1udnmm8pjh().s[129]++;
    await setZipCache(newZipCodeData);
    /* istanbul ignore next */
    cov_1udnmm8pjh().s[130]++;
    return newZipCodeData;
  } catch (error) {
    /* istanbul ignore next */
    cov_1udnmm8pjh().s[131]++;
    console.error('Error getting ZIP code coordinates:', error);
    /* istanbul ignore next */
    cov_1udnmm8pjh().s[132]++;
    return null;
  }
};
/* istanbul ignore next */
cov_1udnmm8pjh().s[133]++;
exports.getZipCodeCoordinates = getZipCodeCoordinates;
/**
 * Calculate distance between two coordinates using the Haversine formula
 * @param lat1 Latitude of first point
 * @param lon1 Longitude of first point
 * @param lat2 Latitude of second point
 * @param lon2 Longitude of second point
 * @returns Distance in miles
 */
/* istanbul ignore next */
cov_1udnmm8pjh().s[134]++;
const calculateDistance = (lat1, lon1, lat2, lon2) => {
  /* istanbul ignore next */
  cov_1udnmm8pjh().f[20]++;
  const R =
  /* istanbul ignore next */
  (cov_1udnmm8pjh().s[135]++, 3958.8); // Earth's radius in miles
  const dLat =
  /* istanbul ignore next */
  (cov_1udnmm8pjh().s[136]++, (lat2 - lat1) * (Math.PI / 180));
  const dLon =
  /* istanbul ignore next */
  (cov_1udnmm8pjh().s[137]++, (lon2 - lon1) * (Math.PI / 180));
  const a =
  /* istanbul ignore next */
  (cov_1udnmm8pjh().s[138]++, Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * (Math.PI / 180)) * Math.cos(lat2 * (Math.PI / 180)) * Math.sin(dLon / 2) * Math.sin(dLon / 2));
  const c =
  /* istanbul ignore next */
  (cov_1udnmm8pjh().s[139]++, 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)));
  /* istanbul ignore next */
  cov_1udnmm8pjh().s[140]++;
  return R * c;
};
/* istanbul ignore next */
cov_1udnmm8pjh().s[141]++;
exports.calculateDistance = calculateDistance;
/**
 * Calculate distance between two coordinate objects
 * @param point1 First coordinate
 * @param point2 Second coordinate
 * @returns Distance in miles
 */
/* istanbul ignore next */
cov_1udnmm8pjh().s[142]++;
const calculateDistanceBetweenCoordinates = (point1, point2) => {
  /* istanbul ignore next */
  cov_1udnmm8pjh().f[21]++;
  cov_1udnmm8pjh().s[143]++;
  return (0, exports.calculateDistance)(point1.latitude, point1.longitude, point2.latitude, point2.longitude);
};
/* istanbul ignore next */
cov_1udnmm8pjh().s[144]++;
exports.calculateDistanceBetweenCoordinates = calculateDistanceBetweenCoordinates;
/**
 * Get nearby ZIP codes within a radius
 * @param centerZipCode Center ZIP code
 * @param radiusMiles Radius in miles
 * @returns Promise with array of nearby ZIP codes
 */
/* istanbul ignore next */
cov_1udnmm8pjh().s[145]++;
const getNearbyZipCodes = async (centerZipCode, radiusMiles) => {
  /* istanbul ignore next */
  cov_1udnmm8pjh().f[22]++;
  cov_1udnmm8pjh().s[146]++;
  try {
    // Get coordinates for the center ZIP code
    const centerData =
    /* istanbul ignore next */
    (cov_1udnmm8pjh().s[147]++, await (0, exports.getZipCodeCoordinates)(centerZipCode));
    /* istanbul ignore next */
    cov_1udnmm8pjh().s[148]++;
    if (!centerData) {
      /* istanbul ignore next */
      cov_1udnmm8pjh().b[35][0]++;
      cov_1udnmm8pjh().s[149]++;
      throw new Error(`ZIP code ${centerZipCode} not found`);
    } else
    /* istanbul ignore next */
    {
      cov_1udnmm8pjh().b[35][1]++;
    }
    // Query for nearby ZIP codes using PostGIS
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_1udnmm8pjh().s[150]++, await supabase_1.supabase.rpc('nearby_zip_codes', {
      center_lat: centerData.coordinates.latitude,
      center_lng: centerData.coordinates.longitude,
      radius_miles: radiusMiles
    }));
    /* istanbul ignore next */
    cov_1udnmm8pjh().s[151]++;
    if (error) {
      /* istanbul ignore next */
      cov_1udnmm8pjh().b[36][0]++;
      cov_1udnmm8pjh().s[152]++;
      throw error;
    } else
    /* istanbul ignore next */
    {
      cov_1udnmm8pjh().b[36][1]++;
    }
    cov_1udnmm8pjh().s[153]++;
    return (
    /* istanbul ignore next */
    (cov_1udnmm8pjh().b[37][0]++, data) ||
    /* istanbul ignore next */
    (cov_1udnmm8pjh().b[37][1]++, [])).map(item => {
      /* istanbul ignore next */
      cov_1udnmm8pjh().f[23]++;
      cov_1udnmm8pjh().s[154]++;
      return item.zip_code;
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1udnmm8pjh().s[155]++;
    console.error('Error getting nearby ZIP codes:', error);
    /* istanbul ignore next */
    cov_1udnmm8pjh().s[156]++;
    throw new Error(
    /* istanbul ignore next */
    (cov_1udnmm8pjh().b[38][0]++, error.message) ||
    /* istanbul ignore next */
    (cov_1udnmm8pjh().b[38][1]++, 'Failed to get nearby ZIP codes'));
  }
};
/* istanbul ignore next */
cov_1udnmm8pjh().s[157]++;
exports.getNearbyZipCodes = getNearbyZipCodes;
/**
 * Format coordinates as a string
 * @param coordinates Latitude and longitude
 * @returns Formatted string (e.g., "37.7749,-122.4194")
 */
/* istanbul ignore next */
cov_1udnmm8pjh().s[158]++;
const formatCoordinates = coordinates => {
  /* istanbul ignore next */
  cov_1udnmm8pjh().f[24]++;
  cov_1udnmm8pjh().s[159]++;
  return `${coordinates.latitude.toFixed(6)},${coordinates.longitude.toFixed(6)}`;
};
/* istanbul ignore next */
cov_1udnmm8pjh().s[160]++;
exports.formatCoordinates = formatCoordinates;
/**
 * Get directions URL to a location (opens in maps app)
 * @param destination Destination coordinates
 * @param label Optional label for the destination
 * @returns URL string that can be opened with Linking
 */
/* istanbul ignore next */
cov_1udnmm8pjh().s[161]++;
const getDirectionsUrl = (destination, label) => {
  /* istanbul ignore next */
  cov_1udnmm8pjh().f[25]++;
  const query =
  /* istanbul ignore next */
  (cov_1udnmm8pjh().s[162]++, label ?
  /* istanbul ignore next */
  (cov_1udnmm8pjh().b[39][0]++, `${label}@${destination.latitude},${destination.longitude}`) :
  /* istanbul ignore next */
  (cov_1udnmm8pjh().b[39][1]++, `${destination.latitude},${destination.longitude}`));
  // This URL format works with both iOS and Android
  /* istanbul ignore next */
  cov_1udnmm8pjh().s[163]++;
  return `https://www.google.com/maps/dir/?api=1&destination=${query}`;
};
/* istanbul ignore next */
cov_1udnmm8pjh().s[164]++;
exports.getDirectionsUrl = getDirectionsUrl;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,