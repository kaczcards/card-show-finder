{"version":3,"names":["supabase","BadgeTier","cov_qzs28n10m","s","getAllBadgeDefinitions","_ref","_asyncToGenerator","f","_ref2","from","select","order","ascending","data","error","b","map","badge","id","name","description","imageUrl","image_url","requirement","tier","console","apply","arguments","getUserBadges","_ref3","userId","_ref4","eq","userBadgesData","userBadgesError","length","badgeIds","badge_id","_ref5","in","badgeDefsData","badgeDefsError","userBadge","badgeDef","find","def","dateEarned","earned_at","filter","_x","getUnearnedBadges","_ref6","allBadges","userBadges","earnedBadgeIds","includes","_x2","getUserFeaturedBadges","_ref7","limit","undefined","tieredBadges","sort","a","tierPriority","_defineProperty","BRONZE","SILVER","GOLD","PLATINUM","tierDiff","dateA","Date","dateB","getTime","slice","_x3","getUserNextBadge","_ref9","unearnedBadges","_ref0","single","profileData","profileError","attendanceCount","show_attendance_count","attendanceBadges","_ref1","badgeDefinitions","badgeError","nextBadgeDef","requirement_count","highestBadgeDef","_x4","getBadgeProgress","_ref10","badgeId","_ref11","_ref12","current","required","percent","Math","min","_x5","_x6"],"sources":["badgeService.ts"],"sourcesContent":["import { supabase } from '../supabase';\nimport { Badge, BadgeTier } from '../types';\n\n/**\n * Get all badge definitions from the database\n */\nexport const getAllBadgeDefinitions = async (): Promise<Badge[]> => {\n  try {\n    const { data, error } = await supabase\n      .from('badges_definitions')\n      .select('*')\n      .order('requirement_count', { ascending: true });\n    \n    if (error) {\n      throw error;\n    }\n    \n    if (!data) {\n      return [];\n    }\n    \n    // Map the database records to our Badge type\n    return data.map(badge => ({\n      id: badge.id,\n      name: badge.name,\n      description: badge.description,\n      imageUrl: badge.image_url,\n      requirement: badge.requirement,\n      tier: badge.tier as BadgeTier,\n    }));\n  } catch (error) {\n    console.error('Error fetching badge definitions:', error);\n    return []; // Return empty array instead of throwing to prevent UI crashes\n  }\n};\n\n/**\n * Get a user's earned badges\n * @param userId The ID of the user\n */\nexport const getUserBadges = async (userId: string): Promise<Badge[]> => {\n  try {\n    // Step 1: Get the user's badge IDs and earned dates\n    const { data: userBadgesData, error: userBadgesError } = await supabase\n      .from('user_badges')\n      .select('badge_id, earned_at')\n      .eq('user_id', userId);\n    \n    if (userBadgesError) {\n      throw userBadgesError;\n    }\n    \n    if (!userBadgesData || userBadgesData.length === 0) {\n      return [];\n    }\n    \n    // Step 2: Get the badge definitions for those badge IDs\n    const badgeIds = userBadgesData.map(badge => badge.badge_id);\n    const { data: badgeDefsData, error: badgeDefsError } = await supabase\n      .from('badges_definitions')\n      .select('*')\n      .in('id', badgeIds);\n    \n    if (badgeDefsError) {\n      throw badgeDefsError;\n    }\n    \n    if (!badgeDefsData) {\n      return [];\n    }\n    \n    // Step 3: Combine the data\n    return userBadgesData.map(userBadge => {\n      // Find the corresponding badge definition\n      const badgeDef = badgeDefsData.find(def => def.id === userBadge.badge_id);\n      \n      if (!badgeDef) {\n        return null; // Skip if no matching definition found\n      }\n      \n      // Map to our Badge type\n      return {\n        id: badgeDef.id,\n        name: badgeDef.name,\n        description: badgeDef.description,\n        imageUrl: badgeDef.image_url,\n        requirement: badgeDef.requirement,\n        tier: badgeDef.tier as BadgeTier,\n        dateEarned: userBadge.earned_at,\n      };\n    }).filter(badge => badge !== null) as Badge[]; // Remove any nulls\n  } catch (error) {\n    console.error('Error fetching user badges:', error);\n    return []; // Return empty array instead of throwing to prevent UI crashes\n  }\n};\n\n/**\n * Get badges a user has not yet earned\n * @param userId The ID of the user\n */\nexport const getUnearnedBadges = async (userId: string): Promise<Badge[]> => {\n  try {\n    // First, get all badge definitions\n    const allBadges = await getAllBadgeDefinitions();\n    \n    // Then, get the user's earned badges\n    const userBadges = await getUserBadges(userId);\n    \n    // Get the IDs of the user's earned badges\n    const earnedBadgeIds = userBadges.map(badge => badge.id);\n    \n    // Filter out the badges the user has already earned\n    return allBadges.filter(badge => !earnedBadgeIds.includes(badge.id));\n  } catch (error) {\n    console.error('Error fetching unearned badges:', error);\n    return []; // Return empty array instead of throwing to prevent UI crashes\n  }\n};\n\n/**\n * Get a user's featured badges (most recent or highest tier)\n * @param userId The ID of the user\n * @param limit The maximum number of badges to return\n */\nexport const getUserFeaturedBadges = async (userId: string, limit: number = 3): Promise<Badge[]> => {\n  try {\n    const userBadges = await getUserBadges(userId);\n    \n    if (userBadges.length === 0) {\n      return [];\n    }\n    \n    // Sort badges by tier priority and then by date earned\n    const tieredBadges = userBadges.sort((a, b) => {\n      // Define tier priorities (higher number = higher priority)\n      const tierPriority = {\n        [BadgeTier.BRONZE]: 1,\n        [BadgeTier.SILVER]: 2,\n        [BadgeTier.GOLD]: 3,\n        [BadgeTier.PLATINUM]: 4,\n      };\n      \n      // First, sort by tier priority (highest first)\n      const tierDiff = tierPriority[b.tier] - tierPriority[a.tier];\n      if (tierDiff !== 0) {\n        return tierDiff;\n      }\n      \n      // If tiers are the same, sort by date earned (most recent first)\n      const dateA = new Date(a.dateEarned || 0);\n      const dateB = new Date(b.dateEarned || 0);\n      return dateB.getTime() - dateA.getTime();\n    });\n    \n    // Return the top badges based on the limit\n    return tieredBadges.slice(0, limit);\n  } catch (error) {\n    console.error('Error fetching featured badges:', error);\n    return []; // Return empty array instead of throwing to prevent UI crashes\n  }\n};\n\n/**\n * Get a user's next badge to earn (lowest requirement badge not yet earned)\n * @param userId The ID of the user\n */\nexport const getUserNextBadge = async (userId: string): Promise<Badge | null> => {\n  try {\n    const unearnedBadges = await getUnearnedBadges(userId);\n    \n    if (unearnedBadges.length === 0) {\n      return null;\n    }\n    \n    // Get the user's show attendance count from profile\n    const { data: profileData, error: profileError } = await supabase\n      .from('profiles')\n      .select('show_attendance_count')\n      .eq('id', userId)\n      .single();\n    \n    if (profileError) {\n      console.error('Error fetching profile data:', profileError);\n      return null; // Return null instead of throwing\n    }\n    \n    const attendanceCount = profileData?.show_attendance_count || 0;\n    \n    // Filter attendance badges and find the one with the lowest requirement above current count\n    const attendanceBadges = unearnedBadges.filter(\n      badge => badge.requirement === 'show_attendance'\n    );\n    \n    if (attendanceBadges.length === 0) {\n      return null;\n    }\n    \n    // Get badge definitions to access requirement_count\n    const { data: badgeDefinitions, error: badgeError } = await supabase\n      .from('badges_definitions')\n      .select('*')\n      .in('id', attendanceBadges.map(badge => badge.id))\n      .order('requirement_count', { ascending: true });\n    \n    if (badgeError) {\n      console.error('Error fetching badge definitions:', badgeError);\n      return null; // Return null instead of throwing\n    }\n    \n    if (!badgeDefinitions || badgeDefinitions.length === 0) {\n      return null;\n    }\n    \n    // Find the next badge to earn (lowest requirement_count above current attendance)\n    const nextBadgeDef = badgeDefinitions.find(\n      badge => badge.requirement_count > attendanceCount\n    );\n    \n    if (!nextBadgeDef) {\n      // If no badge found above current count, return the highest requirement badge\n      const highestBadgeDef = badgeDefinitions[badgeDefinitions.length - 1];\n      \n      // Map to our Badge type\n      return {\n        id: highestBadgeDef.id,\n        name: highestBadgeDef.name,\n        description: highestBadgeDef.description,\n        imageUrl: highestBadgeDef.image_url,\n        requirement: highestBadgeDef.requirement,\n        tier: highestBadgeDef.tier as BadgeTier,\n      };\n    }\n    \n    // Map to our Badge type\n    return {\n      id: nextBadgeDef.id,\n      name: nextBadgeDef.name,\n      description: nextBadgeDef.description,\n      imageUrl: nextBadgeDef.image_url,\n      requirement: nextBadgeDef.requirement,\n      tier: nextBadgeDef.tier as BadgeTier,\n    };\n  } catch (error) {\n    console.error('Error fetching next badge:', error);\n    return null; // Return null instead of throwing to prevent UI crashes\n  }\n};\n\n/**\n * Get badge progress information for a user\n * @param userId The ID of the user\n * @param badgeId The ID of the badge to check progress for\n */\nexport const getBadgeProgress = async (userId: string, badgeId: string): Promise<{\n  current: number;\n  required: number;\n  percent: number;\n} | null> => {\n  try {\n    // Get the badge definition\n    const { data: badgeDef, error: badgeError } = await supabase\n      .from('badges_definitions')\n      .select('*')\n      .eq('id', badgeId)\n      .single();\n    \n    if (badgeError) {\n      console.error('Error fetching badge definition:', badgeError);\n      return null; // Return null instead of throwing\n    }\n    \n    if (!badgeDef) {\n      console.error('Badge not found');\n      return null; // Return null instead of throwing\n    }\n    \n    // Get the user's profile to check progress\n    const { data: profileData, error: profileError } = await supabase\n      .from('profiles')\n      .select('show_attendance_count')\n      .eq('id', userId)\n      .single();\n    \n    if (profileError) {\n      console.error('Error fetching profile data:', profileError);\n      return null; // Return null instead of throwing\n    }\n    \n    const current = profileData?.show_attendance_count || 0;\n    const required = badgeDef.requirement_count || 0;\n    \n    // Calculate percentage (cap at 100%)\n    const percent = Math.min((current / required) * 100, 100);\n    \n    return {\n      current,\n      required,\n      percent,\n    };\n  } catch (error) {\n    console.error('Error getting badge progress:', error);\n    return null; // Return null instead of throwing to prevent UI crashes\n  }\n};\n"],"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","ignoreList":[]}