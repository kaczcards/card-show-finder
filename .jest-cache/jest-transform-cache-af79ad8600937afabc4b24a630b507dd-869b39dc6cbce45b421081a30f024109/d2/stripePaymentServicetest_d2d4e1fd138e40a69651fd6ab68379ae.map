{"version":3,"names":["_getJestObj","mock","supabase","auth","getSession","jest","fn","from","mockReturnThis","update","insert","eq","select","single","original","requireActual","Object","assign","SUBSCRIPTION_PLANS","id","name","description","price","type","duration","features","SubscriptionPlanType","DEALER","ORGANIZER","SubscriptionDuration","MONTHLY","ANNUAL","_calculateExpiryDate","mockImplementation","date","Date","setDate","getDate","_interopRequireDefault","require","_asyncToGenerator2","_env2","_stripePaymentService","_subscriptionTypes","_userRoleService","_require","originalEnv","process","env","beforeEach","resetModules","EXPO_PUBLIC_STRIPE_PUBLISHABLE_KEY","EXPO_PUBLIC_SUPABASE_URL","clearAllMocks","spyOn","console","afterEach","restoreAllMocks","global","fetch","describe","mockUserId","mockPlanId","mockInvalidPlanId","mockPaymentIntent","mockEphemeralKey","mockCustomer","mockPublishableKey","mockPlan","mockInitPaymentSheet","mockPresentPaymentSheet","mockSupabase","test","result","initializeStripe","expect","toBe","error","toHaveBeenCalledWith","mockResolvedValue","data","session","access_token","ok","json","paymentIntent","ephemeralKey","customer","publishableKey","default","createPaymentSheetForSubscription","toEqual","success","not","toHaveBeenCalled","message","toContain","mockRejectedValue","Error","status","code","mockImplementationOnce","then","useFakeTimers","Promise","_","reject","setTimeout","resultPromise","advanceTimersByTime","useRealTimers","transactionId","stringContaining","objectContaining","method","headers","body","any","String","mockResolvedValueOnce","processSubscriptionUpdate","resolves","toThrow","anything","updatePromise","role","UserRole","MVP_DEALER","subscription_status","payment_status","subscription_expiry","user_id","plan_id","amount","currency","transaction_id","mockRejectedValueOnce","error_message","callCount","resolve","results","all","SyntaxError"],"sources":["stripePaymentService.test.ts"],"sourcesContent":["/**\n * Test suite for stripePaymentService.ts\n * \n * This test suite focuses on failure paths and edge cases to ensure\n * robust error handling in the payment processing flow.\n */\n\nimport { \n  initializeStripe, \n  createPaymentSheetForSubscription, \n  processSubscriptionUpdate \n} from '../../src/services/stripePaymentService';\nimport { SubscriptionPlan, SubscriptionPlanType, SubscriptionDuration } from '../../src/services/subscriptionTypes';\nimport { UserRole } from '../../src/services/userRoleService';\n\n// Mock the supabase client\njest.mock('../../src/supabase', () => ({\n  supabase: {\n    auth: {\n      getSession: jest.fn(),\n    },\n    from: jest.fn().mockReturnThis(),\n    update: jest.fn().mockReturnThis(),\n    insert: jest.fn().mockReturnThis(),\n    eq: jest.fn().mockReturnThis(),\n    select: jest.fn().mockReturnThis(),\n    single: jest.fn(),\n  },\n}));\n\n// Mock the subscriptionTypes imports\njest.mock('../../src/services/subscriptionTypes', () => {\n  const original = jest.requireActual('../../src/services/subscriptionTypes');\n  return {\n    ...original,\n    SUBSCRIPTION_PLANS: [\n      {\n        id: 'dealer-monthly',\n        name: 'MVP Dealer Monthly',\n        description: 'Monthly subscription for MVP Dealers',\n        price: 9.99,\n        type: 'dealer',\n        duration: 'monthly',\n        features: ['Feature 1', 'Feature 2'],\n      },\n      {\n        id: 'dealer-annual',\n        name: 'MVP Dealer Annual',\n        description: 'Annual subscription for MVP Dealers',\n        price: 99.99,\n        type: 'dealer',\n        duration: 'annual',\n        features: ['Feature 1', 'Feature 2', 'Feature 3'],\n      },\n      {\n        id: 'organizer-monthly',\n        name: 'Show Organizer Monthly',\n        description: 'Monthly subscription for Show Organizers',\n        price: 19.99,\n        type: 'organizer',\n        duration: 'monthly',\n        features: ['Feature A', 'Feature B'],\n      },\n    ],\n    SubscriptionPlanType: {\n      DEALER: 'dealer',\n      ORGANIZER: 'organizer',\n    },\n    SubscriptionDuration: {\n      MONTHLY: 'monthly',\n      ANNUAL: 'annual',\n    },\n    _calculateExpiryDate: jest.fn().mockImplementation(() => {\n      const date = new Date();\n      date.setDate(date.getDate() + 30); // Default to +30 days\n      return date;\n    }),\n  };\n});\n\n// Mock environment variables\nconst originalEnv = process.env;\nbeforeEach(() => {\n  jest.resetModules();\n  process.env = { ...originalEnv };\n  process.env.EXPO_PUBLIC_STRIPE_PUBLISHABLE_KEY = 'pk_test_mock_key';\n  process.env.EXPO_PUBLIC_SUPABASE_URL = 'https://mock-supabase-url.com';\n\n  // Reset all mocks\n  jest.clearAllMocks();\n  \n  // Mock console methods to prevent noise in test output\n  jest.spyOn(console, 'error').mockImplementation(() => {});\n  jest.spyOn(console, 'warn').mockImplementation(() => {});\n});\n\nafterEach(() => {\n  process.env = originalEnv;\n  jest.restoreAllMocks();\n});\n\n// Mock global fetch\nglobal.fetch = jest.fn();\n\ndescribe('stripePaymentService', () => {\n  // Mock data\n  const mockUserId = 'user-123';\n  const mockPlanId = 'dealer-monthly';\n  const mockInvalidPlanId = 'invalid-plan';\n  const mockPaymentIntent = 'pi_mock_payment_intent';\n  const mockEphemeralKey = 'ek_mock_ephemeral_key';\n  const mockCustomer = 'cus_mock_customer';\n  const mockPublishableKey = 'pk_test_mock_key';\n  \n  const mockPlan: SubscriptionPlan = {\n    id: 'dealer-monthly',\n    name: 'MVP Dealer Monthly',\n    description: 'Monthly subscription for MVP Dealers',\n    price: 9.99,\n    type: SubscriptionPlanType.DEALER,\n    duration: SubscriptionDuration.MONTHLY,\n    features: ['Feature 1', 'Feature 2'],\n  };\n\n  // Mock Stripe functions\n  const mockInitPaymentSheet = jest.fn();\n  const mockPresentPaymentSheet = jest.fn();\n\n  // Mock Supabase responses\n  const mockSupabase = require('../../src/supabase').supabase;\n\n  describe('initializeStripe', () => {\n    test('should return true when publishable key is set', () => {\n      // Arrange\n      process.env.EXPO_PUBLIC_STRIPE_PUBLISHABLE_KEY = 'pk_test_valid_key';\n      \n      // Act\n      const result = initializeStripe();\n      \n      // Assert\n      expect(result).toBe(true);\n    });\n\n    test('should return false when publishable key is missing', () => {\n      // Arrange\n      delete process.env.EXPO_PUBLIC_STRIPE_PUBLISHABLE_KEY;\n      \n      // Act\n      const result = initializeStripe();\n      \n      // Assert\n      expect(result).toBe(false);\n      expect(console.error).toHaveBeenCalledWith(\n        'Stripe publishable key is not set. Please check your environment variables.'\n      );\n    });\n\n    test('should return false when publishable key is empty', () => {\n      // Arrange\n      process.env.EXPO_PUBLIC_STRIPE_PUBLISHABLE_KEY = '';\n      \n      // Act\n      const result = initializeStripe();\n      \n      // Assert\n      expect(result).toBe(false);\n      expect(console.error).toHaveBeenCalledWith(\n        'Stripe publishable key is not set. Please check your environment variables.'\n      );\n    });\n  });\n\n  describe('createPaymentSheetForSubscription', () => {\n    beforeEach(() => {\n      // Default mock for successful session retrieval\n      mockSupabase.auth.getSession.mockResolvedValue({\n        data: {\n          session: {\n            access_token: 'mock-access-token',\n          },\n        },\n        error: null,\n      });\n\n      // Default mock for successful fetch\n      (global.fetch as jest.Mock).mockResolvedValue({\n        ok: true,\n        json: jest.fn().mockResolvedValue({\n          paymentIntent: mockPaymentIntent,\n          ephemeralKey: mockEphemeralKey,\n          customer: mockCustomer,\n          publishableKey: mockPublishableKey,\n        }),\n      });\n\n      // Default mocks for Stripe functions\n      mockInitPaymentSheet.mockResolvedValue({ error: null });\n      mockPresentPaymentSheet.mockResolvedValue({ error: null });\n    });\n\n    test('should return error for invalid plan ID', async () => {\n      // Act\n      const result = await createPaymentSheetForSubscription(\n        mockUserId,\n        mockInvalidPlanId,\n        mockInitPaymentSheet,\n        mockPresentPaymentSheet\n      );\n      \n      // Assert\n      expect(result).toEqual({\n        success: false,\n        error: 'Subscription plan not found.',\n      });\n      expect(global.fetch).not.toHaveBeenCalled();\n    });\n\n    test('should handle session retrieval failure', async () => {\n      // Arrange\n      mockSupabase.auth.getSession.mockResolvedValue({\n        data: { session: null },\n        error: { message: 'Failed to retrieve session' },\n      });\n      \n      // Act\n      const result = await createPaymentSheetForSubscription(\n        mockUserId,\n        mockPlanId,\n        mockInitPaymentSheet,\n        mockPresentPaymentSheet\n      );\n      \n      // Assert\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('Failed to retrieve session');\n      expect(console.error).toHaveBeenCalled();\n    });\n\n    test('should handle network failure during payment intent creation', async () => {\n      // Arrange\n      (global.fetch as jest.Mock).mockRejectedValue(new Error('Network error'));\n      \n      // Act\n      const result = await createPaymentSheetForSubscription(\n        mockUserId,\n        mockPlanId,\n        mockInitPaymentSheet,\n        mockPresentPaymentSheet\n      );\n      \n      // Assert\n      expect(result.success).toBe(false);\n      expect(result.error).toBe('Network error');\n      expect(console.error).toHaveBeenCalled();\n    });\n\n    test('should handle payment intent creation error (400)', async () => {\n      // Arrange\n      (global.fetch as jest.Mock).mockResolvedValue({\n        ok: false,\n        status: 400,\n        json: jest.fn().mockResolvedValue({\n          error: 'Invalid request parameters',\n        }),\n      });\n      \n      // Act\n      const result = await createPaymentSheetForSubscription(\n        mockUserId,\n        mockPlanId,\n        mockInitPaymentSheet,\n        mockPresentPaymentSheet\n      );\n      \n      // Assert\n      expect(result.success).toBe(false);\n      expect(result.error).toBe('Invalid request parameters');\n    });\n\n    test('should handle payment intent creation error (401)', async () => {\n      // Arrange\n      (global.fetch as jest.Mock).mockResolvedValue({\n        ok: false,\n        status: 401,\n        json: jest.fn().mockResolvedValue({\n          error: 'Unauthorized access',\n        }),\n      });\n      \n      // Act\n      const result = await createPaymentSheetForSubscription(\n        mockUserId,\n        mockPlanId,\n        mockInitPaymentSheet,\n        mockPresentPaymentSheet\n      );\n      \n      // Assert\n      expect(result.success).toBe(false);\n      expect(result.error).toBe('Unauthorized access');\n    });\n\n    test('should handle payment intent creation error (500)', async () => {\n      // Arrange\n      (global.fetch as jest.Mock).mockResolvedValue({\n        ok: false,\n        status: 500,\n        json: jest.fn().mockResolvedValue({\n          error: 'Server error',\n        }),\n      });\n      \n      // Act\n      const result = await createPaymentSheetForSubscription(\n        mockUserId,\n        mockPlanId,\n        mockInitPaymentSheet,\n        mockPresentPaymentSheet\n      );\n      \n      // Assert\n      expect(result.success).toBe(false);\n      expect(result.error).toBe('Server error');\n    });\n\n    test('should handle malformed API response', async () => {\n      // Arrange\n      (global.fetch as jest.Mock).mockResolvedValue({\n        ok: true,\n        json: jest.fn().mockResolvedValue({\n          // Missing required fields\n          customer: mockCustomer,\n        }),\n      });\n      \n      // Act\n      const result = await createPaymentSheetForSubscription(\n        mockUserId,\n        mockPlanId,\n        mockInitPaymentSheet,\n        mockPresentPaymentSheet\n      );\n      \n      // Assert\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('Cannot read properties of undefined');\n    });\n\n    test('should handle Stripe initPaymentSheet error', async () => {\n      // Arrange\n      mockInitPaymentSheet.mockResolvedValue({\n        error: { code: 'initialization_error', message: 'Failed to initialize payment sheet' },\n      });\n      \n      // Act\n      const result = await createPaymentSheetForSubscription(\n        mockUserId,\n        mockPlanId,\n        mockInitPaymentSheet,\n        mockPresentPaymentSheet\n      );\n      \n      // Assert\n      expect(result.success).toBe(false);\n      expect(result.error).toBe('Initialization failed: Failed to initialize payment sheet');\n      expect(console.error).toHaveBeenCalled();\n    });\n\n    test('should handle Stripe presentPaymentSheet canceled error', async () => {\n      // Arrange\n      mockPresentPaymentSheet.mockResolvedValue({\n        error: { code: 'Canceled', message: 'The payment was canceled' },\n      });\n      \n      // Act\n      const result = await createPaymentSheetForSubscription(\n        mockUserId,\n        mockPlanId,\n        mockInitPaymentSheet,\n        mockPresentPaymentSheet\n      );\n      \n      // Assert\n      expect(result.success).toBe(false);\n      expect(result.error).toBe('Payment was canceled.');\n    });\n\n    test('should handle Stripe presentPaymentSheet payment failure', async () => {\n      // Arrange\n      mockPresentPaymentSheet.mockResolvedValue({\n        error: { code: 'payment_failed', message: 'The payment failed' },\n      });\n      \n      // Act\n      const result = await createPaymentSheetForSubscription(\n        mockUserId,\n        mockPlanId,\n        mockInitPaymentSheet,\n        mockPresentPaymentSheet\n      );\n      \n      // Assert\n      expect(result.success).toBe(false);\n      expect(result.error).toBe('Payment failed: The payment failed');\n      expect(console.error).toHaveBeenCalled();\n    });\n\n    test('should handle post-payment processing failures', async () => {\n      // Arrange\n      // Mock processSubscriptionUpdate to fail\n      jest.spyOn(global, 'Promise').mockImplementationOnce(() => {\n        return {\n          then: () => {\n            throw new Error('Failed to process subscription');\n          },\n        } as any;\n      });\n      \n      // Act\n      const result = await createPaymentSheetForSubscription(\n        mockUserId,\n        mockPlanId,\n        mockInitPaymentSheet,\n        mockPresentPaymentSheet\n      );\n      \n      // Assert\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('Failed to process subscription');\n    });\n\n    test('should handle timeout during payment intent creation', async () => {\n      // Arrange\n      jest.useFakeTimers();\n      (global.fetch as jest.Mock).mockImplementation(() => {\n        return new Promise((_, reject) => {\n          setTimeout(() => {\n            reject(new Error('Request timed out'));\n          }, 30000);\n        });\n      });\n      \n      // Act\n      const resultPromise = createPaymentSheetForSubscription(\n        mockUserId,\n        mockPlanId,\n        mockInitPaymentSheet,\n        mockPresentPaymentSheet\n      );\n      \n      // Fast-forward time\n      jest.advanceTimersByTime(31000);\n      \n      // Assert\n      const result = await resultPromise;\n      expect(result.success).toBe(false);\n      expect(result.error).toBe('Request timed out');\n      \n      jest.useRealTimers();\n    });\n\n    test('should handle expired session', async () => {\n      // Arrange\n      mockSupabase.auth.getSession.mockResolvedValue({\n        data: { session: null },\n        error: null,\n      });\n      \n      // Act\n      const result = await createPaymentSheetForSubscription(\n        mockUserId,\n        mockPlanId,\n        mockInitPaymentSheet,\n        mockPresentPaymentSheet\n      );\n      \n      // Assert\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('Failed to create payment intent');\n    });\n\n    test('should handle invalid user ID', async () => {\n      // Arrange\n      (global.fetch as jest.Mock).mockResolvedValue({\n        ok: false,\n        status: 400,\n        json: jest.fn().mockResolvedValue({\n          error: 'Invalid user ID',\n        }),\n      });\n      \n      // Act\n      const result = await createPaymentSheetForSubscription(\n        'invalid-user-id',\n        mockPlanId,\n        mockInitPaymentSheet,\n        mockPresentPaymentSheet\n      );\n      \n      // Assert\n      expect(result.success).toBe(false);\n      expect(result.error).toBe('Invalid user ID');\n    });\n\n    test('should handle successful payment flow', async () => {\n      // Act\n      const result = await createPaymentSheetForSubscription(\n        mockUserId,\n        mockPlanId,\n        mockInitPaymentSheet,\n        mockPresentPaymentSheet\n      );\n      \n      // Assert\n      expect(result.success).toBe(true);\n      expect(result.transactionId).toBe(mockPaymentIntent);\n      expect(global.fetch).toHaveBeenCalledWith(\n        expect.stringContaining('/functions/v1/create-payment-intent'),\n        expect.objectContaining({\n          method: 'POST',\n          headers: expect.objectContaining({\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer mock-access-token',\n          }),\n          body: expect.any(String),\n        })\n      );\n    });\n  });\n\n  describe('processSubscriptionUpdate', () => {\n    beforeEach(() => {\n      // Default mock for successful profile update\n      mockSupabase.from.mockReturnThis();\n      mockSupabase.update.mockReturnThis();\n      mockSupabase.eq.mockReturnThis();\n      mockSupabase.select.mockReturnThis();\n      mockSupabase.single.mockResolvedValue({ data: {}, error: null });\n      mockSupabase.insert.mockResolvedValue({ data: {}, error: null });\n    });\n\n    test('should handle profile update failure', async () => {\n      // Arrange\n      mockSupabase.single.mockResolvedValueOnce({\n        data: null,\n        error: { message: 'Failed to update profile' },\n      });\n      \n      // Act & Assert\n      await expect(\n        processSubscriptionUpdate(mockUserId, mockPlan, mockPaymentIntent)\n      ).resolves.not.toThrow();\n      \n      expect(console.error).toHaveBeenCalledWith(\n        expect.stringContaining('Failed to process subscription update after payment:'),\n        expect.anything()\n      );\n    });\n\n    test('should handle payment logging failure', async () => {\n      // Arrange\n      // First call succeeds (profile update)\n      mockSupabase.single.mockResolvedValueOnce({\n        data: {},\n        error: null,\n      });\n      \n      // Second call fails (payment logging)\n      mockSupabase.insert.mockResolvedValueOnce({\n        data: null,\n        error: { message: 'Failed to log payment' },\n      });\n      \n      // Act & Assert\n      await expect(\n        processSubscriptionUpdate(mockUserId, mockPlan, mockPaymentIntent)\n      ).resolves.not.toThrow();\n      \n      expect(console.error).toHaveBeenCalledWith(\n        'Error logging payment transaction:',\n        expect.anything()\n      );\n    });\n\n    test('should handle network timeout during profile update', async () => {\n      // Arrange\n      jest.useFakeTimers();\n      mockSupabase.single.mockImplementationOnce(() => {\n        return new Promise((_, reject) => {\n          setTimeout(() => {\n            reject(new Error('Request timed out'));\n          }, 30000);\n        });\n      });\n      \n      // Act\n      const updatePromise = processSubscriptionUpdate(\n        mockUserId,\n        mockPlan,\n        mockPaymentIntent\n      );\n      \n      // Fast-forward time\n      jest.advanceTimersByTime(31000);\n      \n      // Assert\n      await expect(updatePromise).resolves.not.toThrow();\n      expect(console.error).toHaveBeenCalled();\n      \n      jest.useRealTimers();\n    });\n\n    test('should update user profile with correct subscription details', async () => {\n      // Act\n      await processSubscriptionUpdate(mockUserId, mockPlan, mockPaymentIntent);\n      \n      // Assert\n      expect(mockSupabase.from).toHaveBeenCalledWith('profiles');\n      expect(mockSupabase.update).toHaveBeenCalledWith(\n        expect.objectContaining({\n          role: UserRole.MVP_DEALER,\n          subscription_status: 'active',\n          payment_status: 'paid',\n          subscription_expiry: expect.any(String),\n        })\n      );\n      expect(mockSupabase.eq).toHaveBeenCalledWith('id', mockUserId);\n    });\n\n    test('should log successful payment transaction', async () => {\n      // Act\n      await processSubscriptionUpdate(mockUserId, mockPlan, mockPaymentIntent);\n      \n      // Assert\n      expect(mockSupabase.from).toHaveBeenCalledWith('payments');\n      expect(mockSupabase.insert).toHaveBeenCalledWith(\n        expect.objectContaining({\n          user_id: mockUserId,\n          plan_id: mockPlan.id,\n          amount: mockPlan.price,\n          currency: 'usd',\n          status: 'succeeded',\n          transaction_id: mockPaymentIntent,\n        })\n      );\n    });\n\n    test('should log failed payment transaction on error', async () => {\n      // Arrange\n      mockSupabase.single.mockRejectedValueOnce(new Error('Database error'));\n      \n      // Act\n      await processSubscriptionUpdate(mockUserId, mockPlan, mockPaymentIntent);\n      \n      // Assert\n      expect(mockSupabase.from).toHaveBeenCalledWith('payments');\n      expect(mockSupabase.insert).toHaveBeenCalledWith(\n        expect.objectContaining({\n          user_id: mockUserId,\n          plan_id: mockPlan.id,\n          amount: mockPlan.price,\n          currency: 'usd',\n          status: 'failed',\n          transaction_id: mockPaymentIntent,\n          error_message: 'Post-payment profile update failed.',\n        })\n      );\n    });\n  });\n\n  describe('Edge cases', () => {\n    test('should handle missing Supabase URL environment variable', async () => {\n      // Arrange\n      delete process.env.EXPO_PUBLIC_SUPABASE_URL;\n      \n      // Act\n      const result = await createPaymentSheetForSubscription(\n        mockUserId,\n        mockPlanId,\n        mockInitPaymentSheet,\n        mockPresentPaymentSheet\n      );\n      \n      // Assert\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('Invalid URL');\n    });\n\n    test('should handle concurrent payment attempts', async () => {\n      // Arrange\n      let callCount = 0;\n      (global.fetch as jest.Mock).mockImplementation(() => {\n        callCount++;\n        if (callCount === 1) {\n          return Promise.resolve({\n            ok: true,\n            json: () => Promise.resolve({\n              paymentIntent: mockPaymentIntent,\n              ephemeralKey: mockEphemeralKey,\n              customer: mockCustomer,\n              publishableKey: mockPublishableKey,\n            }),\n          });\n        } else {\n          return Promise.resolve({\n            ok: false,\n            json: () => Promise.resolve({\n              error: 'Payment already in progress',\n            }),\n          });\n        }\n      });\n      \n      // Act\n      const results = await Promise.all([\n        createPaymentSheetForSubscription(\n          mockUserId,\n          mockPlanId,\n          mockInitPaymentSheet,\n          mockPresentPaymentSheet\n        ),\n        createPaymentSheetForSubscription(\n          mockUserId,\n          mockPlanId,\n          mockInitPaymentSheet,\n          mockPresentPaymentSheet\n        ),\n      ]);\n      \n      // Assert\n      expect(results[0].success).toBe(true);\n      expect(results[1].success).toBe(false);\n      expect(results[1].error).toBe('Payment already in progress');\n    });\n\n    test('should handle JSON parse errors in API response', async () => {\n      // Arrange\n      (global.fetch as jest.Mock).mockResolvedValue({\n        ok: true,\n        json: jest.fn().mockRejectedValue(new SyntaxError('Unexpected token < in JSON')),\n      });\n      \n      // Act\n      const result = await createPaymentSheetForSubscription(\n        mockUserId,\n        mockPlanId,\n        mockInitPaymentSheet,\n        mockPresentPaymentSheet\n      );\n      \n      // Assert\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('Unexpected token < in JSON');\n    });\n\n    test('should handle empty response from payment intent creation', async () => {\n      // Arrange\n      (global.fetch as jest.Mock).mockResolvedValue({\n        ok: true,\n        json: jest.fn().mockResolvedValue(null),\n      });\n      \n      // Act\n      const result = await createPaymentSheetForSubscription(\n        mockUserId,\n        mockPlanId,\n        mockInitPaymentSheet,\n        mockPresentPaymentSheet\n      );\n      \n      // Assert\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('Cannot read properties of null');\n    });\n\n    test('should handle rate limiting from Stripe API', async () => {\n      // Arrange\n      (global.fetch as jest.Mock).mockResolvedValue({\n        ok: false,\n        status: 429,\n        json: jest.fn().mockResolvedValue({\n          error: 'Too many requests. Please try again later.',\n        }),\n      });\n      \n      // Act\n      const result = await createPaymentSheetForSubscription(\n        mockUserId,\n        mockPlanId,\n        mockInitPaymentSheet,\n        mockPresentPaymentSheet\n      );\n      \n      // Assert\n      expect(result.success).toBe(false);\n      expect(result.error).toBe('Too many requests. Please try again later.');\n    });\n\n    test('should handle Stripe API service outage', async () => {\n      // Arrange\n      (global.fetch as jest.Mock).mockResolvedValue({\n        ok: false,\n        status: 503,\n        json: jest.fn().mockResolvedValue({\n          error: 'Stripe API is currently unavailable',\n        }),\n      });\n      \n      // Act\n      const result = await createPaymentSheetForSubscription(\n        mockUserId,\n        mockPlanId,\n        mockInitPaymentSheet,\n        mockPresentPaymentSheet\n      );\n      \n      // Assert\n      expect(result.success).toBe(false);\n      expect(result.error).toBe('Stripe API is currently unavailable');\n    });\n\n    test('should handle invalid currency code', async () => {\n      // Arrange\n      (global.fetch as jest.Mock).mockResolvedValue({\n        ok: false,\n        status: 400,\n        json: jest.fn().mockResolvedValue({\n          error: 'Invalid currency code',\n        }),\n      });\n      \n      // Act\n      const result = await createPaymentSheetForSubscription(\n        mockUserId,\n        mockPlanId,\n        mockInitPaymentSheet,\n        mockPresentPaymentSheet\n      );\n      \n      // Assert\n      expect(result.success).toBe(false);\n      expect(result.error).toBe('Invalid currency code');\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}