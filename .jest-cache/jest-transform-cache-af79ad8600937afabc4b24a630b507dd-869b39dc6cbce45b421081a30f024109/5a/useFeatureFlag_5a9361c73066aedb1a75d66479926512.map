{"version":3,"names":["useFeatureFlag","_featureName","cov_1gt5jre1hu","f","s","FeatureFlags","MESSAGING_V2","ADVANCED_SEARCH","NEW_PROFILE_UI","ENHANCED_MAPS","DEALER_ANALYTICS"],"sources":["useFeatureFlag.ts"],"sourcesContent":["/**\n * A simple feature flag hook that determines if a feature is enabled\n * \n * Currently returns false for all features (stub implementation)\n * Can be enhanced later to check against a real feature flag system\n */\nexport function useFeatureFlag(_featureName: string): boolean {\n  // In a real implementation, this would check against a config or API\n  // For now, just return false for all feature flags\n  return false;\n}\n\n/**\n * Common feature flag names used throughout the app\n * Adding them here provides type safety and autocompletion\n */\nexport const FeatureFlags = {\n  MESSAGING_V2: 'messaging_v2_enabled',\n  ADVANCED_SEARCH: 'advanced_search_enabled',\n  NEW_PROFILE_UI: 'new_profile_ui_enabled',\n  ENHANCED_MAPS: 'enhanced_maps_enabled',\n  DEALER_ANALYTICS: 'dealer_analytics_enabled',\n} as const;\n\n// Type for feature flag names\nexport type FeatureFlagName = typeof FeatureFlags[keyof typeof FeatureFlags] | string;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,OAAO,SAASA,cAAcA,CAACC,YAAoB,EAAW;EAAAC,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EAG5D,OAAO,KAAK;AACd;AAMA,OAAO,IAAMC,YAAY,IAAAH,cAAA,GAAAE,CAAA,OAAG;EAC1BE,YAAY,EAAE,sBAAsB;EACpCC,eAAe,EAAE,yBAAyB;EAC1CC,cAAc,EAAE,wBAAwB;EACxCC,aAAa,EAAE,uBAAuB;EACtCC,gBAAgB,EAAE;AACpB,CAAC,CAAS","ignoreList":[]}