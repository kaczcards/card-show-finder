{"version":3,"names":["AsyncStorage","CACHE_KEYS","cov_aqm4thb94","s","SHOWS","SHOW_FILTERS","SHOW_TIMESTAMP","CACHE_EXPIRATION","cacheShows","_ref","_asyncToGenerator","shows","filters","f","timestamp","Date","now","setItem","JSON","stringify","toString","console","log","length","toLocaleString","error","_x","_x2","apply","arguments","getCachedShows","_ref2","timestampStr","getItem","b","parseInt","showsJson","filtersJson","parse","Math","round","clearShowsCache","_ref3","removeItem"],"sources":["cacheService.ts"],"sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Show, ShowFilters } from '../types';\n\n// Define cache keys\nconst CACHE_KEYS = {\n  SHOWS: 'cache:shows',\n  SHOW_FILTERS: 'cache:show_filters',\n  SHOW_TIMESTAMP: 'cache:shows_timestamp',\n};\n\n// Cache expiration time (in milliseconds)\nconst CACHE_EXPIRATION = 60 * 60 * 1000; // 1 hour\n\n/**\n * Caches show data along with the timestamp\n * @param shows The shows data to cache\n * @param filters The filters used to fetch the shows\n */\nexport const cacheShows = async (shows: Show[], filters: ShowFilters): Promise<void> => {\n  try {\n    const timestamp = Date.now();\n    \n    // Store the shows data\n    await AsyncStorage.setItem(CACHE_KEYS.SHOWS, JSON.stringify(shows));\n    \n    // Store the filters used\n    await AsyncStorage.setItem(CACHE_KEYS.SHOW_FILTERS, JSON.stringify(filters));\n    \n    // Store the timestamp\n    await AsyncStorage.setItem(CACHE_KEYS.SHOW_TIMESTAMP, timestamp.toString());\n    \n    console.log(`Cached ${shows.length} shows at ${new Date(timestamp).toLocaleString()}`);\n  } catch (error) {\n    console.error('Error caching shows:', error);\n  }\n};\n\n/**\n * Retrieves cached show data if available and not expired\n * @returns The cached shows and filters, or null if cache is expired or not available\n */\nexport const getCachedShows = async (): Promise<{ shows: Show[]; filters: ShowFilters } | null> => {\n  try {\n    // Get the timestamp\n    const timestampStr = await AsyncStorage.getItem(CACHE_KEYS.SHOW_TIMESTAMP);\n    \n    if (!timestampStr) {\n      return null;\n    }\n    \n    const timestamp = parseInt(timestampStr, 10);\n    const now = Date.now();\n    \n    // Check if cache has expired\n    if (now - timestamp > CACHE_EXPIRATION) {\n      console.log('Show cache expired, fetching fresh data');\n      return null;\n    }\n    \n    // Get the cached shows\n    const showsJson = await AsyncStorage.getItem(CACHE_KEYS.SHOWS);\n    const filtersJson = await AsyncStorage.getItem(CACHE_KEYS.SHOW_FILTERS);\n    \n    if (!showsJson || !filtersJson) {\n      return null;\n    }\n    \n    const shows = JSON.parse(showsJson) as Show[];\n    const filters = JSON.parse(filtersJson) as ShowFilters;\n    \n    console.log(`Retrieved ${shows.length} shows from cache (${Math.round((now - timestamp) / 1000 / 60)} minutes old)`);\n    \n    return { shows, filters };\n  } catch (error) {\n    console.error('Error retrieving cached shows:', error);\n    return null;\n  }\n};\n\n/**\n * Clears the shows cache\n */\nexport const clearShowsCache = async (): Promise<void> => {\n  try {\n    await AsyncStorage.removeItem(CACHE_KEYS.SHOWS);\n    await AsyncStorage.removeItem(CACHE_KEYS.SHOW_FILTERS);\n    await AsyncStorage.removeItem(CACHE_KEYS.SHOW_TIMESTAMP);\n    console.log('Shows cache cleared');\n  } catch (error) {\n    console.error('Error clearing shows cache:', error);\n  }\n};\n"],"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","ignoreList":[]}