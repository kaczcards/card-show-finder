{"version":3,"names":["React","createNativeStackNavigator","LoginScreen","RegisterScreen","ForgotPasswordScreen","ResetPasswordScreen","jsx","_jsx","jsxs","_jsxs","AuthStack","cov_1px2i6r3u1","s","AuthNavigator","f","Navigator","initialRouteName","screenOptions","headerShown","contentStyle","backgroundColor","animation","children","Screen","name","component","props","Object","assign"],"sources":["AuthNavigator.tsx"],"sourcesContent":["import React from 'react';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\n// Import auth screens\nimport {\n  LoginScreen,\n  RegisterScreen,\n  ForgotPasswordScreen,\n  ResetPasswordScreen,\n} from '../screens/Auth';\n\n// Define navigation types for auth flow\nexport type AuthStackParamList = {\n  Login: undefined;\n  Register: undefined;\n  ForgotPassword: undefined;\n  ResetPassword: { token?: string };\n};\n\n// Create navigation stack\nconst AuthStack = createNativeStackNavigator<AuthStackParamList>();\n\n/**\n * AuthNavigator - Handles navigation between authentication screens\n * Includes Login, Register, and Forgot Password screens\n */\nconst AuthNavigator: React.FC = () => {\n  return (\n    <AuthStack.Navigator\n      initialRouteName=\"Login\"\n      screenOptions={{\n        headerShown: false,\n        contentStyle: { backgroundColor: 'white' },\n        animation: 'slide_from_right',\n      }}\n    >\n      <AuthStack.Screen name=\"Login\" component={LoginScreen} />\n      <AuthStack.Screen name=\"Register\" component={RegisterScreen} />\n      <AuthStack.Screen name=\"ForgotPassword\" component={ForgotPasswordScreen} />\n      {/* Use a render callback so TypeScript infers the correct prop types */}\n      <AuthStack.Screen name=\"ResetPassword\">\n        {props => <ResetPasswordScreen {...props} />}\n      </AuthStack.Screen>\n    </AuthStack.Navigator>\n  );\n};\n\nexport default AuthNavigator;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,0BAA0B,QAAQ,gCAAgC;AAG3E,SACEC,WAAW,EACXC,cAAc,EACdC,oBAAoB,EACpBC,mBAAmB,QACd,iBAAiB;AAAC,SAAAC,GAAA,IAAAC,IAAA,EAAAC,IAAA,IAAAC,KAAA;AAWzB,IAAMC,SAAS,IAAAC,cAAA,GAAAC,CAAA,OAAGX,0BAA0B,CAAqB,CAAC;AAACU,cAAA,GAAAC,CAAA;AAMnE,IAAMC,aAAuB,GAAG,SAA1BA,aAAuBA,CAAA,EAAS;EAAAF,cAAA,GAAAG,CAAA;EAAAH,cAAA,GAAAC,CAAA;EACpC,OACEH,KAAA,CAACC,SAAS,CAACK,SAAS;IAClBC,gBAAgB,EAAC,OAAO;IACxBC,aAAa,EAAE;MACbC,WAAW,EAAE,KAAK;MAClBC,YAAY,EAAE;QAAEC,eAAe,EAAE;MAAQ,CAAC;MAC1CC,SAAS,EAAE;IACb,CAAE;IAAAC,QAAA,GAEFf,IAAA,CAACG,SAAS,CAACa,MAAM;MAACC,IAAI,EAAC,OAAO;MAACC,SAAS,EAAEvB;IAAY,CAAE,CAAC,EACzDK,IAAA,CAACG,SAAS,CAACa,MAAM;MAACC,IAAI,EAAC,UAAU;MAACC,SAAS,EAAEtB;IAAe,CAAE,CAAC,EAC/DI,IAAA,CAACG,SAAS,CAACa,MAAM;MAACC,IAAI,EAAC,gBAAgB;MAACC,SAAS,EAAErB;IAAqB,CAAE,CAAC,EAE3EG,IAAA,CAACG,SAAS,CAACa,MAAM;MAACC,IAAI,EAAC,eAAe;MAAAF,QAAA,EACnC,SAAAA,SAAAI,KAAK,EAAI;QAAAf,cAAA,GAAAG,CAAA;QAAAH,cAAA,GAAAC,CAAA;QAAA,OAAAL,IAAA,CAACF,mBAAmB,EAAAsB,MAAA,CAAAC,MAAA,KAAKF,KAAK,CAAG,CAAC;MAAD;IAAC,CAC5B,CAAC;EAAA,CACA,CAAC;AAE1B,CAAC;AAED,eAAeb,aAAa","ignoreList":[]}