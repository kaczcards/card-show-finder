{"version":3,"names":["useState","useEffect","showSeriesService","cov_to4rgmctv","s","useUnclaimedShows","organizerId","f","_ref","_ref2","_slicedToArray","unclaimedItems","setUnclaimedItems","_ref3","_ref4","isLoading","setIsLoading","_ref5","_ref6","error","setError","fetchUnclaimedShows","_ref7","_asyncToGenerator","console","log","unclaimedSeries","unclaimedStandaloneShows","getAllShowSeries","undefined","seriesErr","getUnclaimedShows","showsErr","combinedItems","concat","_toConsumableArray","map","series","type","data","show","getItemDate","item","b","startDate","Date","getTime","Number","MAX_SAFE_INTEGER","nextShowDate","sort","a","length","err","Error","apply","arguments","refreshUnclaimedShows"],"sources":["useUnclaimedShows.ts"],"sourcesContent":["// src/hooks/useUnclaimedShows.ts\nimport { useState, useEffect } from 'react';\nimport { ShowSeries, Show } from '../types';\nimport { showSeriesService } from '../services/showSeriesService';\n\n// Interface for combined unclaimed items (shows or series)\nexport interface UnclaimedItem {\n  type: 'series' | 'show';\n  data: ShowSeries | Show;\n}\n\n/**\n * Custom hook to fetch and manage unclaimed shows data\n * @param organizerId The organizer ID (used for claiming shows later)\n * @returns Object containing unclaimed items, loading state, and error state\n */\nexport const useUnclaimedShows = (organizerId: string) => {\n  // State for unclaimed items (shows and series)\n  const [unclaimedItems, setUnclaimedItems] = useState<UnclaimedItem[]>([]);\n  // Loading state - start with true as we'll fetch data immediately\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  // Error state - null when no errors\n  const [error, setError] = useState<Error | null>(null);\n\n  // Function to fetch unclaimed shows and series\n  const fetchUnclaimedShows = async () => {\n    try {\n      console.log('[useUnclaimedShows] Starting to fetch unclaimed shows and series');\n      setIsLoading(true);\n      setError(null);\n      \n      let unclaimedSeries: ShowSeries[] = [];\n      let unclaimedStandaloneShows: Show[] = [];\n\n      /* -----------------------------------------\n       * 1️⃣  Fetch series – isolate failures here\n       * ----------------------------------------*/\n      try {\n        console.log('[useUnclaimedShows] Attempting to fetch series…');\n        unclaimedSeries = await showSeriesService.getAllShowSeries({\n          // Explicitly pass `undefined` so the RPC receives a SQL NULL,\n          // avoiding the `string | undefined` type error.\n          organizerId: undefined\n        });\n        console.log('[useUnclaimedShows] Successfully fetched series:', unclaimedSeries);\n      } catch (seriesErr) {\n        console.error('CRASHED INSIDE: getAllShowSeries', seriesErr);\n        throw seriesErr; // bubble up to outer catch\n      }\n\n      /* -------------------------------------------------\n       * 2️⃣  Fetch standalone shows – isolate failures here\n       * ------------------------------------------------*/\n      try {\n        console.log('[useUnclaimedShows] Attempting to fetch standalone shows…');\n        unclaimedStandaloneShows = await showSeriesService.getUnclaimedShows();\n        console.log('[useUnclaimedShows] Successfully fetched standalone shows:', unclaimedStandaloneShows);\n      } catch (showsErr) {\n        console.error('CRASHED INSIDE: getUnclaimedShows', showsErr);\n        throw showsErr; // bubble up to outer catch\n      }\n\n      // Combine and map the two lists\n      const combinedItems = [\n        // Explicit type assertions ensure the literal unions are preserved,\n        // preventing the `'string' is not assignable to '\\\"series\\\" | \\\"show\\\"'` error.\n        ...unclaimedSeries.map(series => ({ type: 'series' as const, data: series })),\n        ...unclaimedStandaloneShows.map(show => ({ type: 'show' as const, data: show }))\n      ];\n      \n      // Sort by date (most recent first)\n      const getItemDate = (item: UnclaimedItem): number => {\n        if (item.type === 'show') {\n          const show = item.data as Show;\n          return show?.startDate ? new Date(show.startDate).getTime() : Number.MAX_SAFE_INTEGER;\n        }\n        const series = item.data as ShowSeries;\n        return series?.nextShowDate ? new Date(series.nextShowDate).getTime() : Number.MAX_SAFE_INTEGER;\n      };\n\n      combinedItems.sort((a, b) => getItemDate(a) - getItemDate(b));\n      \n      console.log(`[useUnclaimedShows] Fetch complete. Total unclaimed items: ${combinedItems.length}`);\n      setUnclaimedItems(combinedItems);\n      \n    } catch (err) {\n      console.error('[useUnclaimedShows] Error fetching unclaimed shows:', err);\n      setError(err instanceof Error ? err : new Error('Failed to load unclaimed shows. Please try again.'));\n      // Set empty array on error to avoid undefined\n      setUnclaimedItems([]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  // Fetch data when the component mounts or when organizerId changes\n  useEffect(() => {\n    fetchUnclaimedShows();\n  }, [organizerId]);\n  \n  // Return all states and a function to refresh the data\n  return { \n    unclaimedItems, \n    isLoading, \n    error,\n    refreshUnclaimedShows: fetchUnclaimedShows \n  };\n};\n"],"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","ignoreList":[]}