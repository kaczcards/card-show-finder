abce7e364b5cf09441ef72a7a35fe156
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
function cov_to4rgmctv() {
  var path = "/Users/kevin/card-show-finder/src/hooks/useUnclaimedShows.ts";
  var hash = "174c6986273420e8139b9565f86e47c08e2ced4f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kevin/card-show-finder/src/hooks/useUnclaimedShows.ts",
    statementMap: {
      "0": {
        start: {
          line: 17,
          column: 33
        },
        end: {
          line: 108,
          column: 1
        }
      },
      "1": {
        start: {
          line: 19,
          column: 46
        },
        end: {
          line: 19,
          column: 75
        }
      },
      "2": {
        start: {
          line: 21,
          column: 36
        },
        end: {
          line: 21,
          column: 59
        }
      },
      "3": {
        start: {
          line: 23,
          column: 28
        },
        end: {
          line: 23,
          column: 56
        }
      },
      "4": {
        start: {
          line: 26,
          column: 30
        },
        end: {
          line: 94,
          column: 3
        }
      },
      "5": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 93,
          column: 5
        }
      },
      "6": {
        start: {
          line: 28,
          column: 6
        },
        end: {
          line: 28,
          column: 86
        }
      },
      "7": {
        start: {
          line: 29,
          column: 6
        },
        end: {
          line: 29,
          column: 25
        }
      },
      "8": {
        start: {
          line: 30,
          column: 6
        },
        end: {
          line: 30,
          column: 21
        }
      },
      "9": {
        start: {
          line: 32,
          column: 42
        },
        end: {
          line: 32,
          column: 44
        }
      },
      "10": {
        start: {
          line: 33,
          column: 45
        },
        end: {
          line: 33,
          column: 47
        }
      },
      "11": {
        start: {
          line: 38,
          column: 6
        },
        end: {
          line: 49,
          column: 7
        }
      },
      "12": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 71
        }
      },
      "13": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 44,
          column: 11
        }
      },
      "14": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 89
        }
      },
      "15": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 69
        }
      },
      "16": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 24
        }
      },
      "17": {
        start: {
          line: 54,
          column: 6
        },
        end: {
          line: 61,
          column: 7
        }
      },
      "18": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 81
        }
      },
      "19": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 56,
          column: 79
        }
      },
      "20": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 108
        }
      },
      "21": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 69
        }
      },
      "22": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 60,
          column: 23
        }
      },
      "23": {
        start: {
          line: 64,
          column: 28
        },
        end: {
          line: 69,
          column: 7
        }
      },
      "24": {
        start: {
          line: 67,
          column: 42
        },
        end: {
          line: 67,
          column: 83
        }
      },
      "25": {
        start: {
          line: 68,
          column: 49
        },
        end: {
          line: 68,
          column: 86
        }
      },
      "26": {
        start: {
          line: 72,
          column: 26
        },
        end: {
          line: 79,
          column: 7
        }
      },
      "27": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 76,
          column: 9
        }
      },
      "28": {
        start: {
          line: 74,
          column: 23
        },
        end: {
          line: 74,
          column: 40
        }
      },
      "29": {
        start: {
          line: 75,
          column: 10
        },
        end: {
          line: 75,
          column: 96
        }
      },
      "30": {
        start: {
          line: 77,
          column: 23
        },
        end: {
          line: 77,
          column: 46
        }
      },
      "31": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 104
        }
      },
      "32": {
        start: {
          line: 81,
          column: 6
        },
        end: {
          line: 81,
          column: 68
        }
      },
      "33": {
        start: {
          line: 81,
          column: 35
        },
        end: {
          line: 81,
          column: 66
        }
      },
      "34": {
        start: {
          line: 83,
          column: 6
        },
        end: {
          line: 83,
          column: 104
        }
      },
      "35": {
        start: {
          line: 84,
          column: 6
        },
        end: {
          line: 84,
          column: 39
        }
      },
      "36": {
        start: {
          line: 87,
          column: 6
        },
        end: {
          line: 87,
          column: 80
        }
      },
      "37": {
        start: {
          line: 88,
          column: 6
        },
        end: {
          line: 88,
          column: 108
        }
      },
      "38": {
        start: {
          line: 90,
          column: 6
        },
        end: {
          line: 90,
          column: 28
        }
      },
      "39": {
        start: {
          line: 92,
          column: 6
        },
        end: {
          line: 92,
          column: 26
        }
      },
      "40": {
        start: {
          line: 97,
          column: 2
        },
        end: {
          line: 99,
          column: 20
        }
      },
      "41": {
        start: {
          line: 98,
          column: 4
        },
        end: {
          line: 98,
          column: 26
        }
      },
      "42": {
        start: {
          line: 102,
          column: 2
        },
        end: {
          line: 107,
          column: 4
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 17,
            column: 33
          },
          end: {
            line: 17,
            column: 34
          }
        },
        loc: {
          start: {
            line: 17,
            column: 58
          },
          end: {
            line: 108,
            column: 1
          }
        },
        line: 17
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 26,
            column: 30
          },
          end: {
            line: 26,
            column: 31
          }
        },
        loc: {
          start: {
            line: 26,
            column: 42
          },
          end: {
            line: 94,
            column: 3
          }
        },
        line: 26
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 67,
            column: 31
          },
          end: {
            line: 67,
            column: 32
          }
        },
        loc: {
          start: {
            line: 67,
            column: 42
          },
          end: {
            line: 67,
            column: 83
          }
        },
        line: 67
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 68,
            column: 40
          },
          end: {
            line: 68,
            column: 41
          }
        },
        loc: {
          start: {
            line: 68,
            column: 49
          },
          end: {
            line: 68,
            column: 86
          }
        },
        line: 68
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 72,
            column: 26
          },
          end: {
            line: 72,
            column: 27
          }
        },
        loc: {
          start: {
            line: 72,
            column: 59
          },
          end: {
            line: 79,
            column: 7
          }
        },
        line: 72
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 81,
            column: 25
          },
          end: {
            line: 81,
            column: 26
          }
        },
        loc: {
          start: {
            line: 81,
            column: 35
          },
          end: {
            line: 81,
            column: 66
          }
        },
        line: 81
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 97,
            column: 12
          },
          end: {
            line: 97,
            column: 13
          }
        },
        loc: {
          start: {
            line: 97,
            column: 18
          },
          end: {
            line: 99,
            column: 3
          }
        },
        line: 97
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 76,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 76,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      },
      "1": {
        loc: {
          start: {
            line: 75,
            column: 17
          },
          end: {
            line: 75,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 75,
            column: 35
          },
          end: {
            line: 75,
            column: 69
          }
        }, {
          start: {
            line: 75,
            column: 72
          },
          end: {
            line: 75,
            column: 95
          }
        }],
        line: 75
      },
      "2": {
        loc: {
          start: {
            line: 78,
            column: 15
          },
          end: {
            line: 78,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 78,
            column: 38
          },
          end: {
            line: 78,
            column: 77
          }
        }, {
          start: {
            line: 78,
            column: 80
          },
          end: {
            line: 78,
            column: 103
          }
        }],
        line: 78
      },
      "3": {
        loc: {
          start: {
            line: 88,
            column: 15
          },
          end: {
            line: 88,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 88,
            column: 38
          },
          end: {
            line: 88,
            column: 41
          }
        }, {
          start: {
            line: 88,
            column: 44
          },
          end: {
            line: 88,
            column: 106
          }
        }],
        line: 88
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "174c6986273420e8139b9565f86e47c08e2ced4f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_to4rgmctv = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_to4rgmctv();
import { useState, useEffect } from 'react';
import { showSeriesService } from '../services/showSeriesService';
cov_to4rgmctv().s[0]++;
export var useUnclaimedShows = function useUnclaimedShows(organizerId) {
  cov_to4rgmctv().f[0]++;
  var _ref = (cov_to4rgmctv().s[1]++, useState([])),
    _ref2 = _slicedToArray(_ref, 2),
    unclaimedItems = _ref2[0],
    setUnclaimedItems = _ref2[1];
  var _ref3 = (cov_to4rgmctv().s[2]++, useState(true)),
    _ref4 = _slicedToArray(_ref3, 2),
    isLoading = _ref4[0],
    setIsLoading = _ref4[1];
  var _ref5 = (cov_to4rgmctv().s[3]++, useState(null)),
    _ref6 = _slicedToArray(_ref5, 2),
    error = _ref6[0],
    setError = _ref6[1];
  cov_to4rgmctv().s[4]++;
  var fetchUnclaimedShows = function () {
    var _ref7 = _asyncToGenerator(function* () {
      cov_to4rgmctv().f[1]++;
      cov_to4rgmctv().s[5]++;
      try {
        cov_to4rgmctv().s[6]++;
        console.log('[useUnclaimedShows] Starting to fetch unclaimed shows and series');
        cov_to4rgmctv().s[7]++;
        setIsLoading(true);
        cov_to4rgmctv().s[8]++;
        setError(null);
        var unclaimedSeries = (cov_to4rgmctv().s[9]++, []);
        var unclaimedStandaloneShows = (cov_to4rgmctv().s[10]++, []);
        cov_to4rgmctv().s[11]++;
        try {
          cov_to4rgmctv().s[12]++;
          console.log('[useUnclaimedShows] Attempting to fetch series…');
          cov_to4rgmctv().s[13]++;
          unclaimedSeries = yield showSeriesService.getAllShowSeries({
            organizerId: undefined
          });
          cov_to4rgmctv().s[14]++;
          console.log('[useUnclaimedShows] Successfully fetched series:', unclaimedSeries);
        } catch (seriesErr) {
          cov_to4rgmctv().s[15]++;
          console.error('CRASHED INSIDE: getAllShowSeries', seriesErr);
          cov_to4rgmctv().s[16]++;
          throw seriesErr;
        }
        cov_to4rgmctv().s[17]++;
        try {
          cov_to4rgmctv().s[18]++;
          console.log('[useUnclaimedShows] Attempting to fetch standalone shows…');
          cov_to4rgmctv().s[19]++;
          unclaimedStandaloneShows = yield showSeriesService.getUnclaimedShows();
          cov_to4rgmctv().s[20]++;
          console.log('[useUnclaimedShows] Successfully fetched standalone shows:', unclaimedStandaloneShows);
        } catch (showsErr) {
          cov_to4rgmctv().s[21]++;
          console.error('CRASHED INSIDE: getUnclaimedShows', showsErr);
          cov_to4rgmctv().s[22]++;
          throw showsErr;
        }
        var combinedItems = (cov_to4rgmctv().s[23]++, [].concat(_toConsumableArray(unclaimedSeries.map(function (series) {
          cov_to4rgmctv().f[2]++;
          cov_to4rgmctv().s[24]++;
          return {
            type: 'series',
            data: series
          };
        })), _toConsumableArray(unclaimedStandaloneShows.map(function (show) {
          cov_to4rgmctv().f[3]++;
          cov_to4rgmctv().s[25]++;
          return {
            type: 'show',
            data: show
          };
        }))));
        cov_to4rgmctv().s[26]++;
        var getItemDate = function getItemDate(item) {
          cov_to4rgmctv().f[4]++;
          cov_to4rgmctv().s[27]++;
          if (item.type === 'show') {
            cov_to4rgmctv().b[0][0]++;
            var show = (cov_to4rgmctv().s[28]++, item.data);
            cov_to4rgmctv().s[29]++;
            return show != null && show.startDate ? (cov_to4rgmctv().b[1][0]++, new Date(show.startDate).getTime()) : (cov_to4rgmctv().b[1][1]++, Number.MAX_SAFE_INTEGER);
          } else {
            cov_to4rgmctv().b[0][1]++;
          }
          var series = (cov_to4rgmctv().s[30]++, item.data);
          cov_to4rgmctv().s[31]++;
          return series != null && series.nextShowDate ? (cov_to4rgmctv().b[2][0]++, new Date(series.nextShowDate).getTime()) : (cov_to4rgmctv().b[2][1]++, Number.MAX_SAFE_INTEGER);
        };
        cov_to4rgmctv().s[32]++;
        combinedItems.sort(function (a, b) {
          cov_to4rgmctv().f[5]++;
          cov_to4rgmctv().s[33]++;
          return getItemDate(a) - getItemDate(b);
        });
        cov_to4rgmctv().s[34]++;
        console.log(`[useUnclaimedShows] Fetch complete. Total unclaimed items: ${combinedItems.length}`);
        cov_to4rgmctv().s[35]++;
        setUnclaimedItems(combinedItems);
      } catch (err) {
        cov_to4rgmctv().s[36]++;
        console.error('[useUnclaimedShows] Error fetching unclaimed shows:', err);
        cov_to4rgmctv().s[37]++;
        setError(err instanceof Error ? (cov_to4rgmctv().b[3][0]++, err) : (cov_to4rgmctv().b[3][1]++, new Error('Failed to load unclaimed shows. Please try again.')));
        cov_to4rgmctv().s[38]++;
        setUnclaimedItems([]);
      } finally {
        cov_to4rgmctv().s[39]++;
        setIsLoading(false);
      }
    });
    return function fetchUnclaimedShows() {
      return _ref7.apply(this, arguments);
    };
  }();
  cov_to4rgmctv().s[40]++;
  useEffect(function () {
    cov_to4rgmctv().f[6]++;
    cov_to4rgmctv().s[41]++;
    fetchUnclaimedShows();
  }, [organizerId]);
  cov_to4rgmctv().s[42]++;
  return {
    unclaimedItems: unclaimedItems,
    isLoading: isLoading,
    error: error,
    refreshUnclaimedShows: fetchUnclaimedShows
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,