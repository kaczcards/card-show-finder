{"version":3,"names":["formatDate","date","options","arguments","length","undefined","cov_1m20yk0rz3","b","weekday","year","month","day","f","s","dateObj","Date","toLocaleDateString","err","console","error","isSameDay","date1","date2","d1","d2","getFullYear","getMonth","getDate","formatDateRange","startDate","endDate","formatRelativeTime","secondsDiff","Math","floor","now","getTime","units","value","unit","_ref","_ref2","_slicedToArray","threshold","currentUnit","Intl","RelativeTimeFormat","rtf","numeric","format","plural","abs"],"sources":["dateUtils.ts"],"sourcesContent":["/**\n * dateUtils.ts\n * Utility functions for date formatting and manipulation\n */\n\n/**\n * Format a date to a human-readable string\n * @param date Date object or ISO string\n * @param options Intl.DateTimeFormatOptions to customize the format\n * @returns Formatted date string\n */\nexport const formatDate = (\n  date: Date | string | undefined | null,\n  options: Intl.DateTimeFormatOptions = { \n    weekday: 'long', \n    year: 'numeric', \n    month: 'long', \n    day: 'numeric' \n  }\n): string => {\n  if (!date) return '';\n  \n  try {\n    const dateObj = typeof date === 'string' ? new Date(date) : date;\n    return dateObj.toLocaleDateString('en-US', options);\n  } catch (err) {\n    console.error('Error formatting date:', err);\n    return typeof date === 'string' ? date : '';\n  }\n};\n\n/**\n * Check if two dates represent the same day\n * @param date1 First date\n * @param date2 Second date\n * @returns True if both dates are on the same day\n */\nexport const isSameDay = (\n  date1: Date | string | undefined | null,\n  date2: Date | string | undefined | null\n): boolean => {\n  if (!date1 || !date2) return false;\n  \n  try {\n    const d1 = typeof date1 === 'string' ? new Date(date1) : date1;\n    const d2 = typeof date2 === 'string' ? new Date(date2) : date2;\n    \n    return (\n      d1.getFullYear() === d2.getFullYear() &&\n      d1.getMonth() === d2.getMonth() &&\n      d1.getDate() === d2.getDate()\n    );\n  } catch (err) {\n    console.error('Error comparing dates:', err);\n    return false;\n  }\n};\n\n/**\n * Format a date range intelligently, handling one-day shows\n * @param startDate Start date\n * @param endDate End date\n * @param options Intl.DateTimeFormatOptions to customize the format\n * @returns Formatted date range string\n */\nexport const formatDateRange = (\n  startDate: Date | string | undefined | null,\n  endDate: Date | string | undefined | null,\n  options: Intl.DateTimeFormatOptions = { \n    weekday: 'long', \n    year: 'numeric', \n    month: 'long', \n    day: 'numeric' \n  }\n): string => {\n  if (!startDate) return '';\n  \n  // If no end date or same as start date, just show the start date\n  if (!endDate || isSameDay(startDate, endDate)) {\n    return formatDate(startDate, options);\n  }\n  \n  // Otherwise, show the range\n  return `${formatDate(startDate, options)} to ${formatDate(endDate, options)}`;\n};\n\n/**\n * Format a date to a relative time string (e.g. \"2 minutes ago\")\n * @param date Date object or parsable date string\n * @returns Human-readable relative time\n */\nexport const formatRelativeTime = (\n  date: Date | string | number | null | undefined\n): string => {\n  if (!date) return '';\n\n  const dateObj: Date =\n    typeof date === 'string' || typeof date === 'number'\n      ? new Date(date)\n      : date;\n\n  const secondsDiff = Math.floor((Date.now() - dateObj.getTime()) / 1000);\n\n  // Handle future dates â€“ return empty string instead of negative values\n  if (secondsDiff < 0) return '';\n\n  const units: [number, Intl.RelativeTimeFormatUnit][] = [\n    [60, 'second'],            // up to 59 seconds\n    [60, 'minute'],            // up to 59 minutes\n    [24, 'hour'],              // up to 23 hours\n    [7, 'day'],                // up to 6 days\n    [4.34812, 'week'],         // approx. 4.3 weeks in a month\n    [12, 'month'],             // up to 11 months\n  ];\n\n  let value = secondsDiff;\n  let unit: Intl.RelativeTimeFormatUnit = 'second';\n\n  // Iterate through unit thresholds to find the most appropriate one\n  for (const [threshold, currentUnit] of units) {\n    if (value < threshold) {\n      unit = currentUnit;\n      break;\n    }\n    value = Math.floor(value / threshold);\n    unit = currentUnit;\n  }\n\n  // Years are a special case (anything beyond months threshold)\n  if (unit === 'month' && value >= 12) {\n    value = Math.floor(value / 12);\n    unit = 'year';\n  }\n\n  // Use Intl.RelativeTimeFormat when available for better i18n\n  if (typeof Intl !== 'undefined' && (Intl as any).RelativeTimeFormat) {\n    const rtf = new Intl.RelativeTimeFormat('en', { numeric: 'auto' });\n    return rtf.format(-value, unit);\n  }\n\n  // Fallback manual formatting\n  const plural = Math.abs(value) === 1 ? '' : 's';\n  return `${value} ${unit}${plural} ago`;\n};\n"],"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","ignoreList":[]}