f272101e4b7e8e3132e9453b11088ef0
_getJestObj().mock('../../src/supabase', function () {
  return {
    supabase: {
      auth: {
        getSession: jest.fn()
      },
      from: jest.fn().mockReturnThis(),
      update: jest.fn().mockReturnThis(),
      insert: jest.fn().mockReturnThis(),
      eq: jest.fn().mockReturnThis(),
      select: jest.fn().mockReturnThis(),
      single: jest.fn()
    }
  };
});
_getJestObj().mock('../../src/services/subscriptionTypes', function () {
  var original = jest.requireActual('../../src/services/subscriptionTypes');
  return Object.assign({}, original, {
    SUBSCRIPTION_PLANS: [{
      id: 'dealer-monthly',
      name: 'MVP Dealer Monthly',
      description: 'Monthly subscription for MVP Dealers',
      price: 9.99,
      type: 'dealer',
      duration: 'monthly',
      features: ['Feature 1', 'Feature 2']
    }, {
      id: 'dealer-annual',
      name: 'MVP Dealer Annual',
      description: 'Annual subscription for MVP Dealers',
      price: 99.99,
      type: 'dealer',
      duration: 'annual',
      features: ['Feature 1', 'Feature 2', 'Feature 3']
    }, {
      id: 'organizer-monthly',
      name: 'Show Organizer Monthly',
      description: 'Monthly subscription for Show Organizers',
      price: 19.99,
      type: 'organizer',
      duration: 'monthly',
      features: ['Feature A', 'Feature B']
    }],
    SubscriptionPlanType: {
      DEALER: 'dealer',
      ORGANIZER: 'organizer'
    },
    SubscriptionDuration: {
      MONTHLY: 'monthly',
      ANNUAL: 'annual'
    },
    _calculateExpiryDate: jest.fn().mockImplementation(function () {
      var date = new Date();
      date.setDate(date.getDate() + 30);
      return date;
    })
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _env2 = require("expo/virtual/env");
var _subscriptionTypes = require("../../src/services/subscriptionTypes");
var _userRoleService = require("../../src/services/userRoleService");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var initializeStripe;
var createPaymentSheetForSubscription;
var processSubscriptionUpdate;
var originalEnv = process.env;
beforeEach(function () {
  jest.resetModules();
  process.env = Object.assign({}, originalEnv);
  process.env.EXPO_PUBLIC_STRIPE_PUBLISHABLE_KEY = 'pk_test_mock_key';
  process.env.EXPO_PUBLIC_SUPABASE_URL = 'https://mock-supabase-url.com';
  jest.clearAllMocks();
  jest.spyOn(console, 'error').mockImplementation(function () {});
  jest.spyOn(console, 'warn').mockImplementation(function () {});
  jest.isolateModules(function () {
    var stripeService = require('../../src/services/stripePaymentService');
    initializeStripe = stripeService.initializeStripe;
    createPaymentSheetForSubscription = stripeService.createPaymentSheetForSubscription;
    processSubscriptionUpdate = stripeService.processSubscriptionUpdate;
  });
});
afterEach(function () {
  process.env = originalEnv;
  jest.restoreAllMocks();
});
global.fetch = jest.fn();
describe('stripePaymentService', function () {
  var mockUserId = 'user-123';
  var mockPlanId = 'dealer-monthly';
  var mockInvalidPlanId = 'invalid-plan';
  var mockPaymentIntent = 'pi_mock_payment_intent';
  var mockEphemeralKey = 'ek_mock_ephemeral_key';
  var mockCustomer = 'cus_mock_customer';
  var mockPublishableKey = 'pk_test_mock_key';
  var mockPlan = {
    id: 'dealer-monthly',
    name: 'MVP Dealer Monthly',
    description: 'Monthly subscription for MVP Dealers',
    price: 9.99,
    type: _subscriptionTypes.SubscriptionPlanType.DEALER,
    duration: _subscriptionTypes.SubscriptionDuration.MONTHLY,
    features: ['Feature 1', 'Feature 2']
  };
  var mockInitPaymentSheet = jest.fn();
  var mockPresentPaymentSheet = jest.fn();
  var mockSupabase = require('../../src/supabase').supabase;
  describe('initializeStripe', function () {
    test('should return true when publishable key is set', function () {
      process.env.EXPO_PUBLIC_STRIPE_PUBLISHABLE_KEY = 'pk_test_valid_key';
      var result = initializeStripe();
      expect(result).toBe(true);
    });
    test('should return false when publishable key is missing', function () {
      delete _env2.env.EXPO_PUBLIC_STRIPE_PUBLISHABLE_KEY;
      var result = initializeStripe();
      expect(result).toBe(false);
      expect(console.error).toHaveBeenCalledWith('Stripe publishable key is not set. Please check your environment variables.');
    });
    test('should return false when publishable key is empty', function () {
      process.env.EXPO_PUBLIC_STRIPE_PUBLISHABLE_KEY = '';
      var result = initializeStripe();
      expect(result).toBe(false);
      expect(console.error).toHaveBeenCalledWith('Stripe publishable key is not set. Please check your environment variables.');
    });
  });
  describe('createPaymentSheetForSubscription', function () {
    beforeEach(function () {
      mockSupabase.auth.getSession.mockResolvedValue({
        data: {
          session: {
            access_token: 'mock-access-token'
          }
        },
        error: null
      });
      global.fetch.mockResolvedValue({
        ok: true,
        json: jest.fn().mockResolvedValue({
          paymentIntent: mockPaymentIntent,
          ephemeralKey: mockEphemeralKey,
          customer: mockCustomer,
          publishableKey: mockPublishableKey
        })
      });
      mockInitPaymentSheet.mockResolvedValue({
        error: null
      });
      mockPresentPaymentSheet.mockResolvedValue({
        error: null
      });
    });
    test('should return error for invalid plan ID', (0, _asyncToGenerator2.default)(function* () {
      var result = yield createPaymentSheetForSubscription(mockUserId, mockInvalidPlanId, mockInitPaymentSheet, mockPresentPaymentSheet);
      expect(result).toEqual({
        success: false,
        error: 'Subscription plan not found.'
      });
      expect(global.fetch).not.toHaveBeenCalled();
    }));
    test('should handle session retrieval failure', (0, _asyncToGenerator2.default)(function* () {
      mockSupabase.auth.getSession.mockResolvedValue({
        data: {
          session: null
        },
        error: {
          message: 'Failed to retrieve session'
        }
      });
      var result = yield createPaymentSheetForSubscription(mockUserId, mockPlanId, mockInitPaymentSheet, mockPresentPaymentSheet);
      expect(result.success).toBe(false);
      expect(result.error).toContain('Failed to retrieve session');
      expect(console.error).toHaveBeenCalled();
    }));
    test('should handle network failure during payment intent creation', (0, _asyncToGenerator2.default)(function* () {
      global.fetch.mockRejectedValue(new Error('Network error'));
      var result = yield createPaymentSheetForSubscription(mockUserId, mockPlanId, mockInitPaymentSheet, mockPresentPaymentSheet);
      expect(result.success).toBe(false);
      expect(result.error).toBe('Network error');
      expect(console.error).toHaveBeenCalled();
    }));
    test('should handle payment intent creation error (400)', (0, _asyncToGenerator2.default)(function* () {
      global.fetch.mockResolvedValue({
        ok: false,
        status: 400,
        json: jest.fn().mockResolvedValue({
          error: 'Invalid request parameters'
        })
      });
      var result = yield createPaymentSheetForSubscription(mockUserId, mockPlanId, mockInitPaymentSheet, mockPresentPaymentSheet);
      expect(result.success).toBe(false);
      expect(result.error).toBe('Invalid request parameters');
    }));
    test('should handle payment intent creation error (401)', (0, _asyncToGenerator2.default)(function* () {
      global.fetch.mockResolvedValue({
        ok: false,
        status: 401,
        json: jest.fn().mockResolvedValue({
          error: 'Unauthorized access'
        })
      });
      var result = yield createPaymentSheetForSubscription(mockUserId, mockPlanId, mockInitPaymentSheet, mockPresentPaymentSheet);
      expect(result.success).toBe(false);
      expect(result.error).toBe('Unauthorized access');
    }));
    test('should handle payment intent creation error (500)', (0, _asyncToGenerator2.default)(function* () {
      global.fetch.mockResolvedValue({
        ok: false,
        status: 500,
        json: jest.fn().mockResolvedValue({
          error: 'Server error'
        })
      });
      var result = yield createPaymentSheetForSubscription(mockUserId, mockPlanId, mockInitPaymentSheet, mockPresentPaymentSheet);
      expect(result.success).toBe(false);
      expect(result.error).toBe('Server error');
    }));
    test('should handle malformed API response', (0, _asyncToGenerator2.default)(function* () {
      global.fetch.mockResolvedValue({
        ok: true,
        json: jest.fn().mockResolvedValue({
          customer: mockCustomer
        })
      });
      var result = yield createPaymentSheetForSubscription(mockUserId, mockPlanId, mockInitPaymentSheet, mockPresentPaymentSheet);
      expect(result.success).toBe(false);
      expect(result.error).toContain('Cannot read properties of undefined');
    }));
    test('should handle Stripe initPaymentSheet error', (0, _asyncToGenerator2.default)(function* () {
      mockInitPaymentSheet.mockResolvedValue({
        error: {
          code: 'initialization_error',
          message: 'Failed to initialize payment sheet'
        }
      });
      var result = yield createPaymentSheetForSubscription(mockUserId, mockPlanId, mockInitPaymentSheet, mockPresentPaymentSheet);
      expect(result.success).toBe(false);
      expect(result.error).toBe('Initialization failed: Failed to initialize payment sheet');
      expect(console.error).toHaveBeenCalled();
    }));
    test('should handle Stripe presentPaymentSheet canceled error', (0, _asyncToGenerator2.default)(function* () {
      mockPresentPaymentSheet.mockResolvedValue({
        error: {
          code: 'Canceled',
          message: 'The payment was canceled'
        }
      });
      var result = yield createPaymentSheetForSubscription(mockUserId, mockPlanId, mockInitPaymentSheet, mockPresentPaymentSheet);
      expect(result.success).toBe(false);
      expect(result.error).toBe('Payment was canceled.');
    }));
    test('should handle Stripe presentPaymentSheet payment failure', (0, _asyncToGenerator2.default)(function* () {
      mockPresentPaymentSheet.mockResolvedValue({
        error: {
          code: 'payment_failed',
          message: 'The payment failed'
        }
      });
      var result = yield createPaymentSheetForSubscription(mockUserId, mockPlanId, mockInitPaymentSheet, mockPresentPaymentSheet);
      expect(result.success).toBe(false);
      expect(result.error).toBe('Payment failed: The payment failed');
      expect(console.error).toHaveBeenCalled();
    }));
    test('should handle post-payment processing failures', (0, _asyncToGenerator2.default)(function* () {
      jest.spyOn(global, 'Promise').mockImplementationOnce(function () {
        return {
          then: function then() {
            throw new Error('Failed to process subscription');
          }
        };
      });
      var result = yield createPaymentSheetForSubscription(mockUserId, mockPlanId, mockInitPaymentSheet, mockPresentPaymentSheet);
      expect(result.success).toBe(false);
      expect(result.error).toContain('Failed to process subscription');
    }));
    test('should handle timeout during payment intent creation', (0, _asyncToGenerator2.default)(function* () {
      jest.useFakeTimers();
      global.fetch.mockImplementation(function () {
        return new Promise(function (_, reject) {
          setTimeout(function () {
            reject(new Error('Request timed out'));
          }, 30000);
        });
      });
      var resultPromise = createPaymentSheetForSubscription(mockUserId, mockPlanId, mockInitPaymentSheet, mockPresentPaymentSheet);
      jest.advanceTimersByTime(31000);
      var result = yield resultPromise;
      expect(result.success).toBe(false);
      expect(result.error).toBe('Request timed out');
      jest.useRealTimers();
    }));
    test('should handle expired session', (0, _asyncToGenerator2.default)(function* () {
      mockSupabase.auth.getSession.mockResolvedValue({
        data: {
          session: null
        },
        error: null
      });
      var result = yield createPaymentSheetForSubscription(mockUserId, mockPlanId, mockInitPaymentSheet, mockPresentPaymentSheet);
      expect(result.success).toBe(false);
      expect(result.error).toContain('Failed to create payment intent');
    }));
    test('should handle invalid user ID', (0, _asyncToGenerator2.default)(function* () {
      global.fetch.mockResolvedValue({
        ok: false,
        status: 400,
        json: jest.fn().mockResolvedValue({
          error: 'Invalid user ID'
        })
      });
      var result = yield createPaymentSheetForSubscription('invalid-user-id', mockPlanId, mockInitPaymentSheet, mockPresentPaymentSheet);
      expect(result.success).toBe(false);
      expect(result.error).toBe('Invalid user ID');
    }));
    test('should handle successful payment flow', (0, _asyncToGenerator2.default)(function* () {
      var result = yield createPaymentSheetForSubscription(mockUserId, mockPlanId, mockInitPaymentSheet, mockPresentPaymentSheet);
      expect(result.success).toBe(true);
      expect(result.transactionId).toBe(mockPaymentIntent);
      expect(global.fetch).toHaveBeenCalledWith(expect.stringContaining('/functions/v1/create-payment-intent'), expect.objectContaining({
        method: 'POST',
        headers: expect.objectContaining({
          'Content-Type': 'application/json',
          'Authorization': 'Bearer mock-access-token'
        }),
        body: expect.any(String)
      }));
    }));
  });
  describe('processSubscriptionUpdate', function () {
    beforeEach(function () {
      mockSupabase.from.mockReturnThis();
      mockSupabase.update.mockReturnThis();
      mockSupabase.eq.mockReturnThis();
      mockSupabase.select.mockReturnThis();
      mockSupabase.single.mockResolvedValue({
        data: {},
        error: null
      });
      mockSupabase.insert.mockResolvedValue({
        data: {},
        error: null
      });
    });
    test('should handle profile update failure', (0, _asyncToGenerator2.default)(function* () {
      mockSupabase.single.mockResolvedValueOnce({
        data: null,
        error: {
          message: 'Failed to update profile'
        }
      });
      yield expect(processSubscriptionUpdate(mockUserId, mockPlan, mockPaymentIntent)).resolves.not.toThrow();
      expect(console.error).toHaveBeenCalledWith(expect.stringContaining('Failed to process subscription update after payment:'), expect.anything());
    }));
    test('should handle payment logging failure', (0, _asyncToGenerator2.default)(function* () {
      mockSupabase.single.mockResolvedValueOnce({
        data: {},
        error: null
      });
      mockSupabase.insert.mockResolvedValueOnce({
        data: null,
        error: {
          message: 'Failed to log payment'
        }
      });
      yield expect(processSubscriptionUpdate(mockUserId, mockPlan, mockPaymentIntent)).resolves.not.toThrow();
      expect(console.error).toHaveBeenCalledWith('Error logging payment transaction:', expect.anything());
    }));
    test('should handle network timeout during profile update', (0, _asyncToGenerator2.default)(function* () {
      jest.useFakeTimers();
      mockSupabase.single.mockImplementationOnce(function () {
        return new Promise(function (_, reject) {
          setTimeout(function () {
            reject(new Error('Request timed out'));
          }, 30000);
        });
      });
      var updatePromise = processSubscriptionUpdate(mockUserId, mockPlan, mockPaymentIntent);
      jest.advanceTimersByTime(31000);
      yield expect(updatePromise).resolves.not.toThrow();
      expect(console.error).toHaveBeenCalled();
      jest.useRealTimers();
    }));
    test('should update user profile with correct subscription details', (0, _asyncToGenerator2.default)(function* () {
      yield processSubscriptionUpdate(mockUserId, mockPlan, mockPaymentIntent);
      expect(mockSupabase.from).toHaveBeenCalledWith('profiles');
      expect(mockSupabase.update).toHaveBeenCalledWith(expect.objectContaining({
        role: _userRoleService.UserRole.MVP_DEALER,
        subscription_status: 'active',
        payment_status: 'paid',
        subscription_expiry: expect.any(String)
      }));
      expect(mockSupabase.eq).toHaveBeenCalledWith('id', mockUserId);
    }));
    test('should log successful payment transaction', (0, _asyncToGenerator2.default)(function* () {
      yield processSubscriptionUpdate(mockUserId, mockPlan, mockPaymentIntent);
      expect(mockSupabase.from).toHaveBeenCalledWith('payments');
      expect(mockSupabase.insert).toHaveBeenCalledWith(expect.objectContaining({
        user_id: mockUserId,
        plan_id: mockPlan.id,
        amount: mockPlan.price,
        currency: 'usd',
        status: 'succeeded',
        transaction_id: mockPaymentIntent
      }));
    }));
    test('should log failed payment transaction on error', (0, _asyncToGenerator2.default)(function* () {
      mockSupabase.single.mockRejectedValueOnce(new Error('Database error'));
      yield processSubscriptionUpdate(mockUserId, mockPlan, mockPaymentIntent);
      expect(mockSupabase.from).toHaveBeenCalledWith('payments');
      expect(mockSupabase.insert).toHaveBeenCalledWith(expect.objectContaining({
        user_id: mockUserId,
        plan_id: mockPlan.id,
        amount: mockPlan.price,
        currency: 'usd',
        status: 'failed',
        transaction_id: mockPaymentIntent,
        error_message: 'Post-payment profile update failed.'
      }));
    }));
  });
  describe('Edge cases', function () {
    test('should handle missing Supabase URL environment variable', (0, _asyncToGenerator2.default)(function* () {
      delete _env2.env.EXPO_PUBLIC_SUPABASE_URL;
      var result = yield createPaymentSheetForSubscription(mockUserId, mockPlanId, mockInitPaymentSheet, mockPresentPaymentSheet);
      expect(result.success).toBe(false);
      expect(result.error).toContain('Invalid URL');
    }));
    test('should handle concurrent payment attempts', (0, _asyncToGenerator2.default)(function* () {
      var callCount = 0;
      global.fetch.mockImplementation(function () {
        callCount++;
        if (callCount === 1) {
          return Promise.resolve({
            ok: true,
            json: function json() {
              return Promise.resolve({
                paymentIntent: mockPaymentIntent,
                ephemeralKey: mockEphemeralKey,
                customer: mockCustomer,
                publishableKey: mockPublishableKey
              });
            }
          });
        } else {
          return Promise.resolve({
            ok: false,
            json: function json() {
              return Promise.resolve({
                error: 'Payment already in progress'
              });
            }
          });
        }
      });
      var results = yield Promise.all([createPaymentSheetForSubscription(mockUserId, mockPlanId, mockInitPaymentSheet, mockPresentPaymentSheet), createPaymentSheetForSubscription(mockUserId, mockPlanId, mockInitPaymentSheet, mockPresentPaymentSheet)]);
      expect(results[0].success).toBe(true);
      expect(results[1].success).toBe(false);
      expect(results[1].error).toBe('Payment already in progress');
    }));
    test('should handle JSON parse errors in API response', (0, _asyncToGenerator2.default)(function* () {
      global.fetch.mockResolvedValue({
        ok: true,
        json: jest.fn().mockRejectedValue(new SyntaxError('Unexpected token < in JSON'))
      });
      var result = yield createPaymentSheetForSubscription(mockUserId, mockPlanId, mockInitPaymentSheet, mockPresentPaymentSheet);
      expect(result.success).toBe(false);
      expect(result.error).toContain('Unexpected token < in JSON');
    }));
    test('should handle empty response from payment intent creation', (0, _asyncToGenerator2.default)(function* () {
      global.fetch.mockResolvedValue({
        ok: true,
        json: jest.fn().mockResolvedValue(null)
      });
      var result = yield createPaymentSheetForSubscription(mockUserId, mockPlanId, mockInitPaymentSheet, mockPresentPaymentSheet);
      expect(result.success).toBe(false);
      expect(result.error).toContain('Cannot read properties of null');
    }));
    test('should handle rate limiting from Stripe API', (0, _asyncToGenerator2.default)(function* () {
      global.fetch.mockResolvedValue({
        ok: false,
        status: 429,
        json: jest.fn().mockResolvedValue({
          error: 'Too many requests. Please try again later.'
        })
      });
      var result = yield createPaymentSheetForSubscription(mockUserId, mockPlanId, mockInitPaymentSheet, mockPresentPaymentSheet);
      expect(result.success).toBe(false);
      expect(result.error).toBe('Too many requests. Please try again later.');
    }));
    test('should handle Stripe API service outage', (0, _asyncToGenerator2.default)(function* () {
      global.fetch.mockResolvedValue({
        ok: false,
        status: 503,
        json: jest.fn().mockResolvedValue({
          error: 'Stripe API is currently unavailable'
        })
      });
      var result = yield createPaymentSheetForSubscription(mockUserId, mockPlanId, mockInitPaymentSheet, mockPresentPaymentSheet);
      expect(result.success).toBe(false);
      expect(result.error).toBe('Stripe API is currently unavailable');
    }));
    test('should handle invalid currency code', (0, _asyncToGenerator2.default)(function* () {
      global.fetch.mockResolvedValue({
        ok: false,
        status: 400,
        json: jest.fn().mockResolvedValue({
          error: 'Invalid currency code'
        })
      });
      var result = yield createPaymentSheetForSubscription(mockUserId, mockPlanId, mockInitPaymentSheet, mockPresentPaymentSheet);
      expect(result.success).toBe(false);
      expect(result.error).toBe('Invalid currency code');
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJzdXBhYmFzZSIsImF1dGgiLCJnZXRTZXNzaW9uIiwiamVzdCIsImZuIiwiZnJvbSIsIm1vY2tSZXR1cm5UaGlzIiwidXBkYXRlIiwiaW5zZXJ0IiwiZXEiLCJzZWxlY3QiLCJzaW5nbGUiLCJvcmlnaW5hbCIsInJlcXVpcmVBY3R1YWwiLCJPYmplY3QiLCJhc3NpZ24iLCJTVUJTQ1JJUFRJT05fUExBTlMiLCJpZCIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsInByaWNlIiwidHlwZSIsImR1cmF0aW9uIiwiZmVhdHVyZXMiLCJTdWJzY3JpcHRpb25QbGFuVHlwZSIsIkRFQUxFUiIsIk9SR0FOSVpFUiIsIlN1YnNjcmlwdGlvbkR1cmF0aW9uIiwiTU9OVEhMWSIsIkFOTlVBTCIsIl9jYWxjdWxhdGVFeHBpcnlEYXRlIiwibW9ja0ltcGxlbWVudGF0aW9uIiwiZGF0ZSIsIkRhdGUiLCJzZXREYXRlIiwiZ2V0RGF0ZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiX2VudjIiLCJfc3Vic2NyaXB0aW9uVHlwZXMiLCJfdXNlclJvbGVTZXJ2aWNlIiwiX3JlcXVpcmUiLCJpbml0aWFsaXplU3RyaXBlIiwiY3JlYXRlUGF5bWVudFNoZWV0Rm9yU3Vic2NyaXB0aW9uIiwicHJvY2Vzc1N1YnNjcmlwdGlvblVwZGF0ZSIsIm9yaWdpbmFsRW52IiwicHJvY2VzcyIsImVudiIsImJlZm9yZUVhY2giLCJyZXNldE1vZHVsZXMiLCJFWFBPX1BVQkxJQ19TVFJJUEVfUFVCTElTSEFCTEVfS0VZIiwiRVhQT19QVUJMSUNfU1VQQUJBU0VfVVJMIiwiY2xlYXJBbGxNb2NrcyIsInNweU9uIiwiY29uc29sZSIsImlzb2xhdGVNb2R1bGVzIiwic3RyaXBlU2VydmljZSIsImFmdGVyRWFjaCIsInJlc3RvcmVBbGxNb2NrcyIsImdsb2JhbCIsImZldGNoIiwiZGVzY3JpYmUiLCJtb2NrVXNlcklkIiwibW9ja1BsYW5JZCIsIm1vY2tJbnZhbGlkUGxhbklkIiwibW9ja1BheW1lbnRJbnRlbnQiLCJtb2NrRXBoZW1lcmFsS2V5IiwibW9ja0N1c3RvbWVyIiwibW9ja1B1Ymxpc2hhYmxlS2V5IiwibW9ja1BsYW4iLCJtb2NrSW5pdFBheW1lbnRTaGVldCIsIm1vY2tQcmVzZW50UGF5bWVudFNoZWV0IiwibW9ja1N1cGFiYXNlIiwidGVzdCIsInJlc3VsdCIsImV4cGVjdCIsInRvQmUiLCJlcnJvciIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwibW9ja1Jlc29sdmVkVmFsdWUiLCJkYXRhIiwic2Vzc2lvbiIsImFjY2Vzc190b2tlbiIsIm9rIiwianNvbiIsInBheW1lbnRJbnRlbnQiLCJlcGhlbWVyYWxLZXkiLCJjdXN0b21lciIsInB1Ymxpc2hhYmxlS2V5IiwiZGVmYXVsdCIsInRvRXF1YWwiLCJzdWNjZXNzIiwibm90IiwidG9IYXZlQmVlbkNhbGxlZCIsIm1lc3NhZ2UiLCJ0b0NvbnRhaW4iLCJtb2NrUmVqZWN0ZWRWYWx1ZSIsIkVycm9yIiwic3RhdHVzIiwiY29kZSIsIm1vY2tJbXBsZW1lbnRhdGlvbk9uY2UiLCJ0aGVuIiwidXNlRmFrZVRpbWVycyIsIlByb21pc2UiLCJfIiwicmVqZWN0Iiwic2V0VGltZW91dCIsInJlc3VsdFByb21pc2UiLCJhZHZhbmNlVGltZXJzQnlUaW1lIiwidXNlUmVhbFRpbWVycyIsInRyYW5zYWN0aW9uSWQiLCJzdHJpbmdDb250YWluaW5nIiwib2JqZWN0Q29udGFpbmluZyIsIm1ldGhvZCIsImhlYWRlcnMiLCJib2R5IiwiYW55IiwiU3RyaW5nIiwibW9ja1Jlc29sdmVkVmFsdWVPbmNlIiwicmVzb2x2ZXMiLCJ0b1Rocm93IiwiYW55dGhpbmciLCJ1cGRhdGVQcm9taXNlIiwicm9sZSIsIlVzZXJSb2xlIiwiTVZQX0RFQUxFUiIsInN1YnNjcmlwdGlvbl9zdGF0dXMiLCJwYXltZW50X3N0YXR1cyIsInN1YnNjcmlwdGlvbl9leHBpcnkiLCJ1c2VyX2lkIiwicGxhbl9pZCIsImFtb3VudCIsImN1cnJlbmN5IiwidHJhbnNhY3Rpb25faWQiLCJtb2NrUmVqZWN0ZWRWYWx1ZU9uY2UiLCJlcnJvcl9tZXNzYWdlIiwiY2FsbENvdW50IiwicmVzb2x2ZSIsInJlc3VsdHMiLCJhbGwiLCJTeW50YXhFcnJvciJdLCJzb3VyY2VzIjpbInN0cmlwZVBheW1lbnRTZXJ2aWNlLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUZXN0IHN1aXRlIGZvciBzdHJpcGVQYXltZW50U2VydmljZS50c1xuICogXG4gKiBUaGlzIHRlc3Qgc3VpdGUgZm9jdXNlcyBvbiBmYWlsdXJlIHBhdGhzIGFuZCBlZGdlIGNhc2VzIHRvIGVuc3VyZVxuICogcm9idXN0IGVycm9yIGhhbmRsaW5nIGluIHRoZSBwYXltZW50IHByb2Nlc3NpbmcgZmxvdy5cbiAqL1xuXG5pbXBvcnQgeyBTdWJzY3JpcHRpb25QbGFuLCBTdWJzY3JpcHRpb25QbGFuVHlwZSwgU3Vic2NyaXB0aW9uRHVyYXRpb24gfSBmcm9tICcuLi8uLi9zcmMvc2VydmljZXMvc3Vic2NyaXB0aW9uVHlwZXMnO1xuaW1wb3J0IHsgVXNlclJvbGUgfSBmcm9tICcuLi8uLi9zcmMvc2VydmljZXMvdXNlclJvbGVTZXJ2aWNlJztcblxuLy8gVGhlc2Ugd2lsbCBiZSBwb3B1bGF0ZWQgdmlhIGEgZHluYW1pYyBpbXBvcnQgKiphZnRlcioqIHdlIGZpbmlzaCBlbnYtdmFyIHNldHVwXG5sZXQgaW5pdGlhbGl6ZVN0cmlwZTogYW55O1xubGV0IGNyZWF0ZVBheW1lbnRTaGVldEZvclN1YnNjcmlwdGlvbjogYW55O1xubGV0IHByb2Nlc3NTdWJzY3JpcHRpb25VcGRhdGU6IGFueTtcblxuLy8gTW9jayB0aGUgc3VwYWJhc2UgY2xpZW50XG5qZXN0Lm1vY2soJy4uLy4uL3NyYy9zdXBhYmFzZScsICgpID0+ICh7XG4gIHN1cGFiYXNlOiB7XG4gICAgYXV0aDoge1xuICAgICAgZ2V0U2Vzc2lvbjogamVzdC5mbigpLFxuICAgIH0sXG4gICAgZnJvbTogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCksXG4gICAgdXBkYXRlOiBqZXN0LmZuKCkubW9ja1JldHVyblRoaXMoKSxcbiAgICBpbnNlcnQ6IGplc3QuZm4oKS5tb2NrUmV0dXJuVGhpcygpLFxuICAgIGVxOiBqZXN0LmZuKCkubW9ja1JldHVyblRoaXMoKSxcbiAgICBzZWxlY3Q6IGplc3QuZm4oKS5tb2NrUmV0dXJuVGhpcygpLFxuICAgIHNpbmdsZTogamVzdC5mbigpLFxuICB9LFxufSkpO1xuXG4vLyBNb2NrIHRoZSBzdWJzY3JpcHRpb25UeXBlcyBpbXBvcnRzXG5qZXN0Lm1vY2soJy4uLy4uL3NyYy9zZXJ2aWNlcy9zdWJzY3JpcHRpb25UeXBlcycsICgpID0+IHtcbiAgY29uc3Qgb3JpZ2luYWwgPSBqZXN0LnJlcXVpcmVBY3R1YWwoJy4uLy4uL3NyYy9zZXJ2aWNlcy9zdWJzY3JpcHRpb25UeXBlcycpO1xuICByZXR1cm4ge1xuICAgIC4uLm9yaWdpbmFsLFxuICAgIFNVQlNDUklQVElPTl9QTEFOUzogW1xuICAgICAge1xuICAgICAgICBpZDogJ2RlYWxlci1tb250aGx5JyxcbiAgICAgICAgbmFtZTogJ01WUCBEZWFsZXIgTW9udGhseScsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnTW9udGhseSBzdWJzY3JpcHRpb24gZm9yIE1WUCBEZWFsZXJzJyxcbiAgICAgICAgcHJpY2U6IDkuOTksXG4gICAgICAgIHR5cGU6ICdkZWFsZXInLFxuICAgICAgICBkdXJhdGlvbjogJ21vbnRobHknLFxuICAgICAgICBmZWF0dXJlczogWydGZWF0dXJlIDEnLCAnRmVhdHVyZSAyJ10sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpZDogJ2RlYWxlci1hbm51YWwnLFxuICAgICAgICBuYW1lOiAnTVZQIERlYWxlciBBbm51YWwnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ0FubnVhbCBzdWJzY3JpcHRpb24gZm9yIE1WUCBEZWFsZXJzJyxcbiAgICAgICAgcHJpY2U6IDk5Ljk5LFxuICAgICAgICB0eXBlOiAnZGVhbGVyJyxcbiAgICAgICAgZHVyYXRpb246ICdhbm51YWwnLFxuICAgICAgICBmZWF0dXJlczogWydGZWF0dXJlIDEnLCAnRmVhdHVyZSAyJywgJ0ZlYXR1cmUgMyddLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaWQ6ICdvcmdhbml6ZXItbW9udGhseScsXG4gICAgICAgIG5hbWU6ICdTaG93IE9yZ2FuaXplciBNb250aGx5JyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdNb250aGx5IHN1YnNjcmlwdGlvbiBmb3IgU2hvdyBPcmdhbml6ZXJzJyxcbiAgICAgICAgcHJpY2U6IDE5Ljk5LFxuICAgICAgICB0eXBlOiAnb3JnYW5pemVyJyxcbiAgICAgICAgZHVyYXRpb246ICdtb250aGx5JyxcbiAgICAgICAgZmVhdHVyZXM6IFsnRmVhdHVyZSBBJywgJ0ZlYXR1cmUgQiddLFxuICAgICAgfSxcbiAgICBdLFxuICAgIFN1YnNjcmlwdGlvblBsYW5UeXBlOiB7XG4gICAgICBERUFMRVI6ICdkZWFsZXInLFxuICAgICAgT1JHQU5JWkVSOiAnb3JnYW5pemVyJyxcbiAgICB9LFxuICAgIFN1YnNjcmlwdGlvbkR1cmF0aW9uOiB7XG4gICAgICBNT05USExZOiAnbW9udGhseScsXG4gICAgICBBTk5VQUw6ICdhbm51YWwnLFxuICAgIH0sXG4gICAgX2NhbGN1bGF0ZUV4cGlyeURhdGU6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge1xuICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyAzMCk7IC8vIERlZmF1bHQgdG8gKzMwIGRheXNcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH0pLFxuICB9O1xufSk7XG5cbi8vIE1vY2sgZW52aXJvbm1lbnQgdmFyaWFibGVzXG5jb25zdCBvcmlnaW5hbEVudiA9IHByb2Nlc3MuZW52O1xuYmVmb3JlRWFjaCgoKSA9PiB7XG4gIGplc3QucmVzZXRNb2R1bGVzKCk7XG4gIHByb2Nlc3MuZW52ID0geyAuLi5vcmlnaW5hbEVudiB9O1xuICBwcm9jZXNzLmVudi5FWFBPX1BVQkxJQ19TVFJJUEVfUFVCTElTSEFCTEVfS0VZID0gJ3BrX3Rlc3RfbW9ja19rZXknO1xuICBwcm9jZXNzLmVudi5FWFBPX1BVQkxJQ19TVVBBQkFTRV9VUkwgPSAnaHR0cHM6Ly9tb2NrLXN1cGFiYXNlLXVybC5jb20nO1xuXG4gIC8vIFJlc2V0IGFsbCBtb2Nrc1xuICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgXG4gIC8vIE1vY2sgY29uc29sZSBtZXRob2RzIHRvIHByZXZlbnQgbm9pc2UgaW4gdGVzdCBvdXRwdXRcbiAgamVzdC5zcHlPbihjb25zb2xlLCAnZXJyb3InKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge30pO1xuICBqZXN0LnNweU9uKGNvbnNvbGUsICd3YXJuJykubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHt9KTtcblxuICAvKipcbiAgICogUmUtcmVxdWlyZSB0aGUgc3RyaXBlUGF5bWVudFNlcnZpY2UgbW9kdWxlICphZnRlciogdGhlIGVudmlyb25tZW50XG4gICAqIHZhcmlhYmxlcyBoYXZlIGJlZW4gKHJlKWNvbmZpZ3VyZWQgYW5kIGBqZXN0LnJlc2V0TW9kdWxlcygpYCBoYXMgY2xlYXJlZFxuICAgKiB0aGUgbW9kdWxlIGNhY2hlLiAgVXNpbmcgYGplc3QuaXNvbGF0ZU1vZHVsZXNgIGd1YXJhbnRlZXMgdGhlIG1vZHVsZSBpc1xuICAgKiBldmFsdWF0ZWQgaW4gYSBmcmVzaCBjb250ZXh0IGFuZCBhdm9pZHMgdGhlIG5lZWQgZm9yIGFzeW5jaHJvbm91c1xuICAgKiBgaW1wb3J0KClgICh3aGljaCByZXF1aXJlcyB0aGUgZXhwZXJpbWVudGFsLXZtLW1vZHVsZXMgZmxhZyBpbiBKZXN0KS5cbiAgICovXG4gIGplc3QuaXNvbGF0ZU1vZHVsZXMoKCkgPT4ge1xuICAgIGNvbnN0IHN0cmlwZVNlcnZpY2UgPSByZXF1aXJlKCcuLi8uLi9zcmMvc2VydmljZXMvc3RyaXBlUGF5bWVudFNlcnZpY2UnKTtcbiAgICBpbml0aWFsaXplU3RyaXBlID0gc3RyaXBlU2VydmljZS5pbml0aWFsaXplU3RyaXBlO1xuICAgIGNyZWF0ZVBheW1lbnRTaGVldEZvclN1YnNjcmlwdGlvbiA9XG4gICAgICBzdHJpcGVTZXJ2aWNlLmNyZWF0ZVBheW1lbnRTaGVldEZvclN1YnNjcmlwdGlvbjtcbiAgICBwcm9jZXNzU3Vic2NyaXB0aW9uVXBkYXRlID0gc3RyaXBlU2VydmljZS5wcm9jZXNzU3Vic2NyaXB0aW9uVXBkYXRlO1xuICB9KTtcbn0pO1xuXG5hZnRlckVhY2goKCkgPT4ge1xuICBwcm9jZXNzLmVudiA9IG9yaWdpbmFsRW52O1xuICBqZXN0LnJlc3RvcmVBbGxNb2NrcygpO1xufSk7XG5cbi8vIE1vY2sgZ2xvYmFsIGZldGNoXG5nbG9iYWwuZmV0Y2ggPSBqZXN0LmZuKCk7XG5cbmRlc2NyaWJlKCdzdHJpcGVQYXltZW50U2VydmljZScsICgpID0+IHtcbiAgLy8gTW9jayBkYXRhXG4gIGNvbnN0IG1vY2tVc2VySWQgPSAndXNlci0xMjMnO1xuICBjb25zdCBtb2NrUGxhbklkID0gJ2RlYWxlci1tb250aGx5JztcbiAgY29uc3QgbW9ja0ludmFsaWRQbGFuSWQgPSAnaW52YWxpZC1wbGFuJztcbiAgY29uc3QgbW9ja1BheW1lbnRJbnRlbnQgPSAncGlfbW9ja19wYXltZW50X2ludGVudCc7XG4gIGNvbnN0IG1vY2tFcGhlbWVyYWxLZXkgPSAnZWtfbW9ja19lcGhlbWVyYWxfa2V5JztcbiAgY29uc3QgbW9ja0N1c3RvbWVyID0gJ2N1c19tb2NrX2N1c3RvbWVyJztcbiAgY29uc3QgbW9ja1B1Ymxpc2hhYmxlS2V5ID0gJ3BrX3Rlc3RfbW9ja19rZXknO1xuICBcbiAgY29uc3QgbW9ja1BsYW46IFN1YnNjcmlwdGlvblBsYW4gPSB7XG4gICAgaWQ6ICdkZWFsZXItbW9udGhseScsXG4gICAgbmFtZTogJ01WUCBEZWFsZXIgTW9udGhseScsXG4gICAgZGVzY3JpcHRpb246ICdNb250aGx5IHN1YnNjcmlwdGlvbiBmb3IgTVZQIERlYWxlcnMnLFxuICAgIHByaWNlOiA5Ljk5LFxuICAgIHR5cGU6IFN1YnNjcmlwdGlvblBsYW5UeXBlLkRFQUxFUixcbiAgICBkdXJhdGlvbjogU3Vic2NyaXB0aW9uRHVyYXRpb24uTU9OVEhMWSxcbiAgICBmZWF0dXJlczogWydGZWF0dXJlIDEnLCAnRmVhdHVyZSAyJ10sXG4gIH07XG5cbiAgLy8gTW9jayBTdHJpcGUgZnVuY3Rpb25zXG4gIGNvbnN0IG1vY2tJbml0UGF5bWVudFNoZWV0ID0gamVzdC5mbigpO1xuICBjb25zdCBtb2NrUHJlc2VudFBheW1lbnRTaGVldCA9IGplc3QuZm4oKTtcblxuICAvLyBNb2NrIFN1cGFiYXNlIHJlc3BvbnNlc1xuICBjb25zdCBtb2NrU3VwYWJhc2UgPSByZXF1aXJlKCcuLi8uLi9zcmMvc3VwYWJhc2UnKS5zdXBhYmFzZTtcblxuICBkZXNjcmliZSgnaW5pdGlhbGl6ZVN0cmlwZScsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgcmV0dXJuIHRydWUgd2hlbiBwdWJsaXNoYWJsZSBrZXkgaXMgc2V0JywgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZVxuICAgICAgcHJvY2Vzcy5lbnYuRVhQT19QVUJMSUNfU1RSSVBFX1BVQkxJU0hBQkxFX0tFWSA9ICdwa190ZXN0X3ZhbGlkX2tleSc7XG4gICAgICBcbiAgICAgIC8vIEFjdFxuICAgICAgY29uc3QgcmVzdWx0ID0gaW5pdGlhbGl6ZVN0cmlwZSgpO1xuICAgICAgXG4gICAgICAvLyBBc3NlcnRcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgcmV0dXJuIGZhbHNlIHdoZW4gcHVibGlzaGFibGUga2V5IGlzIG1pc3NpbmcnLCAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBkZWxldGUgcHJvY2Vzcy5lbnYuRVhQT19QVUJMSUNfU1RSSVBFX1BVQkxJU0hBQkxFX0tFWTtcbiAgICAgIFxuICAgICAgLy8gQWN0XG4gICAgICBjb25zdCByZXN1bHQgPSBpbml0aWFsaXplU3RyaXBlKCk7XG4gICAgICBcbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QoY29uc29sZS5lcnJvcikudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgICdTdHJpcGUgcHVibGlzaGFibGUga2V5IGlzIG5vdCBzZXQuIFBsZWFzZSBjaGVjayB5b3VyIGVudmlyb25tZW50IHZhcmlhYmxlcy4nXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIHJldHVybiBmYWxzZSB3aGVuIHB1Ymxpc2hhYmxlIGtleSBpcyBlbXB0eScsICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIHByb2Nlc3MuZW52LkVYUE9fUFVCTElDX1NUUklQRV9QVUJMSVNIQUJMRV9LRVkgPSAnJztcbiAgICAgIFxuICAgICAgLy8gQWN0XG4gICAgICBjb25zdCByZXN1bHQgPSBpbml0aWFsaXplU3RyaXBlKCk7XG4gICAgICBcbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QoY29uc29sZS5lcnJvcikudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgICdTdHJpcGUgcHVibGlzaGFibGUga2V5IGlzIG5vdCBzZXQuIFBsZWFzZSBjaGVjayB5b3VyIGVudmlyb25tZW50IHZhcmlhYmxlcy4nXG4gICAgICApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnY3JlYXRlUGF5bWVudFNoZWV0Rm9yU3Vic2NyaXB0aW9uJywgKCkgPT4ge1xuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgLy8gRGVmYXVsdCBtb2NrIGZvciBzdWNjZXNzZnVsIHNlc3Npb24gcmV0cmlldmFsXG4gICAgICBtb2NrU3VwYWJhc2UuYXV0aC5nZXRTZXNzaW9uLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIHNlc3Npb246IHtcbiAgICAgICAgICAgIGFjY2Vzc190b2tlbjogJ21vY2stYWNjZXNzLXRva2VuJyxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgIH0pO1xuXG4gICAgICAvLyBEZWZhdWx0IG1vY2sgZm9yIHN1Y2Nlc3NmdWwgZmV0Y2hcbiAgICAgIChnbG9iYWwuZmV0Y2ggYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgIG9rOiB0cnVlLFxuICAgICAgICBqc29uOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICAgIHBheW1lbnRJbnRlbnQ6IG1vY2tQYXltZW50SW50ZW50LFxuICAgICAgICAgIGVwaGVtZXJhbEtleTogbW9ja0VwaGVtZXJhbEtleSxcbiAgICAgICAgICBjdXN0b21lcjogbW9ja0N1c3RvbWVyLFxuICAgICAgICAgIHB1Ymxpc2hhYmxlS2V5OiBtb2NrUHVibGlzaGFibGVLZXksXG4gICAgICAgIH0pLFxuICAgICAgfSk7XG5cbiAgICAgIC8vIERlZmF1bHQgbW9ja3MgZm9yIFN0cmlwZSBmdW5jdGlvbnNcbiAgICAgIG1vY2tJbml0UGF5bWVudFNoZWV0Lm1vY2tSZXNvbHZlZFZhbHVlKHsgZXJyb3I6IG51bGwgfSk7XG4gICAgICBtb2NrUHJlc2VudFBheW1lbnRTaGVldC5tb2NrUmVzb2x2ZWRWYWx1ZSh7IGVycm9yOiBudWxsIH0pO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIHJldHVybiBlcnJvciBmb3IgaW52YWxpZCBwbGFuIElEJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQWN0XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjcmVhdGVQYXltZW50U2hlZXRGb3JTdWJzY3JpcHRpb24oXG4gICAgICAgIG1vY2tVc2VySWQsXG4gICAgICAgIG1vY2tJbnZhbGlkUGxhbklkLFxuICAgICAgICBtb2NrSW5pdFBheW1lbnRTaGVldCxcbiAgICAgICAgbW9ja1ByZXNlbnRQYXltZW50U2hlZXRcbiAgICAgICk7XG4gICAgICBcbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbCh7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcjogJ1N1YnNjcmlwdGlvbiBwbGFuIG5vdCBmb3VuZC4nLFxuICAgICAgfSk7XG4gICAgICBleHBlY3QoZ2xvYmFsLmZldGNoKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBzZXNzaW9uIHJldHJpZXZhbCBmYWlsdXJlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZVxuICAgICAgbW9ja1N1cGFiYXNlLmF1dGguZ2V0U2Vzc2lvbi5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgIGRhdGE6IHsgc2Vzc2lvbjogbnVsbCB9LFxuICAgICAgICBlcnJvcjogeyBtZXNzYWdlOiAnRmFpbGVkIHRvIHJldHJpZXZlIHNlc3Npb24nIH0sXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgLy8gQWN0XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjcmVhdGVQYXltZW50U2hlZXRGb3JTdWJzY3JpcHRpb24oXG4gICAgICAgIG1vY2tVc2VySWQsXG4gICAgICAgIG1vY2tQbGFuSWQsXG4gICAgICAgIG1vY2tJbml0UGF5bWVudFNoZWV0LFxuICAgICAgICBtb2NrUHJlc2VudFBheW1lbnRTaGVldFxuICAgICAgKTtcbiAgICAgIFxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcikudG9Db250YWluKCdGYWlsZWQgdG8gcmV0cmlldmUgc2Vzc2lvbicpO1xuICAgICAgZXhwZWN0KGNvbnNvbGUuZXJyb3IpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgbmV0d29yayBmYWlsdXJlIGR1cmluZyBwYXltZW50IGludGVudCBjcmVhdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIChnbG9iYWwuZmV0Y2ggYXMgamVzdC5Nb2NrKS5tb2NrUmVqZWN0ZWRWYWx1ZShuZXcgRXJyb3IoJ05ldHdvcmsgZXJyb3InKSk7XG4gICAgICBcbiAgICAgIC8vIEFjdFxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY3JlYXRlUGF5bWVudFNoZWV0Rm9yU3Vic2NyaXB0aW9uKFxuICAgICAgICBtb2NrVXNlcklkLFxuICAgICAgICBtb2NrUGxhbklkLFxuICAgICAgICBtb2NrSW5pdFBheW1lbnRTaGVldCxcbiAgICAgICAgbW9ja1ByZXNlbnRQYXltZW50U2hlZXRcbiAgICAgICk7XG4gICAgICBcbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3IpLnRvQmUoJ05ldHdvcmsgZXJyb3InKTtcbiAgICAgIGV4cGVjdChjb25zb2xlLmVycm9yKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIHBheW1lbnQgaW50ZW50IGNyZWF0aW9uIGVycm9yICg0MDApJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZVxuICAgICAgKGdsb2JhbC5mZXRjaCBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgb2s6IGZhbHNlLFxuICAgICAgICBzdGF0dXM6IDQwMCxcbiAgICAgICAganNvbjogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgICBlcnJvcjogJ0ludmFsaWQgcmVxdWVzdCBwYXJhbWV0ZXJzJyxcbiAgICAgICAgfSksXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgLy8gQWN0XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjcmVhdGVQYXltZW50U2hlZXRGb3JTdWJzY3JpcHRpb24oXG4gICAgICAgIG1vY2tVc2VySWQsXG4gICAgICAgIG1vY2tQbGFuSWQsXG4gICAgICAgIG1vY2tJbml0UGF5bWVudFNoZWV0LFxuICAgICAgICBtb2NrUHJlc2VudFBheW1lbnRTaGVldFxuICAgICAgKTtcbiAgICAgIFxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcikudG9CZSgnSW52YWxpZCByZXF1ZXN0IHBhcmFtZXRlcnMnKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgcGF5bWVudCBpbnRlbnQgY3JlYXRpb24gZXJyb3IgKDQwMSknLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICAoZ2xvYmFsLmZldGNoIGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICBvazogZmFsc2UsXG4gICAgICAgIHN0YXR1czogNDAxLFxuICAgICAgICBqc29uOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICAgIGVycm9yOiAnVW5hdXRob3JpemVkIGFjY2VzcycsXG4gICAgICAgIH0pLFxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIC8vIEFjdFxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY3JlYXRlUGF5bWVudFNoZWV0Rm9yU3Vic2NyaXB0aW9uKFxuICAgICAgICBtb2NrVXNlcklkLFxuICAgICAgICBtb2NrUGxhbklkLFxuICAgICAgICBtb2NrSW5pdFBheW1lbnRTaGVldCxcbiAgICAgICAgbW9ja1ByZXNlbnRQYXltZW50U2hlZXRcbiAgICAgICk7XG4gICAgICBcbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3IpLnRvQmUoJ1VuYXV0aG9yaXplZCBhY2Nlc3MnKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgcGF5bWVudCBpbnRlbnQgY3JlYXRpb24gZXJyb3IgKDUwMCknLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICAoZ2xvYmFsLmZldGNoIGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICBvazogZmFsc2UsXG4gICAgICAgIHN0YXR1czogNTAwLFxuICAgICAgICBqc29uOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICAgIGVycm9yOiAnU2VydmVyIGVycm9yJyxcbiAgICAgICAgfSksXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgLy8gQWN0XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjcmVhdGVQYXltZW50U2hlZXRGb3JTdWJzY3JpcHRpb24oXG4gICAgICAgIG1vY2tVc2VySWQsXG4gICAgICAgIG1vY2tQbGFuSWQsXG4gICAgICAgIG1vY2tJbml0UGF5bWVudFNoZWV0LFxuICAgICAgICBtb2NrUHJlc2VudFBheW1lbnRTaGVldFxuICAgICAgKTtcbiAgICAgIFxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcikudG9CZSgnU2VydmVyIGVycm9yJyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIG1hbGZvcm1lZCBBUEkgcmVzcG9uc2UnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICAoZ2xvYmFsLmZldGNoIGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAganNvbjogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgICAvLyBNaXNzaW5nIHJlcXVpcmVkIGZpZWxkc1xuICAgICAgICAgIGN1c3RvbWVyOiBtb2NrQ3VzdG9tZXIsXG4gICAgICAgIH0pLFxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIC8vIEFjdFxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY3JlYXRlUGF5bWVudFNoZWV0Rm9yU3Vic2NyaXB0aW9uKFxuICAgICAgICBtb2NrVXNlcklkLFxuICAgICAgICBtb2NrUGxhbklkLFxuICAgICAgICBtb2NrSW5pdFBheW1lbnRTaGVldCxcbiAgICAgICAgbW9ja1ByZXNlbnRQYXltZW50U2hlZXRcbiAgICAgICk7XG4gICAgICBcbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3IpLnRvQ29udGFpbignQ2Fubm90IHJlYWQgcHJvcGVydGllcyBvZiB1bmRlZmluZWQnKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgU3RyaXBlIGluaXRQYXltZW50U2hlZXQgZXJyb3InLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBtb2NrSW5pdFBheW1lbnRTaGVldC5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgIGVycm9yOiB7IGNvZGU6ICdpbml0aWFsaXphdGlvbl9lcnJvcicsIG1lc3NhZ2U6ICdGYWlsZWQgdG8gaW5pdGlhbGl6ZSBwYXltZW50IHNoZWV0JyB9LFxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIC8vIEFjdFxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY3JlYXRlUGF5bWVudFNoZWV0Rm9yU3Vic2NyaXB0aW9uKFxuICAgICAgICBtb2NrVXNlcklkLFxuICAgICAgICBtb2NrUGxhbklkLFxuICAgICAgICBtb2NrSW5pdFBheW1lbnRTaGVldCxcbiAgICAgICAgbW9ja1ByZXNlbnRQYXltZW50U2hlZXRcbiAgICAgICk7XG4gICAgICBcbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3IpLnRvQmUoJ0luaXRpYWxpemF0aW9uIGZhaWxlZDogRmFpbGVkIHRvIGluaXRpYWxpemUgcGF5bWVudCBzaGVldCcpO1xuICAgICAgZXhwZWN0KGNvbnNvbGUuZXJyb3IpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgU3RyaXBlIHByZXNlbnRQYXltZW50U2hlZXQgY2FuY2VsZWQgZXJyb3InLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBtb2NrUHJlc2VudFBheW1lbnRTaGVldC5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgIGVycm9yOiB7IGNvZGU6ICdDYW5jZWxlZCcsIG1lc3NhZ2U6ICdUaGUgcGF5bWVudCB3YXMgY2FuY2VsZWQnIH0sXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgLy8gQWN0XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjcmVhdGVQYXltZW50U2hlZXRGb3JTdWJzY3JpcHRpb24oXG4gICAgICAgIG1vY2tVc2VySWQsXG4gICAgICAgIG1vY2tQbGFuSWQsXG4gICAgICAgIG1vY2tJbml0UGF5bWVudFNoZWV0LFxuICAgICAgICBtb2NrUHJlc2VudFBheW1lbnRTaGVldFxuICAgICAgKTtcbiAgICAgIFxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcikudG9CZSgnUGF5bWVudCB3YXMgY2FuY2VsZWQuJyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIFN0cmlwZSBwcmVzZW50UGF5bWVudFNoZWV0IHBheW1lbnQgZmFpbHVyZScsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIG1vY2tQcmVzZW50UGF5bWVudFNoZWV0Lm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgZXJyb3I6IHsgY29kZTogJ3BheW1lbnRfZmFpbGVkJywgbWVzc2FnZTogJ1RoZSBwYXltZW50IGZhaWxlZCcgfSxcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICAvLyBBY3RcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNyZWF0ZVBheW1lbnRTaGVldEZvclN1YnNjcmlwdGlvbihcbiAgICAgICAgbW9ja1VzZXJJZCxcbiAgICAgICAgbW9ja1BsYW5JZCxcbiAgICAgICAgbW9ja0luaXRQYXltZW50U2hlZXQsXG4gICAgICAgIG1vY2tQcmVzZW50UGF5bWVudFNoZWV0XG4gICAgICApO1xuICAgICAgXG4gICAgICAvLyBBc3NlcnRcbiAgICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QocmVzdWx0LmVycm9yKS50b0JlKCdQYXltZW50IGZhaWxlZDogVGhlIHBheW1lbnQgZmFpbGVkJyk7XG4gICAgICBleHBlY3QoY29uc29sZS5lcnJvcikudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBwb3N0LXBheW1lbnQgcHJvY2Vzc2luZyBmYWlsdXJlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIC8vIE1vY2sgcHJvY2Vzc1N1YnNjcmlwdGlvblVwZGF0ZSB0byBmYWlsXG4gICAgICBqZXN0LnNweU9uKGdsb2JhbCwgJ1Byb21pc2UnKS5tb2NrSW1wbGVtZW50YXRpb25PbmNlKCgpID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0aGVuOiAoKSA9PiB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBwcm9jZXNzIHN1YnNjcmlwdGlvbicpO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0gYXMgYW55O1xuICAgICAgfSk7XG4gICAgICBcbiAgICAgIC8vIEFjdFxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY3JlYXRlUGF5bWVudFNoZWV0Rm9yU3Vic2NyaXB0aW9uKFxuICAgICAgICBtb2NrVXNlcklkLFxuICAgICAgICBtb2NrUGxhbklkLFxuICAgICAgICBtb2NrSW5pdFBheW1lbnRTaGVldCxcbiAgICAgICAgbW9ja1ByZXNlbnRQYXltZW50U2hlZXRcbiAgICAgICk7XG4gICAgICBcbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3IpLnRvQ29udGFpbignRmFpbGVkIHRvIHByb2Nlc3Mgc3Vic2NyaXB0aW9uJyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIHRpbWVvdXQgZHVyaW5nIHBheW1lbnQgaW50ZW50IGNyZWF0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZVxuICAgICAgamVzdC51c2VGYWtlVGltZXJzKCk7XG4gICAgICAoZ2xvYmFsLmZldGNoIGFzIGplc3QuTW9jaykubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChfLCByZWplY3QpID0+IHtcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ1JlcXVlc3QgdGltZWQgb3V0JykpO1xuICAgICAgICAgIH0sIDMwMDAwKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgLy8gQWN0XG4gICAgICBjb25zdCByZXN1bHRQcm9taXNlID0gY3JlYXRlUGF5bWVudFNoZWV0Rm9yU3Vic2NyaXB0aW9uKFxuICAgICAgICBtb2NrVXNlcklkLFxuICAgICAgICBtb2NrUGxhbklkLFxuICAgICAgICBtb2NrSW5pdFBheW1lbnRTaGVldCxcbiAgICAgICAgbW9ja1ByZXNlbnRQYXltZW50U2hlZXRcbiAgICAgICk7XG4gICAgICBcbiAgICAgIC8vIEZhc3QtZm9yd2FyZCB0aW1lXG4gICAgICBqZXN0LmFkdmFuY2VUaW1lcnNCeVRpbWUoMzEwMDApO1xuICAgICAgXG4gICAgICAvLyBBc3NlcnRcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlc3VsdFByb21pc2U7XG4gICAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcikudG9CZSgnUmVxdWVzdCB0aW1lZCBvdXQnKTtcbiAgICAgIFxuICAgICAgamVzdC51c2VSZWFsVGltZXJzKCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIGV4cGlyZWQgc2Vzc2lvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIG1vY2tTdXBhYmFzZS5hdXRoLmdldFNlc3Npb24ubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICBkYXRhOiB7IHNlc3Npb246IG51bGwgfSxcbiAgICAgICAgZXJyb3I6IG51bGwsXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgLy8gQWN0XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjcmVhdGVQYXltZW50U2hlZXRGb3JTdWJzY3JpcHRpb24oXG4gICAgICAgIG1vY2tVc2VySWQsXG4gICAgICAgIG1vY2tQbGFuSWQsXG4gICAgICAgIG1vY2tJbml0UGF5bWVudFNoZWV0LFxuICAgICAgICBtb2NrUHJlc2VudFBheW1lbnRTaGVldFxuICAgICAgKTtcbiAgICAgIFxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcikudG9Db250YWluKCdGYWlsZWQgdG8gY3JlYXRlIHBheW1lbnQgaW50ZW50Jyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIGludmFsaWQgdXNlciBJRCcsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIChnbG9iYWwuZmV0Y2ggYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgIG9rOiBmYWxzZSxcbiAgICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICAgIGpzb246IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgICAgZXJyb3I6ICdJbnZhbGlkIHVzZXIgSUQnLFxuICAgICAgICB9KSxcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICAvLyBBY3RcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNyZWF0ZVBheW1lbnRTaGVldEZvclN1YnNjcmlwdGlvbihcbiAgICAgICAgJ2ludmFsaWQtdXNlci1pZCcsXG4gICAgICAgIG1vY2tQbGFuSWQsXG4gICAgICAgIG1vY2tJbml0UGF5bWVudFNoZWV0LFxuICAgICAgICBtb2NrUHJlc2VudFBheW1lbnRTaGVldFxuICAgICAgKTtcbiAgICAgIFxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcikudG9CZSgnSW52YWxpZCB1c2VyIElEJyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIHN1Y2Nlc3NmdWwgcGF5bWVudCBmbG93JywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQWN0XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjcmVhdGVQYXltZW50U2hlZXRGb3JTdWJzY3JpcHRpb24oXG4gICAgICAgIG1vY2tVc2VySWQsXG4gICAgICAgIG1vY2tQbGFuSWQsXG4gICAgICAgIG1vY2tJbml0UGF5bWVudFNoZWV0LFxuICAgICAgICBtb2NrUHJlc2VudFBheW1lbnRTaGVldFxuICAgICAgKTtcbiAgICAgIFxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QocmVzdWx0LnRyYW5zYWN0aW9uSWQpLnRvQmUobW9ja1BheW1lbnRJbnRlbnQpO1xuICAgICAgZXhwZWN0KGdsb2JhbC5mZXRjaCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgIGV4cGVjdC5zdHJpbmdDb250YWluaW5nKCcvZnVuY3Rpb25zL3YxL2NyZWF0ZS1wYXltZW50LWludGVudCcpLFxuICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgaGVhZGVyczogZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogJ0JlYXJlciBtb2NrLWFjY2Vzcy10b2tlbicsXG4gICAgICAgICAgfSksXG4gICAgICAgICAgYm9keTogZXhwZWN0LmFueShTdHJpbmcpLFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3Byb2Nlc3NTdWJzY3JpcHRpb25VcGRhdGUnLCAoKSA9PiB7XG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAvLyBEZWZhdWx0IG1vY2sgZm9yIHN1Y2Nlc3NmdWwgcHJvZmlsZSB1cGRhdGVcbiAgICAgIG1vY2tTdXBhYmFzZS5mcm9tLm1vY2tSZXR1cm5UaGlzKCk7XG4gICAgICBtb2NrU3VwYWJhc2UudXBkYXRlLm1vY2tSZXR1cm5UaGlzKCk7XG4gICAgICBtb2NrU3VwYWJhc2UuZXEubW9ja1JldHVyblRoaXMoKTtcbiAgICAgIG1vY2tTdXBhYmFzZS5zZWxlY3QubW9ja1JldHVyblRoaXMoKTtcbiAgICAgIG1vY2tTdXBhYmFzZS5zaW5nbGUubW9ja1Jlc29sdmVkVmFsdWUoeyBkYXRhOiB7fSwgZXJyb3I6IG51bGwgfSk7XG4gICAgICBtb2NrU3VwYWJhc2UuaW5zZXJ0Lm1vY2tSZXNvbHZlZFZhbHVlKHsgZGF0YToge30sIGVycm9yOiBudWxsIH0pO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBwcm9maWxlIHVwZGF0ZSBmYWlsdXJlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZVxuICAgICAgbW9ja1N1cGFiYXNlLnNpbmdsZS5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICBkYXRhOiBudWxsLFxuICAgICAgICBlcnJvcjogeyBtZXNzYWdlOiAnRmFpbGVkIHRvIHVwZGF0ZSBwcm9maWxlJyB9LFxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIC8vIEFjdCAmIEFzc2VydFxuICAgICAgYXdhaXQgZXhwZWN0KFxuICAgICAgICBwcm9jZXNzU3Vic2NyaXB0aW9uVXBkYXRlKG1vY2tVc2VySWQsIG1vY2tQbGFuLCBtb2NrUGF5bWVudEludGVudClcbiAgICAgICkucmVzb2x2ZXMubm90LnRvVGhyb3coKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KGNvbnNvbGUuZXJyb3IpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICBleHBlY3Quc3RyaW5nQ29udGFpbmluZygnRmFpbGVkIHRvIHByb2Nlc3Mgc3Vic2NyaXB0aW9uIHVwZGF0ZSBhZnRlciBwYXltZW50OicpLFxuICAgICAgICBleHBlY3QuYW55dGhpbmcoKVxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgcGF5bWVudCBsb2dnaW5nIGZhaWx1cmUnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICAvLyBGaXJzdCBjYWxsIHN1Y2NlZWRzIChwcm9maWxlIHVwZGF0ZSlcbiAgICAgIG1vY2tTdXBhYmFzZS5zaW5nbGUubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgZGF0YToge30sXG4gICAgICAgIGVycm9yOiBudWxsLFxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIC8vIFNlY29uZCBjYWxsIGZhaWxzIChwYXltZW50IGxvZ2dpbmcpXG4gICAgICBtb2NrU3VwYWJhc2UuaW5zZXJ0Lm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgIGRhdGE6IG51bGwsXG4gICAgICAgIGVycm9yOiB7IG1lc3NhZ2U6ICdGYWlsZWQgdG8gbG9nIHBheW1lbnQnIH0sXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgLy8gQWN0ICYgQXNzZXJ0XG4gICAgICBhd2FpdCBleHBlY3QoXG4gICAgICAgIHByb2Nlc3NTdWJzY3JpcHRpb25VcGRhdGUobW9ja1VzZXJJZCwgbW9ja1BsYW4sIG1vY2tQYXltZW50SW50ZW50KVxuICAgICAgKS5yZXNvbHZlcy5ub3QudG9UaHJvdygpO1xuICAgICAgXG4gICAgICBleHBlY3QoY29uc29sZS5lcnJvcikudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgICdFcnJvciBsb2dnaW5nIHBheW1lbnQgdHJhbnNhY3Rpb246JyxcbiAgICAgICAgZXhwZWN0LmFueXRoaW5nKClcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIG5ldHdvcmsgdGltZW91dCBkdXJpbmcgcHJvZmlsZSB1cGRhdGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBqZXN0LnVzZUZha2VUaW1lcnMoKTtcbiAgICAgIG1vY2tTdXBhYmFzZS5zaW5nbGUubW9ja0ltcGxlbWVudGF0aW9uT25jZSgoKSA9PiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgoXywgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICByZWplY3QobmV3IEVycm9yKCdSZXF1ZXN0IHRpbWVkIG91dCcpKTtcbiAgICAgICAgICB9LCAzMDAwMCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBcbiAgICAgIC8vIEFjdFxuICAgICAgY29uc3QgdXBkYXRlUHJvbWlzZSA9IHByb2Nlc3NTdWJzY3JpcHRpb25VcGRhdGUoXG4gICAgICAgIG1vY2tVc2VySWQsXG4gICAgICAgIG1vY2tQbGFuLFxuICAgICAgICBtb2NrUGF5bWVudEludGVudFxuICAgICAgKTtcbiAgICAgIFxuICAgICAgLy8gRmFzdC1mb3J3YXJkIHRpbWVcbiAgICAgIGplc3QuYWR2YW5jZVRpbWVyc0J5VGltZSgzMTAwMCk7XG4gICAgICBcbiAgICAgIC8vIEFzc2VydFxuICAgICAgYXdhaXQgZXhwZWN0KHVwZGF0ZVByb21pc2UpLnJlc29sdmVzLm5vdC50b1Rocm93KCk7XG4gICAgICBleHBlY3QoY29uc29sZS5lcnJvcikudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgXG4gICAgICBqZXN0LnVzZVJlYWxUaW1lcnMoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCB1cGRhdGUgdXNlciBwcm9maWxlIHdpdGggY29ycmVjdCBzdWJzY3JpcHRpb24gZGV0YWlscycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFjdFxuICAgICAgYXdhaXQgcHJvY2Vzc1N1YnNjcmlwdGlvblVwZGF0ZShtb2NrVXNlcklkLCBtb2NrUGxhbiwgbW9ja1BheW1lbnRJbnRlbnQpO1xuICAgICAgXG4gICAgICAvLyBBc3NlcnRcbiAgICAgIGV4cGVjdChtb2NrU3VwYWJhc2UuZnJvbSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ3Byb2ZpbGVzJyk7XG4gICAgICBleHBlY3QobW9ja1N1cGFiYXNlLnVwZGF0ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICByb2xlOiBVc2VyUm9sZS5NVlBfREVBTEVSLFxuICAgICAgICAgIHN1YnNjcmlwdGlvbl9zdGF0dXM6ICdhY3RpdmUnLFxuICAgICAgICAgIHBheW1lbnRfc3RhdHVzOiAncGFpZCcsXG4gICAgICAgICAgc3Vic2NyaXB0aW9uX2V4cGlyeTogZXhwZWN0LmFueShTdHJpbmcpLFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICAgIGV4cGVjdChtb2NrU3VwYWJhc2UuZXEpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdpZCcsIG1vY2tVc2VySWQpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGxvZyBzdWNjZXNzZnVsIHBheW1lbnQgdHJhbnNhY3Rpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBY3RcbiAgICAgIGF3YWl0IHByb2Nlc3NTdWJzY3JpcHRpb25VcGRhdGUobW9ja1VzZXJJZCwgbW9ja1BsYW4sIG1vY2tQYXltZW50SW50ZW50KTtcbiAgICAgIFxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QobW9ja1N1cGFiYXNlLmZyb20pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdwYXltZW50cycpO1xuICAgICAgZXhwZWN0KG1vY2tTdXBhYmFzZS5pbnNlcnQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgdXNlcl9pZDogbW9ja1VzZXJJZCxcbiAgICAgICAgICBwbGFuX2lkOiBtb2NrUGxhbi5pZCxcbiAgICAgICAgICBhbW91bnQ6IG1vY2tQbGFuLnByaWNlLFxuICAgICAgICAgIGN1cnJlbmN5OiAndXNkJyxcbiAgICAgICAgICBzdGF0dXM6ICdzdWNjZWVkZWQnLFxuICAgICAgICAgIHRyYW5zYWN0aW9uX2lkOiBtb2NrUGF5bWVudEludGVudCxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgbG9nIGZhaWxlZCBwYXltZW50IHRyYW5zYWN0aW9uIG9uIGVycm9yJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZVxuICAgICAgbW9ja1N1cGFiYXNlLnNpbmdsZS5tb2NrUmVqZWN0ZWRWYWx1ZU9uY2UobmV3IEVycm9yKCdEYXRhYmFzZSBlcnJvcicpKTtcbiAgICAgIFxuICAgICAgLy8gQWN0XG4gICAgICBhd2FpdCBwcm9jZXNzU3Vic2NyaXB0aW9uVXBkYXRlKG1vY2tVc2VySWQsIG1vY2tQbGFuLCBtb2NrUGF5bWVudEludGVudCk7XG4gICAgICBcbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KG1vY2tTdXBhYmFzZS5mcm9tKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgncGF5bWVudHMnKTtcbiAgICAgIGV4cGVjdChtb2NrU3VwYWJhc2UuaW5zZXJ0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgIHVzZXJfaWQ6IG1vY2tVc2VySWQsXG4gICAgICAgICAgcGxhbl9pZDogbW9ja1BsYW4uaWQsXG4gICAgICAgICAgYW1vdW50OiBtb2NrUGxhbi5wcmljZSxcbiAgICAgICAgICBjdXJyZW5jeTogJ3VzZCcsXG4gICAgICAgICAgc3RhdHVzOiAnZmFpbGVkJyxcbiAgICAgICAgICB0cmFuc2FjdGlvbl9pZDogbW9ja1BheW1lbnRJbnRlbnQsXG4gICAgICAgICAgZXJyb3JfbWVzc2FnZTogJ1Bvc3QtcGF5bWVudCBwcm9maWxlIHVwZGF0ZSBmYWlsZWQuJyxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdFZGdlIGNhc2VzJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgbWlzc2luZyBTdXBhYmFzZSBVUkwgZW52aXJvbm1lbnQgdmFyaWFibGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBkZWxldGUgcHJvY2Vzcy5lbnYuRVhQT19QVUJMSUNfU1VQQUJBU0VfVVJMO1xuICAgICAgXG4gICAgICAvLyBBY3RcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNyZWF0ZVBheW1lbnRTaGVldEZvclN1YnNjcmlwdGlvbihcbiAgICAgICAgbW9ja1VzZXJJZCxcbiAgICAgICAgbW9ja1BsYW5JZCxcbiAgICAgICAgbW9ja0luaXRQYXltZW50U2hlZXQsXG4gICAgICAgIG1vY2tQcmVzZW50UGF5bWVudFNoZWV0XG4gICAgICApO1xuICAgICAgXG4gICAgICAvLyBBc3NlcnRcbiAgICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QocmVzdWx0LmVycm9yKS50b0NvbnRhaW4oJ0ludmFsaWQgVVJMJyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIGNvbmN1cnJlbnQgcGF5bWVudCBhdHRlbXB0cycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIGxldCBjYWxsQ291bnQgPSAwO1xuICAgICAgKGdsb2JhbC5mZXRjaCBhcyBqZXN0Lk1vY2spLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7XG4gICAgICAgIGNhbGxDb3VudCsrO1xuICAgICAgICBpZiAoY2FsbENvdW50ID09PSAxKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7XG4gICAgICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAgICAgIGpzb246ICgpID0+IFByb21pc2UucmVzb2x2ZSh7XG4gICAgICAgICAgICAgIHBheW1lbnRJbnRlbnQ6IG1vY2tQYXltZW50SW50ZW50LFxuICAgICAgICAgICAgICBlcGhlbWVyYWxLZXk6IG1vY2tFcGhlbWVyYWxLZXksXG4gICAgICAgICAgICAgIGN1c3RvbWVyOiBtb2NrQ3VzdG9tZXIsXG4gICAgICAgICAgICAgIHB1Ymxpc2hhYmxlS2V5OiBtb2NrUHVibGlzaGFibGVLZXksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgICAgIG9rOiBmYWxzZSxcbiAgICAgICAgICAgIGpzb246ICgpID0+IFByb21pc2UucmVzb2x2ZSh7XG4gICAgICAgICAgICAgIGVycm9yOiAnUGF5bWVudCBhbHJlYWR5IGluIHByb2dyZXNzJyxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgLy8gQWN0XG4gICAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICBjcmVhdGVQYXltZW50U2hlZXRGb3JTdWJzY3JpcHRpb24oXG4gICAgICAgICAgbW9ja1VzZXJJZCxcbiAgICAgICAgICBtb2NrUGxhbklkLFxuICAgICAgICAgIG1vY2tJbml0UGF5bWVudFNoZWV0LFxuICAgICAgICAgIG1vY2tQcmVzZW50UGF5bWVudFNoZWV0XG4gICAgICAgICksXG4gICAgICAgIGNyZWF0ZVBheW1lbnRTaGVldEZvclN1YnNjcmlwdGlvbihcbiAgICAgICAgICBtb2NrVXNlcklkLFxuICAgICAgICAgIG1vY2tQbGFuSWQsXG4gICAgICAgICAgbW9ja0luaXRQYXltZW50U2hlZXQsXG4gICAgICAgICAgbW9ja1ByZXNlbnRQYXltZW50U2hlZXRcbiAgICAgICAgKSxcbiAgICAgIF0pO1xuICAgICAgXG4gICAgICAvLyBBc3NlcnRcbiAgICAgIGV4cGVjdChyZXN1bHRzWzBdLnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QocmVzdWx0c1sxXS5zdWNjZXNzKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChyZXN1bHRzWzFdLmVycm9yKS50b0JlKCdQYXltZW50IGFscmVhZHkgaW4gcHJvZ3Jlc3MnKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgSlNPTiBwYXJzZSBlcnJvcnMgaW4gQVBJIHJlc3BvbnNlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZVxuICAgICAgKGdsb2JhbC5mZXRjaCBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgb2s6IHRydWUsXG4gICAgICAgIGpzb246IGplc3QuZm4oKS5tb2NrUmVqZWN0ZWRWYWx1ZShuZXcgU3ludGF4RXJyb3IoJ1VuZXhwZWN0ZWQgdG9rZW4gPCBpbiBKU09OJykpLFxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIC8vIEFjdFxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY3JlYXRlUGF5bWVudFNoZWV0Rm9yU3Vic2NyaXB0aW9uKFxuICAgICAgICBtb2NrVXNlcklkLFxuICAgICAgICBtb2NrUGxhbklkLFxuICAgICAgICBtb2NrSW5pdFBheW1lbnRTaGVldCxcbiAgICAgICAgbW9ja1ByZXNlbnRQYXltZW50U2hlZXRcbiAgICAgICk7XG4gICAgICBcbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3IpLnRvQ29udGFpbignVW5leHBlY3RlZCB0b2tlbiA8IGluIEpTT04nKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgZW1wdHkgcmVzcG9uc2UgZnJvbSBwYXltZW50IGludGVudCBjcmVhdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIChnbG9iYWwuZmV0Y2ggYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgIG9rOiB0cnVlLFxuICAgICAgICBqc29uOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUobnVsbCksXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgLy8gQWN0XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjcmVhdGVQYXltZW50U2hlZXRGb3JTdWJzY3JpcHRpb24oXG4gICAgICAgIG1vY2tVc2VySWQsXG4gICAgICAgIG1vY2tQbGFuSWQsXG4gICAgICAgIG1vY2tJbml0UGF5bWVudFNoZWV0LFxuICAgICAgICBtb2NrUHJlc2VudFBheW1lbnRTaGVldFxuICAgICAgKTtcbiAgICAgIFxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcikudG9Db250YWluKCdDYW5ub3QgcmVhZCBwcm9wZXJ0aWVzIG9mIG51bGwnKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgcmF0ZSBsaW1pdGluZyBmcm9tIFN0cmlwZSBBUEknLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICAoZ2xvYmFsLmZldGNoIGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICBvazogZmFsc2UsXG4gICAgICAgIHN0YXR1czogNDI5LFxuICAgICAgICBqc29uOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICAgIGVycm9yOiAnVG9vIG1hbnkgcmVxdWVzdHMuIFBsZWFzZSB0cnkgYWdhaW4gbGF0ZXIuJyxcbiAgICAgICAgfSksXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgLy8gQWN0XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjcmVhdGVQYXltZW50U2hlZXRGb3JTdWJzY3JpcHRpb24oXG4gICAgICAgIG1vY2tVc2VySWQsXG4gICAgICAgIG1vY2tQbGFuSWQsXG4gICAgICAgIG1vY2tJbml0UGF5bWVudFNoZWV0LFxuICAgICAgICBtb2NrUHJlc2VudFBheW1lbnRTaGVldFxuICAgICAgKTtcbiAgICAgIFxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcikudG9CZSgnVG9vIG1hbnkgcmVxdWVzdHMuIFBsZWFzZSB0cnkgYWdhaW4gbGF0ZXIuJyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIFN0cmlwZSBBUEkgc2VydmljZSBvdXRhZ2UnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICAoZ2xvYmFsLmZldGNoIGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICBvazogZmFsc2UsXG4gICAgICAgIHN0YXR1czogNTAzLFxuICAgICAgICBqc29uOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICAgIGVycm9yOiAnU3RyaXBlIEFQSSBpcyBjdXJyZW50bHkgdW5hdmFpbGFibGUnLFxuICAgICAgICB9KSxcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICAvLyBBY3RcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNyZWF0ZVBheW1lbnRTaGVldEZvclN1YnNjcmlwdGlvbihcbiAgICAgICAgbW9ja1VzZXJJZCxcbiAgICAgICAgbW9ja1BsYW5JZCxcbiAgICAgICAgbW9ja0luaXRQYXltZW50U2hlZXQsXG4gICAgICAgIG1vY2tQcmVzZW50UGF5bWVudFNoZWV0XG4gICAgICApO1xuICAgICAgXG4gICAgICAvLyBBc3NlcnRcbiAgICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QocmVzdWx0LmVycm9yKS50b0JlKCdTdHJpcGUgQVBJIGlzIGN1cnJlbnRseSB1bmF2YWlsYWJsZScpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBpbnZhbGlkIGN1cnJlbmN5IGNvZGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICAoZ2xvYmFsLmZldGNoIGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICBvazogZmFsc2UsXG4gICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgICBqc29uOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICAgIGVycm9yOiAnSW52YWxpZCBjdXJyZW5jeSBjb2RlJyxcbiAgICAgICAgfSksXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgLy8gQWN0XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjcmVhdGVQYXltZW50U2hlZXRGb3JTdWJzY3JpcHRpb24oXG4gICAgICAgIG1vY2tVc2VySWQsXG4gICAgICAgIG1vY2tQbGFuSWQsXG4gICAgICAgIG1vY2tJbml0UGF5bWVudFNoZWV0LFxuICAgICAgICBtb2NrUHJlc2VudFBheW1lbnRTaGVldFxuICAgICAgKTtcbiAgICAgIFxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcikudG9CZSgnSW52YWxpZCBjdXJyZW5jeSBjb2RlJyk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQWdCQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsb0JBQW9CLEVBQUU7RUFBQSxPQUFPO0lBQ3JDQyxRQUFRLEVBQUU7TUFDUkMsSUFBSSxFQUFFO1FBQ0pDLFVBQVUsRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUM7TUFDdEIsQ0FBQztNQUNEQyxJQUFJLEVBQUVGLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUMsQ0FBQ0UsY0FBYyxDQUFDLENBQUM7TUFDaENDLE1BQU0sRUFBRUosSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQyxDQUFDRSxjQUFjLENBQUMsQ0FBQztNQUNsQ0UsTUFBTSxFQUFFTCxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDLENBQUNFLGNBQWMsQ0FBQyxDQUFDO01BQ2xDRyxFQUFFLEVBQUVOLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUMsQ0FBQ0UsY0FBYyxDQUFDLENBQUM7TUFDOUJJLE1BQU0sRUFBRVAsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQyxDQUFDRSxjQUFjLENBQUMsQ0FBQztNQUNsQ0ssTUFBTSxFQUFFUixJQUFJLENBQUNDLEVBQUUsQ0FBQztJQUNsQjtFQUNGLENBQUM7QUFBQSxDQUFDLENBQUM7QUFHSE4sV0FBQSxHQUFLQyxJQUFJLENBQUMsc0NBQXNDLEVBQUUsWUFBTTtFQUN0RCxJQUFNYSxRQUFRLEdBQUdULElBQUksQ0FBQ1UsYUFBYSxDQUFDLHNDQUFzQyxD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