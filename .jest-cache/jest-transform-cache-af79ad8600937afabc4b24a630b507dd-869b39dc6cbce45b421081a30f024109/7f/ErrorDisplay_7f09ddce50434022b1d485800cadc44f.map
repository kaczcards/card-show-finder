{"version":3,"names":["React","View","Text","TouchableOpacity","Ionicons","useTheme","jsx","_jsx","jsxs","_jsxs","cov_1fs1ma1w45","s","ErrorDisplay","_ref","_ref$type","type","b","_ref$title","title","message","onRetry","_ref$retryText","retryText","style","f","_ref2","theme","InlineError","inlineStyle","components","errorStates","inline","container","children","name","size","icon","text","FullScreenError","fullScreenStyle","fullScreen","button","onPress"],"sources":["ErrorDisplay.tsx"],"sourcesContent":["import React from 'react';\nimport { View, Text, TouchableOpacity, StyleProp, ViewStyle } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '../../contexts/ThemeContext';\n\ninterface ErrorDisplayProps {\n  /**\n   * Display type: 'fullScreen' for entire screen error, \n   * 'inline' for within-component error\n   */\n  type?: 'fullScreen' | 'inline';\n  \n  /**\n   * The error title (for fullScreen type)\n   */\n  title?: string;\n  \n  /**\n   * The error message\n   */\n  message: string;\n  \n  /**\n   * Optional retry action\n   */\n  onRetry?: () => void;\n  \n  /**\n   * Custom retry button text\n   */\n  retryText?: string;\n  \n  /**\n   * Optional custom style for the container\n   */\n  style?: StyleProp<ViewStyle>;\n}\n\n/**\n * ErrorDisplay - A standardized error display component\n * \n * This component provides a consistent error state display throughout the app,\n * with support for both full-screen and inline error states.\n */\nconst ErrorDisplay: React.FC<ErrorDisplayProps> = ({\n  type = 'inline',\n  title = 'Error',\n  message,\n  onRetry,\n  retryText = 'Retry',\n  style,\n}) => {\n  // Get theme from context\n  const { theme } = useTheme();\n\n  /***************************************************\n   * Split rendering into two separate components so\n   * that TypeScript can correctly infer the shape of\n   * the theme styles we are accessing.\n   **************************************************/\n\n  /**\n   * Inline (_compact) error component\n   */\n  const InlineError: React.FC = () => {\n    const inlineStyle = theme.components.errorStates.inline;\n\n    return (\n      <View style={[inlineStyle.container, style]}>\n        <Ionicons\n          name=\"alert-circle\"\n          size={20}\n          style={inlineStyle.icon}\n        />\n        <Text style={inlineStyle.text}>{message}</Text>\n      </View>\n    );\n  };\n\n  /**\n   * Full-screen error component\n   */\n  const FullScreenError: React.FC = () => {\n    const fullScreenStyle = theme.components.errorStates.fullScreen;\n\n    return (\n      <View style={[fullScreenStyle.container, style]}>\n        <Ionicons\n          name=\"alert-circle-outline\"\n          size={60}\n          style={fullScreenStyle.icon}\n        />\n        <Text style={fullScreenStyle.title}>{title}</Text>\n        <Text style={fullScreenStyle.message}>{message}</Text>\n\n        {onRetry && (\n          <TouchableOpacity\n            style={fullScreenStyle.button.container}\n            onPress={onRetry}\n          >\n            <Text style={fullScreenStyle.button.text}>{retryText}</Text>\n          </TouchableOpacity>\n        )}\n      </View>\n    );\n  };\n\n  // Delegate to the correct component\n  return type === 'fullScreen' ? <FullScreenError /> : <InlineError />;\n};\n\nexport default ErrorDisplay;\n"],"mappings":"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","ignoreList":[]}