65a0a79c58d6ba84b6476aed22cf9377
"use strict";

/* istanbul ignore next */
function cov_18rsmp1nsf() {
  var path = "/Users/kevin/card-show-finder/src/services/showSeriesService.ts";
  var hash = "d8a8e01314ca20add1ddadfd6b0b3561bf6cc527";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kevin/card-show-finder/src/services/showSeriesService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 35
        }
      },
      "2": {
        start: {
          line: 4,
          column: 19
        },
        end: {
          line: 4,
          column: 41
        }
      },
      "3": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 542,
          column: 2
        }
      },
      "4": {
        start: {
          line: 15,
          column: 20
        },
        end: {
          line: 15,
          column: 71
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 19,
          column: 9
        }
      },
      "6": {
        start: {
          line: 18,
          column: 12
        },
        end: {
          line: 18,
          column: 66
        }
      },
      "7": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 29,
          column: 9
        }
      },
      "8": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 24,
          column: 15
        }
      },
      "9": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 28,
          column: 61
        }
      },
      "10": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 33,
          column: 9
        }
      },
      "11": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 47
        }
      },
      "12": {
        start: {
          line: 34,
          column: 32
        },
        end: {
          line: 34,
          column: 43
        }
      },
      "13": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 40,
          column: 11
        }
      },
      "14": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 44,
          column: 9
        }
      },
      "15": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 42,
          column: 64
        }
      },
      "16": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 77
        }
      },
      "17": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 49,
          column: 9
        }
      },
      "18": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 47,
          column: 112
        }
      },
      "19": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 48,
          column: 22
        }
      },
      "20": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 59,
          column: 12
        }
      },
      "21": {
        start: {
          line: 50,
          column: 35
        },
        end: {
          line: 59,
          column: 9
        }
      },
      "22": {
        start: {
          line: 67,
          column: 32
        },
        end: {
          line: 71,
          column: 21
        }
      },
      "23": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 79,
          column: 9
        }
      },
      "24": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 76,
          column: 13
        }
      },
      "25": {
        start: {
          line: 75,
          column: 16
        },
        end: {
          line: 75,
          column: 28
        }
      },
      "26": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 70
        }
      },
      "27": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 77
        }
      },
      "28": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 89,
          column: 10
        }
      },
      "29": {
        start: {
          line: 97,
          column: 32
        },
        end: {
          line: 101,
          column: 53
        }
      },
      "30": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 105,
          column: 9
        }
      },
      "31": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 68
        }
      },
      "32": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 81
        }
      },
      "33": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 110,
          column: 9
        }
      },
      "34": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 112
        }
      },
      "35": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 22
        }
      },
      "36": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 131,
          column: 12
        }
      },
      "37": {
        start: {
          line: 112,
          column: 33
        },
        end: {
          line: 131,
          column: 9
        }
      },
      "38": {
        start: {
          line: 139,
          column: 20
        },
        end: {
          line: 143,
          column: 34
        }
      },
      "39": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 147,
          column: 11
        }
      },
      "40": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 151,
          column: 9
        }
      },
      "41": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 150,
          column: 47
        }
      },
      "42": {
        start: {
          line: 152,
          column: 32
        },
        end: {
          line: 152,
          column: 43
        }
      },
      "43": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 158,
          column: 11
        }
      },
      "44": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 162,
          column: 9
        }
      },
      "45": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 160,
          column: 68
        }
      },
      "46": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 161,
          column: 81
        }
      },
      "47": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 167,
          column: 9
        }
      },
      "48": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 165,
          column: 113
        }
      },
      "49": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 166,
          column: 22
        }
      },
      "50": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 188,
          column: 12
        }
      },
      "51": {
        start: {
          line: 169,
          column: 33
        },
        end: {
          line: 188,
          column: 9
        }
      },
      "52": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 199,
          column: 9
        }
      },
      "53": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 198,
          column: 29
        }
      },
      "54": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 223,
          column: 9
        }
      },
      "55": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 207,
          column: 13
        }
      },
      "56": {
        start: {
          line: 205,
          column: 16
        },
        end: {
          line: 205,
          column: 100
        }
      },
      "57": {
        start: {
          line: 206,
          column: 16
        },
        end: {
          line: 206,
          column: 33
        }
      },
      "58": {
        start: {
          line: 209,
          column: 30
        },
        end: {
          line: 209,
          column: 68
        }
      },
      "59": {
        start: {
          line: 210,
          column: 29
        },
        end: {
          line: 210,
          column: 67
        }
      },
      "60": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 214,
          column: 13
        }
      },
      "61": {
        start: {
          line: 212,
          column: 16
        },
        end: {
          line: 212,
          column: 108
        }
      },
      "62": {
        start: {
          line: 213,
          column: 16
        },
        end: {
          line: 213,
          column: 33
        }
      },
      "63": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 218,
          column: 14
        }
      },
      "64": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 221,
          column: 86
        }
      },
      "65": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 29
        }
      },
      "66": {
        start: {
          line: 231,
          column: 32
        },
        end: {
          line: 241,
          column: 54
        }
      },
      "67": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 245,
          column: 9
        }
      },
      "68": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 243,
          column: 67
        }
      },
      "69": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 244,
          column: 80
        }
      },
      "70": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 250,
          column: 9
        }
      },
      "71": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 248,
          column: 112
        }
      },
      "72": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 249,
          column: 22
        }
      },
      "73": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 263,
          column: 12
        }
      },
      "74": {
        start: {
          line: 251,
          column: 35
        },
        end: {
          line: 263,
          column: 9
        }
      },
      "75": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 308,
          column: 9
        }
      },
      "76": {
        start: {
          line: 273,
          column: 42
        },
        end: {
          line: 273,
          column: 85
        }
      },
      "77": {
        start: {
          line: 274,
          column: 32
        },
        end: {
          line: 274,
          column: 53
        }
      },
      "78": {
        start: {
          line: 275,
          column: 29
        },
        end: {
          line: 282,
          column: 14
        }
      },
      "79": {
        start: {
          line: 283,
          column: 27
        },
        end: {
          line: 283,
          column: 48
        }
      },
      "80": {
        start: {
          line: 284,
          column: 12
        },
        end: {
          line: 289,
          column: 13
        }
      },
      "81": {
        start: {
          line: 285,
          column: 16
        },
        end: {
          line: 288,
          column: 18
        }
      },
      "82": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 300,
          column: 14
        }
      },
      "83": {
        start: {
          line: 303,
          column: 12
        },
        end: {
          line: 303,
          column: 64
        }
      },
      "84": {
        start: {
          line: 304,
          column: 12
        },
        end: {
          line: 307,
          column: 14
        }
      },
      "85": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 346,
          column: 9
        }
      },
      "86": {
        start: {
          line: 317,
          column: 29
        },
        end: {
          line: 325,
          column: 14
        }
      },
      "87": {
        start: {
          line: 326,
          column: 27
        },
        end: {
          line: 326,
          column: 48
        }
      },
      "88": {
        start: {
          line: 327,
          column: 12
        },
        end: {
          line: 332,
          column: 13
        }
      },
      "89": {
        start: {
          line: 328,
          column: 16
        },
        end: {
          line: 331,
          column: 18
        }
      },
      "90": {
        start: {
          line: 333,
          column: 12
        },
        end: {
          line: 338,
          column: 14
        }
      },
      "91": {
        start: {
          line: 341,
          column: 12
        },
        end: {
          line: 341,
          column: 69
        }
      },
      "92": {
        start: {
          line: 342,
          column: 12
        },
        end: {
          line: 345,
          column: 14
        }
      },
      "93": {
        start: {
          line: 354,
          column: 35
        },
        end: {
          line: 354,
          column: 75
        }
      },
      "94": {
        start: {
          line: 355,
          column: 8
        },
        end: {
          line: 357,
          column: 9
        }
      },
      "95": {
        start: {
          line: 356,
          column: 12
        },
        end: {
          line: 356,
          column: 77
        }
      },
      "96": {
        start: {
          line: 358,
          column: 32
        },
        end: {
          line: 374,
          column: 21
        }
      },
      "97": {
        start: {
          line: 375,
          column: 8
        },
        end: {
          line: 378,
          column: 9
        }
      },
      "98": {
        start: {
          line: 376,
          column: 12
        },
        end: {
          line: 376,
          column: 64
        }
      },
      "99": {
        start: {
          line: 377,
          column: 12
        },
        end: {
          line: 377,
          column: 70
        }
      },
      "100": {
        start: {
          line: 379,
          column: 8
        },
        end: {
          line: 387,
          column: 10
        }
      },
      "101": {
        start: {
          line: 396,
          column: 26
        },
        end: {
          line: 402,
          column: 31
        }
      },
      "102": {
        start: {
          line: 403,
          column: 8
        },
        end: {
          line: 406,
          column: 9
        }
      },
      "103": {
        start: {
          line: 404,
          column: 12
        },
        end: {
          line: 404,
          column: 64
        }
      },
      "104": {
        start: {
          line: 405,
          column: 12
        },
        end: {
          line: 405,
          column: 77
        }
      },
      "105": {
        start: {
          line: 407,
          column: 8
        },
        end: {
          line: 407,
          column: 20
        }
      },
      "106": {
        start: {
          line: 424,
          column: 8
        },
        end: {
          line: 446,
          column: 9
        }
      },
      "107": {
        start: {
          line: 425,
          column: 36
        },
        end: {
          line: 429,
          column: 25
        }
      },
      "108": {
        start: {
          line: 430,
          column: 12
        },
        end: {
          line: 433,
          column: 13
        }
      },
      "109": {
        start: {
          line: 431,
          column: 16
        },
        end: {
          line: 431,
          column: 81
        }
      },
      "110": {
        start: {
          line: 432,
          column: 16
        },
        end: {
          line: 432,
          column: 23
        }
      },
      "111": {
        start: {
          line: 434,
          column: 12
        },
        end: {
          line: 442,
          column: 13
        }
      },
      "112": {
        start: {
          line: 436,
          column: 16
        },
        end: {
          line: 437,
          column: 76
        }
      },
      "113": {
        start: {
          line: 438,
          column: 16
        },
        end: {
          line: 438,
          column: 100
        }
      },
      "114": {
        start: {
          line: 441,
          column: 16
        },
        end: {
          line: 441,
          column: 100
        }
      },
      "115": {
        start: {
          line: 445,
          column: 12
        },
        end: {
          line: 445,
          column: 77
        }
      },
      "116": {
        start: {
          line: 455,
          column: 8
        },
        end: {
          line: 474,
          column: 10
        }
      },
      "117": {
        start: {
          line: 481,
          column: 8
        },
        end: {
          line: 507,
          column: 9
        }
      },
      "118": {
        start: {
          line: 482,
          column: 28
        },
        end: {
          line: 489,
          column: 13
        }
      },
      "119": {
        start: {
          line: 490,
          column: 36
        },
        end: {
          line: 494,
          column: 25
        }
      },
      "120": {
        start: {
          line: 495,
          column: 12
        },
        end: {
          line: 498,
          column: 13
        }
      },
      "121": {
        start: {
          line: 496,
          column: 16
        },
        end: {
          line: 496,
          column: 72
        }
      },
      "122": {
        start: {
          line: 497,
          column: 16
        },
        end: {
          line: 497,
          column: 64
        }
      },
      "123": {
        start: {
          line: 499,
          column: 12
        },
        end: {
          line: 499,
          column: 66
        }
      },
      "124": {
        start: {
          line: 502,
          column: 12
        },
        end: {
          line: 502,
          column: 77
        }
      },
      "125": {
        start: {
          line: 503,
          column: 12
        },
        end: {
          line: 506,
          column: 14
        }
      },
      "126": {
        start: {
          line: 515,
          column: 8
        },
        end: {
          line: 540,
          column: 9
        }
      },
      "127": {
        start: {
          line: 516,
          column: 28
        },
        end: {
          line: 522,
          column: 13
        }
      },
      "128": {
        start: {
          line: 523,
          column: 36
        },
        end: {
          line: 527,
          column: 25
        }
      },
      "129": {
        start: {
          line: 528,
          column: 12
        },
        end: {
          line: 531,
          column: 13
        }
      },
      "130": {
        start: {
          line: 529,
          column: 16
        },
        end: {
          line: 529,
          column: 69
        }
      },
      "131": {
        start: {
          line: 530,
          column: 16
        },
        end: {
          line: 530,
          column: 64
        }
      },
      "132": {
        start: {
          line: 532,
          column: 12
        },
        end: {
          line: 532,
          column: 66
        }
      },
      "133": {
        start: {
          line: 535,
          column: 12
        },
        end: {
          line: 535,
          column: 74
        }
      },
      "134": {
        start: {
          line: 536,
          column: 12
        },
        end: {
          line: 539,
          column: 14
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 14,
            column: 4
          },
          end: {
            line: 14,
            column: 5
          }
        },
        loc: {
          start: {
            line: 14,
            column: 36
          },
          end: {
            line: 60,
            column: 5
          }
        },
        line: 14
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 50,
            column: 24
          },
          end: {
            line: 50,
            column: 25
          }
        },
        loc: {
          start: {
            line: 50,
            column: 35
          },
          end: {
            line: 59,
            column: 9
          }
        },
        line: 50
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 66,
            column: 4
          },
          end: {
            line: 66,
            column: 5
          }
        },
        loc: {
          start: {
            line: 66,
            column: 32
          },
          end: {
            line: 90,
            column: 5
          }
        },
        line: 66
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 96,
            column: 4
          },
          end: {
            line: 96,
            column: 5
          }
        },
        loc: {
          start: {
            line: 96,
            column: 37
          },
          end: {
            line: 132,
            column: 5
          }
        },
        line: 96
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 112,
            column: 24
          },
          end: {
            line: 112,
            column: 25
          }
        },
        loc: {
          start: {
            line: 112,
            column: 33
          },
          end: {
            line: 131,
            column: 9
          }
        },
        line: 112
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 138,
            column: 4
          },
          end: {
            line: 138,
            column: 5
          }
        },
        loc: {
          start: {
            line: 138,
            column: 37
          },
          end: {
            line: 189,
            column: 5
          }
        },
        line: 138
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 169,
            column: 24
          },
          end: {
            line: 169,
            column: 25
          }
        },
        loc: {
          start: {
            line: 169,
            column: 33
          },
          end: {
            line: 188,
            column: 9
          }
        },
        line: 169
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 195,
            column: 4
          },
          end: {
            line: 195,
            column: 5
          }
        },
        loc: {
          start: {
            line: 195,
            column: 44
          },
          end: {
            line: 224,
            column: 5
          }
        },
        line: 195
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 230,
            column: 4
          },
          end: {
            line: 230,
            column: 5
          }
        },
        loc: {
          start: {
            line: 230,
            column: 37
          },
          end: {
            line: 264,
            column: 5
          }
        },
        line: 230
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 251,
            column: 24
          },
          end: {
            line: 251,
            column: 25
          }
        },
        loc: {
          start: {
            line: 251,
            column: 35
          },
          end: {
            line: 263,
            column: 9
          }
        },
        line: 251
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 270,
            column: 4
          },
          end: {
            line: 270,
            column: 5
          }
        },
        loc: {
          start: {
            line: 270,
            column: 36
          },
          end: {
            line: 309,
            column: 5
          }
        },
        line: 270
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 315,
            column: 4
          },
          end: {
            line: 315,
            column: 5
          }
        },
        loc: {
          start: {
            line: 315,
            column: 39
          },
          end: {
            line: 347,
            column: 5
          }
        },
        line: 315
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 353,
            column: 4
          },
          end: {
            line: 353,
            column: 5
          }
        },
        loc: {
          start: {
            line: 353,
            column: 34
          },
          end: {
            line: 388,
            column: 5
          }
        },
        line: 353
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 395,
            column: 4
          },
          end: {
            line: 395,
            column: 5
          }
        },
        loc: {
          start: {
            line: 395,
            column: 46
          },
          end: {
            line: 408,
            column: 5
          }
        },
        line: 395
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 423,
            column: 4
          },
          end: {
            line: 423,
            column: 5
          }
        },
        loc: {
          start: {
            line: 423,
            column: 35
          },
          end: {
            line: 447,
            column: 5
          }
        },
        line: 423
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 454,
            column: 4
          },
          end: {
            line: 454,
            column: 5
          }
        },
        loc: {
          start: {
            line: 454,
            column: 20
          },
          end: {
            line: 475,
            column: 5
          }
        },
        line: 454
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 480,
            column: 4
          },
          end: {
            line: 480,
            column: 5
          }
        },
        loc: {
          start: {
            line: 480,
            column: 41
          },
          end: {
            line: 508,
            column: 5
          }
        },
        line: 480
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 514,
            column: 4
          },
          end: {
            line: 514,
            column: 5
          }
        },
        loc: {
          start: {
            line: 514,
            column: 46
          },
          end: {
            line: 541,
            column: 5
          }
        },
        line: 514
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 19,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 19,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 17
      },
      "1": {
        loc: {
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 29,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 29,
            column: 9
          }
        }, {
          start: {
            line: 26,
            column: 13
          },
          end: {
            line: 29,
            column: 9
          }
        }],
        line: 21
      },
      "2": {
        loc: {
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 31
      },
      "3": {
        loc: {
          start: {
            line: 37,
            column: 22
          },
          end: {
            line: 37,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 37,
            column: 44
          },
          end: {
            line: 37,
            column: 51
          }
        }, {
          start: {
            line: 37,
            column: 54
          },
          end: {
            line: 37,
            column: 65
          }
        }],
        line: 37
      },
      "4": {
        loc: {
          start: {
            line: 38,
            column: 20
          },
          end: {
            line: 38,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 38,
            column: 42
          },
          end: {
            line: 38,
            column: 53
          }
        }, {
          start: {
            line: 38,
            column: 56
          },
          end: {
            line: 38,
            column: 61
          }
        }],
        line: 38
      },
      "5": {
        loc: {
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 41
      },
      "6": {
        loc: {
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 49,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 49,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "7": {
        loc: {
          start: {
            line: 46,
            column: 12
          },
          end: {
            line: 46,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 46,
            column: 12
          },
          end: {
            line: 46,
            column: 17
          }
        }, {
          start: {
            line: 46,
            column: 21
          },
          end: {
            line: 46,
            column: 41
          }
        }],
        line: 46
      },
      "8": {
        loc: {
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 72
      },
      "9": {
        loc: {
          start: {
            line: 73,
            column: 12
          },
          end: {
            line: 76,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 12
          },
          end: {
            line: 76,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      },
      "10": {
        loc: {
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 105,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 105,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 102
      },
      "11": {
        loc: {
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 110,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 110,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      },
      "12": {
        loc: {
          start: {
            line: 107,
            column: 12
          },
          end: {
            line: 107,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 107,
            column: 12
          },
          end: {
            line: 107,
            column: 17
          }
        }, {
          start: {
            line: 107,
            column: 21
          },
          end: {
            line: 107,
            column: 41
          }
        }],
        line: 107
      },
      "13": {
        loc: {
          start: {
            line: 149,
            column: 8
          },
          end: {
            line: 151,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 149,
            column: 8
          },
          end: {
            line: 151,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 149
      },
      "14": {
        loc: {
          start: {
            line: 155,
            column: 22
          },
          end: {
            line: 155,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 155,
            column: 44
          },
          end: {
            line: 155,
            column: 51
          }
        }, {
          start: {
            line: 155,
            column: 54
          },
          end: {
            line: 155,
            column: 65
          }
        }],
        line: 155
      },
      "15": {
        loc: {
          start: {
            line: 156,
            column: 20
          },
          end: {
            line: 156,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 156,
            column: 42
          },
          end: {
            line: 156,
            column: 53
          }
        }, {
          start: {
            line: 156,
            column: 56
          },
          end: {
            line: 156,
            column: 61
          }
        }],
        line: 156
      },
      "16": {
        loc: {
          start: {
            line: 159,
            column: 8
          },
          end: {
            line: 162,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 159,
            column: 8
          },
          end: {
            line: 162,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 159
      },
      "17": {
        loc: {
          start: {
            line: 164,
            column: 8
          },
          end: {
            line: 167,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 164,
            column: 8
          },
          end: {
            line: 167,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 164
      },
      "18": {
        loc: {
          start: {
            line: 164,
            column: 12
          },
          end: {
            line: 164,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 164,
            column: 12
          },
          end: {
            line: 164,
            column: 17
          }
        }, {
          start: {
            line: 164,
            column: 21
          },
          end: {
            line: 164,
            column: 41
          }
        }],
        line: 164
      },
      "19": {
        loc: {
          start: {
            line: 197,
            column: 8
          },
          end: {
            line: 199,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 197,
            column: 8
          },
          end: {
            line: 199,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 197
      },
      "20": {
        loc: {
          start: {
            line: 202,
            column: 12
          },
          end: {
            line: 207,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 202,
            column: 12
          },
          end: {
            line: 207,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 202
      },
      "21": {
        loc: {
          start: {
            line: 202,
            column: 16
          },
          end: {
            line: 204,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 202,
            column: 16
          },
          end: {
            line: 202,
            column: 44
          }
        }, {
          start: {
            line: 203,
            column: 16
          },
          end: {
            line: 203,
            column: 59
          }
        }, {
          start: {
            line: 204,
            column: 16
          },
          end: {
            line: 204,
            column: 54
          }
        }],
        line: 202
      },
      "22": {
        loc: {
          start: {
            line: 211,
            column: 12
          },
          end: {
            line: 214,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 211,
            column: 12
          },
          end: {
            line: 214,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 211
      },
      "23": {
        loc: {
          start: {
            line: 211,
            column: 16
          },
          end: {
            line: 211,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 211,
            column: 16
          },
          end: {
            line: 211,
            column: 31
          }
        }, {
          start: {
            line: 211,
            column: 35
          },
          end: {
            line: 211,
            column: 51
          }
        }],
        line: 211
      },
      "24": {
        loc: {
          start: {
            line: 242,
            column: 8
          },
          end: {
            line: 245,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 242,
            column: 8
          },
          end: {
            line: 245,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 242
      },
      "25": {
        loc: {
          start: {
            line: 247,
            column: 8
          },
          end: {
            line: 250,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 247,
            column: 8
          },
          end: {
            line: 250,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 247
      },
      "26": {
        loc: {
          start: {
            line: 247,
            column: 12
          },
          end: {
            line: 247,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 247,
            column: 12
          },
          end: {
            line: 247,
            column: 17
          }
        }, {
          start: {
            line: 247,
            column: 21
          },
          end: {
            line: 247,
            column: 41
          }
        }],
        line: 247
      },
      "27": {
        loc: {
          start: {
            line: 255,
            column: 55
          },
          end: {
            line: 255,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 255,
            column: 55
          },
          end: {
            line: 255,
            column: 91
          }
        }, {
          start: {
            line: 255,
            column: 95
          },
          end: {
            line: 255,
            column: 97
          }
        }],
        line: 255
      },
      "28": {
        loc: {
          start: {
            line: 257,
            column: 21
          },
          end: {
            line: 257,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 257,
            column: 21
          },
          end: {
            line: 257,
            column: 35
          }
        }, {
          start: {
            line: 257,
            column: 39
          },
          end: {
            line: 257,
            column: 41
          }
        }],
        line: 257
      },
      "29": {
        loc: {
          start: {
            line: 259,
            column: 31
          },
          end: {
            line: 262,
            column: 25
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 259,
            column: 56
          },
          end: {
            line: 262,
            column: 13
          }
        }, {
          start: {
            line: 262,
            column: 16
          },
          end: {
            line: 262,
            column: 25
          }
        }],
        line: 259
      },
      "30": {
        loc: {
          start: {
            line: 284,
            column: 12
          },
          end: {
            line: 289,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 284,
            column: 12
          },
          end: {
            line: 289,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 284
      },
      "31": {
        loc: {
          start: {
            line: 287,
            column: 29
          },
          end: {
            line: 287,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 287,
            column: 29
          },
          end: {
            line: 287,
            column: 41
          }
        }, {
          start: {
            line: 287,
            column: 45
          },
          end: {
            line: 287,
            column: 74
          }
        }],
        line: 287
      },
      "32": {
        loc: {
          start: {
            line: 292,
            column: 25
          },
          end: {
            line: 292,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 292,
            column: 25
          },
          end: {
            line: 292,
            column: 39
          }
        }, {
          start: {
            line: 292,
            column: 43
          },
          end: {
            line: 292,
            column: 77
          }
        }],
        line: 292
      },
      "33": {
        loc: {
          start: {
            line: 293,
            column: 24
          },
          end: {
            line: 299,
            column: 29
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 293,
            column: 40
          },
          end: {
            line: 299,
            column: 17
          }
        }, {
          start: {
            line: 299,
            column: 20
          },
          end: {
            line: 299,
            column: 29
          }
        }],
        line: 293
      },
      "34": {
        loc: {
          start: {
            line: 306,
            column: 25
          },
          end: {
            line: 306,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 306,
            column: 50
          },
          end: {
            line: 306,
            column: 63
          }
        }, {
          start: {
            line: 306,
            column: 66
          },
          end: {
            line: 306,
            column: 90
          }
        }],
        line: 306
      },
      "35": {
        loc: {
          start: {
            line: 327,
            column: 12
          },
          end: {
            line: 332,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 327,
            column: 12
          },
          end: {
            line: 332,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 327
      },
      "36": {
        loc: {
          start: {
            line: 330,
            column: 29
          },
          end: {
            line: 330,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 330,
            column: 29
          },
          end: {
            line: 330,
            column: 41
          }
        }, {
          start: {
            line: 330,
            column: 45
          },
          end: {
            line: 330,
            column: 79
          }
        }],
        line: 330
      },
      "37": {
        loc: {
          start: {
            line: 335,
            column: 25
          },
          end: {
            line: 335,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 335,
            column: 25
          },
          end: {
            line: 335,
            column: 39
          }
        }, {
          start: {
            line: 335,
            column: 43
          },
          end: {
            line: 335,
            column: 80
          }
        }],
        line: 335
      },
      "38": {
        loc: {
          start: {
            line: 344,
            column: 25
          },
          end: {
            line: 344,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 344,
            column: 50
          },
          end: {
            line: 344,
            column: 63
          }
        }, {
          start: {
            line: 344,
            column: 66
          },
          end: {
            line: 344,
            column: 90
          }
        }],
        line: 344
      },
      "39": {
        loc: {
          start: {
            line: 355,
            column: 8
          },
          end: {
            line: 357,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 355,
            column: 8
          },
          end: {
            line: 357,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 355
      },
      "40": {
        loc: {
          start: {
            line: 375,
            column: 8
          },
          end: {
            line: 378,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 375,
            column: 8
          },
          end: {
            line: 378,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 375
      },
      "41": {
        loc: {
          start: {
            line: 383,
            column: 53
          },
          end: {
            line: 383,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 383,
            column: 53
          },
          end: {
            line: 383,
            column: 87
          }
        }, {
          start: {
            line: 383,
            column: 91
          },
          end: {
            line: 383,
            column: 93
          }
        }],
        line: 383
      },
      "42": {
        loc: {
          start: {
            line: 385,
            column: 21
          },
          end: {
            line: 385,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 385,
            column: 21
          },
          end: {
            line: 385,
            column: 33
          }
        }, {
          start: {
            line: 385,
            column: 37
          },
          end: {
            line: 385,
            column: 39
          }
        }],
        line: 385
      },
      "43": {
        loc: {
          start: {
            line: 403,
            column: 8
          },
          end: {
            line: 406,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 403,
            column: 8
          },
          end: {
            line: 406,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 403
      },
      "44": {
        loc: {
          start: {
            line: 430,
            column: 12
          },
          end: {
            line: 433,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 430,
            column: 12
          },
          end: {
            line: 433,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 430
      },
      "45": {
        loc: {
          start: {
            line: 434,
            column: 12
          },
          end: {
            line: 442,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 434,
            column: 12
          },
          end: {
            line: 442,
            column: 13
          }
        }, {
          start: {
            line: 440,
            column: 17
          },
          end: {
            line: 442,
            column: 13
          }
        }],
        line: 434
      },
      "46": {
        loc: {
          start: {
            line: 434,
            column: 16
          },
          end: {
            line: 434,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 434,
            column: 16
          },
          end: {
            line: 434,
            column: 21
          }
        }, {
          start: {
            line: 434,
            column: 25
          },
          end: {
            line: 434,
            column: 42
          }
        }],
        line: 434
      },
      "47": {
        loc: {
          start: {
            line: 438,
            column: 87
          },
          end: {
            line: 438,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 438,
            column: 87
          },
          end: {
            line: 438,
            column: 91
          }
        }, {
          start: {
            line: 438,
            column: 95
          },
          end: {
            line: 438,
            column: 97
          }
        }],
        line: 438
      },
      "48": {
        loc: {
          start: {
            line: 495,
            column: 12
          },
          end: {
            line: 498,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 495,
            column: 12
          },
          end: {
            line: 498,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 495
      },
      "49": {
        loc: {
          start: {
            line: 505,
            column: 23
          },
          end: {
            line: 505,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 505,
            column: 46
          },
          end: {
            line: 505,
            column: 57
          }
        }, {
          start: {
            line: 505,
            column: 60
          },
          end: {
            line: 505,
            column: 75
          }
        }],
        line: 505
      },
      "50": {
        loc: {
          start: {
            line: 528,
            column: 12
          },
          end: {
            line: 531,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 528,
            column: 12
          },
          end: {
            line: 531,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 528
      },
      "51": {
        loc: {
          start: {
            line: 538,
            column: 23
          },
          end: {
            line: 538,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 538,
            column: 46
          },
          end: {
            line: 538,
            column: 57
          }
        }, {
          start: {
            line: 538,
            column: 60
          },
          end: {
            line: 538,
            column: 75
          }
        }],
        line: 538
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/kevin/card-show-finder/src/services/showSeriesService.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/kevin/card-show-finder/src/services/showSeriesService.ts"],
      sourcesContent: ["import { supabase } from '../supabase';\nimport { ShowSeries, Review, Show } from '../types';\n\n/**\n * Service for interacting with show_series table and related functionality\n */\nexport const showSeriesService = {\n  /**\n   * Get all show series with optional filtering\n   * @param options Filter options\n   * @returns Array of show series\n   */\n  async getAllShowSeries(options?: {\n    organizerId?: string;\n    limit?: number;\n    orderBy?: string;\n    orderDirection?: 'asc' | 'desc';\n  }): Promise<ShowSeries[]> {\n    let query = supabase.from('show_series').select('*');\n\n    // Apply filters\n    if (options?.organizerId) {\n      query = query.eq('organizer_id', options.organizerId);\n    }\n\n    // Apply ordering\n    if (options?.orderBy) {\n      query = query.order(options.orderBy, { \n        ascending: options.orderDirection !== 'desc' \n      });\n    } else {\n      // Default ordering by name\n      query = query.order('name', { ascending: true });\n    }\n\n    // Apply limit\n    if (options?.limit) {\n      query = query.limit(options.limit);\n    }\n\n    const { data, error } = await query;\n\n    // Debug log the raw response\n    console.log('[showSeriesService.getAllShowSeries] Raw Supabase response:', {\n      dataType: Array.isArray(data) ? 'array' : typeof data,\n      length: Array.isArray(data) ? data.length : 'n/a',\n      error,\n    });\n\n    if (error) {\n      console.error('Error fetching show series:', error);\n      throw new Error(`Failed to fetch show series: ${error.message}`);\n    }\n\n    // Guard \u2013 ensure we have an array before proceeding\n    if (!data || !Array.isArray(data)) {\n      console.warn(\n        '[showSeriesService.getAllShowSeries] Expected array; returning empty array instead.',\n      );\n      return [];\n    }\n\n    return data.map(series => ({\n      id: series.id,\n      name: series.name,\n      organizerId: series.organizer_id,\n      description: series.description,\n      averageRating: series.average_rating,\n      reviewCount: series.review_count,\n      createdAt: series.created_at,\n      updatedAt: series.updated_at\n    }));\n  },\n\n  /**\n   * Get a single show series by ID\n   * @param id Show series ID\n   * @returns Show series object or null if not found\n   */\n  async getShowSeriesById(id: string): Promise<ShowSeries | null> {\n    const { data, error } = await supabase\n      .from('show_series')\n      .select('*')\n      .eq('id', id)\n      .single();\n\n    if (error) {\n      if (error.code === 'PGRST116') {\n        // PGRST116 is the error code for \"no rows returned\"\n        return null;\n      }\n      console.error('Error fetching show series by ID:', error);\n      throw new Error(`Failed to fetch show series: ${error.message}`);\n    }\n\n    return {\n      id: data.id,\n      name: data.name,\n      organizerId: data.organizer_id,\n      description: data.description,\n      averageRating: data.average_rating,\n      reviewCount: data.review_count,\n      createdAt: data.created_at,\n      updatedAt: data.updated_at\n    };\n  },\n\n  /**\n   * Get all shows belonging to a specific series\n   * @param seriesId Show series ID\n   * @returns Array of shows in the series\n   */\n  async getShowsInSeries(seriesId: string): Promise<Show[]> {\n    const { data, error } = await supabase\n      .from('shows')\n      .select('*')\n      .eq('series_id', seriesId)\n      .order('start_date', { ascending: true });\n\n    if (error) {\n      console.error('Error fetching shows in series:', error);\n      throw new Error(`Failed to fetch shows in series: ${error.message}`);\n    }\n\n    // Guard \u2013 ensure we have an array before proceeding\n    if (!data || !Array.isArray(data)) {\n      console.warn(\n        '[showSeriesService.getShowsInSeries] Expected array; returning empty array instead.',\n      );\n      return [];\n    }\n\n    // Map the data to match the Show interface\n    return data.map(show => ({\n      id: show.id,\n      seriesId: show.series_id,\n      title: show.title,\n      description: show.description,\n      location: show.location,\n      address: show.address,\n      startDate: show.start_date,\n      endDate: show.end_date,\n      entryFee: show.entry_fee,\n      imageUrl: show.image_url,\n      rating: show.rating,\n      coordinates: this.extractSafeCoordinates(show.coordinates),\n      status: show.status,\n      organizerId: show.organizer_id,\n      features: show.features,\n      categories: show.categories,\n      createdAt: show.created_at,\n      updatedAt: show.updated_at\n    }));\n  },\n\n  /**\n   * Get standalone, unclaimed shows (no organizer and not part of a series)\n   * @param options Optional limit and sort direction\n   * @returns Array of unclaimed Show objects\n   */\n  async getUnclaimedShows(options?: {\n    limit?: number;\n    orderDirection?: 'asc' | 'desc';\n  }): Promise<Show[]> {\n    let query = supabase\n      .from('shows')\n      .select('*')\n      .is('organizer_id', null)\n      .is('series_id', null);\n\n    // Order by start_date (default ascending)\n    query = query.order('start_date', {\n      ascending: options?.orderDirection !== 'desc'\n    });\n\n    // Apply limit if provided\n    if (options?.limit) {\n      query = query.limit(options.limit);\n    }\n\n    const { data, error } = await query;\n\n    // Debug log the raw response\n    console.log('[showSeriesService.getUnclaimedShows] Raw Supabase response:', {\n      dataType: Array.isArray(data) ? 'array' : typeof data,\n      length: Array.isArray(data) ? data.length : 'n/a',\n      error,\n    });\n\n    if (error) {\n      console.error('Error fetching unclaimed shows:', error);\n      throw new Error(`Failed to fetch unclaimed shows: ${error.message}`);\n    }\n\n    // Guard \u2013 ensure we have an array; otherwise return empty list\n    if (!data || !Array.isArray(data)) {\n      console.warn(\n        '[showSeriesService.getUnclaimedShows] Expected array; returning empty array instead.',\n      );\n      return [];\n    }\n\n    // Map rows to Show interface\n    return data.map(show => ({\n      id: show.id,\n      seriesId: show.series_id,\n      title: show.title,\n      description: show.description,\n      location: show.location,\n      address: show.address,\n      startDate: show.start_date,\n      endDate: show.end_date,\n      entryFee: show.entry_fee,\n      imageUrl: show.image_url,\n      rating: show.rating,\n      coordinates: this.extractSafeCoordinates(show.coordinates),\n      status: show.status,\n      organizerId: show.organizer_id,\n      features: show.features,\n      categories: show.categories,\n      createdAt: show.created_at,\n      updatedAt: show.updated_at,\n    }));\n  },\n\n  /**\n   * Safely extract coordinates from PostGIS data format\n   * @param coordinatesData Raw coordinates data from database\n   * @returns Formatted coordinates or undefined if invalid\n   */\n  extractSafeCoordinates(coordinatesData: any): { latitude: number; longitude: number } | undefined {\n    // Check if coordinates exist at all\n    if (!coordinatesData) {\n      return undefined;\n    }\n    \n    try {\n      // Check if coordinates has the expected structure\n      if (!coordinatesData.coordinates || \n          !Array.isArray(coordinatesData.coordinates) || \n          coordinatesData.coordinates.length < 2) {\n        console.warn('[showSeriesService] Invalid coordinates structure:', coordinatesData);\n        return undefined;\n      }\n      \n      // Verify the coordinates are valid numbers\n      const longitude = Number(coordinatesData.coordinates[0]);\n      const latitude = Number(coordinatesData.coordinates[1]);\n      \n      if (isNaN(latitude) || isNaN(longitude)) {\n        console.warn('[showSeriesService] Invalid coordinate values:', coordinatesData.coordinates);\n        return undefined;\n      }\n      \n      return {\n        latitude,\n        longitude\n      };\n    } catch (error) {\n      console.error('[showSeriesService] Error extracting coordinates:', error);\n      return undefined;\n    }\n  },\n\n  /**\n   * Get reviews for a specific show series\n   * @param seriesId Show series ID\n   * @returns Array of reviews\n   */\n  async getSeriesReviews(seriesId: string): Promise<Review[]> {\n    const { data, error } = await supabase\n      .from('reviews')\n      .select(`\n        *,\n        profiles:user_id (\n          first_name,\n          last_name\n        )\n      `)\n      .eq('series_id', seriesId)\n      .order('created_at', { ascending: false });\n\n    if (error) {\n      console.error('Error fetching series reviews:', error);\n      throw new Error(`Failed to fetch series reviews: ${error.message}`);\n    }\n\n    // Guard \u2013 ensure we have an array before proceeding\n    if (!data || !Array.isArray(data)) {\n      console.warn(\n        '[showSeriesService.getSeriesReviews] Expected array; returning empty array instead.',\n      );\n      return [];\n    }\n\n    return data.map(review => ({\n      id: review.id,\n      seriesId: review.series_id,\n      userId: review.user_id,\n      userName: `${review.profiles.first_name} ${review.profiles.last_name?.charAt(0) || ''}`.trim(),\n      rating: review.rating,\n      comment: review.comment || '',\n      date: review.created_at,\n      organizerResponse: review.organizer_reply ? {\n        comment: review.organizer_reply,\n        date: review.updated_at\n      } : undefined\n    }));\n  },\n\n  /**\n   * Claim a show series as an organizer\n   * @param seriesId Show series ID to claim\n   * @returns Updated show series object\n   */\n  async claimShowSeries(seriesId: string): Promise<{ success: boolean; message: string; series?: ShowSeries }> {\n    try {\n      // Get current access token using new getSession() API\n      const { data: { session } } = await supabase.auth.getSession();\n      const accessToken = session?.access_token;\n\n      const response = await fetch(\n        `${process.env.EXPO_PUBLIC_SUPABASE_URL}/functions/v1/claim_show_series`,\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${accessToken}`\n          },\n          body: JSON.stringify({ seriesId })\n        }\n      );\n\n      const result = await response.json();\n\n      if (!response.ok) {\n        return {\n          success: false,\n          message: result.error || 'Failed to claim show series'\n        };\n      }\n\n      return {\n        success: true,\n        message: result.message || 'Show series claimed successfully',\n        series: result.series ? {\n          id: result.series.id,\n          name: result.series.name,\n          organizerId: result.series.organizer_id,\n          description: result.series.description,\n          createdAt: result.series.created_at\n        } : undefined\n      };\n    } catch (error) {\n      console.error('Error claiming show series:', error);\n      return {\n        success: false,\n        message: error instanceof Error ? error.message : 'Unknown error occurred'\n      };\n    }\n  },\n\n  /**\n   * Send a broadcast message to show attendees/favorites\n   * @param params Broadcast message parameters\n   * @returns Result of the broadcast operation\n   */\n  async sendBroadcastMessage(params: {\n    seriesId: string;\n    showId?: string;\n    messageType: 'pre_show' | 'post_show';\n    subject: string;\n    content: string;\n    includeAttendees?: boolean;\n    includeFavorites?: boolean;\n  }): Promise<{ success: boolean; message: string; recipientCount?: number; quotaRemaining?: number }> {\n    try {\n      const response = await fetch(\n        `${process.env.EXPO_PUBLIC_SUPABASE_URL}/functions/v1/send_broadcast_message`,\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            // Fetch access token using new getSession() API\n            'Authorization': `Bearer ${(await supabase.auth.getSession()).data.session?.access_token}`\n          },\n          body: JSON.stringify(params)\n        }\n      );\n\n      const result = await response.json();\n\n      if (!response.ok) {\n        return {\n          success: false,\n          message: result.error || 'Failed to send broadcast message'\n        };\n      }\n\n      return {\n        success: true,\n        message: result.message || 'Broadcast message sent successfully',\n        recipientCount: result.recipientCount,\n        quotaRemaining: result.quotaRemaining\n      };\n    } catch (error) {\n      console.error('Error sending broadcast message:', error);\n      return {\n        success: false,\n        message: error instanceof Error ? error.message : 'Unknown error occurred'\n      };\n    }\n  },\n\n  /**\n   * Add a review for a show series\n   * @param review Review data to add\n   * @returns The created review\n   */\n  async addSeriesReview(review: {\n    seriesId: string;\n    rating: number;\n    comment: string;\n  }): Promise<Review> {\n    const { data: userData } = await supabase.auth.getUser();\n    \n    if (!userData.user) {\n      throw new Error('User must be authenticated to submit a review');\n    }\n\n    const { data, error } = await supabase\n      .from('reviews')\n      .insert({\n        series_id: review.seriesId,\n        user_id: userData.user.id,\n        rating: review.rating,\n        comment: review.comment,\n        created_at: new Date().toISOString()\n      })\n      .select(`\n        *,\n        profiles:user_id (\n          first_name,\n          last_name\n        )\n      `)\n      .single();\n\n    if (error) {\n      console.error('Error adding series review:', error);\n      throw new Error(`Failed to add review: ${error.message}`);\n    }\n\n    return {\n      id: data.id,\n      seriesId: data.series_id,\n      userId: data.user_id,\n      userName: `${data.profiles.first_name} ${data.profiles.last_name?.charAt(0) || ''}`.trim(),\n      rating: data.rating,\n      comment: data.comment || '',\n      date: data.created_at\n    };\n  },\n\n  /**\n   * Respond to a review as a show organizer\n   * @param reviewId Review ID to respond to\n   * @param response Organizer's response text\n   * @returns Success status\n   */\n  async respondToReview(reviewId: string, response: string): Promise<boolean> {\n    const { error } = await supabase\n      .from('reviews')\n      .update({\n        organizer_reply: response,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', reviewId);\n\n    if (error) {\n      console.error('Error responding to review:', error);\n      throw new Error(`Failed to respond to review: ${error.message}`);\n    }\n\n    return true;\n  },\n\n  /* ------------------------------------------------------------------\n   * DEBUG HELPERS\n   * ----------------------------------------------------------------*/\n\n  /**\n   * Debug helper \u2013 print out the column names that PostgREST/Supabase\n   * currently believes exist on the `shows` table.  This is useful for\n   * diagnosing \u201Ccolumn not found in schema cache\u201D errors without leaving\n   * the code-base.  Note: we simply fetch a single row (if it exists) and\n   * introspect the keys; if the table is empty we still log the shape of\n   * the response object so you can verify what PostgREST is returning.\n   *\n   * Usage (example):\n   *   await showSeriesService.debugShowsTableColumns();\n   */\n  async debugShowsTableColumns(): Promise<void> {\n    try {\n      const { data, error } = await supabase\n        .from('shows')\n        // fetch at most 1 row \u2013 we only need keys, not data volume\n        .select('*')\n        .limit(1);\n\n      if (error) {\n        console.error('[debugShowsTableColumns] Supabase error:', error);\n        return;\n      }\n\n      if (!data || data.length === 0) {\n        // Even if there are no rows, Supabase will still return column meta\n        console.warn(\n          '[debugShowsTableColumns] Table returned zero rows.  ' +\n          'Column keys may be incomplete if the cache is stale.',\n        );\n        console.log('[debugShowsTableColumns] Raw response keys:', Object.keys(data ?? {}));\n      } else {\n        console.log(\n          '[debugShowsTableColumns] Column keys detected:',\n          Object.keys(data[0]),\n        );\n      }\n    } catch (err) {\n      console.error('[debugShowsTableColumns] Unexpected error:', err);\n    }\n  },\n\n  /* ------------------------------------------------------------------\n   * NEW METHODS\n   * ----------------------------------------------------------------*/\n\n  /**\n   * Internal helper \u2013 map a raw Supabase row into a typed Show object\n   */\n  mapShowRow(row: any): Show {\n    return {\n      id: row.id,\n      seriesId: row.series_id,\n      title: row.title,\n      description: row.description,\n      location: row.location,\n      address: row.address,\n      startDate: row.start_date,\n      endDate: row.end_date,\n      entryFee: row.entry_fee,\n      imageUrl: row.image_url,\n      rating: row.rating,\n      coordinates: this.extractSafeCoordinates(row.coordinates),\n      status: row.status,\n      organizerId: row.organizer_id,\n      features: row.features,\n      categories: row.categories,\n      createdAt: row.created_at,\n      updatedAt: row.updated_at,\n    };\n  },\n\n  /**\n   * Create a brand-new standalone show (not attached to any series)\n   * @param showData Partial show data (requires organizerId at minimum)\n   */\n  async createStandaloneShow(showData: Omit<\n    Show,\n    'id' | 'seriesId' | 'rating' | 'createdAt' | 'updatedAt' | 'coordinates'\n  > & { seriesId?: null }): Promise<{ success: boolean; show?: Show; error?: string }> {\n    try {\n      const payload = {\n        ...showData,\n        series_id: null,\n        // Supabase expects camelCase -> snake_case conversion\n        start_date: showData.startDate,\n        end_date: showData.endDate,\n        entry_fee: showData.entryFee,\n      };\n\n      const { data, error } = await supabase\n        .from('shows')\n        .insert(payload)\n        .select('*')\n        .single();\n\n      if (error) {\n        console.error('Error creating standalone show:', error);\n        return { success: false, error: error.message };\n      }\n\n      return { success: true, show: this.mapShowRow(data) };\n    } catch (err) {\n      console.error('Unexpected error creating standalone show:', err);\n      return {\n        success: false,\n        error: err instanceof Error ? err.message : 'Unknown error',\n      };\n    }\n  },\n\n  /**\n   * Add a new show to an existing series\n   * @param seriesId The series to attach the new show to\n   * @param showData Basic show fields (organizerId optional \u2013 inherits from series if omitted)\n   */\n  async addShowToSeries(\n    seriesId: string,\n    showData: Omit<\n      Show,\n      'id' | 'seriesId' | 'rating' | 'createdAt' | 'updatedAt' | 'coordinates'\n    >\n  ): Promise<{ success: boolean; show?: Show; error?: string }> {\n    try {\n      const payload = {\n        ...showData,\n        series_id: seriesId,\n        start_date: showData.startDate,\n        end_date: showData.endDate,\n        entry_fee: showData.entryFee,\n      };\n\n      const { data, error } = await supabase\n        .from('shows')\n        .insert(payload)\n        .select('*')\n        .single();\n\n      if (error) {\n        console.error('Error adding show to series:', error);\n        return { success: false, error: error.message };\n      }\n\n      return { success: true, show: this.mapShowRow(data) };\n    } catch (err) {\n      console.error('Unexpected error adding show to series:', err);\n      return {\n        success: false,\n        error: err instanceof Error ? err.message : 'Unknown error',\n      };\n    }\n  }\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d8a8e01314ca20add1ddadfd6b0b3561bf6cc527"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_18rsmp1nsf = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_18rsmp1nsf();
cov_18rsmp1nsf().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_18rsmp1nsf().s[1]++;
exports.showSeriesService = void 0;
const supabase_1 =
/* istanbul ignore next */
(cov_18rsmp1nsf().s[2]++, require("../supabase"));
/**
 * Service for interacting with show_series table and related functionality
 */
/* istanbul ignore next */
cov_18rsmp1nsf().s[3]++;
exports.showSeriesService = {
  /**
   * Get all show series with optional filtering
   * @param options Filter options
   * @returns Array of show series
   */
  async getAllShowSeries(options) {
    /* istanbul ignore next */
    cov_18rsmp1nsf().f[0]++;
    let query =
    /* istanbul ignore next */
    (cov_18rsmp1nsf().s[4]++, supabase_1.supabase.from('show_series').select('*'));
    // Apply filters
    /* istanbul ignore next */
    cov_18rsmp1nsf().s[5]++;
    if (options?.organizerId) {
      /* istanbul ignore next */
      cov_18rsmp1nsf().b[0][0]++;
      cov_18rsmp1nsf().s[6]++;
      query = query.eq('organizer_id', options.organizerId);
    } else
    /* istanbul ignore next */
    {
      cov_18rsmp1nsf().b[0][1]++;
    }
    // Apply ordering
    cov_18rsmp1nsf().s[7]++;
    if (options?.orderBy) {
      /* istanbul ignore next */
      cov_18rsmp1nsf().b[1][0]++;
      cov_18rsmp1nsf().s[8]++;
      query = query.order(options.orderBy, {
        ascending: options.orderDirection !== 'desc'
      });
    } else {
      /* istanbul ignore next */
      cov_18rsmp1nsf().b[1][1]++;
      cov_18rsmp1nsf().s[9]++;
      // Default ordering by name
      query = query.order('name', {
        ascending: true
      });
    }
    // Apply limit
    /* istanbul ignore next */
    cov_18rsmp1nsf().s[10]++;
    if (options?.limit) {
      /* istanbul ignore next */
      cov_18rsmp1nsf().b[2][0]++;
      cov_18rsmp1nsf().s[11]++;
      query = query.limit(options.limit);
    } else
    /* istanbul ignore next */
    {
      cov_18rsmp1nsf().b[2][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_18rsmp1nsf().s[12]++, await query);
    // Debug log the raw response
    /* istanbul ignore next */
    cov_18rsmp1nsf().s[13]++;
    console.log('[showSeriesService.getAllShowSeries] Raw Supabase response:', {
      dataType: Array.isArray(data) ?
      /* istanbul ignore next */
      (cov_18rsmp1nsf().b[3][0]++, 'array') :
      /* istanbul ignore next */
      (cov_18rsmp1nsf().b[3][1]++, typeof data),
      length: Array.isArray(data) ?
      /* istanbul ignore next */
      (cov_18rsmp1nsf().b[4][0]++, data.length) :
      /* istanbul ignore next */
      (cov_18rsmp1nsf().b[4][1]++, 'n/a'),
      error
    });
    /* istanbul ignore next */
    cov_18rsmp1nsf().s[14]++;
    if (error) {
      /* istanbul ignore next */
      cov_18rsmp1nsf().b[5][0]++;
      cov_18rsmp1nsf().s[15]++;
      console.error('Error fetching show series:', error);
      /* istanbul ignore next */
      cov_18rsmp1nsf().s[16]++;
      throw new Error(`Failed to fetch show series: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_18rsmp1nsf().b[5][1]++;
    }
    // Guard – ensure we have an array before proceeding
    cov_18rsmp1nsf().s[17]++;
    if (
    /* istanbul ignore next */
    (cov_18rsmp1nsf().b[7][0]++, !data) ||
    /* istanbul ignore next */
    (cov_18rsmp1nsf().b[7][1]++, !Array.isArray(data))) {
      /* istanbul ignore next */
      cov_18rsmp1nsf().b[6][0]++;
      cov_18rsmp1nsf().s[18]++;
      console.warn('[showSeriesService.getAllShowSeries] Expected array; returning empty array instead.');
      /* istanbul ignore next */
      cov_18rsmp1nsf().s[19]++;
      return [];
    } else
    /* istanbul ignore next */
    {
      cov_18rsmp1nsf().b[6][1]++;
    }
    cov_18rsmp1nsf().s[20]++;
    return data.map(series => {
      /* istanbul ignore next */
      cov_18rsmp1nsf().f[1]++;
      cov_18rsmp1nsf().s[21]++;
      return {
        id: series.id,
        name: series.name,
        organizerId: series.organizer_id,
        description: series.description,
        averageRating: series.average_rating,
        reviewCount: series.review_count,
        createdAt: series.created_at,
        updatedAt: series.updated_at
      };
    });
  },
  /**
   * Get a single show series by ID
   * @param id Show series ID
   * @returns Show series object or null if not found
   */
  async getShowSeriesById(id) {
    /* istanbul ignore next */
    cov_18rsmp1nsf().f[2]++;
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_18rsmp1nsf().s[22]++, await supabase_1.supabase.from('show_series').select('*').eq('id', id).single());
    /* istanbul ignore next */
    cov_18rsmp1nsf().s[23]++;
    if (error) {
      /* istanbul ignore next */
      cov_18rsmp1nsf().b[8][0]++;
      cov_18rsmp1nsf().s[24]++;
      if (error.code === 'PGRST116') {
        /* istanbul ignore next */
        cov_18rsmp1nsf().b[9][0]++;
        cov_18rsmp1nsf().s[25]++;
        // PGRST116 is the error code for "no rows returned"
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_18rsmp1nsf().b[9][1]++;
      }
      cov_18rsmp1nsf().s[26]++;
      console.error('Error fetching show series by ID:', error);
      /* istanbul ignore next */
      cov_18rsmp1nsf().s[27]++;
      throw new Error(`Failed to fetch show series: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_18rsmp1nsf().b[8][1]++;
    }
    cov_18rsmp1nsf().s[28]++;
    return {
      id: data.id,
      name: data.name,
      organizerId: data.organizer_id,
      description: data.description,
      averageRating: data.average_rating,
      reviewCount: data.review_count,
      createdAt: data.created_at,
      updatedAt: data.updated_at
    };
  },
  /**
   * Get all shows belonging to a specific series
   * @param seriesId Show series ID
   * @returns Array of shows in the series
   */
  async getShowsInSeries(seriesId) {
    /* istanbul ignore next */
    cov_18rsmp1nsf().f[3]++;
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_18rsmp1nsf().s[29]++, await supabase_1.supabase.from('shows').select('*').eq('series_id', seriesId).order('start_date', {
      ascending: true
    }));
    /* istanbul ignore next */
    cov_18rsmp1nsf().s[30]++;
    if (error) {
      /* istanbul ignore next */
      cov_18rsmp1nsf().b[10][0]++;
      cov_18rsmp1nsf().s[31]++;
      console.error('Error fetching shows in series:', error);
      /* istanbul ignore next */
      cov_18rsmp1nsf().s[32]++;
      throw new Error(`Failed to fetch shows in series: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_18rsmp1nsf().b[10][1]++;
    }
    // Guard – ensure we have an array before proceeding
    cov_18rsmp1nsf().s[33]++;
    if (
    /* istanbul ignore next */
    (cov_18rsmp1nsf().b[12][0]++, !data) ||
    /* istanbul ignore next */
    (cov_18rsmp1nsf().b[12][1]++, !Array.isArray(data))) {
      /* istanbul ignore next */
      cov_18rsmp1nsf().b[11][0]++;
      cov_18rsmp1nsf().s[34]++;
      console.warn('[showSeriesService.getShowsInSeries] Expected array; returning empty array instead.');
      /* istanbul ignore next */
      cov_18rsmp1nsf().s[35]++;
      return [];
    } else
    /* istanbul ignore next */
    {
      cov_18rsmp1nsf().b[11][1]++;
    }
    // Map the data to match the Show interface
    cov_18rsmp1nsf().s[36]++;
    return data.map(show => {
      /* istanbul ignore next */
      cov_18rsmp1nsf().f[4]++;
      cov_18rsmp1nsf().s[37]++;
      return {
        id: show.id,
        seriesId: show.series_id,
        title: show.title,
        description: show.description,
        location: show.location,
        address: show.address,
        startDate: show.start_date,
        endDate: show.end_date,
        entryFee: show.entry_fee,
        imageUrl: show.image_url,
        rating: show.rating,
        coordinates: this.extractSafeCoordinates(show.coordinates),
        status: show.status,
        organizerId: show.organizer_id,
        features: show.features,
        categories: show.categories,
        createdAt: show.created_at,
        updatedAt: show.updated_at
      };
    });
  },
  /**
   * Get standalone, unclaimed shows (no organizer and not part of a series)
   * @param options Optional limit and sort direction
   * @returns Array of unclaimed Show objects
   */
  async getUnclaimedShows(options) {
    /* istanbul ignore next */
    cov_18rsmp1nsf().f[5]++;
    let query =
    /* istanbul ignore next */
    (cov_18rsmp1nsf().s[38]++, supabase_1.supabase.from('shows').select('*').is('organizer_id', null).is('series_id', null));
    // Order by start_date (default ascending)
    /* istanbul ignore next */
    cov_18rsmp1nsf().s[39]++;
    query = query.order('start_date', {
      ascending: options?.orderDirection !== 'desc'
    });
    // Apply limit if provided
    /* istanbul ignore next */
    cov_18rsmp1nsf().s[40]++;
    if (options?.limit) {
      /* istanbul ignore next */
      cov_18rsmp1nsf().b[13][0]++;
      cov_18rsmp1nsf().s[41]++;
      query = query.limit(options.limit);
    } else
    /* istanbul ignore next */
    {
      cov_18rsmp1nsf().b[13][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_18rsmp1nsf().s[42]++, await query);
    // Debug log the raw response
    /* istanbul ignore next */
    cov_18rsmp1nsf().s[43]++;
    console.log('[showSeriesService.getUnclaimedShows] Raw Supabase response:', {
      dataType: Array.isArray(data) ?
      /* istanbul ignore next */
      (cov_18rsmp1nsf().b[14][0]++, 'array') :
      /* istanbul ignore next */
      (cov_18rsmp1nsf().b[14][1]++, typeof data),
      length: Array.isArray(data) ?
      /* istanbul ignore next */
      (cov_18rsmp1nsf().b[15][0]++, data.length) :
      /* istanbul ignore next */
      (cov_18rsmp1nsf().b[15][1]++, 'n/a'),
      error
    });
    /* istanbul ignore next */
    cov_18rsmp1nsf().s[44]++;
    if (error) {
      /* istanbul ignore next */
      cov_18rsmp1nsf().b[16][0]++;
      cov_18rsmp1nsf().s[45]++;
      console.error('Error fetching unclaimed shows:', error);
      /* istanbul ignore next */
      cov_18rsmp1nsf().s[46]++;
      throw new Error(`Failed to fetch unclaimed shows: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_18rsmp1nsf().b[16][1]++;
    }
    // Guard – ensure we have an array; otherwise return empty list
    cov_18rsmp1nsf().s[47]++;
    if (
    /* istanbul ignore next */
    (cov_18rsmp1nsf().b[18][0]++, !data) ||
    /* istanbul ignore next */
    (cov_18rsmp1nsf().b[18][1]++, !Array.isArray(data))) {
      /* istanbul ignore next */
      cov_18rsmp1nsf().b[17][0]++;
      cov_18rsmp1nsf().s[48]++;
      console.warn('[showSeriesService.getUnclaimedShows] Expected array; returning empty array instead.');
      /* istanbul ignore next */
      cov_18rsmp1nsf().s[49]++;
      return [];
    } else
    /* istanbul ignore next */
    {
      cov_18rsmp1nsf().b[17][1]++;
    }
    // Map rows to Show interface
    cov_18rsmp1nsf().s[50]++;
    return data.map(show => {
      /* istanbul ignore next */
      cov_18rsmp1nsf().f[6]++;
      cov_18rsmp1nsf().s[51]++;
      return {
        id: show.id,
        seriesId: show.series_id,
        title: show.title,
        description: show.description,
        location: show.location,
        address: show.address,
        startDate: show.start_date,
        endDate: show.end_date,
        entryFee: show.entry_fee,
        imageUrl: show.image_url,
        rating: show.rating,
        coordinates: this.extractSafeCoordinates(show.coordinates),
        status: show.status,
        organizerId: show.organizer_id,
        features: show.features,
        categories: show.categories,
        createdAt: show.created_at,
        updatedAt: show.updated_at
      };
    });
  },
  /**
   * Safely extract coordinates from PostGIS data format
   * @param coordinatesData Raw coordinates data from database
   * @returns Formatted coordinates or undefined if invalid
   */
  extractSafeCoordinates(coordinatesData) {
    /* istanbul ignore next */
    cov_18rsmp1nsf().f[7]++;
    cov_18rsmp1nsf().s[52]++;
    // Check if coordinates exist at all
    if (!coordinatesData) {
      /* istanbul ignore next */
      cov_18rsmp1nsf().b[19][0]++;
      cov_18rsmp1nsf().s[53]++;
      return undefined;
    } else
    /* istanbul ignore next */
    {
      cov_18rsmp1nsf().b[19][1]++;
    }
    cov_18rsmp1nsf().s[54]++;
    try {
      /* istanbul ignore next */
      cov_18rsmp1nsf().s[55]++;
      // Check if coordinates has the expected structure
      if (
      /* istanbul ignore next */
      (cov_18rsmp1nsf().b[21][0]++, !coordinatesData.coordinates) ||
      /* istanbul ignore next */
      (cov_18rsmp1nsf().b[21][1]++, !Array.isArray(coordinatesData.coordinates)) ||
      /* istanbul ignore next */
      (cov_18rsmp1nsf().b[21][2]++, coordinatesData.coordinates.length < 2)) {
        /* istanbul ignore next */
        cov_18rsmp1nsf().b[20][0]++;
        cov_18rsmp1nsf().s[56]++;
        console.warn('[showSeriesService] Invalid coordinates structure:', coordinatesData);
        /* istanbul ignore next */
        cov_18rsmp1nsf().s[57]++;
        return undefined;
      } else
      /* istanbul ignore next */
      {
        cov_18rsmp1nsf().b[20][1]++;
      }
      // Verify the coordinates are valid numbers
      const longitude =
      /* istanbul ignore next */
      (cov_18rsmp1nsf().s[58]++, Number(coordinatesData.coordinates[0]));
      const latitude =
      /* istanbul ignore next */
      (cov_18rsmp1nsf().s[59]++, Number(coordinatesData.coordinates[1]));
      /* istanbul ignore next */
      cov_18rsmp1nsf().s[60]++;
      if (
      /* istanbul ignore next */
      (cov_18rsmp1nsf().b[23][0]++, isNaN(latitude)) ||
      /* istanbul ignore next */
      (cov_18rsmp1nsf().b[23][1]++, isNaN(longitude))) {
        /* istanbul ignore next */
        cov_18rsmp1nsf().b[22][0]++;
        cov_18rsmp1nsf().s[61]++;
        console.warn('[showSeriesService] Invalid coordinate values:', coordinatesData.coordinates);
        /* istanbul ignore next */
        cov_18rsmp1nsf().s[62]++;
        return undefined;
      } else
      /* istanbul ignore next */
      {
        cov_18rsmp1nsf().b[22][1]++;
      }
      cov_18rsmp1nsf().s[63]++;
      return {
        latitude,
        longitude
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_18rsmp1nsf().s[64]++;
      console.error('[showSeriesService] Error extracting coordinates:', error);
      /* istanbul ignore next */
      cov_18rsmp1nsf().s[65]++;
      return undefined;
    }
  },
  /**
   * Get reviews for a specific show series
   * @param seriesId Show series ID
   * @returns Array of reviews
   */
  async getSeriesReviews(seriesId) {
    /* istanbul ignore next */
    cov_18rsmp1nsf().f[8]++;
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_18rsmp1nsf().s[66]++, await supabase_1.supabase.from('reviews').select(`
        *,
        profiles:user_id (
          first_name,
          last_name
        )
      `).eq('series_id', seriesId).order('created_at', {
      ascending: false
    }));
    /* istanbul ignore next */
    cov_18rsmp1nsf().s[67]++;
    if (error) {
      /* istanbul ignore next */
      cov_18rsmp1nsf().b[24][0]++;
      cov_18rsmp1nsf().s[68]++;
      console.error('Error fetching series reviews:', error);
      /* istanbul ignore next */
      cov_18rsmp1nsf().s[69]++;
      throw new Error(`Failed to fetch series reviews: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_18rsmp1nsf().b[24][1]++;
    }
    // Guard – ensure we have an array before proceeding
    cov_18rsmp1nsf().s[70]++;
    if (
    /* istanbul ignore next */
    (cov_18rsmp1nsf().b[26][0]++, !data) ||
    /* istanbul ignore next */
    (cov_18rsmp1nsf().b[26][1]++, !Array.isArray(data))) {
      /* istanbul ignore next */
      cov_18rsmp1nsf().b[25][0]++;
      cov_18rsmp1nsf().s[71]++;
      console.warn('[showSeriesService.getSeriesReviews] Expected array; returning empty array instead.');
      /* istanbul ignore next */
      cov_18rsmp1nsf().s[72]++;
      return [];
    } else
    /* istanbul ignore next */
    {
      cov_18rsmp1nsf().b[25][1]++;
    }
    cov_18rsmp1nsf().s[73]++;
    return data.map(review => {
      /* istanbul ignore next */
      cov_18rsmp1nsf().f[9]++;
      cov_18rsmp1nsf().s[74]++;
      return {
        id: review.id,
        seriesId: review.series_id,
        userId: review.user_id,
        userName: `${review.profiles.first_name} ${
        /* istanbul ignore next */
        (cov_18rsmp1nsf().b[27][0]++, review.profiles.last_name?.charAt(0)) ||
        /* istanbul ignore next */
        (cov_18rsmp1nsf().b[27][1]++, '')}`.trim(),
        rating: review.rating,
        comment:
        /* istanbul ignore next */
        (cov_18rsmp1nsf().b[28][0]++, review.comment) ||
        /* istanbul ignore next */
        (cov_18rsmp1nsf().b[28][1]++, ''),
        date: review.created_at,
        organizerResponse: review.organizer_reply ?
        /* istanbul ignore next */
        (cov_18rsmp1nsf().b[29][0]++, {
          comment: review.organizer_reply,
          date: review.updated_at
        }) :
        /* istanbul ignore next */
        (cov_18rsmp1nsf().b[29][1]++, undefined)
      };
    });
  },
  /**
   * Claim a show series as an organizer
   * @param seriesId Show series ID to claim
   * @returns Updated show series object
   */
  async claimShowSeries(seriesId) {
    /* istanbul ignore next */
    cov_18rsmp1nsf().f[10]++;
    cov_18rsmp1nsf().s[75]++;
    try {
      // Get current access token using new getSession() API
      const {
        data: {
          session
        }
      } =
      /* istanbul ignore next */
      (cov_18rsmp1nsf().s[76]++, await supabase_1.supabase.auth.getSession());
      const accessToken =
      /* istanbul ignore next */
      (cov_18rsmp1nsf().s[77]++, session?.access_token);
      const response =
      /* istanbul ignore next */
      (cov_18rsmp1nsf().s[78]++, await fetch(`${process.env.EXPO_PUBLIC_SUPABASE_URL}/functions/v1/claim_show_series`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${accessToken}`
        },
        body: JSON.stringify({
          seriesId
        })
      }));
      const result =
      /* istanbul ignore next */
      (cov_18rsmp1nsf().s[79]++, await response.json());
      /* istanbul ignore next */
      cov_18rsmp1nsf().s[80]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_18rsmp1nsf().b[30][0]++;
        cov_18rsmp1nsf().s[81]++;
        return {
          success: false,
          message:
          /* istanbul ignore next */
          (cov_18rsmp1nsf().b[31][0]++, result.error) ||
          /* istanbul ignore next */
          (cov_18rsmp1nsf().b[31][1]++, 'Failed to claim show series')
        };
      } else
      /* istanbul ignore next */
      {
        cov_18rsmp1nsf().b[30][1]++;
      }
      cov_18rsmp1nsf().s[82]++;
      return {
        success: true,
        message:
        /* istanbul ignore next */
        (cov_18rsmp1nsf().b[32][0]++, result.message) ||
        /* istanbul ignore next */
        (cov_18rsmp1nsf().b[32][1]++, 'Show series claimed successfully'),
        series: result.series ?
        /* istanbul ignore next */
        (cov_18rsmp1nsf().b[33][0]++, {
          id: result.series.id,
          name: result.series.name,
          organizerId: result.series.organizer_id,
          description: result.series.description,
          createdAt: result.series.created_at
        }) :
        /* istanbul ignore next */
        (cov_18rsmp1nsf().b[33][1]++, undefined)
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_18rsmp1nsf().s[83]++;
      console.error('Error claiming show series:', error);
      /* istanbul ignore next */
      cov_18rsmp1nsf().s[84]++;
      return {
        success: false,
        message: error instanceof Error ?
        /* istanbul ignore next */
        (cov_18rsmp1nsf().b[34][0]++, error.message) :
        /* istanbul ignore next */
        (cov_18rsmp1nsf().b[34][1]++, 'Unknown error occurred')
      };
    }
  },
  /**
   * Send a broadcast message to show attendees/favorites
   * @param params Broadcast message parameters
   * @returns Result of the broadcast operation
   */
  async sendBroadcastMessage(params) {
    /* istanbul ignore next */
    cov_18rsmp1nsf().f[11]++;
    cov_18rsmp1nsf().s[85]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_18rsmp1nsf().s[86]++, await fetch(`${process.env.EXPO_PUBLIC_SUPABASE_URL}/functions/v1/send_broadcast_message`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          // Fetch access token using new getSession() API
          'Authorization': `Bearer ${(await supabase_1.supabase.auth.getSession()).data.session?.access_token}`
        },
        body: JSON.stringify(params)
      }));
      const result =
      /* istanbul ignore next */
      (cov_18rsmp1nsf().s[87]++, await response.json());
      /* istanbul ignore next */
      cov_18rsmp1nsf().s[88]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_18rsmp1nsf().b[35][0]++;
        cov_18rsmp1nsf().s[89]++;
        return {
          success: false,
          message:
          /* istanbul ignore next */
          (cov_18rsmp1nsf().b[36][0]++, result.error) ||
          /* istanbul ignore next */
          (cov_18rsmp1nsf().b[36][1]++, 'Failed to send broadcast message')
        };
      } else
      /* istanbul ignore next */
      {
        cov_18rsmp1nsf().b[35][1]++;
      }
      cov_18rsmp1nsf().s[90]++;
      return {
        success: true,
        message:
        /* istanbul ignore next */
        (cov_18rsmp1nsf().b[37][0]++, result.message) ||
        /* istanbul ignore next */
        (cov_18rsmp1nsf().b[37][1]++, 'Broadcast message sent successfully'),
        recipientCount: result.recipientCount,
        quotaRemaining: result.quotaRemaining
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_18rsmp1nsf().s[91]++;
      console.error('Error sending broadcast message:', error);
      /* istanbul ignore next */
      cov_18rsmp1nsf().s[92]++;
      return {
        success: false,
        message: error instanceof Error ?
        /* istanbul ignore next */
        (cov_18rsmp1nsf().b[38][0]++, error.message) :
        /* istanbul ignore next */
        (cov_18rsmp1nsf().b[38][1]++, 'Unknown error occurred')
      };
    }
  },
  /**
   * Add a review for a show series
   * @param review Review data to add
   * @returns The created review
   */
  async addSeriesReview(review) {
    /* istanbul ignore next */
    cov_18rsmp1nsf().f[12]++;
    const {
      data: userData
    } =
    /* istanbul ignore next */
    (cov_18rsmp1nsf().s[93]++, await supabase_1.supabase.auth.getUser());
    /* istanbul ignore next */
    cov_18rsmp1nsf().s[94]++;
    if (!userData.user) {
      /* istanbul ignore next */
      cov_18rsmp1nsf().b[39][0]++;
      cov_18rsmp1nsf().s[95]++;
      throw new Error('User must be authenticated to submit a review');
    } else
    /* istanbul ignore next */
    {
      cov_18rsmp1nsf().b[39][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_18rsmp1nsf().s[96]++, await supabase_1.supabase.from('reviews').insert({
      series_id: review.seriesId,
      user_id: userData.user.id,
      rating: review.rating,
      comment: review.comment,
      created_at: new Date().toISOString()
    }).select(`
        *,
        profiles:user_id (
          first_name,
          last_name
        )
      `).single());
    /* istanbul ignore next */
    cov_18rsmp1nsf().s[97]++;
    if (error) {
      /* istanbul ignore next */
      cov_18rsmp1nsf().b[40][0]++;
      cov_18rsmp1nsf().s[98]++;
      console.error('Error adding series review:', error);
      /* istanbul ignore next */
      cov_18rsmp1nsf().s[99]++;
      throw new Error(`Failed to add review: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_18rsmp1nsf().b[40][1]++;
    }
    cov_18rsmp1nsf().s[100]++;
    return {
      id: data.id,
      seriesId: data.series_id,
      userId: data.user_id,
      userName: `${data.profiles.first_name} ${
      /* istanbul ignore next */
      (cov_18rsmp1nsf().b[41][0]++, data.profiles.last_name?.charAt(0)) ||
      /* istanbul ignore next */
      (cov_18rsmp1nsf().b[41][1]++, '')}`.trim(),
      rating: data.rating,
      comment:
      /* istanbul ignore next */
      (cov_18rsmp1nsf().b[42][0]++, data.comment) ||
      /* istanbul ignore next */
      (cov_18rsmp1nsf().b[42][1]++, ''),
      date: data.created_at
    };
  },
  /**
   * Respond to a review as a show organizer
   * @param reviewId Review ID to respond to
   * @param response Organizer's response text
   * @returns Success status
   */
  async respondToReview(reviewId, response) {
    /* istanbul ignore next */
    cov_18rsmp1nsf().f[13]++;
    const {
      error
    } =
    /* istanbul ignore next */
    (cov_18rsmp1nsf().s[101]++, await supabase_1.supabase.from('reviews').update({
      organizer_reply: response,
      updated_at: new Date().toISOString()
    }).eq('id', reviewId));
    /* istanbul ignore next */
    cov_18rsmp1nsf().s[102]++;
    if (error) {
      /* istanbul ignore next */
      cov_18rsmp1nsf().b[43][0]++;
      cov_18rsmp1nsf().s[103]++;
      console.error('Error responding to review:', error);
      /* istanbul ignore next */
      cov_18rsmp1nsf().s[104]++;
      throw new Error(`Failed to respond to review: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_18rsmp1nsf().b[43][1]++;
    }
    cov_18rsmp1nsf().s[105]++;
    return true;
  },
  /* ------------------------------------------------------------------
   * DEBUG HELPERS
   * ----------------------------------------------------------------*/
  /**
   * Debug helper – print out the column names that PostgREST/Supabase
   * currently believes exist on the `shows` table.  This is useful for
   * diagnosing “column not found in schema cache” errors without leaving
   * the code-base.  Note: we simply fetch a single row (if it exists) and
   * introspect the keys; if the table is empty we still log the shape of
   * the response object so you can verify what PostgREST is returning.
   *
   * Usage (example):
   *   await showSeriesService.debugShowsTableColumns();
   */
  async debugShowsTableColumns() {
    /* istanbul ignore next */
    cov_18rsmp1nsf().f[14]++;
    cov_18rsmp1nsf().s[106]++;
    try {
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_18rsmp1nsf().s[107]++, await supabase_1.supabase.from('shows')
      // fetch at most 1 row – we only need keys, not data volume
      .select('*').limit(1));
      /* istanbul ignore next */
      cov_18rsmp1nsf().s[108]++;
      if (error) {
        /* istanbul ignore next */
        cov_18rsmp1nsf().b[44][0]++;
        cov_18rsmp1nsf().s[109]++;
        console.error('[debugShowsTableColumns] Supabase error:', error);
        /* istanbul ignore next */
        cov_18rsmp1nsf().s[110]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_18rsmp1nsf().b[44][1]++;
      }
      cov_18rsmp1nsf().s[111]++;
      if (
      /* istanbul ignore next */
      (cov_18rsmp1nsf().b[46][0]++, !data) ||
      /* istanbul ignore next */
      (cov_18rsmp1nsf().b[46][1]++, data.length === 0)) {
        /* istanbul ignore next */
        cov_18rsmp1nsf().b[45][0]++;
        cov_18rsmp1nsf().s[112]++;
        // Even if there are no rows, Supabase will still return column meta
        console.warn('[debugShowsTableColumns] Table returned zero rows.  ' + 'Column keys may be incomplete if the cache is stale.');
        /* istanbul ignore next */
        cov_18rsmp1nsf().s[113]++;
        console.log('[debugShowsTableColumns] Raw response keys:', Object.keys(
        /* istanbul ignore next */
        (cov_18rsmp1nsf().b[47][0]++, data) ??
        /* istanbul ignore next */
        (cov_18rsmp1nsf().b[47][1]++, {})));
      } else {
        /* istanbul ignore next */
        cov_18rsmp1nsf().b[45][1]++;
        cov_18rsmp1nsf().s[114]++;
        console.log('[debugShowsTableColumns] Column keys detected:', Object.keys(data[0]));
      }
    } catch (err) {
      /* istanbul ignore next */
      cov_18rsmp1nsf().s[115]++;
      console.error('[debugShowsTableColumns] Unexpected error:', err);
    }
  },
  /* ------------------------------------------------------------------
   * NEW METHODS
   * ----------------------------------------------------------------*/
  /**
   * Internal helper – map a raw Supabase row into a typed Show object
   */
  mapShowRow(row) {
    /* istanbul ignore next */
    cov_18rsmp1nsf().f[15]++;
    cov_18rsmp1nsf().s[116]++;
    return {
      id: row.id,
      seriesId: row.series_id,
      title: row.title,
      description: row.description,
      location: row.location,
      address: row.address,
      startDate: row.start_date,
      endDate: row.end_date,
      entryFee: row.entry_fee,
      imageUrl: row.image_url,
      rating: row.rating,
      coordinates: this.extractSafeCoordinates(row.coordinates),
      status: row.status,
      organizerId: row.organizer_id,
      features: row.features,
      categories: row.categories,
      createdAt: row.created_at,
      updatedAt: row.updated_at
    };
  },
  /**
   * Create a brand-new standalone show (not attached to any series)
   * @param showData Partial show data (requires organizerId at minimum)
   */
  async createStandaloneShow(showData) {
    /* istanbul ignore next */
    cov_18rsmp1nsf().f[16]++;
    cov_18rsmp1nsf().s[117]++;
    try {
      const payload =
      /* istanbul ignore next */
      (cov_18rsmp1nsf().s[118]++, {
        ...showData,
        series_id: null,
        // Supabase expects camelCase -> snake_case conversion
        start_date: showData.startDate,
        end_date: showData.endDate,
        entry_fee: showData.entryFee
      });
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_18rsmp1nsf().s[119]++, await supabase_1.supabase.from('shows').insert(payload).select('*').single());
      /* istanbul ignore next */
      cov_18rsmp1nsf().s[120]++;
      if (error) {
        /* istanbul ignore next */
        cov_18rsmp1nsf().b[48][0]++;
        cov_18rsmp1nsf().s[121]++;
        console.error('Error creating standalone show:', error);
        /* istanbul ignore next */
        cov_18rsmp1nsf().s[122]++;
        return {
          success: false,
          error: error.message
        };
      } else
      /* istanbul ignore next */
      {
        cov_18rsmp1nsf().b[48][1]++;
      }
      cov_18rsmp1nsf().s[123]++;
      return {
        success: true,
        show: this.mapShowRow(data)
      };
    } catch (err) {
      /* istanbul ignore next */
      cov_18rsmp1nsf().s[124]++;
      console.error('Unexpected error creating standalone show:', err);
      /* istanbul ignore next */
      cov_18rsmp1nsf().s[125]++;
      return {
        success: false,
        error: err instanceof Error ?
        /* istanbul ignore next */
        (cov_18rsmp1nsf().b[49][0]++, err.message) :
        /* istanbul ignore next */
        (cov_18rsmp1nsf().b[49][1]++, 'Unknown error')
      };
    }
  },
  /**
   * Add a new show to an existing series
   * @param seriesId The series to attach the new show to
   * @param showData Basic show fields (organizerId optional – inherits from series if omitted)
   */
  async addShowToSeries(seriesId, showData) {
    /* istanbul ignore next */
    cov_18rsmp1nsf().f[17]++;
    cov_18rsmp1nsf().s[126]++;
    try {
      const payload =
      /* istanbul ignore next */
      (cov_18rsmp1nsf().s[127]++, {
        ...showData,
        series_id: seriesId,
        start_date: showData.startDate,
        end_date: showData.endDate,
        entry_fee: showData.entryFee
      });
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_18rsmp1nsf().s[128]++, await supabase_1.supabase.from('shows').insert(payload).select('*').single());
      /* istanbul ignore next */
      cov_18rsmp1nsf().s[129]++;
      if (error) {
        /* istanbul ignore next */
        cov_18rsmp1nsf().b[50][0]++;
        cov_18rsmp1nsf().s[130]++;
        console.error('Error adding show to series:', error);
        /* istanbul ignore next */
        cov_18rsmp1nsf().s[131]++;
        return {
          success: false,
          error: error.message
        };
      } else
      /* istanbul ignore next */
      {
        cov_18rsmp1nsf().b[50][1]++;
      }
      cov_18rsmp1nsf().s[132]++;
      return {
        success: true,
        show: this.mapShowRow(data)
      };
    } catch (err) {
      /* istanbul ignore next */
      cov_18rsmp1nsf().s[133]++;
      console.error('Unexpected error adding show to series:', err);
      /* istanbul ignore next */
      cov_18rsmp1nsf().s[134]++;
      return {
        success: false,
        error: err instanceof Error ?
        /* istanbul ignore next */
        (cov_18rsmp1nsf().b[51][0]++, err.message) :
        /* istanbul ignore next */
        (cov_18rsmp1nsf().b[51][1]++, 'Unknown error')
      };
    }
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,