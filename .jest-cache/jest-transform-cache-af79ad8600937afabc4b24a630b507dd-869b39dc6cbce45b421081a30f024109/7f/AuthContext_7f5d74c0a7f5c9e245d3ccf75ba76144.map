{"version":3,"names":["React","createContext","useState","useEffect","useContext","supabase","UserRole","AsyncStorage","supabaseAuthService","refreshUserSession","jsx","_jsx","BYPASS_PROFILE_FETCH","cov_1jiijzbd8t","s","defaultAuthState","user","isLoading","error","isAuthenticated","AuthContext","authState","Object","assign","favoriteCount","login","_login","_asyncToGenerator","f","Error","apply","arguments","register","_register","logout","_logout","resetPassword","_resetPassword","updateProfile","_updateProfile","addFavoriteShow","_addFavoriteShow","removeFavoriteShow","_removeFavoriteShow","clearError","refreshUserRole","_refreshUserRole","AuthProvider","_ref","_ref34","_ref35","_ref36","children","_ref2","_ref3","_slicedToArray","setAuthState","_ref4","_ref5","setFavoriteCount","fetchFavoriteCount","_ref6","userId","b","_ref7","from","select","eq","single","data","console","count","favorite_shows_count","log","_x","initializeAuth","_ref8","_ref9","auth","getSession","session","_ref1","_ref0","id","profileData","profileError","userData","email","firstName","first_name","lastName","last_name","undefined","homeZipCode","home_zip_code","role","createdAt","created_at","updatedAt","updated_at","isEmailVerified","email_confirmed_at","accountType","account_type","subscriptionStatus","subscription_status","paymentStatus","payment_status","subscriptionExpiry","subscription_expiry","favoriteShows","favorite_shows","attendedShows","attended_shows","phoneNumber","phone_number","profileImageUrl","profile_image_url","favoriteShowsCount","message","_ref10","onAuthStateChange","_ref11","event","_ref13","_ref12","prev","_x2","_x3","subscription","unsubscribe","_ref14","credentials","result","signIn","newState","hasError","Promise","reject","_ref15","warn","nowIso","Date","toISOString","mockUser","MVP_DEALER","now","getCurrentUser","forceRefreshAndFetchProfile","msg","_x4","_ref16","password","registerUser","_x5","_x6","_x7","_x8","_x9","_x0","_ref17","signOut","_ref18","_x1","_ref19","userDataWithId","updatedUser","updateUserProfile","_x10","_ref20","showId","addShowToFavorites","_x11","_ref21","removeShowFromFavorites","_x12","_ref22","_ref25","_ref26","_ref27","_ref28","_ref29","_ref30","_ref31","_ref32","keys","getAllKeys","supabaseKeys","filter","k","includes","length","multiRemove","clearErr","_ref23","success","refreshErr","_ref24","profile","mapped","ATTENDEE","is_email_verified","err","_x13","_ref33","fresh","e","contextValue","Provider","value","useAuth","context"],"sources":["AuthContext.tsx"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport { supabase } from '../supabase';\nimport { User, UserRole, AuthState, AuthCredentials } from '../types';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport * as supabaseAuthService from '../services/supabaseAuthService';\nimport { signIn } from '../services/supabaseAuthService';\nimport { refreshUserSession } from '../services/sessionService';\n\n/* ------------------------------------------------------------------\n * Build-time / runtime dev flag to bypass profile fetch\n * ------------------------------------------------------------------\n * • Enabled automatically in Expo dev (`__DEV__`)\n * • Or via env  EXPO_PUBLIC_BYPASS_PROFILE_FETCH=true\n *   Lets developers log in with Auth only, even if the\n *   `profiles` row hasn't been created yet.\n * ------------------------------------------------------------------ */\n/**\n * BYPASS_PROFILE_FETCH disabled.\n * ---------------------------------------------------------------\n * This flag was intended for development convenience.  Leaving it\n * enabled in production caused ALL users to be treated as\n * MVP_DEALER, granting unintended access.  We now hard-disable it\n * to ensure each user’s role is always read from the database.\n */\nconst BYPASS_PROFILE_FETCH = false;\n\n// Define the shape of our auth context\ninterface AuthContextType {\n  authState: AuthState & { favoriteCount: number };\n  /**\n   * Convenience getters exposed alongside the full `authState`,\n   * so that consuming components can access them directly without\n   * drilling into `authState`.\n   */\n  error: string | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  login: (credentials: AuthCredentials) => Promise<User>;\n  register: (\n    email: string,\n    password: string,\n    firstName: string,\n    lastName: string,\n    homeZipCode: string,\n    role: UserRole\n  ) => Promise<User>;\n  logout: () => Promise<void>;\n  resetPassword: (email: string) => Promise<void>;\n  updateProfile: (userData: Partial<User>) => Promise<void>;\n  addFavoriteShow: (showId: string) => Promise<void>;\n  removeFavoriteShow: (showId: string) => Promise<void>;\n  clearError: () => void;\n  refreshUserRole: () => Promise<boolean>;\n}\n\n// Default auth state\nconst defaultAuthState: AuthState = {\n  user: null,\n  isLoading: true,\n  error: null,\n  isAuthenticated: false,\n};\n\n// Create the context with default values\nconst AuthContext = createContext<AuthContextType>({\n  authState: { ...defaultAuthState, favoriteCount: 0 },\n  error: defaultAuthState.error,\n  isLoading: defaultAuthState.isLoading,\n  isAuthenticated: defaultAuthState.isAuthenticated,\n  login: async () => { throw new Error('AuthContext not initialized'); },\n  register: async () => { throw new Error('AuthContext not initialized'); },\n  logout: async () => { throw new Error('AuthContext not initialized'); },\n  resetPassword: async () => { throw new Error('AuthContext not initialized'); },\n  updateProfile: async () => { throw new Error('AuthContext not initialized'); },\n  addFavoriteShow: async () => { throw new Error('AuthContext not initialized'); },\n  removeFavoriteShow: async () => { throw new Error('AuthContext not initialized'); },\n  clearError: () => {},\n  refreshUserRole: async () => false,\n});\n\n// Provider component\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [authState, setAuthState] = useState<AuthState>(defaultAuthState);\n  const [favoriteCount, setFavoriteCount] = useState(0);\n\n  // Function to fetch the count of user's favorite shows\n  const fetchFavoriteCount = async (userId: string) => {\n    if (!userId) {\n      setFavoriteCount(0);\n      return;\n    }\n\n    try {\n      // Get the favorite_shows_count directly from the profiles table\n      const { data, error } = await supabase\n        .from('profiles')\n        .select('favorite_shows_count')\n        .eq('id', userId)\n        .single();\n\n      if (error) {\n        console.error('[AuthContext] Error fetching favorite_shows_count:', error);\n        return;\n      }\n\n      // Set the count from the profile data\n      const count = data?.favorite_shows_count || 0;\n      console.log('[AuthContext] Fetched favorite_shows_count:', count);\n      setFavoriteCount(count);\n    } catch (error) {\n      console.error('[AuthContext] Unexpected error in fetchFavoriteCount:', error);\n      // Keep the current count on error\n    }\n  };\n\n  // Initialize auth state on app start\n  useEffect(() => {\n    const initializeAuth = async () => {\n      try {\n        // Check if we have a stored session\n        const { data: { session }, error } = await supabase.auth.getSession();\n        \n        if (error) {\n          throw error;\n        }\n        \n        if (session) {\n          // Get user profile from the database\n          const { data: profileData, error: profileError } = await supabase\n            .from('profiles')\n            .select('*')\n            .eq('id', session.user.id)\n            .single();\n          \n          if (profileError) {\n            throw profileError;\n          }\n          \n          // Convert from Supabase format to our app's User format\n          const userData: User = {\n            id: session.user.id,\n            email: session.user.email || '',\n            firstName: profileData.first_name,\n            lastName: profileData.last_name || undefined,\n            homeZipCode: profileData.home_zip_code,\n            role: profileData.role as UserRole,\n            createdAt: profileData.created_at,\n            updatedAt: profileData.updated_at,\n            isEmailVerified: session.user.email_confirmed_at !== null,\n            accountType: profileData.account_type,\n            subscriptionStatus: profileData.subscription_status,\n            paymentStatus: profileData.payment_status ?? 'none',\n            subscriptionExpiry: profileData.subscription_expiry,\n            favoriteShows: profileData.favorite_shows || [],\n            attendedShows: profileData.attended_shows || [],\n            phoneNumber: profileData.phone_number,\n            profileImageUrl: profileData.profile_image_url,\n            favoriteShowsCount: profileData.favorite_shows_count || 0,\n          };\n          \n          setAuthState({\n            user: userData,\n            isLoading: false,\n            error: null,\n            isAuthenticated: true,\n          });\n\n          // Set favorite count from profile data\n          setFavoriteCount(profileData.favorite_shows_count || 0);\n        } else {\n          // No session found\n          setAuthState({\n            user: null,\n            isLoading: false,\n            error: null,\n            isAuthenticated: false,\n          });\n        }\n      } catch (error: any) {\n        console.error('Error initializing auth:', error);\n        setAuthState({\n          user: null,\n          isLoading: false,\n          error: error.message || 'Failed to initialize authentication',\n          isAuthenticated: false,\n        });\n      }\n    };\n    \n    // Set up auth state change listener\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\n      async (event, session) => {\n        if (event === 'SIGNED_IN' && session) {\n          try {\n            // Get user profile from the database\n            const { data: profileData, error: profileError } = await supabase\n              .from('profiles')\n              .select('*')\n              .eq('id', session.user.id)\n              .single();\n            \n            if (profileError) {\n              throw profileError;\n            }\n            \n            // Convert from Supabase format to our app's User format\n            const userData: User = {\n              id: session.user.id,\n              email: session.user.email || '',\n              firstName: profileData.first_name,\n              lastName: profileData.last_name || undefined,\n              homeZipCode: profileData.home_zip_code,\n              role: profileData.role as UserRole,\n              createdAt: profileData.created_at,\n              updatedAt: profileData.updated_at,\n              isEmailVerified: session.user.email_confirmed_at !== null,\n              accountType: profileData.account_type,\n              subscriptionStatus: profileData.subscription_status,\n            paymentStatus: profileData.payment_status ?? 'none',\n              subscriptionExpiry: profileData.subscription_expiry,\n              favoriteShows: profileData.favorite_shows || [],\n              attendedShows: profileData.attended_shows || [],\n              phoneNumber: profileData.phone_number,\n              profileImageUrl: profileData.profile_image_url,\n              favoriteShowsCount: profileData.favorite_shows_count || 0,\n            };\n            \n            setAuthState({\n              user: userData,\n              isLoading: false,\n              error: null,\n              isAuthenticated: true,\n            });\n\n            // Set favorite count from profile data\n            setFavoriteCount(profileData.favorite_shows_count || 0);\n          } catch (error: any) {\n            console.error('Error handling auth state change:', error);\n            setAuthState(prev => ({\n              ...prev,\n              isLoading: false,\n              error: error.message || 'Failed to get user data on auth change',\n            }));\n          }\n        } else if (event === 'SIGNED_OUT') {\n          setAuthState({\n            user: null,\n            isLoading: false,\n            error: null,\n            isAuthenticated: false,\n          });\n          setFavoriteCount(0);\n        }\n      }\n    );\n    \n    // Initialize auth\n    initializeAuth();\n    \n    // Cleanup subscription on unmount\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n  \n  // Login method\n  const login = async (credentials: AuthCredentials): Promise<User> => {\n    // 1. Immediately set the app to a \"loading\" state and clear old errors.\n    console.log('[AuthContext] Login attempt started for email:', credentials.email);\n    setAuthState(prev => ({ ...prev, isLoading: true, error: null }));\n\n    // 2. Call the Supabase service to attempt the login.\n    const result = await supabaseAuthService.signIn(credentials);\n\n    // 3. Handle the response directly.\n    if (result.error) {\n      // FAILURE: If the service returns an error, update the state.\n      console.error('[AuthContext] Login failed with error:', result.error.message);\n      \n      // Set the error message and turn off the loading indicator.\n      const newState = {\n        ...authState,\n        isLoading: false,\n        error: result.error.message,\n        isAuthenticated: false\n      };\n      \n      setAuthState(newState);\n      console.log('[AuthContext] Auth state updated after login failure:', \n        { isAuthenticated: newState.isAuthenticated, hasError: !!newState.error });\n      \n      return Promise.reject(new Error(result.error.message));\n    } else if (result.user) {\n      // SUCCESS: If the service returns a user, get their profile and update state.\n      console.log('[AuthContext] Auth login succeeded – id:', result.user.id);\n\n      // ---- Optional bypass for dev -------------------------------------------------\n      if (BYPASS_PROFILE_FETCH) {\n        console.warn(\n          '[AuthContext] BYPASS_PROFILE_FETCH active – skipping profile lookup, using auth payload only.'\n        );\n        const nowIso = new Date().toISOString();\n        \n        // Create a complete mock user with all fields that might be used elsewhere\n        const mockUser: User = {\n          id: result.user.id,\n          email: result.user.email ?? credentials.email,\n          firstName: 'Dev',\n          lastName: 'User',\n          homeZipCode: '00000',\n          role: UserRole.MVP_DEALER, // Use MVP_DEALER to access all features\n          createdAt: nowIso,\n          updatedAt: nowIso,\n          isEmailVerified: true, // Always verified in dev mode\n          accountType: 'collector',\n          subscriptionStatus: 'active', // Active subscription in dev mode\n          paymentStatus: 'none',\n          subscriptionExpiry: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString(), // 1 year from now\n          favoriteShows: [],\n          attendedShows: [],\n          phoneNumber: '555-123-4567', // Add mock phone number\n          profileImageUrl: 'https://ui-avatars.com/api/?name=Dev+User&background=0D8ABC&color=fff', // Add mock profile image\n          favoriteShowsCount: 0, // Start with 0 favorites\n        };\n        \n        // Update state with the mock user\n        const newState = {\n          user: mockUser,\n          isLoading: false,\n          error: null,\n          isAuthenticated: true,\n        };\n        \n        setAuthState(newState);\n        console.log('[AuthContext] Auth state updated with mock user:', \n          { isAuthenticated: newState.isAuthenticated, userId: mockUser.id, role: mockUser.role });\n        \n        // Set favorite count to 0 for mock user\n        setFavoriteCount(0);\n        \n        return mockUser;\n      }\n\n      // ---- Normal profile fetch ----------------------------------------------------\n      console.log('[AuthContext] Fetching user profile from database...');\n      let userData = await supabaseAuthService.getCurrentUser(result.user.id);\n      \n      if (userData) {\n        console.log('[AuthContext] Profile fetch successful:', \n          { userId: userData.id, role: userData.role });\n        \n        // Create new state with the user data\n        const newState = {\n          user: userData,\n          isLoading: false,\n          error: null,\n          isAuthenticated: true\n        };\n        \n        setAuthState(newState);\n        console.log('[AuthContext] Auth state updated after successful login:', \n          { isAuthenticated: newState.isAuthenticated, userId: userData.id });\n        \n        // Fetch favorite count for the logged in user\n        fetchFavoriteCount(userData.id);\n        \n        return userData;\n      } else {\n        console.warn(\n          '[AuthContext] getCurrentUser returned null – attempting forceRefreshAndFetchProfile'\n        );\n        userData = await forceRefreshAndFetchProfile(result.user.id);\n\n        if (userData) {\n          console.log('[AuthContext] Fallback profile fetch succeeded:', \n            { userId: userData.id, role: userData.role });\n          \n          // Create new state with the user data from fallback\n          const newState = {\n            user: userData,\n            isLoading: false,\n            error: null,\n            isAuthenticated: true,\n          };\n          \n          setAuthState(newState);\n          console.log('[AuthContext] Auth state updated after fallback profile fetch:', \n            { isAuthenticated: newState.isAuthenticated, userId: userData.id });\n          \n          fetchFavoriteCount(userData.id);\n          return userData;\n        }\n\n        // EDGE CASE: Still no profile after fallback\n        console.error('[AuthContext] All profile fetch attempts failed');\n        const msg =\n          'We were unable to load your profile information. Please try again later or contact support.';\n        \n        const newState = {\n          ...authState,\n          isLoading: false,\n          error: msg,\n          isAuthenticated: false,\n        };\n        \n        setAuthState(newState);\n        console.log('[AuthContext] Auth state updated after all profile fetch attempts failed:', \n          { isAuthenticated: newState.isAuthenticated, hasError: !!newState.error });\n        \n        return Promise.reject(new Error(msg));\n      }\n    } else {\n      // EDGE CASE: If there's no error but also no user, handle it.\n      console.error('[AuthContext] No error but no user returned from auth service');\n      const msg = \"An unexpected error occurred. Please try again.\";\n      \n      const newState = {\n        ...authState,\n        isLoading: false,\n        error: msg,\n        isAuthenticated: false\n      };\n      \n      setAuthState(newState);\n      console.log('[AuthContext] Auth state updated after unexpected error:', \n        { isAuthenticated: newState.isAuthenticated, hasError: !!newState.error });\n      \n      return Promise.reject(new Error(msg));\n    }\n  };\n  \n  // Register method\n  const register = async (\n    email: string,\n    password: string,\n    firstName: string,\n    lastName: string,\n    homeZipCode: string,\n    role: UserRole\n  ): Promise<User> => {\n    try {\n      setAuthState(prev => ({ ...prev, isLoading: true, error: null }));\n      \n      const userData = await supabaseAuthService.registerUser(\n        email,\n        password,\n        firstName,\n        lastName,\n        homeZipCode,\n        role\n      );\n      \n      const newState = {\n        user: userData,\n        isLoading: false,\n        error: null,\n        isAuthenticated: true,\n      };\n      \n      setAuthState(newState);\n      console.log('[AuthContext] Auth state updated after registration:', \n        { isAuthenticated: newState.isAuthenticated, userId: userData.id });\n      \n      // New user has no favorites yet\n      setFavoriteCount(0);\n      \n      return userData;\n    } catch (error: any) {\n      console.error('Registration error:', error);\n      setAuthState(prev => ({\n        ...prev,\n        isLoading: false,\n        error: error.message || 'Failed to register',\n        isAuthenticated: false,\n      }));\n      throw error;\n    }\n  };\n  \n  // Logout method\n  const logout = async (): Promise<void> => {\n    try {\n      setAuthState(prev => ({ ...prev, isLoading: true, error: null }));\n      \n      await supabaseAuthService.signOut();\n      \n      const newState = {\n        user: null,\n        isLoading: false,\n        error: null,\n        isAuthenticated: false,\n      };\n      \n      setAuthState(newState);\n      console.log('[AuthContext] Auth state updated after logout:', \n        { isAuthenticated: newState.isAuthenticated });\n      \n      // Reset favorite count on logout\n      setFavoriteCount(0);\n    } catch (error: any) {\n      console.error('Logout error:', error);\n      setAuthState(prev => ({\n        ...prev,\n        isLoading: false,\n        error: error.message || 'Failed to sign out',\n      }));\n      throw error;\n    }\n  };\n  \n  // Reset password method\n  const resetPassword = async (email: string): Promise<void> => {\n    try {\n      setAuthState(prev => ({ ...prev, isLoading: true, error: null }));\n      \n      await supabaseAuthService.resetPassword(email);\n      \n      setAuthState(prev => ({\n        ...prev,\n        isLoading: false,\n        error: null,\n      }));\n    } catch (error: any) {\n      console.error('Reset password error:', error);\n      setAuthState(prev => ({\n        ...prev,\n        isLoading: false,\n        error: error.message || 'Failed to reset password',\n      }));\n      throw error;\n    }\n  };\n  \n  // Update profile method\n  const updateProfile = async (userData: Partial<User>): Promise<void> => {\n    try {\n      setAuthState(prev => ({ ...prev, isLoading: true, error: null }));\n      \n      if (!authState.user) {\n        throw new Error('User not authenticated');\n      }\n      \n      // Include the user ID in the userData object\n      const userDataWithId: Partial<User> = {\n        ...userData,\n        id: authState.user.id\n      };\n      \n      // Call the updated service with the userData that now includes ID\n      const updatedUser = await supabaseAuthService.updateUserProfile(userDataWithId);\n      \n      setAuthState(prev => ({\n        ...prev,\n        user: updatedUser,\n        isLoading: false,\n        error: null,\n      }));\n    } catch (error: any) {\n      console.error('Update profile error:', error);\n      setAuthState(prev => ({\n        ...prev,\n        isLoading: false,\n        error: error.message || 'Failed to update profile',\n      }));\n      throw error;\n    }\n  };\n  \n  // Add favorite show method\n  const addFavoriteShow = async (showId: string): Promise<void> => {\n    try {\n      if (!authState.user) {\n        throw new Error('User not authenticated');\n      }\n      \n      console.log('[AuthContext] Adding show to favorites:', showId);\n      \n      // Call the service to add the show to favorites\n      // The database trigger will automatically update the favorite_shows_count\n      await supabaseAuthService.addShowToFavorites(authState.user.id, showId);\n      \n      // Refresh the favorite count from the database\n      fetchFavoriteCount(authState.user.id);\n      \n      console.log('[AuthContext] Show added to favorites successfully');\n    } catch (error: any) {\n      console.error('[AuthContext] Error adding show to favorites:', error);\n      setAuthState(prev => ({\n        ...prev,\n        error: error.message || 'Failed to add show to favorites',\n      }));\n      throw error;\n    }\n  };\n  \n  // Remove favorite show method\n  const removeFavoriteShow = async (showId: string): Promise<void> => {\n    try {\n      if (!authState.user) {\n        throw new Error('User not authenticated');\n      }\n      \n      console.log('[AuthContext] Removing show from favorites:', showId);\n      \n      // Call the service to remove the show from favorites\n      // The database trigger will automatically update the favorite_shows_count\n      await supabaseAuthService.removeShowFromFavorites(authState.user.id, showId);\n      \n      // Refresh the favorite count from the database\n      fetchFavoriteCount(authState.user.id);\n      \n      console.log('[AuthContext] Show removed from favorites successfully');\n    } catch (error: any) {\n      console.error('[AuthContext] Error removing show from favorites:', error);\n      setAuthState(prev => ({\n        ...prev,\n        error: error.message || 'Failed to remove show from favorites',\n      }));\n      throw error;\n    }\n  };\n  \n  // Clear error method\n  const clearError = () => {\n    setAuthState(prev => ({\n      ...prev,\n      error: null,\n    }));\n  };\n\n  /**\n   * Helper util that guarantees we have the *latest* profile information\n   * from Supabase in three steps:\n   *   1. Clear any cached JWT/session entries in AsyncStorage (defensive)\n   *   2. Force‐refresh the JWT via `refreshUserSession`\n   *   3. Fetch a fresh profile row from the DB and map it to the `User` shape\n   *\n   * If any step fails we fall back to directly hitting the `profiles` table.\n   * Detailed console logs are provided to aid troubleshooting in production.\n   */\n  const forceRefreshAndFetchProfile = async (userId: string): Promise<User | null> => {\n    try {\n      // 1) Clear stale auth tokens from AsyncStorage (best-effort)\n      try {\n        const keys = await AsyncStorage.getAllKeys();\n        const supabaseKeys = keys.filter(k => k.includes('supabase'));\n        if (supabaseKeys.length) {\n          await AsyncStorage.multiRemove(supabaseKeys);\n          /* eslint-disable no-console */\n          console.log('[AuthContext] Cleared cached Supabase tokens', supabaseKeys);\n        }\n      } catch (clearErr) {\n        console.warn('[AuthContext] Failed to clear cached tokens', clearErr);\n      }\n\n      // 2) Force the session to refresh\n      const { success, error: refreshErr } = await refreshUserSession();\n      if (!success) {\n        console.warn('[AuthContext] Session refresh failed – falling back to direct DB fetch', refreshErr);\n      }\n\n      // 3) Fetch the latest profile data directly\n      const { data: profile, error } = await supabase\n        .from('profiles')\n        .select('*')\n        .eq('id', userId)\n        .single();\n\n      if (error || !profile) {\n        console.error('[AuthContext] Failed to fetch profile after refresh', error);\n        return null;\n      }\n\n      // Map DB → App `User`\n      const mapped: User = {\n        id: profile.id,\n        email: profile.email ?? '',\n        firstName: profile.first_name,\n        lastName: profile.last_name ?? undefined,\n        homeZipCode: profile.home_zip_code,\n        role: (profile.role as UserRole) ?? UserRole.ATTENDEE,\n        createdAt: profile.created_at,\n        updatedAt: profile.updated_at,\n        isEmailVerified: !!profile.is_email_verified,\n        accountType: profile.account_type ?? 'collector',\n        subscriptionStatus: profile.subscription_status ?? 'none',\n        paymentStatus: profile.payment_status ?? 'none',\n        subscriptionExpiry: profile.subscription_expiry,\n        favoriteShows: profile.favorite_shows || [],\n        attendedShows: profile.attended_shows || [],\n        phoneNumber: profile.phone_number ?? undefined,\n        profileImageUrl: profile.profile_image_url ?? undefined,\n        favoriteShowsCount: profile.favorite_shows_count || 0,\n      };\n      console.log('[AuthContext] Fetched fresh profile', mapped.role, mapped.accountType);\n\n      return mapped;\n    } catch (err) {\n      console.error('[AuthContext] Unexpected error in forceRefreshAndFetchProfile', err);\n      return null;\n    }\n  };\n\n  const refreshUserRole = async (): Promise<boolean> => {\n    try {\n      if (!authState.user) return false;\n\n      // Use the new robust helper\n      const fresh = await forceRefreshAndFetchProfile(authState.user.id);\n      if (!fresh) {\n        return false;\n      }\n\n      setAuthState(prev => {\n        if (!prev.user) return prev;\n        return {\n          ...prev,\n          user: fresh,\n        };\n      });\n      \n      // Also refresh the favorite count\n      fetchFavoriteCount(authState.user.id);\n      \n      return true;\n    } catch (e) {\n      console.error('An unexpected error occurred in refreshUserRole:', e);\n      return false;\n    }\n  };\n  \n  // Context value - ensuring error, isLoading, and isAuthenticated are always defined\n  const contextValue: AuthContextType = {\n    authState: { ...authState, favoriteCount },\n    // Explicitly extract these properties from authState with fallbacks to ensure they're never undefined\n    error: authState?.error ?? null,\n    isLoading: authState?.isLoading ?? false,\n    isAuthenticated: authState?.isAuthenticated ?? false,\n    login,\n    register,\n    logout,\n    resetPassword,\n    updateProfile,\n    addFavoriteShow,\n    removeFavoriteShow,\n    clearError,\n    refreshUserRole,\n  };\n  \n  return (\n    <AuthContext.Provider value={contextValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Custom hook for using the auth context\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  \n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  \n  return context;\n};\n\nexport default AuthContext;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}