{"version":3,"names":["cov_to4rgmctv","actualCoverage","s","react_1","require","showSeriesService_1","useUnclaimedShows","organizerId","f","unclaimedItems","setUnclaimedItems","useState","isLoading","setIsLoading","error","setError","fetchUnclaimedShows","console","log","unclaimedSeries","unclaimedStandaloneShows","showSeriesService","getAllShowSeries","seriesErr","getUnclaimedShows","showsErr","combinedItems","map","series","type","data","show","getItemDate","item","b","startDate","Date","getTime","Number","MAX_SAFE_INTEGER","nextShowDate","sort","a","length","err","Error","useEffect","refreshUnclaimedShows","exports"],"sources":["/Users/kevin/card-show-finder/src/hooks/useUnclaimedShows.ts"],"sourcesContent":["// src/hooks/useUnclaimedShows.ts\nimport { useState, useEffect } from 'react';\nimport { ShowSeries, Show } from '../types';\nimport { showSeriesService } from '../services/showSeriesService';\n\n// Interface for combined unclaimed items (shows or series)\nexport interface UnclaimedItem {\n  type: 'series' | 'show';\n  data: ShowSeries | Show;\n}\n\n/**\n * Custom hook to fetch and manage unclaimed shows data\n * @param organizerId The organizer ID (used for claiming shows later)\n * @returns Object containing unclaimed items, loading state, and error state\n */\nexport const useUnclaimedShows = (organizerId: string) => {\n  // State for unclaimed items (shows and series)\n  const [unclaimedItems, setUnclaimedItems] = useState<UnclaimedItem[]>([]);\n  // Loading state - start with true as we'll fetch data immediately\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  // Error state - null when no errors\n  const [error, setError] = useState<Error | null>(null);\n\n  // Function to fetch unclaimed shows and series\n  const fetchUnclaimedShows = async () => {\n    try {\n      console.log('[useUnclaimedShows] Starting to fetch unclaimed shows and series');\n      setIsLoading(true);\n      setError(null);\n      \n      let unclaimedSeries: ShowSeries[] = [];\n      let unclaimedStandaloneShows: Show[] = [];\n\n      /* -----------------------------------------\n       * 1️⃣  Fetch series – isolate failures here\n       * ----------------------------------------*/\n      try {\n        console.log('[useUnclaimedShows] Attempting to fetch series…');\n        unclaimedSeries = await showSeriesService.getAllShowSeries({\n          organizerId: null\n        });\n        console.log('[useUnclaimedShows] Successfully fetched series:', unclaimedSeries);\n      } catch (seriesErr) {\n        console.error('CRASHED INSIDE: getAllShowSeries', seriesErr);\n        throw seriesErr; // bubble up to outer catch\n      }\n\n      /* -------------------------------------------------\n       * 2️⃣  Fetch standalone shows – isolate failures here\n       * ------------------------------------------------*/\n      try {\n        console.log('[useUnclaimedShows] Attempting to fetch standalone shows…');\n        unclaimedStandaloneShows = await showSeriesService.getUnclaimedShows();\n        console.log('[useUnclaimedShows] Successfully fetched standalone shows:', unclaimedStandaloneShows);\n      } catch (showsErr) {\n        console.error('CRASHED INSIDE: getUnclaimedShows', showsErr);\n        throw showsErr; // bubble up to outer catch\n      }\n\n      // Combine and map the two lists\n      const combinedItems = [\n        ...unclaimedSeries.map(series => ({ type: 'series', data: series })),\n        ...unclaimedStandaloneShows.map(show => ({ type: 'show', data: show }))\n      ];\n      \n      // Sort by date (most recent first)\n      const getItemDate = (item: UnclaimedItem): number => {\n        if (item.type === 'show') {\n          const show = item.data as Show;\n          return show?.startDate ? new Date(show.startDate).getTime() : Number.MAX_SAFE_INTEGER;\n        }\n        const series = item.data as ShowSeries;\n        return series?.nextShowDate ? new Date(series.nextShowDate).getTime() : Number.MAX_SAFE_INTEGER;\n      };\n\n      combinedItems.sort((a, b) => getItemDate(a) - getItemDate(b));\n      \n      console.log(`[useUnclaimedShows] Fetch complete. Total unclaimed items: ${combinedItems.length}`);\n      setUnclaimedItems(combinedItems);\n      \n    } catch (err) {\n      console.error('[useUnclaimedShows] Error fetching unclaimed shows:', err);\n      setError(err instanceof Error ? err : new Error('Failed to load unclaimed shows. Please try again.'));\n      // Set empty array on error to avoid undefined\n      setUnclaimedItems([]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  // Fetch data when the component mounts or when organizerId changes\n  useEffect(() => {\n    fetchUnclaimedShows();\n  }, [organizerId]);\n  \n  // Return all states and a function to refresh the data\n  return { \n    unclaimedItems, \n    isLoading, \n    error,\n    refreshUnclaimedShows: fetchUnclaimedShows \n  };\n};\n"],"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","ignoreList":[]}