dce28686a6019e1420a680f545db5c62
"use strict";

/**
 * Broadcast Service
 *
 * This service handles operations related to organizer broadcast messages, including:
 * - Sending broadcast messages to attendees/dealers
 * - Getting broadcast history
 * - Managing broadcast quotas and limits
 */
/* istanbul ignore next */
function cov_23zjo7ru39() {
  var path = "/Users/kevin/card-show-finder/src/services/broadcastService.ts";
  var hash = "8c8205ada7da275a25ad61606a880dfd471ddc91";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kevin/card-show-finder/src/services/broadcastService.ts",
    statementMap: {
      "0": {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 10,
          column: 62
        }
      },
      "1": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 200
        }
      },
      "2": {
        start: {
          line: 12,
          column: 19
        },
        end: {
          line: 12,
          column: 41
        }
      },
      "3": {
        start: {
          line: 13,
          column: 27
        },
        end: {
          line: 13,
          column: 56
        }
      },
      "4": {
        start: {
          line: 23,
          column: 29
        },
        end: {
          line: 116,
          column: 1
        }
      },
      "5": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 115,
          column: 5
        }
      },
      "6": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 28,
          column: 9
        }
      },
      "7": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 27,
          column: 73
        }
      },
      "8": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 31,
          column: 9
        }
      },
      "9": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 30,
          column: 80
        }
      },
      "10": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 34,
          column: 9
        }
      },
      "11": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 94
        }
      },
      "12": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 37,
          column: 9
        }
      },
      "13": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 36,
          column: 94
        }
      },
      "14": {
        start: {
          line: 39,
          column: 59
        },
        end: {
          line: 43,
          column: 21
        }
      },
      "15": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 47,
          column: 9
        }
      },
      "16": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 45,
          column: 93
        }
      },
      "17": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 46,
          column: 87
        }
      },
      "18": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 50,
          column: 9
        }
      },
      "19": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 49,
          column: 97
        }
      },
      "20": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 65,
          column: 9
        }
      },
      "21": {
        start: {
          line: 53,
          column: 57
        },
        end: {
          line: 57,
          column: 25
        }
      },
      "22": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 61,
          column: 13
        }
      },
      "23": {
        start: {
          line: 59,
          column: 16
        },
        end: {
          line: 59,
          column: 94
        }
      },
      "24": {
        start: {
          line: 60,
          column: 16
        },
        end: {
          line: 60,
          column: 84
        }
      },
      "25": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 64,
          column: 13
        }
      },
      "26": {
        start: {
          line: 63,
          column: 16
        },
        end: {
          line: 63,
          column: 104
        }
      },
      "27": {
        start: {
          line: 67,
          column: 55
        },
        end: {
          line: 67,
          column: 110
        }
      },
      "28": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 70,
          column: 9
        }
      },
      "29": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 57
        }
      },
      "30": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 76,
          column: 9
        }
      },
      "31": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 75,
          column: 14
        }
      },
      "32": {
        start: {
          line: 78,
          column: 33
        },
        end: {
          line: 82,
          column: 9
        }
      },
      "33": {
        start: {
          line: 84,
          column: 39
        },
        end: {
          line: 91,
          column: 15
        }
      },
      "34": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "35": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 94
        }
      },
      "36": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 66
        }
      },
      "37": {
        start: {
          line: 97,
          column: 39
        },
        end: {
          line: 102,
          column: 34
        }
      },
      "38": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 106,
          column: 9
        }
      },
      "39": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 93
        }
      },
      "40": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 110,
          column: 46
        }
      },
      "41": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 113,
          column: 93
        }
      },
      "42": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 114,
          column: 88
        }
      },
      "43": {
        start: {
          line: 117,
          column: 0
        },
        end: {
          line: 117,
          column: 52
        }
      },
      "44": {
        start: {
          line: 125,
          column: 28
        },
        end: {
          line: 134,
          column: 1
        }
      },
      "45": {
        start: {
          line: 126,
          column: 4
        },
        end: {
          line: 133,
          column: 5
        }
      },
      "46": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 128,
          column: 87
        }
      },
      "47": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 131,
          column: 94
        }
      },
      "48": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 94
        }
      },
      "49": {
        start: {
          line: 135,
          column: 0
        },
        end: {
          line: 135,
          column: 50
        }
      },
      "50": {
        start: {
          line: 142,
          column: 32
        },
        end: {
          line: 153,
          column: 1
        }
      },
      "51": {
        start: {
          line: 143,
          column: 4
        },
        end: {
          line: 152,
          column: 5
        }
      },
      "52": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 145,
          column: 60
        }
      },
      "53": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 147,
          column: 76
        }
      },
      "54": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 150,
          column: 92
        }
      },
      "55": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 151,
          column: 84
        }
      },
      "56": {
        start: {
          line: 154,
          column: 0
        },
        end: {
          line: 154,
          column: 58
        }
      },
      "57": {
        start: {
          line: 163,
          column: 28
        },
        end: {
          line: 178,
          column: 1
        }
      },
      "58": {
        start: {
          line: 164,
          column: 4
        },
        end: {
          line: 177,
          column: 5
        }
      },
      "59": {
        start: {
          line: 165,
          column: 26
        },
        end: {
          line: 167,
          column: 10
        }
      },
      "60": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 171,
          column: 9
        }
      },
      "61": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 169,
          column: 88
        }
      },
      "62": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 60
        }
      },
      "63": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 172,
          column: 46
        }
      },
      "64": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 175,
          column: 93
        }
      },
      "65": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 176,
          column: 88
        }
      },
      "66": {
        start: {
          line: 179,
          column: 0
        },
        end: {
          line: 179,
          column: 50
        }
      },
      "67": {
        start: {
          line: 184,
          column: 33
        },
        end: {
          line: 190,
          column: 1
        }
      },
      "68": {
        start: {
          line: 186,
          column: 4
        },
        end: {
          line: 189,
          column: 6
        }
      },
      "69": {
        start: {
          line: 191,
          column: 0
        },
        end: {
          line: 191,
          column: 60
        }
      },
      "70": {
        start: {
          line: 196,
          column: 31
        },
        end: {
          line: 213,
          column: 1
        }
      },
      "71": {
        start: {
          line: 197,
          column: 4
        },
        end: {
          line: 212,
          column: 5
        }
      },
      "72": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 207,
          column: 10
        }
      },
      "73": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 210,
          column: 82
        }
      },
      "74": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 211,
          column: 88
        }
      },
      "75": {
        start: {
          line: 214,
          column: 0
        },
        end: {
          line: 214,
          column: 56
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 23,
            column: 29
          },
          end: {
            line: 23,
            column: 30
          }
        },
        loc: {
          start: {
            line: 23,
            column: 81
          },
          end: {
            line: 116,
            column: 1
          }
        },
        line: 23
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 125,
            column: 28
          },
          end: {
            line: 125,
            column: 29
          }
        },
        loc: {
          start: {
            line: 125,
            column: 65
          },
          end: {
            line: 134,
            column: 1
          }
        },
        line: 125
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 142,
            column: 32
          },
          end: {
            line: 142,
            column: 33
          }
        },
        loc: {
          start: {
            line: 142,
            column: 55
          },
          end: {
            line: 153,
            column: 1
          }
        },
        line: 142
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 163,
            column: 28
          },
          end: {
            line: 163,
            column: 29
          }
        },
        loc: {
          start: {
            line: 163,
            column: 51
          },
          end: {
            line: 178,
            column: 1
          }
        },
        line: 163
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 184,
            column: 33
          },
          end: {
            line: 184,
            column: 34
          }
        },
        loc: {
          start: {
            line: 184,
            column: 100
          },
          end: {
            line: 190,
            column: 1
          }
        },
        line: 184
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 196,
            column: 31
          },
          end: {
            line: 196,
            column: 32
          }
        },
        loc: {
          start: {
            line: 196,
            column: 64
          },
          end: {
            line: 213,
            column: 1
          }
        },
        line: 196
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 28,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 28,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 26
      },
      "1": {
        loc: {
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 31,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 31,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "2": {
        loc: {
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 29,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 29,
            column: 20
          }
        }, {
          start: {
            line: 29,
            column: 24
          },
          end: {
            line: 29,
            column: 51
          }
        }],
        line: 29
      },
      "3": {
        loc: {
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      },
      "4": {
        loc: {
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 37,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 37,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 35
      },
      "5": {
        loc: {
          start: {
            line: 35,
            column: 12
          },
          end: {
            line: 35,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 35,
            column: 12
          },
          end: {
            line: 35,
            column: 23
          }
        }, {
          start: {
            line: 35,
            column: 27
          },
          end: {
            line: 35,
            column: 50
          }
        }],
        line: 35
      },
      "6": {
        loc: {
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "7": {
        loc: {
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 50,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 50,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "8": {
        loc: {
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 65,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 65,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 52
      },
      "9": {
        loc: {
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 61,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 61,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "10": {
        loc: {
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 64,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 64,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 62
      },
      "11": {
        loc: {
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 70,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 70,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 68
      },
      "12": {
        loc: {
          start: {
            line: 71,
            column: 8
          },
          end: {
            line: 76,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 8
          },
          end: {
            line: 76,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 71
      },
      "13": {
        loc: {
          start: {
            line: 71,
            column: 12
          },
          end: {
            line: 71,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 71,
            column: 12
          },
          end: {
            line: 71,
            column: 21
          }
        }, {
          start: {
            line: 71,
            column: 25
          },
          end: {
            line: 71,
            column: 49
          }
        }],
        line: 71
      },
      "14": {
        loc: {
          start: {
            line: 79,
            column: 20
          },
          end: {
            line: 79,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 79,
            column: 20
          },
          end: {
            line: 79,
            column: 26
          }
        }, {
          start: {
            line: 79,
            column: 30
          },
          end: {
            line: 79,
            column: 32
          }
        }],
        line: 79
      },
      "15": {
        loc: {
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 92
      },
      "16": {
        loc: {
          start: {
            line: 103,
            column: 8
          },
          end: {
            line: 106,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 103,
            column: 8
          },
          end: {
            line: 106,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 103
      },
      "17": {
        loc: {
          start: {
            line: 114,
            column: 40
          },
          end: {
            line: 114,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 114,
            column: 40
          },
          end: {
            line: 114,
            column: 51
          }
        }, {
          start: {
            line: 114,
            column: 55
          },
          end: {
            line: 114,
            column: 85
          }
        }],
        line: 114
      },
      "18": {
        loc: {
          start: {
            line: 125,
            column: 48
          },
          end: {
            line: 125,
            column: 60
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 125,
            column: 58
          },
          end: {
            line: 125,
            column: 60
          }
        }],
        line: 125
      },
      "19": {
        loc: {
          start: {
            line: 132,
            column: 36
          },
          end: {
            line: 132,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 132,
            column: 36
          },
          end: {
            line: 132,
            column: 47
          }
        }, {
          start: {
            line: 132,
            column: 51
          },
          end: {
            line: 132,
            column: 81
          }
        }],
        line: 132
      },
      "20": {
        loc: {
          start: {
            line: 151,
            column: 36
          },
          end: {
            line: 151,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 151,
            column: 36
          },
          end: {
            line: 151,
            column: 47
          }
        }, {
          start: {
            line: 151,
            column: 51
          },
          end: {
            line: 151,
            column: 81
          }
        }],
        line: 151
      },
      "21": {
        loc: {
          start: {
            line: 168,
            column: 8
          },
          end: {
            line: 171,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 168,
            column: 8
          },
          end: {
            line: 171,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 168
      },
      "22": {
        loc: {
          start: {
            line: 176,
            column: 40
          },
          end: {
            line: 176,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 176,
            column: 40
          },
          end: {
            line: 176,
            column: 51
          }
        }, {
          start: {
            line: 176,
            column: 55
          },
          end: {
            line: 176,
            column: 85
          }
        }],
        line: 176
      },
      "23": {
        loc: {
          start: {
            line: 211,
            column: 40
          },
          end: {
            line: 211,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 211,
            column: 40
          },
          end: {
            line: 211,
            column: 51
          }
        }, {
          start: {
            line: 211,
            column: 55
          },
          end: {
            line: 211,
            column: 85
          }
        }],
        line: 211
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/kevin/card-show-finder/src/services/broadcastService.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/kevin/card-show-finder/src/services/broadcastService.ts"],
      sourcesContent: ["/**\n * Broadcast Service\n *\n * This service handles operations related to organizer broadcast messages, including:\n * - Sending broadcast messages to attendees/dealers\n * - Getting broadcast history\n * - Managing broadcast quotas and limits\n */\n\nimport { supabase } from '../supabase';\nimport {\n  getBroadcastHistory as getOrganizerBroadcastHistory,\n  getBroadcastQuota,\n  BroadcastMessage,\n  BroadcastHistoryItem,\n  BroadcastQuota\n} from './organizerService';\n\n/**\n * Send a broadcast message to attendees/dealers of a show\n * \n * This function handles:\n * - Quota checking\n * - Message validation\n * - Logging the broadcast\n * - Incrementing the broadcast count\n */\nexport const sendBroadcastMessage = async (\n  organizerId: string,\n  showId: string | null,\n  message: string,\n  recipients: ('attendees' | 'dealers')[]\n): Promise<{ success: boolean; error: string | null }> => {\n  try {\n    // Validate inputs\n    if (!organizerId) {\n      return { success: false, error: 'Organizer ID is required' };\n    }\n\n    if (!message || message.trim().length === 0) {\n      return { success: false, error: 'Message content cannot be empty' };\n    }\n    \n    if (message.length > 1000) {\n      return { success: false, error: 'Message content cannot exceed 1000 characters' };\n    }\n\n    if (!recipients || recipients.length === 0) {\n      return { success: false, error: 'At least one recipient type must be specified' };\n    }\n\n    // Check if the organizer has the SHOW_ORGANIZER role\n    const { data: profileData, error: profileError } = await supabase\n      .from('profiles')\n      .select('role')\n      .eq('id', organizerId)\n      .single();\n\n    if (profileError) {\n      console.error('[broadcastService] Error checking organizer role:', profileError);\n      return { success: false, error: 'Failed to verify organizer permissions' };\n    }\n\n    if (profileData.role !== 'SHOW_ORGANIZER') {\n      return { success: false, error: 'Only show organizers can send broadcast messages' };\n    }\n\n    // If showId is provided, verify the organizer owns this show\n    if (showId) {\n      const { data: showData, error: showError } = await supabase\n        .from('shows')\n        .select('organizer_id')\n        .eq('id', showId)\n        .single();\n\n      if (showError) {\n        console.error('[broadcastService] Error checking show ownership:', showError);\n        return { success: false, error: 'Failed to verify show ownership' };\n      }\n\n      if (showData.organizer_id !== organizerId) {\n        return { success: false, error: 'You can only send broadcasts for shows you organize' };\n      }\n    }\n\n    // Check if the organizer has reached their monthly limit\n    const { data: quotaData, error: quotaError } = await getBroadcastLimitStatus(organizerId);\n    \n    if (quotaError) {\n      return { success: false, error: quotaError };\n    }\n    \n    if (quotaData && quotaData.remaining <= 0) {\n      return { \n        success: false, \n        error: `You have reached your monthly broadcast message limit of ${quotaData.limit} messages` \n      };\n    }\n\n    // Format the broadcast message for the organizerService\n    const broadcastMessage: BroadcastMessage = {\n      showId: showId || '',\n      content: message,\n      recipients: recipients\n    };\n\n    // Insert the broadcast log and increment the count\n    const { error: insertError } = await supabase\n      .from('broadcast_logs')\n      .insert([{\n        organizer_id: organizerId,\n        show_id: showId,\n        message_content: message,\n        recipients: recipients\n      }]);\n\n    if (insertError) {\n      console.error('[broadcastService] Error logging broadcast message:', insertError);\n      return { success: false, error: insertError.message };\n    }\n\n    // Increment the broadcast count for the organizer\n    const { error: updateError } = await supabase\n      .from('profiles')\n      .update({ \n        broadcast_message_count: quotaData!.used + 1 \n      })\n      .eq('id', organizerId);\n\n    if (updateError) {\n      console.error('[broadcastService] Error updating broadcast count:', updateError);\n      // Don't return error here, as the message was already sent\n    }\n\n    // TODO: Implement actual message delivery logic\n    // This could involve push notifications, emails, etc.\n    // For now, we just log the broadcast\n\n    return { success: true, error: null };\n  } catch (err: any) {\n    console.error('[broadcastService] Unexpected error sending broadcast message:', err);\n    return { success: false, error: err.message || 'An unexpected error occurred' };\n  }\n};\n\n/**\n * Get broadcast message history for an organizer\n * \n * @param organizerId - The ID of the organizer\n * @param options - Optional parameters for pagination and filtering\n * @returns Broadcast history items, error (if any), and total count\n */\nexport const getBroadcastHistory = async (\n  organizerId: string,\n  options: { limit?: number; offset?: number; showId?: string } = {}\n): Promise<{ data: BroadcastHistoryItem[] | null; error: string | null; count: number }> => {\n  try {\n    // Delegate to the organizerService function\n    return await getOrganizerBroadcastHistory(organizerId, options);\n  } catch (err: any) {\n    console.error('[broadcastService] Unexpected error fetching broadcast history:', err);\n    return { data: null, error: err.message || 'An unexpected error occurred', count: 0 };\n  }\n};\n\n/**\n * Get broadcast quota information for an organizer\n * \n * @param organizerId - The ID of the organizer\n * @returns Quota information including used, limit, remaining, and reset date\n */\nexport const getBroadcastLimitStatus = async (\n  organizerId: string\n): Promise<{ data: BroadcastQuota | null; error: string | null }> => {\n  try {\n    // Reset the broadcast count if we're in a new month\n    await resetBroadcastCount(organizerId);\n    \n    // Delegate to the organizerService function\n    return await getBroadcastQuota(organizerId);\n  } catch (err: any) {\n    console.error('[broadcastService] Unexpected error fetching broadcast quota:', err);\n    return { data: null, error: err.message || 'An unexpected error occurred' };\n  }\n};\n\n/**\n * Reset the broadcast count for an organizer if we're in a new month\n * \n * This function calls the reset_broadcast_count RPC in Supabase\n * \n * @param organizerId - The ID of the organizer\n * @returns Success status and error (if any)\n */\nexport const resetBroadcastCount = async (\n  organizerId: string\n): Promise<{ success: boolean; error: string | null }> => {\n  try {\n    const { error } = await supabase.rpc('reset_broadcast_count', {\n      p_organizer_id: organizerId\n    });\n\n    if (error) {\n      console.error('[broadcastService] Error resetting broadcast count:', error);\n      return { success: false, error: error.message };\n    }\n\n    return { success: true, error: null };\n  } catch (err: any) {\n    console.error('[broadcastService] Unexpected error resetting broadcast count:', err);\n    return { success: false, error: err.message || 'An unexpected error occurred' };\n  }\n};\n\n/**\n * Schedule a broadcast message to be sent at a future date\n * (This is a placeholder for future functionality)\n */\nexport const scheduleBroadcastMessage = async (\n  organizerId: string,\n  showId: string | null,\n  message: string,\n  recipients: ('attendees' | 'dealers')[],\n  scheduledDate: Date\n): Promise<{ success: boolean; error: string | null }> => {\n  // This would be implemented in a future phase\n  return { \n    success: false, \n    error: 'Scheduled broadcasts are not yet implemented' \n  };\n};\n\n/**\n * Admin function to override broadcast limits for an organizer\n * This should only be callable with admin/service_role credentials\n */\nexport const adminSetBroadcastLimit = async (\n  organizerId: string,\n  newLimit: number\n): Promise<{ success: boolean; error: string | null }> => {\n  try {\n    // This should be implemented as a Supabase Edge Function with admin privileges\n    // For now, it's a placeholder that will always fail for regular users\n    \n    // In a real implementation, this would:\n    // 1. Verify the caller has admin privileges\n    // 2. Update a special field in the profiles table for custom limits\n    // 3. Return success\n    \n    return { \n      success: false, \n      error: 'This function requires admin privileges' \n    };\n  } catch (err: any) {\n    console.error('[broadcastService] Error in adminSetBroadcastLimit:', err);\n    return { success: false, error: err.message || 'An unexpected error occurred' };\n  }\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8c8205ada7da275a25ad61606a880dfd471ddc91"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_23zjo7ru39 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_23zjo7ru39();
cov_23zjo7ru39().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_23zjo7ru39().s[1]++;
exports.adminSetBroadcastLimit = exports.scheduleBroadcastMessage = exports.resetBroadcastCount = exports.getBroadcastLimitStatus = exports.getBroadcastHistory = exports.sendBroadcastMessage = void 0;
const supabase_1 =
/* istanbul ignore next */
(cov_23zjo7ru39().s[2]++, require("../supabase"));
const organizerService_1 =
/* istanbul ignore next */
(cov_23zjo7ru39().s[3]++, require("./organizerService"));
/**
 * Send a broadcast message to attendees/dealers of a show
 *
 * This function handles:
 * - Quota checking
 * - Message validation
 * - Logging the broadcast
 * - Incrementing the broadcast count
 */
/* istanbul ignore next */
cov_23zjo7ru39().s[4]++;
const sendBroadcastMessage = async (organizerId, showId, message, recipients) => {
  /* istanbul ignore next */
  cov_23zjo7ru39().f[0]++;
  cov_23zjo7ru39().s[5]++;
  try {
    /* istanbul ignore next */
    cov_23zjo7ru39().s[6]++;
    // Validate inputs
    if (!organizerId) {
      /* istanbul ignore next */
      cov_23zjo7ru39().b[0][0]++;
      cov_23zjo7ru39().s[7]++;
      return {
        success: false,
        error: 'Organizer ID is required'
      };
    } else
    /* istanbul ignore next */
    {
      cov_23zjo7ru39().b[0][1]++;
    }
    cov_23zjo7ru39().s[8]++;
    if (
    /* istanbul ignore next */
    (cov_23zjo7ru39().b[2][0]++, !message) ||
    /* istanbul ignore next */
    (cov_23zjo7ru39().b[2][1]++, message.trim().length === 0)) {
      /* istanbul ignore next */
      cov_23zjo7ru39().b[1][0]++;
      cov_23zjo7ru39().s[9]++;
      return {
        success: false,
        error: 'Message content cannot be empty'
      };
    } else
    /* istanbul ignore next */
    {
      cov_23zjo7ru39().b[1][1]++;
    }
    cov_23zjo7ru39().s[10]++;
    if (message.length > 1000) {
      /* istanbul ignore next */
      cov_23zjo7ru39().b[3][0]++;
      cov_23zjo7ru39().s[11]++;
      return {
        success: false,
        error: 'Message content cannot exceed 1000 characters'
      };
    } else
    /* istanbul ignore next */
    {
      cov_23zjo7ru39().b[3][1]++;
    }
    cov_23zjo7ru39().s[12]++;
    if (
    /* istanbul ignore next */
    (cov_23zjo7ru39().b[5][0]++, !recipients) ||
    /* istanbul ignore next */
    (cov_23zjo7ru39().b[5][1]++, recipients.length === 0)) {
      /* istanbul ignore next */
      cov_23zjo7ru39().b[4][0]++;
      cov_23zjo7ru39().s[13]++;
      return {
        success: false,
        error: 'At least one recipient type must be specified'
      };
    } else
    /* istanbul ignore next */
    {
      cov_23zjo7ru39().b[4][1]++;
    }
    // Check if the organizer has the SHOW_ORGANIZER role
    const {
      data: profileData,
      error: profileError
    } =
    /* istanbul ignore next */
    (cov_23zjo7ru39().s[14]++, await supabase_1.supabase.from('profiles').select('role').eq('id', organizerId).single());
    /* istanbul ignore next */
    cov_23zjo7ru39().s[15]++;
    if (profileError) {
      /* istanbul ignore next */
      cov_23zjo7ru39().b[6][0]++;
      cov_23zjo7ru39().s[16]++;
      console.error('[broadcastService] Error checking organizer role:', profileError);
      /* istanbul ignore next */
      cov_23zjo7ru39().s[17]++;
      return {
        success: false,
        error: 'Failed to verify organizer permissions'
      };
    } else
    /* istanbul ignore next */
    {
      cov_23zjo7ru39().b[6][1]++;
    }
    cov_23zjo7ru39().s[18]++;
    if (profileData.role !== 'SHOW_ORGANIZER') {
      /* istanbul ignore next */
      cov_23zjo7ru39().b[7][0]++;
      cov_23zjo7ru39().s[19]++;
      return {
        success: false,
        error: 'Only show organizers can send broadcast messages'
      };
    } else
    /* istanbul ignore next */
    {
      cov_23zjo7ru39().b[7][1]++;
    }
    // If showId is provided, verify the organizer owns this show
    cov_23zjo7ru39().s[20]++;
    if (showId) {
      /* istanbul ignore next */
      cov_23zjo7ru39().b[8][0]++;
      const {
        data: showData,
        error: showError
      } =
      /* istanbul ignore next */
      (cov_23zjo7ru39().s[21]++, await supabase_1.supabase.from('shows').select('organizer_id').eq('id', showId).single());
      /* istanbul ignore next */
      cov_23zjo7ru39().s[22]++;
      if (showError) {
        /* istanbul ignore next */
        cov_23zjo7ru39().b[9][0]++;
        cov_23zjo7ru39().s[23]++;
        console.error('[broadcastService] Error checking show ownership:', showError);
        /* istanbul ignore next */
        cov_23zjo7ru39().s[24]++;
        return {
          success: false,
          error: 'Failed to verify show ownership'
        };
      } else
      /* istanbul ignore next */
      {
        cov_23zjo7ru39().b[9][1]++;
      }
      cov_23zjo7ru39().s[25]++;
      if (showData.organizer_id !== organizerId) {
        /* istanbul ignore next */
        cov_23zjo7ru39().b[10][0]++;
        cov_23zjo7ru39().s[26]++;
        return {
          success: false,
          error: 'You can only send broadcasts for shows you organize'
        };
      } else
      /* istanbul ignore next */
      {
        cov_23zjo7ru39().b[10][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_23zjo7ru39().b[8][1]++;
    }
    // Check if the organizer has reached their monthly limit
    const {
      data: quotaData,
      error: quotaError
    } =
    /* istanbul ignore next */
    (cov_23zjo7ru39().s[27]++, await (0, exports.getBroadcastLimitStatus)(organizerId));
    /* istanbul ignore next */
    cov_23zjo7ru39().s[28]++;
    if (quotaError) {
      /* istanbul ignore next */
      cov_23zjo7ru39().b[11][0]++;
      cov_23zjo7ru39().s[29]++;
      return {
        success: false,
        error: quotaError
      };
    } else
    /* istanbul ignore next */
    {
      cov_23zjo7ru39().b[11][1]++;
    }
    cov_23zjo7ru39().s[30]++;
    if (
    /* istanbul ignore next */
    (cov_23zjo7ru39().b[13][0]++, quotaData) &&
    /* istanbul ignore next */
    (cov_23zjo7ru39().b[13][1]++, quotaData.remaining <= 0)) {
      /* istanbul ignore next */
      cov_23zjo7ru39().b[12][0]++;
      cov_23zjo7ru39().s[31]++;
      return {
        success: false,
        error: `You have reached your monthly broadcast message limit of ${quotaData.limit} messages`
      };
    } else
    /* istanbul ignore next */
    {
      cov_23zjo7ru39().b[12][1]++;
    }
    // Format the broadcast message for the organizerService
    const broadcastMessage =
    /* istanbul ignore next */
    (cov_23zjo7ru39().s[32]++, {
      showId:
      /* istanbul ignore next */
      (cov_23zjo7ru39().b[14][0]++, showId) ||
      /* istanbul ignore next */
      (cov_23zjo7ru39().b[14][1]++, ''),
      content: message,
      recipients: recipients
    });
    // Insert the broadcast log and increment the count
    const {
      error: insertError
    } =
    /* istanbul ignore next */
    (cov_23zjo7ru39().s[33]++, await supabase_1.supabase.from('broadcast_logs').insert([{
      organizer_id: organizerId,
      show_id: showId,
      message_content: message,
      recipients: recipients
    }]));
    /* istanbul ignore next */
    cov_23zjo7ru39().s[34]++;
    if (insertError) {
      /* istanbul ignore next */
      cov_23zjo7ru39().b[15][0]++;
      cov_23zjo7ru39().s[35]++;
      console.error('[broadcastService] Error logging broadcast message:', insertError);
      /* istanbul ignore next */
      cov_23zjo7ru39().s[36]++;
      return {
        success: false,
        error: insertError.message
      };
    } else
    /* istanbul ignore next */
    {
      cov_23zjo7ru39().b[15][1]++;
    }
    // Increment the broadcast count for the organizer
    const {
      error: updateError
    } =
    /* istanbul ignore next */
    (cov_23zjo7ru39().s[37]++, await supabase_1.supabase.from('profiles').update({
      broadcast_message_count: quotaData.used + 1
    }).eq('id', organizerId));
    /* istanbul ignore next */
    cov_23zjo7ru39().s[38]++;
    if (updateError) {
      /* istanbul ignore next */
      cov_23zjo7ru39().b[16][0]++;
      cov_23zjo7ru39().s[39]++;
      console.error('[broadcastService] Error updating broadcast count:', updateError);
      // Don't return error here, as the message was already sent
    } else
    /* istanbul ignore next */
    {
      cov_23zjo7ru39().b[16][1]++;
    }
    // TODO: Implement actual message delivery logic
    // This could involve push notifications, emails, etc.
    // For now, we just log the broadcast
    cov_23zjo7ru39().s[40]++;
    return {
      success: true,
      error: null
    };
  } catch (err) {
    /* istanbul ignore next */
    cov_23zjo7ru39().s[41]++;
    console.error('[broadcastService] Unexpected error sending broadcast message:', err);
    /* istanbul ignore next */
    cov_23zjo7ru39().s[42]++;
    return {
      success: false,
      error:
      /* istanbul ignore next */
      (cov_23zjo7ru39().b[17][0]++, err.message) ||
      /* istanbul ignore next */
      (cov_23zjo7ru39().b[17][1]++, 'An unexpected error occurred')
    };
  }
};
/* istanbul ignore next */
cov_23zjo7ru39().s[43]++;
exports.sendBroadcastMessage = sendBroadcastMessage;
/**
 * Get broadcast message history for an organizer
 *
 * @param organizerId - The ID of the organizer
 * @param options - Optional parameters for pagination and filtering
 * @returns Broadcast history items, error (if any), and total count
 */
/* istanbul ignore next */
cov_23zjo7ru39().s[44]++;
const getBroadcastHistory = async (organizerId, options =
/* istanbul ignore next */
(cov_23zjo7ru39().b[18][0]++, {})) => {
  /* istanbul ignore next */
  cov_23zjo7ru39().f[1]++;
  cov_23zjo7ru39().s[45]++;
  try {
    /* istanbul ignore next */
    cov_23zjo7ru39().s[46]++;
    // Delegate to the organizerService function
    return await (0, organizerService_1.getBroadcastHistory)(organizerId, options);
  } catch (err) {
    /* istanbul ignore next */
    cov_23zjo7ru39().s[47]++;
    console.error('[broadcastService] Unexpected error fetching broadcast history:', err);
    /* istanbul ignore next */
    cov_23zjo7ru39().s[48]++;
    return {
      data: null,
      error:
      /* istanbul ignore next */
      (cov_23zjo7ru39().b[19][0]++, err.message) ||
      /* istanbul ignore next */
      (cov_23zjo7ru39().b[19][1]++, 'An unexpected error occurred'),
      count: 0
    };
  }
};
/* istanbul ignore next */
cov_23zjo7ru39().s[49]++;
exports.getBroadcastHistory = getBroadcastHistory;
/**
 * Get broadcast quota information for an organizer
 *
 * @param organizerId - The ID of the organizer
 * @returns Quota information including used, limit, remaining, and reset date
 */
/* istanbul ignore next */
cov_23zjo7ru39().s[50]++;
const getBroadcastLimitStatus = async organizerId => {
  /* istanbul ignore next */
  cov_23zjo7ru39().f[2]++;
  cov_23zjo7ru39().s[51]++;
  try {
    /* istanbul ignore next */
    cov_23zjo7ru39().s[52]++;
    // Reset the broadcast count if we're in a new month
    await (0, exports.resetBroadcastCount)(organizerId);
    // Delegate to the organizerService function
    /* istanbul ignore next */
    cov_23zjo7ru39().s[53]++;
    return await (0, organizerService_1.getBroadcastQuota)(organizerId);
  } catch (err) {
    /* istanbul ignore next */
    cov_23zjo7ru39().s[54]++;
    console.error('[broadcastService] Unexpected error fetching broadcast quota:', err);
    /* istanbul ignore next */
    cov_23zjo7ru39().s[55]++;
    return {
      data: null,
      error:
      /* istanbul ignore next */
      (cov_23zjo7ru39().b[20][0]++, err.message) ||
      /* istanbul ignore next */
      (cov_23zjo7ru39().b[20][1]++, 'An unexpected error occurred')
    };
  }
};
/* istanbul ignore next */
cov_23zjo7ru39().s[56]++;
exports.getBroadcastLimitStatus = getBroadcastLimitStatus;
/**
 * Reset the broadcast count for an organizer if we're in a new month
 *
 * This function calls the reset_broadcast_count RPC in Supabase
 *
 * @param organizerId - The ID of the organizer
 * @returns Success status and error (if any)
 */
/* istanbul ignore next */
cov_23zjo7ru39().s[57]++;
const resetBroadcastCount = async organizerId => {
  /* istanbul ignore next */
  cov_23zjo7ru39().f[3]++;
  cov_23zjo7ru39().s[58]++;
  try {
    const {
      error
    } =
    /* istanbul ignore next */
    (cov_23zjo7ru39().s[59]++, await supabase_1.supabase.rpc('reset_broadcast_count', {
      p_organizer_id: organizerId
    }));
    /* istanbul ignore next */
    cov_23zjo7ru39().s[60]++;
    if (error) {
      /* istanbul ignore next */
      cov_23zjo7ru39().b[21][0]++;
      cov_23zjo7ru39().s[61]++;
      console.error('[broadcastService] Error resetting broadcast count:', error);
      /* istanbul ignore next */
      cov_23zjo7ru39().s[62]++;
      return {
        success: false,
        error: error.message
      };
    } else
    /* istanbul ignore next */
    {
      cov_23zjo7ru39().b[21][1]++;
    }
    cov_23zjo7ru39().s[63]++;
    return {
      success: true,
      error: null
    };
  } catch (err) {
    /* istanbul ignore next */
    cov_23zjo7ru39().s[64]++;
    console.error('[broadcastService] Unexpected error resetting broadcast count:', err);
    /* istanbul ignore next */
    cov_23zjo7ru39().s[65]++;
    return {
      success: false,
      error:
      /* istanbul ignore next */
      (cov_23zjo7ru39().b[22][0]++, err.message) ||
      /* istanbul ignore next */
      (cov_23zjo7ru39().b[22][1]++, 'An unexpected error occurred')
    };
  }
};
/* istanbul ignore next */
cov_23zjo7ru39().s[66]++;
exports.resetBroadcastCount = resetBroadcastCount;
/**
 * Schedule a broadcast message to be sent at a future date
 * (This is a placeholder for future functionality)
 */
/* istanbul ignore next */
cov_23zjo7ru39().s[67]++;
const scheduleBroadcastMessage = async (organizerId, showId, message, recipients, scheduledDate) => {
  /* istanbul ignore next */
  cov_23zjo7ru39().f[4]++;
  cov_23zjo7ru39().s[68]++;
  // This would be implemented in a future phase
  return {
    success: false,
    error: 'Scheduled broadcasts are not yet implemented'
  };
};
/* istanbul ignore next */
cov_23zjo7ru39().s[69]++;
exports.scheduleBroadcastMessage = scheduleBroadcastMessage;
/**
 * Admin function to override broadcast limits for an organizer
 * This should only be callable with admin/service_role credentials
 */
/* istanbul ignore next */
cov_23zjo7ru39().s[70]++;
const adminSetBroadcastLimit = async (organizerId, newLimit) => {
  /* istanbul ignore next */
  cov_23zjo7ru39().f[5]++;
  cov_23zjo7ru39().s[71]++;
  try {
    /* istanbul ignore next */
    cov_23zjo7ru39().s[72]++;
    // This should be implemented as a Supabase Edge Function with admin privileges
    // For now, it's a placeholder that will always fail for regular users
    // In a real implementation, this would:
    // 1. Verify the caller has admin privileges
    // 2. Update a special field in the profiles table for custom limits
    // 3. Return success
    return {
      success: false,
      error: 'This function requires admin privileges'
    };
  } catch (err) {
    /* istanbul ignore next */
    cov_23zjo7ru39().s[73]++;
    console.error('[broadcastService] Error in adminSetBroadcastLimit:', err);
    /* istanbul ignore next */
    cov_23zjo7ru39().s[74]++;
    return {
      success: false,
      error:
      /* istanbul ignore next */
      (cov_23zjo7ru39().b[23][0]++, err.message) ||
      /* istanbul ignore next */
      (cov_23zjo7ru39().b[23][1]++, 'An unexpected error occurred')
    };
  }
};
/* istanbul ignore next */
cov_23zjo7ru39().s[75]++;
exports.adminSetBroadcastLimit = adminSetBroadcastLimit;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,