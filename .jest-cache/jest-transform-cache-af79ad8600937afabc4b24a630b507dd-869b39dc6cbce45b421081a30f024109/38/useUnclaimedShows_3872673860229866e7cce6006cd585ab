d26422bf0159e0d84694a1e87086d167
"use strict";

/* istanbul ignore next */
function cov_to4rgmctv() {
  var path = "/Users/kevin/card-show-finder/src/hooks/useUnclaimedShows.ts";
  var hash = "224e15c2035cbbc879626861a12df0de6e922b28";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kevin/card-show-finder/src/hooks/useUnclaimedShows.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 35
        }
      },
      "2": {
        start: {
          line: 5,
          column: 16
        },
        end: {
          line: 5,
          column: 32
        }
      },
      "3": {
        start: {
          line: 6,
          column: 28
        },
        end: {
          line: 6,
          column: 68
        }
      },
      "4": {
        start: {
          line: 12,
          column: 26
        },
        end: {
          line: 92,
          column: 1
        }
      },
      "5": {
        start: {
          line: 14,
          column: 48
        },
        end: {
          line: 14,
          column: 73
        }
      },
      "6": {
        start: {
          line: 16,
          column: 38
        },
        end: {
          line: 16,
          column: 65
        }
      },
      "7": {
        start: {
          line: 18,
          column: 30
        },
        end: {
          line: 18,
          column: 57
        }
      },
      "8": {
        start: {
          line: 20,
          column: 32
        },
        end: {
          line: 80,
          column: 5
        }
      },
      "9": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 79,
          column: 9
        }
      },
      "10": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 92
        }
      },
      "11": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 31
        }
      },
      "12": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 24,
          column: 27
        }
      },
      "13": {
        start: {
          line: 25,
          column: 34
        },
        end: {
          line: 25,
          column: 36
        }
      },
      "14": {
        start: {
          line: 26,
          column: 43
        },
        end: {
          line: 26,
          column: 45
        }
      },
      "15": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 40,
          column: 13
        }
      },
      "16": {
        start: {
          line: 31,
          column: 16
        },
        end: {
          line: 31,
          column: 79
        }
      },
      "17": {
        start: {
          line: 32,
          column: 16
        },
        end: {
          line: 34,
          column: 19
        }
      },
      "18": {
        start: {
          line: 35,
          column: 16
        },
        end: {
          line: 35,
          column: 97
        }
      },
      "19": {
        start: {
          line: 38,
          column: 16
        },
        end: {
          line: 38,
          column: 77
        }
      },
      "20": {
        start: {
          line: 39,
          column: 16
        },
        end: {
          line: 39,
          column: 32
        }
      },
      "21": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 52,
          column: 13
        }
      },
      "22": {
        start: {
          line: 45,
          column: 16
        },
        end: {
          line: 45,
          column: 89
        }
      },
      "23": {
        start: {
          line: 46,
          column: 16
        },
        end: {
          line: 46,
          column: 107
        }
      },
      "24": {
        start: {
          line: 47,
          column: 16
        },
        end: {
          line: 47,
          column: 116
        }
      },
      "25": {
        start: {
          line: 50,
          column: 16
        },
        end: {
          line: 50,
          column: 77
        }
      },
      "26": {
        start: {
          line: 51,
          column: 16
        },
        end: {
          line: 51,
          column: 31
        }
      },
      "27": {
        start: {
          line: 54,
          column: 34
        },
        end: {
          line: 57,
          column: 13
        }
      },
      "28": {
        start: {
          line: 55,
          column: 50
        },
        end: {
          line: 55,
          column: 82
        }
      },
      "29": {
        start: {
          line: 56,
          column: 57
        },
        end: {
          line: 56,
          column: 85
        }
      },
      "30": {
        start: {
          line: 59,
          column: 32
        },
        end: {
          line: 66,
          column: 13
        }
      },
      "31": {
        start: {
          line: 60,
          column: 16
        },
        end: {
          line: 63,
          column: 17
        }
      },
      "32": {
        start: {
          line: 61,
          column: 33
        },
        end: {
          line: 61,
          column: 42
        }
      },
      "33": {
        start: {
          line: 62,
          column: 20
        },
        end: {
          line: 62,
          column: 106
        }
      },
      "34": {
        start: {
          line: 64,
          column: 31
        },
        end: {
          line: 64,
          column: 40
        }
      },
      "35": {
        start: {
          line: 65,
          column: 16
        },
        end: {
          line: 65,
          column: 112
        }
      },
      "36": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 74
        }
      },
      "37": {
        start: {
          line: 67,
          column: 41
        },
        end: {
          line: 67,
          column: 72
        }
      },
      "38": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 110
        }
      },
      "39": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 45
        }
      },
      "40": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 72,
          column: 86
        }
      },
      "41": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 114
        }
      },
      "42": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 75,
          column: 34
        }
      },
      "43": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 32
        }
      },
      "44": {
        start: {
          line: 82,
          column: 4
        },
        end: {
          line: 84,
          column: 22
        }
      },
      "45": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 83,
          column: 30
        }
      },
      "46": {
        start: {
          line: 86,
          column: 4
        },
        end: {
          line: 91,
          column: 6
        }
      },
      "47": {
        start: {
          line: 93,
          column: 0
        },
        end: {
          line: 93,
          column: 46
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 12,
            column: 26
          },
          end: {
            line: 12,
            column: 27
          }
        },
        loc: {
          start: {
            line: 12,
            column: 43
          },
          end: {
            line: 92,
            column: 1
          }
        },
        line: 12
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 20,
            column: 32
          },
          end: {
            line: 20,
            column: 33
          }
        },
        loc: {
          start: {
            line: 20,
            column: 44
          },
          end: {
            line: 80,
            column: 5
          }
        },
        line: 20
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 55,
            column: 39
          },
          end: {
            line: 55,
            column: 40
          }
        },
        loc: {
          start: {
            line: 55,
            column: 50
          },
          end: {
            line: 55,
            column: 82
          }
        },
        line: 55
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 56,
            column: 48
          },
          end: {
            line: 56,
            column: 49
          }
        },
        loc: {
          start: {
            line: 56,
            column: 57
          },
          end: {
            line: 56,
            column: 85
          }
        },
        line: 56
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 59,
            column: 32
          },
          end: {
            line: 59,
            column: 33
          }
        },
        loc: {
          start: {
            line: 59,
            column: 42
          },
          end: {
            line: 66,
            column: 13
          }
        },
        line: 59
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 67,
            column: 31
          },
          end: {
            line: 67,
            column: 32
          }
        },
        loc: {
          start: {
            line: 67,
            column: 41
          },
          end: {
            line: 67,
            column: 72
          }
        },
        line: 67
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 82,
            column: 27
          },
          end: {
            line: 82,
            column: 28
          }
        },
        loc: {
          start: {
            line: 82,
            column: 33
          },
          end: {
            line: 84,
            column: 5
          }
        },
        line: 82
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 60,
            column: 16
          },
          end: {
            line: 63,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 16
          },
          end: {
            line: 63,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "1": {
        loc: {
          start: {
            line: 62,
            column: 27
          },
          end: {
            line: 62,
            column: 105
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 62,
            column: 45
          },
          end: {
            line: 62,
            column: 79
          }
        }, {
          start: {
            line: 62,
            column: 82
          },
          end: {
            line: 62,
            column: 105
          }
        }],
        line: 62
      },
      "2": {
        loc: {
          start: {
            line: 65,
            column: 23
          },
          end: {
            line: 65,
            column: 111
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 65,
            column: 46
          },
          end: {
            line: 65,
            column: 85
          }
        }, {
          start: {
            line: 65,
            column: 88
          },
          end: {
            line: 65,
            column: 111
          }
        }],
        line: 65
      },
      "3": {
        loc: {
          start: {
            line: 73,
            column: 21
          },
          end: {
            line: 73,
            column: 112
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 73,
            column: 44
          },
          end: {
            line: 73,
            column: 47
          }
        }, {
          start: {
            line: 73,
            column: 50
          },
          end: {
            line: 73,
            column: 112
          }
        }],
        line: 73
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/kevin/card-show-finder/src/hooks/useUnclaimedShows.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/kevin/card-show-finder/src/hooks/useUnclaimedShows.ts"],
      sourcesContent: ["// src/hooks/useUnclaimedShows.ts\nimport { useState, useEffect } from 'react';\nimport { ShowSeries, Show } from '../types';\nimport { showSeriesService } from '../services/showSeriesService';\n\n// Interface for combined unclaimed items (shows or series)\nexport interface UnclaimedItem {\n  type: 'series' | 'show';\n  data: ShowSeries | Show;\n}\n\n/**\n * Custom hook to fetch and manage unclaimed shows data\n * @param organizerId The organizer ID (used for claiming shows later)\n * @returns Object containing unclaimed items, loading state, and error state\n */\nexport const useUnclaimedShows = (organizerId: string) => {\n  // State for unclaimed items (shows and series)\n  const [unclaimedItems, setUnclaimedItems] = useState<UnclaimedItem[]>([]);\n  // Loading state - start with true as we'll fetch data immediately\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  // Error state - null when no errors\n  const [error, setError] = useState<Error | null>(null);\n\n  // Function to fetch unclaimed shows and series\n  const fetchUnclaimedShows = async () => {\n    try {\n      console.log('[useUnclaimedShows] Starting to fetch unclaimed shows and series');\n      setIsLoading(true);\n      setError(null);\n      \n      let unclaimedSeries: ShowSeries[] = [];\n      let unclaimedStandaloneShows: Show[] = [];\n\n      /* -----------------------------------------\n       * 1\uFE0F\u20E3  Fetch series \u2013 isolate failures here\n       * ----------------------------------------*/\n      try {\n        console.log('[useUnclaimedShows] Attempting to fetch series\u2026');\n        unclaimedSeries = await showSeriesService.getAllShowSeries({\n          organizerId: null\n        });\n        console.log('[useUnclaimedShows] Successfully fetched series:', unclaimedSeries);\n      } catch (seriesErr) {\n        console.error('CRASHED INSIDE: getAllShowSeries', seriesErr);\n        throw seriesErr; // bubble up to outer catch\n      }\n\n      /* -------------------------------------------------\n       * 2\uFE0F\u20E3  Fetch standalone shows \u2013 isolate failures here\n       * ------------------------------------------------*/\n      try {\n        console.log('[useUnclaimedShows] Attempting to fetch standalone shows\u2026');\n        unclaimedStandaloneShows = await showSeriesService.getUnclaimedShows();\n        console.log('[useUnclaimedShows] Successfully fetched standalone shows:', unclaimedStandaloneShows);\n      } catch (showsErr) {\n        console.error('CRASHED INSIDE: getUnclaimedShows', showsErr);\n        throw showsErr; // bubble up to outer catch\n      }\n\n      // Combine and map the two lists\n      const combinedItems = [\n        ...unclaimedSeries.map(series => ({ type: 'series', data: series })),\n        ...unclaimedStandaloneShows.map(show => ({ type: 'show', data: show }))\n      ];\n      \n      // Sort by date (most recent first)\n      const getItemDate = (item: UnclaimedItem): number => {\n        if (item.type === 'show') {\n          const show = item.data as Show;\n          return show?.startDate ? new Date(show.startDate).getTime() : Number.MAX_SAFE_INTEGER;\n        }\n        const series = item.data as ShowSeries;\n        return series?.nextShowDate ? new Date(series.nextShowDate).getTime() : Number.MAX_SAFE_INTEGER;\n      };\n\n      combinedItems.sort((a, b) => getItemDate(a) - getItemDate(b));\n      \n      console.log(`[useUnclaimedShows] Fetch complete. Total unclaimed items: ${combinedItems.length}`);\n      setUnclaimedItems(combinedItems);\n      \n    } catch (err) {\n      console.error('[useUnclaimedShows] Error fetching unclaimed shows:', err);\n      setError(err instanceof Error ? err : new Error('Failed to load unclaimed shows. Please try again.'));\n      // Set empty array on error to avoid undefined\n      setUnclaimedItems([]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  // Fetch data when the component mounts or when organizerId changes\n  useEffect(() => {\n    fetchUnclaimedShows();\n  }, [organizerId]);\n  \n  // Return all states and a function to refresh the data\n  return { \n    unclaimedItems, \n    isLoading, \n    error,\n    refreshUnclaimedShows: fetchUnclaimedShows \n  };\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "224e15c2035cbbc879626861a12df0de6e922b28"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_to4rgmctv = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_to4rgmctv();
cov_to4rgmctv().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_to4rgmctv().s[1]++;
exports.useUnclaimedShows = void 0;
// src/hooks/useUnclaimedShows.ts
const react_1 =
/* istanbul ignore next */
(cov_to4rgmctv().s[2]++, require("react"));
const showSeriesService_1 =
/* istanbul ignore next */
(cov_to4rgmctv().s[3]++, require("../services/showSeriesService"));
/**
 * Custom hook to fetch and manage unclaimed shows data
 * @param organizerId The organizer ID (used for claiming shows later)
 * @returns Object containing unclaimed items, loading state, and error state
 */
/* istanbul ignore next */
cov_to4rgmctv().s[4]++;
const useUnclaimedShows = organizerId => {
  /* istanbul ignore next */
  cov_to4rgmctv().f[0]++;
  // State for unclaimed items (shows and series)
  const [unclaimedItems, setUnclaimedItems] =
  /* istanbul ignore next */
  (cov_to4rgmctv().s[5]++, (0, react_1.useState)([]));
  // Loading state - start with true as we'll fetch data immediately
  const [isLoading, setIsLoading] =
  /* istanbul ignore next */
  (cov_to4rgmctv().s[6]++, (0, react_1.useState)(true));
  // Error state - null when no errors
  const [error, setError] =
  /* istanbul ignore next */
  (cov_to4rgmctv().s[7]++, (0, react_1.useState)(null));
  // Function to fetch unclaimed shows and series
  /* istanbul ignore next */
  cov_to4rgmctv().s[8]++;
  const fetchUnclaimedShows = async () => {
    /* istanbul ignore next */
    cov_to4rgmctv().f[1]++;
    cov_to4rgmctv().s[9]++;
    try {
      /* istanbul ignore next */
      cov_to4rgmctv().s[10]++;
      console.log('[useUnclaimedShows] Starting to fetch unclaimed shows and series');
      /* istanbul ignore next */
      cov_to4rgmctv().s[11]++;
      setIsLoading(true);
      /* istanbul ignore next */
      cov_to4rgmctv().s[12]++;
      setError(null);
      let unclaimedSeries =
      /* istanbul ignore next */
      (cov_to4rgmctv().s[13]++, []);
      let unclaimedStandaloneShows =
      /* istanbul ignore next */
      (cov_to4rgmctv().s[14]++, []);
      /* -----------------------------------------
       * 1️⃣  Fetch series – isolate failures here
       * ----------------------------------------*/
      /* istanbul ignore next */
      cov_to4rgmctv().s[15]++;
      try {
        /* istanbul ignore next */
        cov_to4rgmctv().s[16]++;
        console.log('[useUnclaimedShows] Attempting to fetch series…');
        /* istanbul ignore next */
        cov_to4rgmctv().s[17]++;
        unclaimedSeries = await showSeriesService_1.showSeriesService.getAllShowSeries({
          organizerId: null
        });
        /* istanbul ignore next */
        cov_to4rgmctv().s[18]++;
        console.log('[useUnclaimedShows] Successfully fetched series:', unclaimedSeries);
      } catch (seriesErr) {
        /* istanbul ignore next */
        cov_to4rgmctv().s[19]++;
        console.error('CRASHED INSIDE: getAllShowSeries', seriesErr);
        /* istanbul ignore next */
        cov_to4rgmctv().s[20]++;
        throw seriesErr; // bubble up to outer catch
      }
      /* -------------------------------------------------
       * 2️⃣  Fetch standalone shows – isolate failures here
       * ------------------------------------------------*/
      /* istanbul ignore next */
      cov_to4rgmctv().s[21]++;
      try {
        /* istanbul ignore next */
        cov_to4rgmctv().s[22]++;
        console.log('[useUnclaimedShows] Attempting to fetch standalone shows…');
        /* istanbul ignore next */
        cov_to4rgmctv().s[23]++;
        unclaimedStandaloneShows = await showSeriesService_1.showSeriesService.getUnclaimedShows();
        /* istanbul ignore next */
        cov_to4rgmctv().s[24]++;
        console.log('[useUnclaimedShows] Successfully fetched standalone shows:', unclaimedStandaloneShows);
      } catch (showsErr) {
        /* istanbul ignore next */
        cov_to4rgmctv().s[25]++;
        console.error('CRASHED INSIDE: getUnclaimedShows', showsErr);
        /* istanbul ignore next */
        cov_to4rgmctv().s[26]++;
        throw showsErr; // bubble up to outer catch
      }
      // Combine and map the two lists
      const combinedItems =
      /* istanbul ignore next */
      (cov_to4rgmctv().s[27]++, [...unclaimedSeries.map(series => {
        /* istanbul ignore next */
        cov_to4rgmctv().f[2]++;
        cov_to4rgmctv().s[28]++;
        return {
          type: 'series',
          data: series
        };
      }), ...unclaimedStandaloneShows.map(show => {
        /* istanbul ignore next */
        cov_to4rgmctv().f[3]++;
        cov_to4rgmctv().s[29]++;
        return {
          type: 'show',
          data: show
        };
      })]);
      // Sort by date (most recent first)
      /* istanbul ignore next */
      cov_to4rgmctv().s[30]++;
      const getItemDate = item => {
        /* istanbul ignore next */
        cov_to4rgmctv().f[4]++;
        cov_to4rgmctv().s[31]++;
        if (item.type === 'show') {
          /* istanbul ignore next */
          cov_to4rgmctv().b[0][0]++;
          const show =
          /* istanbul ignore next */
          (cov_to4rgmctv().s[32]++, item.data);
          /* istanbul ignore next */
          cov_to4rgmctv().s[33]++;
          return show?.startDate ?
          /* istanbul ignore next */
          (cov_to4rgmctv().b[1][0]++, new Date(show.startDate).getTime()) :
          /* istanbul ignore next */
          (cov_to4rgmctv().b[1][1]++, Number.MAX_SAFE_INTEGER);
        } else
        /* istanbul ignore next */
        {
          cov_to4rgmctv().b[0][1]++;
        }
        const series =
        /* istanbul ignore next */
        (cov_to4rgmctv().s[34]++, item.data);
        /* istanbul ignore next */
        cov_to4rgmctv().s[35]++;
        return series?.nextShowDate ?
        /* istanbul ignore next */
        (cov_to4rgmctv().b[2][0]++, new Date(series.nextShowDate).getTime()) :
        /* istanbul ignore next */
        (cov_to4rgmctv().b[2][1]++, Number.MAX_SAFE_INTEGER);
      };
      /* istanbul ignore next */
      cov_to4rgmctv().s[36]++;
      combinedItems.sort((a, b) => {
        /* istanbul ignore next */
        cov_to4rgmctv().f[5]++;
        cov_to4rgmctv().s[37]++;
        return getItemDate(a) - getItemDate(b);
      });
      /* istanbul ignore next */
      cov_to4rgmctv().s[38]++;
      console.log(`[useUnclaimedShows] Fetch complete. Total unclaimed items: ${combinedItems.length}`);
      /* istanbul ignore next */
      cov_to4rgmctv().s[39]++;
      setUnclaimedItems(combinedItems);
    } catch (err) {
      /* istanbul ignore next */
      cov_to4rgmctv().s[40]++;
      console.error('[useUnclaimedShows] Error fetching unclaimed shows:', err);
      /* istanbul ignore next */
      cov_to4rgmctv().s[41]++;
      setError(err instanceof Error ?
      /* istanbul ignore next */
      (cov_to4rgmctv().b[3][0]++, err) :
      /* istanbul ignore next */
      (cov_to4rgmctv().b[3][1]++, new Error('Failed to load unclaimed shows. Please try again.')));
      // Set empty array on error to avoid undefined
      /* istanbul ignore next */
      cov_to4rgmctv().s[42]++;
      setUnclaimedItems([]);
    } finally {
      /* istanbul ignore next */
      cov_to4rgmctv().s[43]++;
      setIsLoading(false);
    }
  };
  // Fetch data when the component mounts or when organizerId changes
  /* istanbul ignore next */
  cov_to4rgmctv().s[44]++;
  (0, react_1.useEffect)(() => {
    /* istanbul ignore next */
    cov_to4rgmctv().f[6]++;
    cov_to4rgmctv().s[45]++;
    fetchUnclaimedShows();
  }, [organizerId]);
  // Return all states and a function to refresh the data
  /* istanbul ignore next */
  cov_to4rgmctv().s[46]++;
  return {
    unclaimedItems,
    isLoading,
    error,
    refreshUnclaimedShows: fetchUnclaimedShows
  };
};
/* istanbul ignore next */
cov_to4rgmctv().s[47]++;
exports.useUnclaimedShows = useUnclaimedShows;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,