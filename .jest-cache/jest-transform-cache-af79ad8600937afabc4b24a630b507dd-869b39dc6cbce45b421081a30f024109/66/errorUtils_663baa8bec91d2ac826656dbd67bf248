e43548dde64b8ee8b306d09b341dd79e
"use strict";

/* istanbul ignore next */
function cov_2n6spums0c() {
  var path = "/Users/kevin/card-show-finder/src/utils/errorUtils.ts";
  var hash = "1ab8ea6028010cac8979df6268d82d7ba9328fc7";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kevin/card-show-finder/src/utils/errorUtils.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 42
        }
      },
      "2": {
        start: {
          line: 4,
          column: 0
        },
        end: {
          line: 4,
          column: 32
        }
      },
      "3": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 40
        }
      },
      "4": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 46
        }
      },
      "5": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 7,
          column: 52
        }
      },
      "6": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 44
        }
      },
      "7": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 44
        }
      },
      "8": {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 10,
          column: 40
        }
      },
      "9": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 32
        }
      },
      "10": {
        start: {
          line: 12,
          column: 23
        },
        end: {
          line: 12,
          column: 46
        }
      },
      "11": {
        start: {
          line: 13,
          column: 23
        },
        end: {
          line: 13,
          column: 58
        }
      },
      "12": {
        start: {
          line: 41,
          column: 30
        },
        end: {
          line: 41,
          column: 57
        }
      },
      "13": {
        start: {
          line: 42,
          column: 23
        },
        end: {
          line: 44,
          column: 10
        }
      },
      "14": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 23
        }
      },
      "15": {
        start: {
          line: 45,
          column: 24
        },
        end: {
          line: 50,
          column: 10
        }
      },
      "16": {
        start: {
          line: 46,
          column: 25
        },
        end: {
          line: 46,
          column: 78
        }
      },
      "17": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 27
        }
      },
      "18": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 47
        }
      },
      "19": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 24
        }
      },
      "20": {
        start: {
          line: 51,
          column: 4
        },
        end: {
          line: 51,
          column: 56
        }
      },
      "21": {
        start: {
          line: 76,
          column: 28
        },
        end: {
          line: 76,
          column: 55
        }
      },
      "22": {
        start: {
          line: 77,
          column: 34
        },
        end: {
          line: 77,
          column: 62
        }
      },
      "23": {
        start: {
          line: 78,
          column: 30
        },
        end: {
          line: 78,
          column: 57
        }
      },
      "24": {
        start: {
          line: 79,
          column: 20
        },
        end: {
          line: 98,
          column: 75
        }
      },
      "25": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "26": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 29
        }
      },
      "27": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 27
        }
      },
      "28": {
        start: {
          line: 83,
          column: 27
        },
        end: {
          line: 83,
          column: 42
        }
      },
      "29": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 28
        }
      },
      "30": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 40
        }
      },
      "31": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 26
        }
      },
      "32": {
        start: {
          line: 89,
          column: 29
        },
        end: {
          line: 89,
          column: 95
        }
      },
      "33": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 31
        }
      },
      "34": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 51
        }
      },
      "35": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 40
        }
      },
      "36": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 24
        }
      },
      "37": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 30
        }
      },
      "38": {
        start: {
          line: 99,
          column: 4
        },
        end: {
          line: 103,
          column: 42
        }
      },
      "39": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 102,
          column: 9
        }
      },
      "40": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 101,
          column: 22
        }
      },
      "41": {
        start: {
          line: 104,
          column: 4
        },
        end: {
          line: 104,
          column: 45
        }
      },
      "42": {
        start: {
          line: 119,
          column: 21
        },
        end: {
          line: 126,
          column: 9
        }
      },
      "43": {
        start: {
          line: 127,
          column: 4
        },
        end: {
          line: 127,
          column: 43
        }
      },
      "44": {
        start: {
          line: 128,
          column: 4
        },
        end: {
          line: 128,
          column: 157
        }
      },
      "45": {
        start: {
          line: 129,
          column: 4
        },
        end: {
          line: 129,
          column: 20
        }
      },
      "46": {
        start: {
          line: 152,
          column: 4
        },
        end: {
          line: 172,
          column: 6
        }
      },
      "47": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 171,
          column: 9
        }
      },
      "48": {
        start: {
          line: 154,
          column: 27
        },
        end: {
          line: 154,
          column: 49
        }
      },
      "49": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 155,
          column: 51
        }
      },
      "50": {
        start: {
          line: 158,
          column: 29
        },
        end: {
          line: 162,
          column: 14
        }
      },
      "51": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 163,
          column: 51
        }
      },
      "52": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 166,
          column: 13
        }
      },
      "53": {
        start: {
          line: 165,
          column: 16
        },
        end: {
          line: 165,
          column: 42
        }
      },
      "54": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 169,
          column: 13
        }
      },
      "55": {
        start: {
          line: 168,
          column: 16
        },
        end: {
          line: 168,
          column: 41
        }
      },
      "56": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 55
        }
      },
      "57": {
        start: {
          line: 195,
          column: 4
        },
        end: {
          line: 216,
          column: 5
        }
      },
      "58": {
        start: {
          line: 196,
          column: 21
        },
        end: {
          line: 196,
          column: 37
        }
      },
      "59": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 199,
          column: 9
        }
      },
      "60": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 198,
          column: 74
        }
      },
      "61": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 202,
          column: 9
        }
      },
      "62": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 201,
          column: 36
        }
      },
      "63": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 203,
          column: 39
        }
      },
      "64": {
        start: {
          line: 206,
          column: 25
        },
        end: {
          line: 209,
          column: 10
        }
      },
      "65": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 210,
          column: 47
        }
      },
      "66": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 211,
          column: 33
        }
      },
      "67": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 214,
          column: 9
        }
      },
      "68": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 213,
          column: 38
        }
      },
      "69": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 215,
          column: 51
        }
      },
      "70": {
        start: {
          line: 238,
          column: 19
        },
        end: {
          line: 238,
          column: 21
        }
      },
      "71": {
        start: {
          line: 239,
          column: 4
        },
        end: {
          line: 248,
          column: 7
        }
      },
      "72": {
        start: {
          line: 240,
          column: 26
        },
        end: {
          line: 240,
          column: 41
        }
      },
      "73": {
        start: {
          line: 241,
          column: 22
        },
        end: {
          line: 241,
          column: 31
        }
      },
      "74": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 247,
          column: 9
        }
      },
      "75": {
        start: {
          line: 243,
          column: 26
        },
        end: {
          line: 243,
          column: 48
        }
      },
      "76": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 246,
          column: 13
        }
      },
      "77": {
        start: {
          line: 245,
          column: 16
        },
        end: {
          line: 245,
          column: 36
        }
      },
      "78": {
        start: {
          line: 249,
          column: 4
        },
        end: {
          line: 252,
          column: 6
        }
      },
      "79": {
        start: {
          line: 275,
          column: 4
        },
        end: {
          line: 297,
          column: 5
        }
      },
      "80": {
        start: {
          line: 276,
          column: 21
        },
        end: {
          line: 276,
          column: 37
        }
      },
      "81": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 279,
          column: 9
        }
      },
      "82": {
        start: {
          line: 278,
          column: 12
        },
        end: {
          line: 278,
          column: 36
        }
      },
      "83": {
        start: {
          line: 280,
          column: 8
        },
        end: {
          line: 280,
          column: 39
        }
      },
      "84": {
        start: {
          line: 283,
          column: 25
        },
        end: {
          line: 287,
          column: 10
        }
      },
      "85": {
        start: {
          line: 288,
          column: 8
        },
        end: {
          line: 288,
          column: 47
        }
      },
      "86": {
        start: {
          line: 289,
          column: 29
        },
        end: {
          line: 291,
          column: 86
        }
      },
      "87": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 292,
          column: 65
        }
      },
      "88": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 295,
          column: 9
        }
      },
      "89": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 294,
          column: 38
        }
      },
      "90": {
        start: {
          line: 296,
          column: 8
        },
        end: {
          line: 296,
          column: 51
        }
      },
      "91": {
        start: {
          line: 321,
          column: 23
        },
        end: {
          line: 321,
          column: 46
        }
      },
      "92": {
        start: {
          line: 322,
          column: 25
        },
        end: {
          line: 322,
          column: 53
        }
      },
      "93": {
        start: {
          line: 323,
          column: 21
        },
        end: {
          line: 323,
          column: 46
        }
      },
      "94": {
        start: {
          line: 324,
          column: 28
        },
        end: {
          line: 324,
          column: 93
        }
      },
      "95": {
        start: {
          line: 325,
          column: 19
        },
        end: {
          line: 325,
          column: 20
        }
      },
      "96": {
        start: {
          line: 326,
          column: 16
        },
        end: {
          line: 326,
          column: 28
        }
      },
      "97": {
        start: {
          line: 327,
          column: 4
        },
        end: {
          line: 361,
          column: 5
        }
      },
      "98": {
        start: {
          line: 328,
          column: 8
        },
        end: {
          line: 360,
          column: 9
        }
      },
      "99": {
        start: {
          line: 329,
          column: 25
        },
        end: {
          line: 329,
          column: 42
        }
      },
      "100": {
        start: {
          line: 330,
          column: 12
        },
        end: {
          line: 330,
          column: 53
        }
      },
      "101": {
        start: {
          line: 333,
          column: 12
        },
        end: {
          line: 333,
          column: 23
        }
      },
      "102": {
        start: {
          line: 334,
          column: 12
        },
        end: {
          line: 342,
          column: 13
        }
      },
      "103": {
        start: {
          line: 335,
          column: 33
        },
        end: {
          line: 339,
          column: 18
        }
      },
      "104": {
        start: {
          line: 340,
          column: 16
        },
        end: {
          line: 340,
          column: 55
        }
      },
      "105": {
        start: {
          line: 341,
          column: 16
        },
        end: {
          line: 341,
          column: 69
        }
      },
      "106": {
        start: {
          line: 343,
          column: 29
        },
        end: {
          line: 347,
          column: 14
        }
      },
      "107": {
        start: {
          line: 349,
          column: 12
        },
        end: {
          line: 352,
          column: 13
        }
      },
      "108": {
        start: {
          line: 350,
          column: 16
        },
        end: {
          line: 350,
          column: 55
        }
      },
      "109": {
        start: {
          line: 351,
          column: 16
        },
        end: {
          line: 351,
          column: 69
        }
      },
      "110": {
        start: {
          line: 353,
          column: 12
        },
        end: {
          line: 355,
          column: 13
        }
      },
      "111": {
        start: {
          line: 354,
          column: 16
        },
        end: {
          line: 354,
          column: 49
        }
      },
      "112": {
        start: {
          line: 357,
          column: 12
        },
        end: {
          line: 357,
          column: 71
        }
      },
      "113": {
        start: {
          line: 357,
          column: 43
        },
        end: {
          line: 357,
          column: 69
        }
      },
      "114": {
        start: {
          line: 359,
          column: 12
        },
        end: {
          line: 359,
          column: 80
        }
      },
      "115": {
        start: {
          line: 363,
          column: 25
        },
        end: {
          line: 369,
          column: 5
        }
      },
      "116": {
        start: {
          line: 370,
          column: 4
        },
        end: {
          line: 370,
          column: 47
        }
      },
      "117": {
        start: {
          line: 371,
          column: 4
        },
        end: {
          line: 371,
          column: 61
        }
      }
    },
    fnMap: {
      "0": {
        name: "useErrorHandler",
        decl: {
          start: {
            line: 40,
            column: 9
          },
          end: {
            line: 40,
            column: 24
          }
        },
        loc: {
          start: {
            line: 40,
            column: 27
          },
          end: {
            line: 52,
            column: 1
          }
        },
        line: 40
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 42,
            column: 48
          },
          end: {
            line: 42,
            column: 49
          }
        },
        loc: {
          start: {
            line: 42,
            column: 54
          },
          end: {
            line: 44,
            column: 5
          }
        },
        line: 42
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 45,
            column: 49
          },
          end: {
            line: 45,
            column: 50
          }
        },
        loc: {
          start: {
            line: 45,
            column: 67
          },
          end: {
            line: 50,
            column: 5
          }
        },
        line: 45
      },
      "3": {
        name: "useApiCall",
        decl: {
          start: {
            line: 75,
            column: 9
          },
          end: {
            line: 75,
            column: 19
          }
        },
        loc: {
          start: {
            line: 75,
            column: 43
          },
          end: {
            line: 105,
            column: 1
          }
        },
        line: 75
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 79,
            column: 45
          },
          end: {
            line: 79,
            column: 46
          }
        },
        loc: {
          start: {
            line: 79,
            column: 57
          },
          end: {
            line: 98,
            column: 5
          }
        },
        line: 79
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 99,
            column: 27
          },
          end: {
            line: 99,
            column: 28
          }
        },
        loc: {
          start: {
            line: 99,
            column: 33
          },
          end: {
            line: 103,
            column: 5
          }
        },
        line: 99
      },
      "6": {
        name: "showErrorAlert",
        decl: {
          start: {
            line: 118,
            column: 9
          },
          end: {
            line: 118,
            column: 23
          }
        },
        loc: {
          start: {
            line: 118,
            column: 45
          },
          end: {
            line: 130,
            column: 1
          }
        },
        line: 118
      },
      "7": {
        name: "createSafeApiCall",
        decl: {
          start: {
            line: 151,
            column: 9
          },
          end: {
            line: 151,
            column: 26
          }
        },
        loc: {
          start: {
            line: 151,
            column: 50
          },
          end: {
            line: 173,
            column: 1
          }
        },
        line: 151
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 152,
            column: 11
          },
          end: {
            line: 152,
            column: 12
          }
        },
        loc: {
          start: {
            line: 152,
            column: 30
          },
          end: {
            line: 172,
            column: 5
          }
        },
        line: 152
      },
      "9": {
        name: "handleFormSubmission",
        decl: {
          start: {
            line: 194,
            column: 15
          },
          end: {
            line: 194,
            column: 35
          }
        },
        loc: {
          start: {
            line: 194,
            column: 60
          },
          end: {
            line: 217,
            column: 1
          }
        },
        line: 194
      },
      "10": {
        name: "validateFormData",
        decl: {
          start: {
            line: 237,
            column: 9
          },
          end: {
            line: 237,
            column: 25
          }
        },
        loc: {
          start: {
            line: 237,
            column: 44
          },
          end: {
            line: 253,
            column: 1
          }
        },
        line: 237
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 239,
            column: 36
          },
          end: {
            line: 239,
            column: 37
          }
        },
        loc: {
          start: {
            line: 239,
            column: 45
          },
          end: {
            line: 248,
            column: 5
          }
        },
        line: 239
      },
      "12": {
        name: "handleFileUpload",
        decl: {
          start: {
            line: 274,
            column: 15
          },
          end: {
            line: 274,
            column: 31
          }
        },
        loc: {
          start: {
            line: 274,
            column: 56
          },
          end: {
            line: 298,
            column: 1
          }
        },
        line: 274
      },
      "13": {
        name: "retryOperation",
        decl: {
          start: {
            line: 320,
            column: 15
          },
          end: {
            line: 320,
            column: 29
          }
        },
        loc: {
          start: {
            line: 320,
            column: 55
          },
          end: {
            line: 372,
            column: 1
          }
        },
        line: 320
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 357,
            column: 30
          },
          end: {
            line: 357,
            column: 31
          }
        },
        loc: {
          start: {
            line: 357,
            column: 43
          },
          end: {
            line: 357,
            column: 69
          }
        },
        line: 357
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 75,
            column: 29
          },
          end: {
            line: 75,
            column: 41
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 75,
            column: 39
          },
          end: {
            line: 75,
            column: 41
          }
        }],
        line: 75
      },
      "1": {
        loc: {
          start: {
            line: 100,
            column: 8
          },
          end: {
            line: 102,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 100,
            column: 8
          },
          end: {
            line: 102,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 100
      },
      "2": {
        loc: {
          start: {
            line: 118,
            column: 31
          },
          end: {
            line: 118,
            column: 43
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 118,
            column: 41
          },
          end: {
            line: 118,
            column: 43
          }
        }],
        line: 118
      },
      "3": {
        loc: {
          start: {
            line: 119,
            column: 21
          },
          end: {
            line: 126,
            column: 9
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 120,
            column: 10
          },
          end: {
            line: 120,
            column: 73
          }
        }, {
          start: {
            line: 121,
            column: 10
          },
          end: {
            line: 126,
            column: 9
          }
        }],
        line: 119
      },
      "4": {
        loc: {
          start: {
            line: 119,
            column: 21
          },
          end: {
            line: 119,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 119,
            column: 21
          },
          end: {
            line: 119,
            column: 43
          }
        }, {
          start: {
            line: 119,
            column: 48
          },
          end: {
            line: 119,
            column: 53
          }
        }, {
          start: {
            line: 119,
            column: 57
          },
          end: {
            line: 119,
            column: 82
          }
        }],
        line: 119
      },
      "5": {
        loc: {
          start: {
            line: 128,
            column: 31
          },
          end: {
            line: 128,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 128,
            column: 31
          },
          end: {
            line: 128,
            column: 44
          }
        }, {
          start: {
            line: 128,
            column: 48
          },
          end: {
            line: 128,
            column: 55
          }
        }],
        line: 128
      },
      "6": {
        loc: {
          start: {
            line: 151,
            column: 36
          },
          end: {
            line: 151,
            column: 48
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 151,
            column: 46
          },
          end: {
            line: 151,
            column: 48
          }
        }],
        line: 151
      },
      "7": {
        loc: {
          start: {
            line: 164,
            column: 12
          },
          end: {
            line: 166,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 164,
            column: 12
          },
          end: {
            line: 166,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 164
      },
      "8": {
        loc: {
          start: {
            line: 167,
            column: 12
          },
          end: {
            line: 169,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 167,
            column: 12
          },
          end: {
            line: 169,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 167
      },
      "9": {
        loc: {
          start: {
            line: 194,
            column: 46
          },
          end: {
            line: 194,
            column: 58
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 194,
            column: 56
          },
          end: {
            line: 194,
            column: 58
          }
        }],
        line: 194
      },
      "10": {
        loc: {
          start: {
            line: 197,
            column: 8
          },
          end: {
            line: 199,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 197,
            column: 8
          },
          end: {
            line: 199,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 197
      },
      "11": {
        loc: {
          start: {
            line: 200,
            column: 8
          },
          end: {
            line: 202,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 200,
            column: 8
          },
          end: {
            line: 202,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 200
      },
      "12": {
        loc: {
          start: {
            line: 212,
            column: 8
          },
          end: {
            line: 214,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 212,
            column: 8
          },
          end: {
            line: 214,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 212
      },
      "13": {
        loc: {
          start: {
            line: 242,
            column: 8
          },
          end: {
            line: 247,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 242,
            column: 8
          },
          end: {
            line: 247,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 242
      },
      "14": {
        loc: {
          start: {
            line: 244,
            column: 12
          },
          end: {
            line: 246,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 244,
            column: 12
          },
          end: {
            line: 246,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 244
      },
      "15": {
        loc: {
          start: {
            line: 274,
            column: 42
          },
          end: {
            line: 274,
            column: 54
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 274,
            column: 52
          },
          end: {
            line: 274,
            column: 54
          }
        }],
        line: 274
      },
      "16": {
        loc: {
          start: {
            line: 277,
            column: 8
          },
          end: {
            line: 279,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 277,
            column: 8
          },
          end: {
            line: 279,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 277
      },
      "17": {
        loc: {
          start: {
            line: 286,
            column: 22
          },
          end: {
            line: 286,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 286,
            column: 22
          },
          end: {
            line: 286,
            column: 38
          }
        }, {
          start: {
            line: 286,
            column: 42
          },
          end: {
            line: 286,
            column: 51
          }
        }],
        line: 286
      },
      "18": {
        loc: {
          start: {
            line: 289,
            column: 29
          },
          end: {
            line: 291,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 290,
            column: 14
          },
          end: {
            line: 290,
            column: 109
          }
        }, {
          start: {
            line: 291,
            column: 14
          },
          end: {
            line: 291,
            column: 86
          }
        }],
        line: 289
      },
      "19": {
        loc: {
          start: {
            line: 293,
            column: 8
          },
          end: {
            line: 295,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 293,
            column: 8
          },
          end: {
            line: 295,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 293
      },
      "20": {
        loc: {
          start: {
            line: 320,
            column: 41
          },
          end: {
            line: 320,
            column: 53
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 320,
            column: 51
          },
          end: {
            line: 320,
            column: 53
          }
        }],
        line: 320
      },
      "21": {
        loc: {
          start: {
            line: 321,
            column: 23
          },
          end: {
            line: 321,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 321,
            column: 23
          },
          end: {
            line: 321,
            column: 41
          }
        }, {
          start: {
            line: 321,
            column: 45
          },
          end: {
            line: 321,
            column: 46
          }
        }],
        line: 321
      },
      "22": {
        loc: {
          start: {
            line: 322,
            column: 25
          },
          end: {
            line: 322,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 322,
            column: 25
          },
          end: {
            line: 322,
            column: 45
          }
        }, {
          start: {
            line: 322,
            column: 49
          },
          end: {
            line: 322,
            column: 53
          }
        }],
        line: 322
      },
      "23": {
        loc: {
          start: {
            line: 323,
            column: 21
          },
          end: {
            line: 323,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 323,
            column: 21
          },
          end: {
            line: 323,
            column: 37
          }
        }, {
          start: {
            line: 323,
            column: 41
          },
          end: {
            line: 323,
            column: 46
          }
        }],
        line: 323
      },
      "24": {
        loc: {
          start: {
            line: 324,
            column: 28
          },
          end: {
            line: 324,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 324,
            column: 28
          },
          end: {
            line: 324,
            column: 51
          }
        }, {
          start: {
            line: 324,
            column: 55
          },
          end: {
            line: 324,
            column: 93
          }
        }],
        line: 324
      },
      "25": {
        loc: {
          start: {
            line: 334,
            column: 12
          },
          end: {
            line: 342,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 334,
            column: 12
          },
          end: {
            line: 342,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 334
      },
      "26": {
        loc: {
          start: {
            line: 349,
            column: 12
          },
          end: {
            line: 352,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 349,
            column: 12
          },
          end: {
            line: 352,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 349
      },
      "27": {
        loc: {
          start: {
            line: 353,
            column: 12
          },
          end: {
            line: 355,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 353,
            column: 12
          },
          end: {
            line: 355,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 353
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0],
      "3": [0, 0],
      "4": [0, 0, 0],
      "5": [0, 0],
      "6": [0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/kevin/card-show-finder/src/utils/errorUtils.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/kevin/card-show-finder/src/utils/errorUtils.ts"],
      sourcesContent: ["import React, { useState, useCallback, useEffect } from 'react';\nimport { Alert } from 'react-native';\nimport {\n  AppError,\n  ErrorCategory,\n  ErrorSeverity,\n  getUserFriendlyMessage,\n  handleSupabaseError,\n  logError,\n  withErrorHandling\n} from '../services/errorService';\n\n/**\n * React hook for handling errors in components\n * \n * @example\n * ```tsx\n * const MyComponent = () => {\n *   const { error, setError, clearError, handleError } = useErrorHandler();\n *   \n *   const fetchData = async () => {\n *     try {\n *       const result = await api.getData();\n *       // Process result\n *     } catch (err) {\n *       handleError(err);\n *     }\n *   };\n *   \n *   return (\n *     <View>\n *       {error && <ErrorMessage message={error.message} onDismiss={clearError} />}\n *       <Button title=\"Fetch Data\" onPress={fetchData} />\n *     </View>\n *   );\n * };\n * ```\n */\nexport function useErrorHandler() {\n  const [error, setError] = useState<AppError | null>(null);\n\n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);\n\n  const handleError = useCallback((err: unknown, context?: Record<string, any>) => {\n    const appError = handleSupabaseError(err, context);\n    setError(appError);\n    logError(appError);\n    return appError;\n  }, []);\n\n  return { error, setError, clearError, handleError };\n}\n\n/**\n * React hook for handling API calls with loading state and error handling\n * \n * @example\n * ```tsx\n * const UserProfile = ({ userId }) => {\n *   const { data, loading, error, execute } = useApiCall(\n *     () => api.getUserProfile(userId),\n *     { executeOnMount: true }\n *   );\n *   \n *   return (\n *     <View>\n *       {loading && <LoadingSpinner />}\n *       {error && <ErrorMessage message={getUserFriendlyMessage(error)} />}\n *       {data && <UserProfileView data={data} />}\n *       <Button title=\"Refresh\" onPress={execute} disabled={loading} />\n *     </View>\n *   );\n * };\n * ```\n */\nexport function useApiCall<T>(\n  apiCall: () => Promise<T>,\n  options: {\n    executeOnMount?: boolean;\n    onSuccess?: (data: T) => void;\n    onError?: (error: AppError) => void;\n    errorContext?: Record<string, any>;\n  } = {}\n) {\n  const [data, setData] = useState<T | null>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<AppError | null>(null);\n\n  const execute = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const result = await apiCall();\n      setData(result);\n      options.onSuccess?.(result);\n      return result;\n    } catch (err) {\n      const appError = handleSupabaseError(err, options.errorContext);\n      setError(appError);\n      logError(appError);\n      options.onError?.(appError);\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, [apiCall, options.errorContext, options.onSuccess, options.onError]);\n\n  useEffect(() => {\n    if (options.executeOnMount) {\n      execute();\n    }\n  }, [execute, options.executeOnMount]);\n\n  return { data, loading, error, execute };\n}\n\n/**\n * Utility to show a user-friendly error alert\n * \n * @example\n * ```tsx\n * try {\n *   await api.updateUserProfile(data);\n * } catch (err) {\n *   showErrorAlert(err);\n * }\n * ```\n */\nexport function showErrorAlert(\n  error: unknown,\n  options: {\n    title?: string;\n    context?: Record<string, any>;\n    onDismiss?: () => void;\n  } = {}\n) {\n  const appError = error instanceof Error || (error && typeof error === 'object')\n    ? handleSupabaseError(error, options.context)\n    : {\n        message: String(error),\n        category: ErrorCategory.UNKNOWN,\n        severity: ErrorSeverity.ERROR,\n        timestamp: new Date(),\n      };\n\n  logError(appError);\n\n  Alert.alert(\n    options.title || 'Error',\n    getUserFriendlyMessage(appError),\n    [{ text: 'OK', onPress: options.onDismiss }]\n  );\n\n  return appError;\n}\n\n/**\n * Higher-order function to wrap API calls with error handling\n * \n * @example\n * ```tsx\n * const safeUpdateProfile = createSafeApiCall(\n *   api.updateUserProfile,\n *   { \n *     onError: (err) => showErrorAlert(err),\n *     context: { component: 'ProfileScreen' }\n *   }\n * );\n * \n * // Later in your code\n * const result = await safeUpdateProfile(userData);\n * if (result.success) {\n *   // Handle success\n * }\n * ```\n */\nexport function createSafeApiCall<T extends (...args: any[]) => Promise<any>>(\n  apiCall: T,\n  options: {\n    onError?: (error: AppError) => void;\n    context?: Record<string, any>;\n    showAlert?: boolean;\n  } = {}\n) {\n  return async (...args: Parameters<T>): Promise<{ success: boolean; data?: Awaited<ReturnType<T>>; error?: AppError }> => {\n    try {\n      const result = await apiCall(...args);\n      return { success: true, data: result };\n    } catch (err) {\n      const appError = handleSupabaseError(err, {\n        ...options.context,\n        functionName: apiCall.name,\n        args,\n      });\n      \n      logError(appError);\n      \n      if (options.onError) {\n        options.onError(appError);\n      }\n      \n      if (options.showAlert !== false) {\n        showErrorAlert(appError);\n      }\n      \n      return { success: false, error: appError };\n    }\n  };\n}\n\n/**\n * Utility to handle form submission errors\n * \n * @example\n * ```tsx\n * const handleSubmit = async (values) => {\n *   const result = await handleFormSubmission(\n *     () => api.updateProfile(values),\n *     {\n *       successMessage: 'Profile updated successfully!',\n *       context: { form: 'ProfileForm', values }\n *     }\n *   );\n *   \n *   if (result.success) {\n *     navigation.goBack();\n *   }\n * };\n * ```\n */\nexport async function handleFormSubmission<T>(\n  submitFn: () => Promise<T>,\n  options: {\n    successMessage?: string;\n    context?: Record<string, any>;\n    onSuccess?: (data: T) => void;\n    onError?: (error: AppError) => void;\n  } = {}\n): Promise<{ success: boolean; data?: T; error?: AppError }> {\n  try {\n    const data = await submitFn();\n    \n    if (options.successMessage) {\n      Alert.alert('Success', options.successMessage);\n    }\n    \n    if (options.onSuccess) {\n      options.onSuccess(data);\n    }\n    \n    return { success: true, data };\n  } catch (err) {\n    const appError = handleSupabaseError(err, {\n      ...options.context,\n      formSubmission: true,\n    });\n    \n    logError(appError);\n    showErrorAlert(appError);\n    \n    if (options.onError) {\n      options.onError(appError);\n    }\n    \n    return { success: false, error: appError };\n  }\n}\n\n/**\n * Utility to validate form data and handle validation errors\n * \n * @example\n * ```tsx\n * const handleSubmit = (values) => {\n *   const validationResult = validateFormData(values, {\n *     email: (value) => !value ? 'Email is required' : null,\n *     password: (value) => value.length < 8 ? 'Password must be at least 8 characters' : null\n *   });\n *   \n *   if (validationResult.isValid) {\n *     submitForm(values);\n *   } else {\n *     setErrors(validationResult.errors);\n *   }\n * };\n * ```\n */\nexport function validateFormData<T extends Record<string, any>>(\n  data: T,\n  validators: {\n    [K in keyof T]?: (value: T[K], allValues: T) => string | null;\n  }\n): { isValid: boolean; errors: Partial<Record<keyof T, string>> } {\n  const errors: Partial<Record<keyof T, string>> = {};\n  \n  Object.keys(validators).forEach((key) => {\n    const validator = validators[key as keyof T];\n    const value = data[key as keyof T];\n    \n    if (validator) {\n      const error = validator(value, data);\n      if (error) {\n        errors[key as keyof T] = error;\n      }\n    }\n  });\n  \n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors,\n  };\n}\n\n/**\n * Utility to handle file upload errors\n * \n * @example\n * ```tsx\n * const handleImageUpload = async (uri) => {\n *   const result = await handleFileUpload(\n *     () => uploadService.uploadImage(uri),\n *     {\n *       fileType: 'image',\n *       context: { screen: 'ProfileScreen' }\n *     }\n *   );\n *   \n *   if (result.success) {\n *     setImageUrl(result.data.url);\n *   }\n * };\n * ```\n */\nexport async function handleFileUpload<T>(\n  uploadFn: () => Promise<T>,\n  options: {\n    fileType?: string;\n    context?: Record<string, any>;\n    onSuccess?: (data: T) => void;\n    onError?: (error: AppError) => void;\n  } = {}\n): Promise<{ success: boolean; data?: T; error?: AppError }> {\n  try {\n    const data = await uploadFn();\n    \n    if (options.onSuccess) {\n      options.onSuccess(data);\n    }\n    \n    return { success: true, data };\n  } catch (err) {\n    const appError = handleSupabaseError(err, {\n      ...options.context,\n      fileUpload: true,\n      fileType: options.fileType || 'unknown',\n    });\n    \n    logError(appError);\n    \n    const errorMessage = options.fileType\n      ? `Failed to upload ${options.fileType}. ${getUserFriendlyMessage(appError)}`\n      : `Upload failed. ${getUserFriendlyMessage(appError)}`;\n    \n    Alert.alert('Upload Error', errorMessage);\n    \n    if (options.onError) {\n      options.onError(appError);\n    }\n    \n    return { success: false, error: appError };\n  }\n}\n\n/**\n * Utility to retry a failed operation with exponential backoff\n * \n * @example\n * ```tsx\n * const fetchWithRetry = async () => {\n *   const result = await retryOperation(\n *     () => api.fetchData(),\n *     {\n *       maxRetries: 3,\n *       retryableErrors: [ErrorCategory.NETWORK],\n *       onRetry: (attempt) => console.log(`Retrying... Attempt ${attempt}`)\n *     }\n *   );\n *   \n *   if (result.success) {\n *     setData(result.data);\n *   }\n * };\n * ```\n */\nexport async function retryOperation<T>(\n  operation: () => Promise<T>,\n  options: {\n    maxRetries?: number;\n    initialDelay?: number;\n    maxDelay?: number;\n    retryableErrors?: ErrorCategory[];\n    context?: Record<string, any>;\n    onRetry?: (attempt: number, delay: number) => void;\n  } = {}\n): Promise<{ success: boolean; data?: T; error?: AppError; attempts: number }> {\n  const maxRetries = options.maxRetries ?? 3;\n  const initialDelay = options.initialDelay ?? 1000;\n  const maxDelay = options.maxDelay ?? 10000;\n  const retryableErrors = options.retryableErrors ?? [ErrorCategory.NETWORK];\n  \n  let attempts = 0;\n  let delay = initialDelay;\n  \n  while (attempts <= maxRetries) {\n    try {\n      const data = await operation();\n      return { success: true, data, attempts };\n    } catch (err) {\n      attempts++;\n      \n      if (attempts > maxRetries) {\n        const appError = handleSupabaseError(err, {\n          ...options.context,\n          retryOperation: true,\n          attempts,\n        });\n        \n        logError(appError);\n        return { success: false, error: appError, attempts };\n      }\n      \n      const appError = handleSupabaseError(err, {\n        ...options.context,\n        retryOperation: true,\n        attempt: attempts,\n      });\n      \n      // Only retry for specific error categories\n      if (!retryableErrors.includes(appError.category)) {\n        logError(appError);\n        return { success: false, error: appError, attempts };\n      }\n      \n      if (options.onRetry) {\n        options.onRetry(attempts, delay);\n      }\n      \n      // Wait before retrying\n      await new Promise((resolve) => setTimeout(resolve, delay));\n      \n      // Exponential backoff with jitter\n      delay = Math.min(delay * 2, maxDelay) * (0.8 + Math.random() * 0.4);\n    }\n  }\n  \n  // This should never be reached due to the return in the catch block\n  const genericError: AppError = {\n    message: 'Maximum retry attempts reached',\n    category: ErrorCategory.UNKNOWN,\n    severity: ErrorSeverity.ERROR,\n    timestamp: new Date(),\n    context: options.context,\n  };\n  \n  logError(genericError);\n  return { success: false, error: genericError, attempts };\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "1ab8ea6028010cac8979df6268d82d7ba9328fc7"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2n6spums0c = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2n6spums0c();
cov_2n6spums0c().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2n6spums0c().s[1]++;
exports.useErrorHandler = useErrorHandler;
/* istanbul ignore next */
cov_2n6spums0c().s[2]++;
exports.useApiCall = useApiCall;
/* istanbul ignore next */
cov_2n6spums0c().s[3]++;
exports.showErrorAlert = showErrorAlert;
/* istanbul ignore next */
cov_2n6spums0c().s[4]++;
exports.createSafeApiCall = createSafeApiCall;
/* istanbul ignore next */
cov_2n6spums0c().s[5]++;
exports.handleFormSubmission = handleFormSubmission;
/* istanbul ignore next */
cov_2n6spums0c().s[6]++;
exports.validateFormData = validateFormData;
/* istanbul ignore next */
cov_2n6spums0c().s[7]++;
exports.handleFileUpload = handleFileUpload;
/* istanbul ignore next */
cov_2n6spums0c().s[8]++;
exports.retryOperation = retryOperation;
const react_1 =
/* istanbul ignore next */
(cov_2n6spums0c().s[9]++, require("react"));
const react_native_1 =
/* istanbul ignore next */
(cov_2n6spums0c().s[10]++, require("react-native"));
const errorService_1 =
/* istanbul ignore next */
(cov_2n6spums0c().s[11]++, require("../services/errorService"));
/**
 * React hook for handling errors in components
 *
 * @example
 * ```tsx
 * const MyComponent = () => {
 *   const { error, setError, clearError, handleError } = useErrorHandler();
 *
 *   const fetchData = async () => {
 *     try {
 *       const result = await api.getData();
 *       // Process result
 *     } catch (err) {
 *       handleError(err);
 *     }
 *   };
 *
 *   return (
 *     <View>
 *       {error && <ErrorMessage message={error.message} onDismiss={clearError} />}
 *       <Button title="Fetch Data" onPress={fetchData} />
 *     </View>
 *   );
 * };
 * ```
 */
function useErrorHandler() {
  /* istanbul ignore next */
  cov_2n6spums0c().f[0]++;
  const [error, setError] =
  /* istanbul ignore next */
  (cov_2n6spums0c().s[12]++, (0, react_1.useState)(null));
  const clearError =
  /* istanbul ignore next */
  (cov_2n6spums0c().s[13]++, (0, react_1.useCallback)(() => {
    /* istanbul ignore next */
    cov_2n6spums0c().f[1]++;
    cov_2n6spums0c().s[14]++;
    setError(null);
  }, []));
  const handleError =
  /* istanbul ignore next */
  (cov_2n6spums0c().s[15]++, (0, react_1.useCallback)((err, context) => {
    /* istanbul ignore next */
    cov_2n6spums0c().f[2]++;
    const appError =
    /* istanbul ignore next */
    (cov_2n6spums0c().s[16]++, (0, errorService_1.handleSupabaseError)(err, context));
    /* istanbul ignore next */
    cov_2n6spums0c().s[17]++;
    setError(appError);
    /* istanbul ignore next */
    cov_2n6spums0c().s[18]++;
    (0, errorService_1.logError)(appError);
    /* istanbul ignore next */
    cov_2n6spums0c().s[19]++;
    return appError;
  }, []));
  /* istanbul ignore next */
  cov_2n6spums0c().s[20]++;
  return {
    error,
    setError,
    clearError,
    handleError
  };
}
/**
 * React hook for handling API calls with loading state and error handling
 *
 * @example
 * ```tsx
 * const UserProfile = ({ userId }) => {
 *   const { data, loading, error, execute } = useApiCall(
 *     () => api.getUserProfile(userId),
 *     { executeOnMount: true }
 *   );
 *
 *   return (
 *     <View>
 *       {loading && <LoadingSpinner />}
 *       {error && <ErrorMessage message={getUserFriendlyMessage(error)} />}
 *       {data && <UserProfileView data={data} />}
 *       <Button title="Refresh" onPress={execute} disabled={loading} />
 *     </View>
 *   );
 * };
 * ```
 */
function useApiCall(apiCall, options =
/* istanbul ignore next */
(cov_2n6spums0c().b[0][0]++, {})) {
  /* istanbul ignore next */
  cov_2n6spums0c().f[3]++;
  const [data, setData] =
  /* istanbul ignore next */
  (cov_2n6spums0c().s[21]++, (0, react_1.useState)(null));
  const [loading, setLoading] =
  /* istanbul ignore next */
  (cov_2n6spums0c().s[22]++, (0, react_1.useState)(false));
  const [error, setError] =
  /* istanbul ignore next */
  (cov_2n6spums0c().s[23]++, (0, react_1.useState)(null));
  const execute =
  /* istanbul ignore next */
  (cov_2n6spums0c().s[24]++, (0, react_1.useCallback)(async () => {
    /* istanbul ignore next */
    cov_2n6spums0c().f[4]++;
    cov_2n6spums0c().s[25]++;
    try {
      /* istanbul ignore next */
      cov_2n6spums0c().s[26]++;
      setLoading(true);
      /* istanbul ignore next */
      cov_2n6spums0c().s[27]++;
      setError(null);
      const result =
      /* istanbul ignore next */
      (cov_2n6spums0c().s[28]++, await apiCall());
      /* istanbul ignore next */
      cov_2n6spums0c().s[29]++;
      setData(result);
      /* istanbul ignore next */
      cov_2n6spums0c().s[30]++;
      options.onSuccess?.(result);
      /* istanbul ignore next */
      cov_2n6spums0c().s[31]++;
      return result;
    } catch (err) {
      const appError =
      /* istanbul ignore next */
      (cov_2n6spums0c().s[32]++, (0, errorService_1.handleSupabaseError)(err, options.errorContext));
      /* istanbul ignore next */
      cov_2n6spums0c().s[33]++;
      setError(appError);
      /* istanbul ignore next */
      cov_2n6spums0c().s[34]++;
      (0, errorService_1.logError)(appError);
      /* istanbul ignore next */
      cov_2n6spums0c().s[35]++;
      options.onError?.(appError);
      /* istanbul ignore next */
      cov_2n6spums0c().s[36]++;
      return null;
    } finally {
      /* istanbul ignore next */
      cov_2n6spums0c().s[37]++;
      setLoading(false);
    }
  }, [apiCall, options.errorContext, options.onSuccess, options.onError]));
  /* istanbul ignore next */
  cov_2n6spums0c().s[38]++;
  (0, react_1.useEffect)(() => {
    /* istanbul ignore next */
    cov_2n6spums0c().f[5]++;
    cov_2n6spums0c().s[39]++;
    if (options.executeOnMount) {
      /* istanbul ignore next */
      cov_2n6spums0c().b[1][0]++;
      cov_2n6spums0c().s[40]++;
      execute();
    } else
    /* istanbul ignore next */
    {
      cov_2n6spums0c().b[1][1]++;
    }
  }, [execute, options.executeOnMount]);
  /* istanbul ignore next */
  cov_2n6spums0c().s[41]++;
  return {
    data,
    loading,
    error,
    execute
  };
}
/**
 * Utility to show a user-friendly error alert
 *
 * @example
 * ```tsx
 * try {
 *   await api.updateUserProfile(data);
 * } catch (err) {
 *   showErrorAlert(err);
 * }
 * ```
 */
function showErrorAlert(error, options =
/* istanbul ignore next */
(cov_2n6spums0c().b[2][0]++, {})) {
  /* istanbul ignore next */
  cov_2n6spums0c().f[6]++;
  const appError =
  /* istanbul ignore next */
  (cov_2n6spums0c().s[42]++,
  /* istanbul ignore next */
  (cov_2n6spums0c().b[4][0]++, error instanceof Error) ||
  /* istanbul ignore next */
  (cov_2n6spums0c().b[4][1]++, error) &&
  /* istanbul ignore next */
  (cov_2n6spums0c().b[4][2]++, typeof error === 'object') ?
  /* istanbul ignore next */
  (cov_2n6spums0c().b[3][0]++, (0, errorService_1.handleSupabaseError)(error, options.context)) :
  /* istanbul ignore next */
  (cov_2n6spums0c().b[3][1]++, {
    message: String(error),
    category: errorService_1.ErrorCategory.UNKNOWN,
    severity: errorService_1.ErrorSeverity.ERROR,
    timestamp: new Date()
  }));
  /* istanbul ignore next */
  cov_2n6spums0c().s[43]++;
  (0, errorService_1.logError)(appError);
  /* istanbul ignore next */
  cov_2n6spums0c().s[44]++;
  react_native_1.Alert.alert(
  /* istanbul ignore next */
  (cov_2n6spums0c().b[5][0]++, options.title) ||
  /* istanbul ignore next */
  (cov_2n6spums0c().b[5][1]++, 'Error'), (0, errorService_1.getUserFriendlyMessage)(appError), [{
    text: 'OK',
    onPress: options.onDismiss
  }]);
  /* istanbul ignore next */
  cov_2n6spums0c().s[45]++;
  return appError;
}
/**
 * Higher-order function to wrap API calls with error handling
 *
 * @example
 * ```tsx
 * const safeUpdateProfile = createSafeApiCall(
 *   api.updateUserProfile,
 *   {
 *     onError: (err) => showErrorAlert(err),
 *     context: { component: 'ProfileScreen' }
 *   }
 * );
 *
 * // Later in your code
 * const result = await safeUpdateProfile(userData);
 * if (result.success) {
 *   // Handle success
 * }
 * ```
 */
function createSafeApiCall(apiCall, options =
/* istanbul ignore next */
(cov_2n6spums0c().b[6][0]++, {})) {
  /* istanbul ignore next */
  cov_2n6spums0c().f[7]++;
  cov_2n6spums0c().s[46]++;
  return async (...args) => {
    /* istanbul ignore next */
    cov_2n6spums0c().f[8]++;
    cov_2n6spums0c().s[47]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_2n6spums0c().s[48]++, await apiCall(...args));
      /* istanbul ignore next */
      cov_2n6spums0c().s[49]++;
      return {
        success: true,
        data: result
      };
    } catch (err) {
      const appError =
      /* istanbul ignore next */
      (cov_2n6spums0c().s[50]++, (0, errorService_1.handleSupabaseError)(err, {
        ...options.context,
        functionName: apiCall.name,
        args
      }));
      /* istanbul ignore next */
      cov_2n6spums0c().s[51]++;
      (0, errorService_1.logError)(appError);
      /* istanbul ignore next */
      cov_2n6spums0c().s[52]++;
      if (options.onError) {
        /* istanbul ignore next */
        cov_2n6spums0c().b[7][0]++;
        cov_2n6spums0c().s[53]++;
        options.onError(appError);
      } else
      /* istanbul ignore next */
      {
        cov_2n6spums0c().b[7][1]++;
      }
      cov_2n6spums0c().s[54]++;
      if (options.showAlert !== false) {
        /* istanbul ignore next */
        cov_2n6spums0c().b[8][0]++;
        cov_2n6spums0c().s[55]++;
        showErrorAlert(appError);
      } else
      /* istanbul ignore next */
      {
        cov_2n6spums0c().b[8][1]++;
      }
      cov_2n6spums0c().s[56]++;
      return {
        success: false,
        error: appError
      };
    }
  };
}
/**
 * Utility to handle form submission errors
 *
 * @example
 * ```tsx
 * const handleSubmit = async (values) => {
 *   const result = await handleFormSubmission(
 *     () => api.updateProfile(values),
 *     {
 *       successMessage: 'Profile updated successfully!',
 *       context: { form: 'ProfileForm', values }
 *     }
 *   );
 *
 *   if (result.success) {
 *     navigation.goBack();
 *   }
 * };
 * ```
 */
async function handleFormSubmission(submitFn, options =
/* istanbul ignore next */
(cov_2n6spums0c().b[9][0]++, {})) {
  /* istanbul ignore next */
  cov_2n6spums0c().f[9]++;
  cov_2n6spums0c().s[57]++;
  try {
    const data =
    /* istanbul ignore next */
    (cov_2n6spums0c().s[58]++, await submitFn());
    /* istanbul ignore next */
    cov_2n6spums0c().s[59]++;
    if (options.successMessage) {
      /* istanbul ignore next */
      cov_2n6spums0c().b[10][0]++;
      cov_2n6spums0c().s[60]++;
      react_native_1.Alert.alert('Success', options.successMessage);
    } else
    /* istanbul ignore next */
    {
      cov_2n6spums0c().b[10][1]++;
    }
    cov_2n6spums0c().s[61]++;
    if (options.onSuccess) {
      /* istanbul ignore next */
      cov_2n6spums0c().b[11][0]++;
      cov_2n6spums0c().s[62]++;
      options.onSuccess(data);
    } else
    /* istanbul ignore next */
    {
      cov_2n6spums0c().b[11][1]++;
    }
    cov_2n6spums0c().s[63]++;
    return {
      success: true,
      data
    };
  } catch (err) {
    const appError =
    /* istanbul ignore next */
    (cov_2n6spums0c().s[64]++, (0, errorService_1.handleSupabaseError)(err, {
      ...options.context,
      formSubmission: true
    }));
    /* istanbul ignore next */
    cov_2n6spums0c().s[65]++;
    (0, errorService_1.logError)(appError);
    /* istanbul ignore next */
    cov_2n6spums0c().s[66]++;
    showErrorAlert(appError);
    /* istanbul ignore next */
    cov_2n6spums0c().s[67]++;
    if (options.onError) {
      /* istanbul ignore next */
      cov_2n6spums0c().b[12][0]++;
      cov_2n6spums0c().s[68]++;
      options.onError(appError);
    } else
    /* istanbul ignore next */
    {
      cov_2n6spums0c().b[12][1]++;
    }
    cov_2n6spums0c().s[69]++;
    return {
      success: false,
      error: appError
    };
  }
}
/**
 * Utility to validate form data and handle validation errors
 *
 * @example
 * ```tsx
 * const handleSubmit = (values) => {
 *   const validationResult = validateFormData(values, {
 *     email: (value) => !value ? 'Email is required' : null,
 *     password: (value) => value.length < 8 ? 'Password must be at least 8 characters' : null
 *   });
 *
 *   if (validationResult.isValid) {
 *     submitForm(values);
 *   } else {
 *     setErrors(validationResult.errors);
 *   }
 * };
 * ```
 */
function validateFormData(data, validators) {
  /* istanbul ignore next */
  cov_2n6spums0c().f[10]++;
  const errors =
  /* istanbul ignore next */
  (cov_2n6spums0c().s[70]++, {});
  /* istanbul ignore next */
  cov_2n6spums0c().s[71]++;
  Object.keys(validators).forEach(key => {
    /* istanbul ignore next */
    cov_2n6spums0c().f[11]++;
    const validator =
    /* istanbul ignore next */
    (cov_2n6spums0c().s[72]++, validators[key]);
    const value =
    /* istanbul ignore next */
    (cov_2n6spums0c().s[73]++, data[key]);
    /* istanbul ignore next */
    cov_2n6spums0c().s[74]++;
    if (validator) {
      /* istanbul ignore next */
      cov_2n6spums0c().b[13][0]++;
      const error =
      /* istanbul ignore next */
      (cov_2n6spums0c().s[75]++, validator(value, data));
      /* istanbul ignore next */
      cov_2n6spums0c().s[76]++;
      if (error) {
        /* istanbul ignore next */
        cov_2n6spums0c().b[14][0]++;
        cov_2n6spums0c().s[77]++;
        errors[key] = error;
      } else
      /* istanbul ignore next */
      {
        cov_2n6spums0c().b[14][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2n6spums0c().b[13][1]++;
    }
  });
  /* istanbul ignore next */
  cov_2n6spums0c().s[78]++;
  return {
    isValid: Object.keys(errors).length === 0,
    errors
  };
}
/**
 * Utility to handle file upload errors
 *
 * @example
 * ```tsx
 * const handleImageUpload = async (uri) => {
 *   const result = await handleFileUpload(
 *     () => uploadService.uploadImage(uri),
 *     {
 *       fileType: 'image',
 *       context: { screen: 'ProfileScreen' }
 *     }
 *   );
 *
 *   if (result.success) {
 *     setImageUrl(result.data.url);
 *   }
 * };
 * ```
 */
async function handleFileUpload(uploadFn, options =
/* istanbul ignore next */
(cov_2n6spums0c().b[15][0]++, {})) {
  /* istanbul ignore next */
  cov_2n6spums0c().f[12]++;
  cov_2n6spums0c().s[79]++;
  try {
    const data =
    /* istanbul ignore next */
    (cov_2n6spums0c().s[80]++, await uploadFn());
    /* istanbul ignore next */
    cov_2n6spums0c().s[81]++;
    if (options.onSuccess) {
      /* istanbul ignore next */
      cov_2n6spums0c().b[16][0]++;
      cov_2n6spums0c().s[82]++;
      options.onSuccess(data);
    } else
    /* istanbul ignore next */
    {
      cov_2n6spums0c().b[16][1]++;
    }
    cov_2n6spums0c().s[83]++;
    return {
      success: true,
      data
    };
  } catch (err) {
    const appError =
    /* istanbul ignore next */
    (cov_2n6spums0c().s[84]++, (0, errorService_1.handleSupabaseError)(err, {
      ...options.context,
      fileUpload: true,
      fileType:
      /* istanbul ignore next */
      (cov_2n6spums0c().b[17][0]++, options.fileType) ||
      /* istanbul ignore next */
      (cov_2n6spums0c().b[17][1]++, 'unknown')
    }));
    /* istanbul ignore next */
    cov_2n6spums0c().s[85]++;
    (0, errorService_1.logError)(appError);
    const errorMessage =
    /* istanbul ignore next */
    (cov_2n6spums0c().s[86]++, options.fileType ?
    /* istanbul ignore next */
    (cov_2n6spums0c().b[18][0]++, `Failed to upload ${options.fileType}. ${(0, errorService_1.getUserFriendlyMessage)(appError)}`) :
    /* istanbul ignore next */
    (cov_2n6spums0c().b[18][1]++, `Upload failed. ${(0, errorService_1.getUserFriendlyMessage)(appError)}`));
    /* istanbul ignore next */
    cov_2n6spums0c().s[87]++;
    react_native_1.Alert.alert('Upload Error', errorMessage);
    /* istanbul ignore next */
    cov_2n6spums0c().s[88]++;
    if (options.onError) {
      /* istanbul ignore next */
      cov_2n6spums0c().b[19][0]++;
      cov_2n6spums0c().s[89]++;
      options.onError(appError);
    } else
    /* istanbul ignore next */
    {
      cov_2n6spums0c().b[19][1]++;
    }
    cov_2n6spums0c().s[90]++;
    return {
      success: false,
      error: appError
    };
  }
}
/**
 * Utility to retry a failed operation with exponential backoff
 *
 * @example
 * ```tsx
 * const fetchWithRetry = async () => {
 *   const result = await retryOperation(
 *     () => api.fetchData(),
 *     {
 *       maxRetries: 3,
 *       retryableErrors: [ErrorCategory.NETWORK],
 *       onRetry: (attempt) => console.log(`Retrying... Attempt ${attempt}`)
 *     }
 *   );
 *
 *   if (result.success) {
 *     setData(result.data);
 *   }
 * };
 * ```
 */
async function retryOperation(operation, options =
/* istanbul ignore next */
(cov_2n6spums0c().b[20][0]++, {})) {
  /* istanbul ignore next */
  cov_2n6spums0c().f[13]++;
  const maxRetries =
  /* istanbul ignore next */
  (cov_2n6spums0c().s[91]++,
  /* istanbul ignore next */
  (cov_2n6spums0c().b[21][0]++, options.maxRetries) ??
  /* istanbul ignore next */
  (cov_2n6spums0c().b[21][1]++, 3));
  const initialDelay =
  /* istanbul ignore next */
  (cov_2n6spums0c().s[92]++,
  /* istanbul ignore next */
  (cov_2n6spums0c().b[22][0]++, options.initialDelay) ??
  /* istanbul ignore next */
  (cov_2n6spums0c().b[22][1]++, 1000));
  const maxDelay =
  /* istanbul ignore next */
  (cov_2n6spums0c().s[93]++,
  /* istanbul ignore next */
  (cov_2n6spums0c().b[23][0]++, options.maxDelay) ??
  /* istanbul ignore next */
  (cov_2n6spums0c().b[23][1]++, 10000));
  const retryableErrors =
  /* istanbul ignore next */
  (cov_2n6spums0c().s[94]++,
  /* istanbul ignore next */
  (cov_2n6spums0c().b[24][0]++, options.retryableErrors) ??
  /* istanbul ignore next */
  (cov_2n6spums0c().b[24][1]++, [errorService_1.ErrorCategory.NETWORK]));
  let attempts =
  /* istanbul ignore next */
  (cov_2n6spums0c().s[95]++, 0);
  let delay =
  /* istanbul ignore next */
  (cov_2n6spums0c().s[96]++, initialDelay);
  /* istanbul ignore next */
  cov_2n6spums0c().s[97]++;
  while (attempts <= maxRetries) {
    /* istanbul ignore next */
    cov_2n6spums0c().s[98]++;
    try {
      const data =
      /* istanbul ignore next */
      (cov_2n6spums0c().s[99]++, await operation());
      /* istanbul ignore next */
      cov_2n6spums0c().s[100]++;
      return {
        success: true,
        data,
        attempts
      };
    } catch (err) {
      /* istanbul ignore next */
      cov_2n6spums0c().s[101]++;
      attempts++;
      /* istanbul ignore next */
      cov_2n6spums0c().s[102]++;
      if (attempts > maxRetries) {
        /* istanbul ignore next */
        cov_2n6spums0c().b[25][0]++;
        const appError =
        /* istanbul ignore next */
        (cov_2n6spums0c().s[103]++, (0, errorService_1.handleSupabaseError)(err, {
          ...options.context,
          retryOperation: true,
          attempts
        }));
        /* istanbul ignore next */
        cov_2n6spums0c().s[104]++;
        (0, errorService_1.logError)(appError);
        /* istanbul ignore next */
        cov_2n6spums0c().s[105]++;
        return {
          success: false,
          error: appError,
          attempts
        };
      } else
      /* istanbul ignore next */
      {
        cov_2n6spums0c().b[25][1]++;
      }
      const appError =
      /* istanbul ignore next */
      (cov_2n6spums0c().s[106]++, (0, errorService_1.handleSupabaseError)(err, {
        ...options.context,
        retryOperation: true,
        attempt: attempts
      }));
      // Only retry for specific error categories
      /* istanbul ignore next */
      cov_2n6spums0c().s[107]++;
      if (!retryableErrors.includes(appError.category)) {
        /* istanbul ignore next */
        cov_2n6spums0c().b[26][0]++;
        cov_2n6spums0c().s[108]++;
        (0, errorService_1.logError)(appError);
        /* istanbul ignore next */
        cov_2n6spums0c().s[109]++;
        return {
          success: false,
          error: appError,
          attempts
        };
      } else
      /* istanbul ignore next */
      {
        cov_2n6spums0c().b[26][1]++;
      }
      cov_2n6spums0c().s[110]++;
      if (options.onRetry) {
        /* istanbul ignore next */
        cov_2n6spums0c().b[27][0]++;
        cov_2n6spums0c().s[111]++;
        options.onRetry(attempts, delay);
      } else
      /* istanbul ignore next */
      {
        cov_2n6spums0c().b[27][1]++;
      }
      // Wait before retrying
      cov_2n6spums0c().s[112]++;
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_2n6spums0c().f[14]++;
        cov_2n6spums0c().s[113]++;
        return setTimeout(resolve, delay);
      });
      // Exponential backoff with jitter
      /* istanbul ignore next */
      cov_2n6spums0c().s[114]++;
      delay = Math.min(delay * 2, maxDelay) * (0.8 + Math.random() * 0.4);
    }
  }
  // This should never be reached due to the return in the catch block
  const genericError =
  /* istanbul ignore next */
  (cov_2n6spums0c().s[115]++, {
    message: 'Maximum retry attempts reached',
    category: errorService_1.ErrorCategory.UNKNOWN,
    severity: errorService_1.ErrorSeverity.ERROR,
    timestamp: new Date(),
    context: options.context
  });
  /* istanbul ignore next */
  cov_2n6spums0c().s[116]++;
  (0, errorService_1.logError)(genericError);
  /* istanbul ignore next */
  cov_2n6spums0c().s[117]++;
  return {
    success: false,
    error: genericError,
    attempts
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,