{"version":3,"names":["cov_tz6l8rh26","actualCoverage","s","react_query_1","require","react_native_1","supabase_1","AuthContext_1","errorService_1","useShowDetailQuery","showId","f","queryClient","useQueryClient","authContext","useAuth","user","b","authState","fetchShowDetails","data","error","supabase","rpc","show_id","Error","message","enhanceWithSocialMediaLinks","privilegedDealers","participatingDealers","filter","dealer","role","length","profiles","from","select","in","map","id","console","profileMap","Map","forEach","profile","set","facebookUrl","facebook_url","instagramUrl","instagram_url","twitterUrl","twitter_url","whatnotUrl","whatnot_url","ebayStoreUrl","ebay_store_url","enhancedDealers","has","get","err","enhancedData","isLoading","isError","refetch","useQuery","queryKey","queryFn","staleTime","retry","isCurrentUserOrganizer","show","organizer_id","isShowOrganizer","checkIfFavorite","session","auth","getSession","eq","single","isFavorite","refetchFavorite","enabled","toggleFavoriteMutation","useMutation","mutationFn","sessionError","userId","delete","insert","user_id","onSuccess","newFavoriteStatus","setQueryData","invalidateQueries","onError","appError","handleSupabaseError","Alert","alert","toggleFavorite","mutate","formatShowDate","start_date","startDate","Date","options","weekday","year","month","day","toLocaleDateString","shareShow","title","location","address","Share","share","openMapLocation","encodedAddress","encodeURIComponent","url","Linking","openURL","catch","googleUrl","handleClaimShow","organizer","loading","isClaimingShow","exports","default"],"sources":["/Users/kevin/card-show-finder/src/hooks/useShowDetailQuery.ts"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Alert, Share, Linking } from 'react-native';\nimport { supabase } from '../supabase';\nimport { useAuth } from '../contexts/AuthContext';\nimport { handleSupabaseError } from '../services/errorService';\n\n// Define types for better type safety\ntype UserRole = 'SHOW_ORGANIZER' | 'MVP_DEALER' | 'DEALER' | 'USER';\n\ninterface Dealer {\n  id: string;\n  name: string;\n  profileImageUrl?: string;\n  role: UserRole;\n  accountType?: string;\n  boothLocation?: string;\n  // --- Social Media & Marketplace links (added for Task 8) ------------------\n  facebookUrl?: string;\n  instagramUrl?: string;\n  twitterUrl?: string;\n  whatnotUrl?: string;\n  ebayStoreUrl?: string;\n}\n\ninterface ShowDetails {\n  id: string;\n  title: string;\n  description?: string;\n  location?: string;\n  address?: string;\n  start_date?: string;\n  end_date?: string;\n  start_time?: string;\n  end_time?: string;\n  entry_fee?: number | string;\n  organizer_id?: string;\n  claimed_by?: string;\n  [key: string]: any; // For additional properties\n}\n\ninterface OrganizerProfile {\n  id?: string;\n  first_name?: string;\n  last_name?: string;\n  profile_image_url?: string;\n  username?: string;\n  full_name?: string;\n  avatar_url?: string;\n  [key: string]: any; // For additional properties\n}\n\ninterface ShowDetailResponse {\n  show: ShowDetails;\n  organizer: OrganizerProfile | null;\n  participatingDealers: Dealer[];\n  isFavoriteCount: number;\n}\n\n/**\n * Custom hook to fetch show details using React Query and the get_show_details_by_id RPC function\n * @param showId The ID of the show to fetch\n */\nexport const useShowDetailQuery = (showId: string) => {\n  const queryClient = useQueryClient();\n  const authContext = useAuth();\n  const user = authContext.authState?.user || null;\n  \n  // Function to fetch show details from the RPC\n  const fetchShowDetails = async () => {\n    const { data, error } = await supabase.rpc('get_show_details_by_id', { \n      show_id: showId \n    });\n    \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    if (!data || data.error) {\n      throw new Error(data?.error || 'Failed to load show details');\n    }\n    \n    // Enhanced version that adds social media links for MVP Dealers\n    const enhanceWithSocialMediaLinks = async (data: ShowDetailResponse) => {\n      // Find any dealers with elevated privileges (MVP Dealers or Show Organizers)\n      const privilegedDealers = data.participatingDealers.filter(\n        dealer =>\n          dealer.role === 'MVP_DEALER' ||\n          dealer.role === 'SHOW_ORGANIZER'\n      );\n      \n      if (privilegedDealers.length === 0) return data; // No privileged dealers to enhance\n      \n      try {\n        // Fetch profiles for all MVP dealers in a single batch\n        const { data: profiles, error } = await supabase\n          .from('profiles')\n          .select('id, facebook_url, instagram_url, twitter_url, whatnot_url, ebay_store_url')\n          .in('id', privilegedDealers.map(dealer => dealer.id));\n        \n        if (error || !profiles) {\n          console.error('Error fetching dealer social media:', error);\n          return data; // Return original data if there's an error\n        }\n        \n        // Create a map for easy lookup\n        const profileMap = new Map();\n        profiles.forEach(profile => {\n          profileMap.set(profile.id, {\n            facebookUrl: profile.facebook_url,\n            instagramUrl: profile.instagram_url,\n            twitterUrl: profile.twitter_url,\n            whatnotUrl: profile.whatnot_url,\n            ebayStoreUrl: profile.ebay_store_url\n          });\n        });\n        \n        // Enhance the dealers with social media links\n        const enhancedDealers = data.participatingDealers.map(dealer => {\n          if (\n            (dealer.role === 'MVP_DEALER' || dealer.role === 'SHOW_ORGANIZER') &&\n            profileMap.has(dealer.id)\n          ) {\n            return {\n              ...dealer,\n              ...profileMap.get(dealer.id)\n            };\n          }\n          return dealer;\n        });\n        \n        return {\n          ...data,\n          participatingDealers: enhancedDealers\n        };\n      } catch (err) {\n        console.error('Unexpected error enhancing dealers with social media:', err);\n        return data; // Return original data if there's an error\n      }\n    };\n\n    // Apply the enhancement\n    const enhancedData = await enhanceWithSocialMediaLinks(data as ShowDetailResponse);\n    return enhancedData;\n  };\n  \n  // Use React Query to fetch and cache the show details\n  const { \n    data,\n    isLoading,\n    isError,\n    error,\n    refetch\n  } = useQuery({\n    queryKey: ['showDetails', showId],\n    queryFn: fetchShowDetails,\n    staleTime: 60 * 1000, // Consider data fresh for 1 minute\n    retry: 1, // Only retry once on failure\n  });\n  \n  // Check if the current user is the show organizer\n  const isCurrentUserOrganizer = user?.id === data?.show?.organizer_id;\n  \n  // Check if the user has a show organizer role\n  const isShowOrganizer = user?.role === 'SHOW_ORGANIZER';\n  \n  // Check if the show is a favorite\n  const checkIfFavorite = async () => {\n    try {\n      const { data: { session } } = await supabase.auth.getSession();\n      if (!session?.user?.id) return false;\n      \n      const { data, error } = await supabase\n        .from('user_favorite_shows')\n        .select()\n        .eq('user_id', session.user.id)\n        .eq('show_id', showId)\n        .single();\n        \n      return !error && !!data;\n    } catch (error) {\n      console.error('Error checking favorite status:', error);\n      return false;\n    }\n  };\n  \n  // Use a query to check if the show is a favorite\n  const { \n    data: isFavorite = false,\n    refetch: refetchFavorite\n  } = useQuery({\n    queryKey: ['showFavorite', showId, user?.id],\n    queryFn: checkIfFavorite,\n    enabled: !!user?.id, // Only run if user is logged in\n  });\n  \n  // Mutation for toggling favorite status\n  const toggleFavoriteMutation = useMutation({\n    mutationFn: async () => {\n      const { data: { session }, error: sessionError } = await supabase.auth.getSession();\n      if (sessionError || !session?.user) {\n        throw new Error('Please sign in to save favorites');\n      }\n      const userId = session.user.id;\n\n      if (isFavorite) {\n        const { error } = await supabase\n          .from('user_favorite_shows')\n          .delete()\n          .eq('user_id', userId)\n          .eq('show_id', showId);\n        if (error) throw error;\n        return false; // Not a favorite anymore\n      } else {\n        const { error } = await supabase\n          .from('user_favorite_shows')\n          .insert([{ user_id: userId, show_id: showId }]);\n        if (error) throw error;\n        return true; // Now a favorite\n      }\n    },\n    onSuccess: (newFavoriteStatus) => {\n      // Update the cache\n      queryClient.setQueryData(['showFavorite', showId, user?.id], newFavoriteStatus);\n      // Invalidate the show details to update the favorite count\n      queryClient.invalidateQueries({ queryKey: ['showDetails', showId] });\n    },\n    onError: (error) => {\n      const appError = handleSupabaseError(error);\n      console.error('ðŸš¨ UNEXPECTED ERROR in toggleFavorite:', appError);\n      Alert.alert('Error', 'An unexpected error occurred while updating favorites.');\n    }\n  });\n  \n  // Helper function to toggle favorite status\n  const toggleFavorite = async () => {\n    if (!user) {\n      Alert.alert('Sign In Required', 'Please sign in to save favorites');\n      return;\n    }\n    \n    toggleFavoriteMutation.mutate();\n  };\n  \n  // Helper function to format show date\n  const formatShowDate = (show: ShowDetails) => {\n    if (!show.start_date) return '';\n    \n    const startDate = new Date(show.start_date);\n    const options: Intl.DateTimeFormatOptions = { \n      weekday: 'long', \n      year: 'numeric', \n      month: 'long', \n      day: 'numeric' \n    };\n    \n    return startDate.toLocaleDateString('en-US', options);\n  };\n  \n  // Helper function to share the show\n  const shareShow = async () => {\n    if (!data?.show) return;\n    \n    try {\n      const show = data.show;\n      const message = `Check out this card show: ${show.title}\\n\\nWhen: ${formatShowDate(show)}\\nWhere: ${show.location || show.address}\\n\\nShared from Card Show Finder app`;\n      await Share.share({ message, title: show.title });\n    } catch (error) {\n      console.error('Error sharing:', error);\n    }\n  };\n  \n  // Helper function to open the map location\n  const openMapLocation = () => {\n    if (!data?.show) return;\n    \n    const address = data.show.address || data.show.location || '';\n    const encodedAddress = encodeURIComponent(address);\n    const url = `https://maps.apple.com/?q=${encodedAddress}`;\n    \n    Linking.openURL(url).catch(() => {\n      const googleUrl = `https://www.google.com/maps/search/?api=1&query=${encodedAddress}`;\n      Linking.openURL(googleUrl);\n    });\n  };\n  \n  // Helper function for claiming a show (placeholder)\n  const handleClaimShow = () => {\n    Alert.alert(\"Claim Show\", \"This feature is coming soon!\");\n  };\n  \n  return {\n    // Data from the query\n    show: data?.show || null,\n    organizer: data?.organizer || null,\n    participatingDealers: data?.participatingDealers || [],\n    \n    // Status\n    loading: isLoading,\n    error: isError ? (error as Error)?.message || 'An error occurred' : null,\n    isFavorite,\n    isShowOrganizer,\n    isCurrentUserOrganizer,\n    isClaimingShow: false, // Placeholder, can be implemented as needed\n    \n    // Functions\n    fetchShowDetails: refetch,\n    toggleFavorite,\n    shareShow,\n    openMapLocation,\n    handleClaimShow\n  };\n};\n\nexport default useShowDetailQuery;\n"],"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","ignoreList":[]}