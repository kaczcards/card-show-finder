{"version":3,"names":["Sentry","Constants","Platform","SENTRY_DSN","cov_4ffdu3iar","s","_Constants$expoConfig","expoConfig","extra","sentryDsn","Environment","initSentry","_Constants$expoConfig2","options","arguments","length","undefined","b","f","_ref","userId","userData","_ref$environment","environment","__DEV__","DEVELOPMENT","PRODUCTION","_ref$debug","debug","_ref$enableTracing","enableTracing","console","warn","init","dsn","enableInExpoDevelopment","tracesSampleRate","beforeSend","event","setUserContext","Native","setContext","platform","OS","version","Version","model","appVersion","setUser","Object","assign","id","clearUserContext","captureException","error","context","captureMessage","message","level","startTransaction","name","operation","startTime","Date","now","finish","setStatus","setTag","setData","op","getSentryErrorBoundary","ErrorBoundary","addBreadcrumb","breadcrumb","SentryRaw"],"sources":["sentryConfig.ts"],"sourcesContent":["import * as Sentry from 'sentry-expo';\nimport Constants from 'expo-constants';\nimport { Platform } from 'react-native';\nimport { ScopeContext, SeverityLevel, Transaction, Breadcrumb } from '@sentry/types';\n\n/**\n * Sentry configuration and utility functions for error tracking and monitoring.\n * \n * This module provides a centralized way to interact with Sentry throughout the application.\n * It handles initialization, error capturing, and user context management.\n */\n\n// Get the Sentry DSN from Expo constants (configured in app.config.js)\nconst SENTRY_DSN = Constants.expoConfig?.extra?.sentryDsn;\n\n/**\n * Environment names for different build types\n */\nexport enum Environment {\n  DEVELOPMENT = 'development',\n  STAGING = 'staging',\n  PRODUCTION = 'production',\n}\n\n/**\n * Configuration options for Sentry initialization\n */\ninterface SentryConfigOptions {\n  /** Optional user ID to associate with errors */\n  userId?: string;\n  /** Optional additional user data */\n  userData?: Record<string, any>;\n  /** Environment name (defaults to 'development' in dev mode) */\n  environment?: Environment;\n  /** Whether to enable debug mode for Sentry */\n  debug?: boolean;\n  /** Whether to enable performance monitoring */\n  enableTracing?: boolean;\n}\n\n/**\n * Initialize Sentry with the provided configuration.\n * This should be called as early as possible in your application.\n * \n * @example\n * // In App.tsx or similar entry point:\n * import { initSentry } from './services/sentryConfig';\n * \n * // Basic initialization\n * initSentry();\n * \n * // With user context\n * initSentry({ \n *   userId: 'user-123', \n *   userData: { email: 'user@example.com' },\n *   environment: Environment.PRODUCTION\n * });\n */\nexport const initSentry = (options: SentryConfigOptions = {}): void => {\n  const {\n    userId,\n    userData,\n    environment = __DEV__ ? Environment.DEVELOPMENT : Environment.PRODUCTION,\n    debug = __DEV__,\n    enableTracing = !__DEV__,\n  } = options;\n\n  // Only initialize if we have a DSN\n  if (!SENTRY_DSN) {\n    console.warn(\n      'Sentry initialization skipped: No DSN provided. ' +\n      'Add EXPO_PUBLIC_SENTRY_DSN to your .env file to enable error reporting.'\n    );\n    return;\n  }\n\n  // Initialize Sentry\n  Sentry.init({\n    dsn: SENTRY_DSN,\n    enableInExpoDevelopment: true,\n    debug,\n    environment,\n    tracesSampleRate: enableTracing ? 0.2 : 0, // Sample 20% of transactions in non-dev\n    beforeSend(event) {\n      // You can modify or filter events before they are sent to Sentry\n      // For example, remove sensitive data\n      return event;\n    },\n  });\n\n  // Set user context if provided\n  if (userId) {\n    setUserContext(userId, userData);\n  }\n\n  // Add device context\n  Sentry.Native.setContext('device', {\n    platform: Platform.OS,\n    version: Platform.Version,\n    model: Platform.OS === 'ios' ? 'iOS Device' : 'Android Device',\n    appVersion: Constants.expoConfig?.version || 'unknown',\n  });\n\n   \nconsole.warn(`Sentry initialized in ${environment} environment`);\n};\n\n/**\n * Set user context information for better error tracking.\n * Call this when a user logs in or when user data changes.\n * \n * @param userId The unique identifier for the user\n * @param userData Optional additional user data\n * \n * @example\n * // After user login:\n * setUserContext('user-123', { email: 'user@example.com', subscription: 'premium' });\n */\nexport const setUserContext = (userId: string, userData?: Record<string, any>): void => {\n  if (!SENTRY_DSN) return;\n\n  Sentry.Native.setUser({\n    id: userId,\n    ...userData,\n  });\n};\n\n/**\n * Clear user context information.\n * Call this when a user logs out.\n * \n * @example\n * // After user logout:\n * clearUserContext();\n */\nexport const clearUserContext = (): void => {\n  if (!SENTRY_DSN) return;\n  \n  Sentry.Native.setUser(null);\n};\n\n/**\n * Capture an exception and send it to Sentry.\n * \n * @param error The error object to capture\n * @param context Optional additional context data\n * \n * @example\n * try {\n *   // Some code that might throw\n *   throw new Error('Something went wrong');\n * } catch (error) {\n *   captureException(error, { extra: { action: 'saving_data' } });\n * }\n */\nexport const captureException = (error: Error, context?: ScopeContext): void => {\n  if (!SENTRY_DSN) {\n    console.error('Error captured but Sentry is not initialized:', error);\n    return;\n  }\n\n  Sentry.Native.captureException(error, context);\n};\n\n/**\n * Capture a custom message and send it to Sentry.\n * \n * @param message The message to capture\n * @param level The severity level of the message\n * @param context Optional additional context data\n * \n * @example\n * // Log an info message\n * captureMessage('User completed onboarding', 'info');\n * \n * // Log a warning with extra context\n * captureMessage('API rate limit approaching', 'warning', { \n *   extra: { remainingCalls: 10, resetTime: '2023-07-19T15:00:00Z' } \n * });\n */\nexport const captureMessage = (\n  message: string, \n  level: SeverityLevel = 'info',\n  /**\n   * A partial {@link ScopeContext}.  \n   * Only the properties you need (e.g. `tags`, `extra`) have to be provided\n   * which makes the helper easier to use throughout the code-base.\n   */\n  context?: Partial<ScopeContext>\n): void => {\n  if (!SENTRY_DSN) {\n     \nconsole.warn(`[${level}] ${message}`);\n    return;\n  }\n\n  Sentry.Native.captureMessage(message, {\n    level,\n    ...context,\n  });\n};\n\n/**\n * Start a new transaction for performance monitoring.\n * \n * @param name The name of the transaction\n * @param operation The operation being performed\n * @returns A transaction object that should be finished when the operation completes\n * \n * @example\n * // Measure the time it takes to load data\n * const transaction = startTransaction('loadUserData', 'data-loading');\n * try {\n *   await fetchUserData();\n *   transaction.setStatus('ok');\n * } catch (error) {\n *   transaction.setStatus('error');\n *   captureException(error);\n * } finally {\n *   transaction.finish();\n * }\n */\nexport const startTransaction = (\n  name: string,\n  operation: string\n): Transaction => {\n  if (!SENTRY_DSN) {\n    // Return a dummy transaction if Sentry is not initialized\n    const startTime = Date.now();\n    return {\n      finish: () => {\n         \nconsole.warn(`Transaction \"${name}\" (${operation}); finished in ${Date.now() - startTime}ms`);\n      },\n      setStatus: () => {},\n      setTag: () => {},\n      setData: () => {},\n    } as unknown as Transaction;\n  }\n\n  // NOTE: The `startTransaction` helper has been removed from\n  // recent versions of `sentry-expo` / `@sentry/react-native`.\n  // The new API requires constructing a transaction via different means.\n  // For now, provide a **compatibility shim** that mimics\n  // the older `Transaction` interface.\n  return {\n    name,\n    op: operation,\n    finish: () => {},\n    setContext: () => {},\n    setTag: () => {},\n    setStatus: () => {},\n    setData: () => {},\n  } as unknown as Transaction;\n};\n\n/**\n * Create an error boundary component using Sentry's error boundary.\n * This is a convenience wrapper around Sentry.ErrorBoundary.\n * \n * @returns A React error boundary component\n * \n * @example\n * // In a component file:\n * import { getSentryErrorBoundary } from './services/sentryConfig';\n * \n * const ErrorBoundary = getSentryErrorBoundary();\n * \n * export default function App() {\n *   return (\n *     <ErrorBoundary fallback={<Text>Something went wrong</Text>}>\n *       <YourApp />\n *     </ErrorBoundary>\n *   );\n * }\n */\nexport const getSentryErrorBoundary = () => {\n  return Sentry.Native.ErrorBoundary;\n};\n\n/**\n * Add breadcrumb to track user actions or application events.\n * \n * @param breadcrumb The breadcrumb to add\n * \n * @example\n * // Track user navigation\n * addBreadcrumb({\n *   category: 'navigation',\n *   message: 'Navigated to Profile screen',\n *   level: 'info'\n * });\n * \n * // Track API call\n * addBreadcrumb({\n *   category: 'api',\n *   message: 'GET /api/users',\n *   data: { userId: 123 },\n *   level: 'debug'\n * });\n */\nexport const addBreadcrumb = (breadcrumb: Breadcrumb): void => {\n  if (!SENTRY_DSN) return;\n  \n  Sentry.Native.addBreadcrumb(breadcrumb);\n};\n\n// Export the raw Sentry object for advanced use cases\nexport const SentryRaw = Sentry;\n"],"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","ignoreList":[]}