ab1b33200b401b831cb36be43d821e70
"use strict";

/* istanbul ignore next */
function cov_119hbycuot() {
  var path = "/Users/kevin/card-show-finder/src/services/collectionService.ts";
  var hash = "68f3f245760b132bba6a56d9804251af78456921";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kevin/card-show-finder/src/services/collectionService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 268
        }
      },
      "2": {
        start: {
          line: 4,
          column: 19
        },
        end: {
          line: 4,
          column: 41
        }
      },
      "3": {
        start: {
          line: 5,
          column: 16
        },
        end: {
          line: 5,
          column: 35
        }
      },
      "4": {
        start: {
          line: 6,
          column: 25
        },
        end: {
          line: 6,
          column: 52
        }
      },
      "5": {
        start: {
          line: 17,
          column: 21
        },
        end: {
          line: 50,
          column: 1
        }
      },
      "6": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 49,
          column: 5
        }
      },
      "7": {
        start: {
          line: 19,
          column: 32
        },
        end: {
          line: 23,
          column: 53
        }
      },
      "8": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 25,
          column: 24
        }
      },
      "9": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 25,
          column: 24
        }
      },
      "10": {
        start: {
          line: 27,
          column: 32
        },
        end: {
          line: 43,
          column: 18
        }
      },
      "11": {
        start: {
          line: 30,
          column: 44
        },
        end: {
          line: 30,
          column: 115
        }
      },
      "12": {
        start: {
          line: 31,
          column: 16
        },
        end: {
          line: 41,
          column: 18
        }
      },
      "13": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 54
        }
      },
      "14": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 59
        }
      },
      "15": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 37
        }
      },
      "16": {
        start: {
          line: 51,
          column: 0
        },
        end: {
          line: 51,
          column: 36
        }
      },
      "17": {
        start: {
          line: 59,
          column: 20
        },
        end: {
          line: 119,
          column: 1
        }
      },
      "18": {
        start: {
          line: 60,
          column: 4
        },
        end: {
          line: 118,
          column: 5
        }
      },
      "19": {
        start: {
          line: 62,
          column: 59
        },
        end: {
          line: 62,
          column: 98
        }
      },
      "20": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 64,
          column: 29
        }
      },
      "21": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 29
        }
      },
      "22": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 70,
          column: 9
        }
      },
      "23": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 69,
          column: 14
        }
      },
      "24": {
        start: {
          line: 72,
          column: 23
        },
        end: {
          line: 72,
          column: 40
        }
      },
      "25": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 78,
          column: 9
        }
      },
      "26": {
        start: {
          line: 74,
          column: 53
        },
        end: {
          line: 74,
          column: 145
        }
      },
      "27": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 76,
          column: 32
        }
      },
      "28": {
        start: {
          line: 76,
          column: 16
        },
        end: {
          line: 76,
          column: 32
        }
      },
      "29": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 28
        }
      },
      "30": {
        start: {
          line: 80,
          column: 32
        },
        end: {
          line: 93,
          column: 21
        }
      },
      "31": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 95,
          column: 24
        }
      },
      "32": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 24
        }
      },
      "33": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 101,
          column: 9
        }
      },
      "34": {
        start: {
          line: 99,
          column: 34
        },
        end: {
          line: 99,
          column: 99
        }
      },
      "35": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 45
        }
      },
      "36": {
        start: {
          line: 102,
          column: 32
        },
        end: {
          line: 112,
          column: 16
        }
      },
      "37": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 113,
          column: 54
        }
      },
      "38": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 116,
          column: 56
        }
      },
      "39": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 117,
          column: 37
        }
      },
      "40": {
        start: {
          line: 120,
          column: 0
        },
        end: {
          line: 120,
          column: 34
        }
      },
      "41": {
        start: {
          line: 127,
          column: 23
        },
        end: {
          line: 159,
          column: 1
        }
      },
      "42": {
        start: {
          line: 128,
          column: 4
        },
        end: {
          line: 158,
          column: 5
        }
      },
      "43": {
        start: {
          line: 130,
          column: 50
        },
        end: {
          line: 135,
          column: 21
        }
      },
      "44": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 137,
          column: 29
        }
      },
      "45": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 137,
          column: 29
        }
      },
      "46": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 140,
          column: 9
        }
      },
      "47": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 139,
          column: 117
        }
      },
      "48": {
        start: {
          line: 142,
          column: 26
        },
        end: {
          line: 146,
          column: 33
        }
      },
      "49": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 148,
          column: 24
        }
      },
      "50": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 24
        }
      },
      "51": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 152,
          column: 9
        }
      },
      "52": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 151,
          column: 77
        }
      },
      "53": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 153,
          column: 46
        }
      },
      "54": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 156,
          column: 58
        }
      },
      "55": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 157,
          column: 41
        }
      },
      "56": {
        start: {
          line: 160,
          column: 0
        },
        end: {
          line: 160,
          column: 40
        }
      },
      "57": {
        start: {
          line: 168,
          column: 23
        },
        end: {
          line: 240,
          column: 1
        }
      },
      "58": {
        start: {
          line: 169,
          column: 4
        },
        end: {
          line: 239,
          column: 5
        }
      },
      "59": {
        start: {
          line: 171,
          column: 58
        },
        end: {
          line: 176,
          column: 21
        }
      },
      "60": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 178,
          column: 29
        }
      },
      "61": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 178,
          column: 29
        }
      },
      "62": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 181,
          column: 9
        }
      },
      "63": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 180,
          column: 113
        }
      },
      "64": {
        start: {
          line: 183,
          column: 23
        },
        end: {
          line: 183,
          column: 64
        }
      },
      "65": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 193,
          column: 9
        }
      },
      "66": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 188,
          column: 13
        }
      },
      "67": {
        start: {
          line: 187,
          column: 16
        },
        end: {
          line: 187,
          column: 89
        }
      },
      "68": {
        start: {
          line: 189,
          column: 56
        },
        end: {
          line: 189,
          column: 156
        }
      },
      "69": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 191,
          column: 32
        }
      },
      "70": {
        start: {
          line: 191,
          column: 16
        },
        end: {
          line: 191,
          column: 32
        }
      },
      "71": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 192,
          column: 31
        }
      },
      "72": {
        start: {
          line: 195,
          column: 27
        },
        end: {
          line: 197,
          column: 9
        }
      },
      "73": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 199,
          column: 43
        }
      },
      "74": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 199,
          column: 43
        }
      },
      "75": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 201,
          column: 45
        }
      },
      "76": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 201,
          column: 45
        }
      },
      "77": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 203,
          column: 57
        }
      },
      "78": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 57
        }
      },
      "79": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 205,
          column: 51
        }
      },
      "80": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 205,
          column: 51
        }
      },
      "81": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 207,
          column: 59
        }
      },
      "82": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 207,
          column: 59
        }
      },
      "83": {
        start: {
          line: 208,
          column: 32
        },
        end: {
          line: 214,
          column: 21
        }
      },
      "84": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 216,
          column: 24
        }
      },
      "85": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 216,
          column: 24
        }
      },
      "86": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 222,
          column: 9
        }
      },
      "87": {
        start: {
          line: 220,
          column: 34
        },
        end: {
          line: 220,
          column: 99
        }
      },
      "88": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 221,
          column: 45
        }
      },
      "89": {
        start: {
          line: 223,
          column: 32
        },
        end: {
          line: 233,
          column: 16
        }
      },
      "90": {
        start: {
          line: 234,
          column: 8
        },
        end: {
          line: 234,
          column: 54
        }
      },
      "91": {
        start: {
          line: 237,
          column: 8
        },
        end: {
          line: 237,
          column: 58
        }
      },
      "92": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 238,
          column: 37
        }
      },
      "93": {
        start: {
          line: 241,
          column: 0
        },
        end: {
          line: 241,
          column: 40
        }
      },
      "94": {
        start: {
          line: 248,
          column: 24
        },
        end: {
          line: 272,
          column: 1
        }
      },
      "95": {
        start: {
          line: 249,
          column: 4
        },
        end: {
          line: 271,
          column: 5
        }
      },
      "96": {
        start: {
          line: 250,
          column: 32
        },
        end: {
          line: 254,
          column: 26
        }
      },
      "97": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 257,
          column: 9
        }
      },
      "98": {
        start: {
          line: 256,
          column: 12
        },
        end: {
          line: 256,
          column: 24
        }
      },
      "99": {
        start: {
          line: 259,
          column: 32
        },
        end: {
          line: 265,
          column: 16
        }
      },
      "100": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 266,
          column: 54
        }
      },
      "101": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 269,
          column: 58
        }
      },
      "102": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 270,
          column: 37
        }
      },
      "103": {
        start: {
          line: 273,
          column: 0
        },
        end: {
          line: 273,
          column: 42
        }
      },
      "104": {
        start: {
          line: 280,
          column: 23
        },
        end: {
          line: 315,
          column: 1
        }
      },
      "105": {
        start: {
          line: 281,
          column: 4
        },
        end: {
          line: 314,
          column: 5
        }
      },
      "106": {
        start: {
          line: 283,
          column: 39
        },
        end: {
          line: 283,
          column: 81
        }
      },
      "107": {
        start: {
          line: 284,
          column: 8
        },
        end: {
          line: 287,
          column: 9
        }
      },
      "108": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 286,
          column: 81
        }
      },
      "109": {
        start: {
          line: 289,
          column: 32
        },
        end: {
          line: 298,
          column: 21
        }
      },
      "110": {
        start: {
          line: 299,
          column: 8
        },
        end: {
          line: 300,
          column: 24
        }
      },
      "111": {
        start: {
          line: 300,
          column: 12
        },
        end: {
          line: 300,
          column: 24
        }
      },
      "112": {
        start: {
          line: 302,
          column: 32
        },
        end: {
          line: 308,
          column: 16
        }
      },
      "113": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 309,
          column: 54
        }
      },
      "114": {
        start: {
          line: 312,
          column: 8
        },
        end: {
          line: 312,
          column: 58
        }
      },
      "115": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 313,
          column: 37
        }
      },
      "116": {
        start: {
          line: 316,
          column: 0
        },
        end: {
          line: 316,
          column: 40
        }
      },
      "117": {
        start: {
          line: 324,
          column: 23
        },
        end: {
          line: 352,
          column: 1
        }
      },
      "118": {
        start: {
          line: 325,
          column: 4
        },
        end: {
          line: 351,
          column: 5
        }
      },
      "119": {
        start: {
          line: 326,
          column: 32
        },
        end: {
          line: 335,
          column: 21
        }
      },
      "120": {
        start: {
          line: 336,
          column: 8
        },
        end: {
          line: 337,
          column: 24
        }
      },
      "121": {
        start: {
          line: 337,
          column: 12
        },
        end: {
          line: 337,
          column: 24
        }
      },
      "122": {
        start: {
          line: 339,
          column: 32
        },
        end: {
          line: 345,
          column: 16
        }
      },
      "123": {
        start: {
          line: 346,
          column: 8
        },
        end: {
          line: 346,
          column: 54
        }
      },
      "124": {
        start: {
          line: 349,
          column: 8
        },
        end: {
          line: 349,
          column: 58
        }
      },
      "125": {
        start: {
          line: 350,
          column: 8
        },
        end: {
          line: 350,
          column: 37
        }
      },
      "126": {
        start: {
          line: 353,
          column: 0
        },
        end: {
          line: 353,
          column: 40
        }
      },
      "127": {
        start: {
          line: 360,
          column: 22
        },
        end: {
          line: 386,
          column: 1
        }
      },
      "128": {
        start: {
          line: 361,
          column: 4
        },
        end: {
          line: 385,
          column: 5
        }
      },
      "129": {
        start: {
          line: 363,
          column: 57
        },
        end: {
          line: 363,
          column: 99
        }
      },
      "130": {
        start: {
          line: 364,
          column: 8
        },
        end: {
          line: 365,
          column: 32
        }
      },
      "131": {
        start: {
          line: 365,
          column: 12
        },
        end: {
          line: 365,
          column: 32
        }
      },
      "132": {
        start: {
          line: 366,
          column: 8
        },
        end: {
          line: 368,
          column: 9
        }
      },
      "133": {
        start: {
          line: 367,
          column: 12
        },
        end: {
          line: 367,
          column: 105
        }
      },
      "134": {
        start: {
          line: 370,
          column: 26
        },
        end: {
          line: 377,
          column: 15
        }
      },
      "135": {
        start: {
          line: 378,
          column: 8
        },
        end: {
          line: 379,
          column: 24
        }
      },
      "136": {
        start: {
          line: 379,
          column: 12
        },
        end: {
          line: 379,
          column: 24
        }
      },
      "137": {
        start: {
          line: 380,
          column: 8
        },
        end: {
          line: 380,
          column: 46
        }
      },
      "138": {
        start: {
          line: 383,
          column: 8
        },
        end: {
          line: 383,
          column: 57
        }
      },
      "139": {
        start: {
          line: 384,
          column: 8
        },
        end: {
          line: 384,
          column: 41
        }
      },
      "140": {
        start: {
          line: 387,
          column: 0
        },
        end: {
          line: 387,
          column: 38
        }
      },
      "141": {
        start: {
          line: 393,
          column: 26
        },
        end: {
          line: 411,
          column: 1
        }
      },
      "142": {
        start: {
          line: 394,
          column: 4
        },
        end: {
          line: 410,
          column: 5
        }
      },
      "143": {
        start: {
          line: 396,
          column: 32
        },
        end: {
          line: 400,
          column: 58
        }
      },
      "144": {
        start: {
          line: 401,
          column: 8
        },
        end: {
          line: 402,
          column: 24
        }
      },
      "145": {
        start: {
          line: 402,
          column: 12
        },
        end: {
          line: 402,
          column: 24
        }
      },
      "146": {
        start: {
          line: 404,
          column: 24
        },
        end: {
          line: 404,
          column: 59
        }
      },
      "147": {
        start: {
          line: 404,
          column: 42
        },
        end: {
          line: 404,
          column: 52
        }
      },
      "148": {
        start: {
          line: 405,
          column: 8
        },
        end: {
          line: 405,
          column: 46
        }
      },
      "149": {
        start: {
          line: 408,
          column: 8
        },
        end: {
          line: 408,
          column: 65
        }
      },
      "150": {
        start: {
          line: 409,
          column: 8
        },
        end: {
          line: 409,
          column: 37
        }
      },
      "151": {
        start: {
          line: 412,
          column: 0
        },
        end: {
          line: 412,
          column: 46
        }
      },
      "152": {
        start: {
          line: 419,
          column: 36
        },
        end: {
          line: 464,
          column: 1
        }
      },
      "153": {
        start: {
          line: 420,
          column: 4
        },
        end: {
          line: 463,
          column: 5
        }
      },
      "154": {
        start: {
          line: 422,
          column: 53
        },
        end: {
          line: 426,
          column: 21
        }
      },
      "155": {
        start: {
          line: 427,
          column: 8
        },
        end: {
          line: 428,
          column: 28
        }
      },
      "156": {
        start: {
          line: 428,
          column: 12
        },
        end: {
          line: 428,
          column: 28
        }
      },
      "157": {
        start: {
          line: 429,
          column: 8
        },
        end: {
          line: 434,
          column: 9
        }
      },
      "158": {
        start: {
          line: 430,
          column: 12
        },
        end: {
          line: 433,
          column: 14
        }
      },
      "159": {
        start: {
          line: 436,
          column: 32
        },
        end: {
          line: 444,
          column: 33
        }
      },
      "160": {
        start: {
          line: 445,
          column: 8
        },
        end: {
          line: 446,
          column: 24
        }
      },
      "161": {
        start: {
          line: 446,
          column: 12
        },
        end: {
          line: 446,
          column: 24
        }
      },
      "162": {
        start: {
          line: 448,
          column: 32
        },
        end: {
          line: 457,
          column: 11
        }
      },
      "163": {
        start: {
          line: 448,
          column: 51
        },
        end: {
          line: 457,
          column: 9
        }
      },
      "164": {
        start: {
          line: 458,
          column: 8
        },
        end: {
          line: 458,
          column: 54
        }
      },
      "165": {
        start: {
          line: 461,
          column: 8
        },
        end: {
          line: 461,
          column: 66
        }
      },
      "166": {
        start: {
          line: 462,
          column: 8
        },
        end: {
          line: 462,
          column: 37
        }
      },
      "167": {
        start: {
          line: 465,
          column: 0
        },
        end: {
          line: 465,
          column: 66
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 17,
            column: 21
          },
          end: {
            line: 17,
            column: 22
          }
        },
        loc: {
          start: {
            line: 17,
            column: 39
          },
          end: {
            line: 50,
            column: 1
          }
        },
        line: 17
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 28,
            column: 41
          },
          end: {
            line: 28,
            column: 42
          }
        },
        loc: {
          start: {
            line: 28,
            column: 57
          },
          end: {
            line: 42,
            column: 13
          }
        },
        line: 28
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 59,
            column: 20
          },
          end: {
            line: 59,
            column: 21
          }
        },
        loc: {
          start: {
            line: 59,
            column: 48
          },
          end: {
            line: 119,
            column: 1
          }
        },
        line: 59
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 127,
            column: 23
          },
          end: {
            line: 127,
            column: 24
          }
        },
        loc: {
          start: {
            line: 127,
            column: 49
          },
          end: {
            line: 159,
            column: 1
          }
        },
        line: 127
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 168,
            column: 23
          },
          end: {
            line: 168,
            column: 24
          }
        },
        loc: {
          start: {
            line: 168,
            column: 58
          },
          end: {
            line: 240,
            column: 1
          }
        },
        line: 168
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 248,
            column: 24
          },
          end: {
            line: 248,
            column: 25
          }
        },
        loc: {
          start: {
            line: 248,
            column: 42
          },
          end: {
            line: 272,
            column: 1
          }
        },
        line: 248
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 280,
            column: 23
          },
          end: {
            line: 280,
            column: 24
          }
        },
        loc: {
          start: {
            line: 280,
            column: 50
          },
          end: {
            line: 315,
            column: 1
          }
        },
        line: 280
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 324,
            column: 23
          },
          end: {
            line: 324,
            column: 24
          }
        },
        loc: {
          start: {
            line: 324,
            column: 62
          },
          end: {
            line: 352,
            column: 1
          }
        },
        line: 324
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 360,
            column: 22
          },
          end: {
            line: 360,
            column: 23
          }
        },
        loc: {
          start: {
            line: 360,
            column: 48
          },
          end: {
            line: 386,
            column: 1
          }
        },
        line: 360
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 393,
            column: 26
          },
          end: {
            line: 393,
            column: 27
          }
        },
        loc: {
          start: {
            line: 393,
            column: 44
          },
          end: {
            line: 411,
            column: 1
          }
        },
        line: 393
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 404,
            column: 34
          },
          end: {
            line: 404,
            column: 35
          }
        },
        loc: {
          start: {
            line: 404,
            column: 42
          },
          end: {
            line: 404,
            column: 52
          }
        },
        line: 404
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 419,
            column: 36
          },
          end: {
            line: 419,
            column: 37
          }
        },
        loc: {
          start: {
            line: 419,
            column: 64
          },
          end: {
            line: 464,
            column: 1
          }
        },
        line: 419
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 448,
            column: 42
          },
          end: {
            line: 448,
            column: 43
          }
        },
        loc: {
          start: {
            line: 448,
            column: 51
          },
          end: {
            line: 457,
            column: 9
          }
        },
        line: 448
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 25,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 25,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 24
      },
      "1": {
        loc: {
          start: {
            line: 27,
            column: 32
          },
          end: {
            line: 43,
            column: 18
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 28,
            column: 14
          },
          end: {
            line: 42,
            column: 15
          }
        }, {
          start: {
            line: 43,
            column: 14
          },
          end: {
            line: 43,
            column: 18
          }
        }],
        line: 27
      },
      "2": {
        loc: {
          start: {
            line: 30,
            column: 95
          },
          end: {
            line: 30,
            column: 114
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 30,
            column: 95
          },
          end: {
            line: 30,
            column: 108
          }
        }, {
          start: {
            line: 30,
            column: 112
          },
          end: {
            line: 30,
            column: 114
          }
        }],
        line: 30
      },
      "3": {
        loc: {
          start: {
            line: 34,
            column: 30
          },
          end: {
            line: 34,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 34,
            column: 30
          },
          end: {
            line: 34,
            column: 39
          }
        }, {
          start: {
            line: 34,
            column: 43
          },
          end: {
            line: 34,
            column: 56
          }
        }],
        line: 34
      },
      "4": {
        loc: {
          start: {
            line: 63,
            column: 8
          },
          end: {
            line: 64,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 63,
            column: 8
          },
          end: {
            line: 64,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 63
      },
      "5": {
        loc: {
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 70,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 70,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "6": {
        loc: {
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 65,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 65,
            column: 25
          }
        }, {
          start: {
            line: 65,
            column: 29
          },
          end: {
            line: 65,
            column: 55
          }
        }],
        line: 65
      },
      "7": {
        loc: {
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      },
      "8": {
        loc: {
          start: {
            line: 75,
            column: 12
          },
          end: {
            line: 76,
            column: 32
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 12
          },
          end: {
            line: 76,
            column: 32
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 75
      },
      "9": {
        loc: {
          start: {
            line: 75,
            column: 16
          },
          end: {
            line: 75,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 75,
            column: 16
          },
          end: {
            line: 75,
            column: 25
          }
        }, {
          start: {
            line: 75,
            column: 29
          },
          end: {
            line: 75,
            column: 34
          }
        }],
        line: 75
      },
      "10": {
        loc: {
          start: {
            line: 85,
            column: 23
          },
          end: {
            line: 85,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 85,
            column: 23
          },
          end: {
            line: 85,
            column: 37
          }
        }, {
          start: {
            line: 85,
            column: 41
          },
          end: {
            line: 85,
            column: 43
          }
        }],
        line: 85
      },
      "11": {
        loc: {
          start: {
            line: 86,
            column: 29
          },
          end: {
            line: 86,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 86,
            column: 29
          },
          end: {
            line: 86,
            column: 49
          }
        }, {
          start: {
            line: 86,
            column: 53
          },
          end: {
            line: 86,
            column: 55
          }
        }],
        line: 86
      },
      "12": {
        loc: {
          start: {
            line: 87,
            column: 26
          },
          end: {
            line: 87,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 87,
            column: 26
          },
          end: {
            line: 87,
            column: 43
          }
        }, {
          start: {
            line: 87,
            column: 47
          },
          end: {
            line: 87,
            column: 49
          }
        }],
        line: 87
      },
      "13": {
        loc: {
          start: {
            line: 88,
            column: 30
          },
          end: {
            line: 88,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 88,
            column: 30
          },
          end: {
            line: 88,
            column: 51
          }
        }, {
          start: {
            line: 88,
            column: 55
          },
          end: {
            line: 88,
            column: 60
          }
        }],
        line: 88
      },
      "14": {
        loc: {
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 95,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 95,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 94
      },
      "15": {
        loc: {
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 101,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 101,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 98
      },
      "16": {
        loc: {
          start: {
            line: 100,
            column: 24
          },
          end: {
            line: 100,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 100,
            column: 24
          },
          end: {
            line: 100,
            column: 27
          }
        }, {
          start: {
            line: 100,
            column: 31
          },
          end: {
            line: 100,
            column: 44
          }
        }],
        line: 100
      },
      "17": {
        loc: {
          start: {
            line: 102,
            column: 32
          },
          end: {
            line: 112,
            column: 16
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 102,
            column: 39
          },
          end: {
            line: 112,
            column: 9
          }
        }, {
          start: {
            line: 112,
            column: 12
          },
          end: {
            line: 112,
            column: 16
          }
        }],
        line: 102
      },
      "18": {
        loc: {
          start: {
            line: 136,
            column: 8
          },
          end: {
            line: 137,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 136,
            column: 8
          },
          end: {
            line: 137,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 136
      },
      "19": {
        loc: {
          start: {
            line: 138,
            column: 8
          },
          end: {
            line: 140,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 138,
            column: 8
          },
          end: {
            line: 140,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 138
      },
      "20": {
        loc: {
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 148,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 148,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 147
      },
      "21": {
        loc: {
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 152,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 152,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 150
      },
      "22": {
        loc: {
          start: {
            line: 177,
            column: 8
          },
          end: {
            line: 178,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 177,
            column: 8
          },
          end: {
            line: 178,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 177
      },
      "23": {
        loc: {
          start: {
            line: 179,
            column: 8
          },
          end: {
            line: 181,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 179,
            column: 8
          },
          end: {
            line: 181,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 179
      },
      "24": {
        loc: {
          start: {
            line: 183,
            column: 23
          },
          end: {
            line: 183,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 183,
            column: 23
          },
          end: {
            line: 183,
            column: 39
          }
        }, {
          start: {
            line: 183,
            column: 43
          },
          end: {
            line: 183,
            column: 64
          }
        }],
        line: 183
      },
      "25": {
        loc: {
          start: {
            line: 184,
            column: 8
          },
          end: {
            line: 193,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 184,
            column: 8
          },
          end: {
            line: 193,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 184
      },
      "26": {
        loc: {
          start: {
            line: 184,
            column: 12
          },
          end: {
            line: 184,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 184,
            column: 12
          },
          end: {
            line: 184,
            column: 28
          }
        }, {
          start: {
            line: 184,
            column: 32
          },
          end: {
            line: 184,
            column: 73
          }
        }],
        line: 184
      },
      "27": {
        loc: {
          start: {
            line: 186,
            column: 12
          },
          end: {
            line: 188,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 186,
            column: 12
          },
          end: {
            line: 188,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 186
      },
      "28": {
        loc: {
          start: {
            line: 190,
            column: 12
          },
          end: {
            line: 191,
            column: 32
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 190,
            column: 12
          },
          end: {
            line: 191,
            column: 32
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 190
      },
      "29": {
        loc: {
          start: {
            line: 190,
            column: 16
          },
          end: {
            line: 190,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 190,
            column: 16
          },
          end: {
            line: 190,
            column: 25
          }
        }, {
          start: {
            line: 190,
            column: 29
          },
          end: {
            line: 190,
            column: 37
          }
        }],
        line: 190
      },
      "30": {
        loc: {
          start: {
            line: 198,
            column: 8
          },
          end: {
            line: 199,
            column: 43
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 198,
            column: 8
          },
          end: {
            line: 199,
            column: 43
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 198
      },
      "31": {
        loc: {
          start: {
            line: 200,
            column: 8
          },
          end: {
            line: 201,
            column: 45
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 200,
            column: 8
          },
          end: {
            line: 201,
            column: 45
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 200
      },
      "32": {
        loc: {
          start: {
            line: 202,
            column: 8
          },
          end: {
            line: 203,
            column: 57
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 202,
            column: 8
          },
          end: {
            line: 203,
            column: 57
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 202
      },
      "33": {
        loc: {
          start: {
            line: 204,
            column: 8
          },
          end: {
            line: 205,
            column: 51
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 204,
            column: 8
          },
          end: {
            line: 205,
            column: 51
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 204
      },
      "34": {
        loc: {
          start: {
            line: 206,
            column: 8
          },
          end: {
            line: 207,
            column: 59
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 206,
            column: 8
          },
          end: {
            line: 207,
            column: 59
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 206
      },
      "35": {
        loc: {
          start: {
            line: 215,
            column: 8
          },
          end: {
            line: 216,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 215,
            column: 8
          },
          end: {
            line: 216,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 215
      },
      "36": {
        loc: {
          start: {
            line: 219,
            column: 8
          },
          end: {
            line: 222,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 219,
            column: 8
          },
          end: {
            line: 222,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 219
      },
      "37": {
        loc: {
          start: {
            line: 221,
            column: 24
          },
          end: {
            line: 221,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 221,
            column: 24
          },
          end: {
            line: 221,
            column: 27
          }
        }, {
          start: {
            line: 221,
            column: 31
          },
          end: {
            line: 221,
            column: 44
          }
        }],
        line: 221
      },
      "38": {
        loc: {
          start: {
            line: 223,
            column: 32
          },
          end: {
            line: 233,
            column: 16
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 223,
            column: 39
          },
          end: {
            line: 233,
            column: 9
          }
        }, {
          start: {
            line: 233,
            column: 12
          },
          end: {
            line: 233,
            column: 16
          }
        }],
        line: 223
      },
      "39": {
        loc: {
          start: {
            line: 255,
            column: 8
          },
          end: {
            line: 257,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 255,
            column: 8
          },
          end: {
            line: 257,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 255
      },
      "40": {
        loc: {
          start: {
            line: 255,
            column: 12
          },
          end: {
            line: 255,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 255,
            column: 12
          },
          end: {
            line: 255,
            column: 17
          }
        }, {
          start: {
            line: 255,
            column: 21
          },
          end: {
            line: 255,
            column: 46
          }
        }],
        line: 255
      },
      "41": {
        loc: {
          start: {
            line: 259,
            column: 32
          },
          end: {
            line: 265,
            column: 16
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 259,
            column: 39
          },
          end: {
            line: 265,
            column: 9
          }
        }, {
          start: {
            line: 265,
            column: 12
          },
          end: {
            line: 265,
            column: 16
          }
        }],
        line: 259
      },
      "42": {
        loc: {
          start: {
            line: 284,
            column: 8
          },
          end: {
            line: 287,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 284,
            column: 8
          },
          end: {
            line: 287,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 284
      },
      "43": {
        loc: {
          start: {
            line: 299,
            column: 8
          },
          end: {
            line: 300,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 299,
            column: 8
          },
          end: {
            line: 300,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 299
      },
      "44": {
        loc: {
          start: {
            line: 302,
            column: 32
          },
          end: {
            line: 308,
            column: 16
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 302,
            column: 39
          },
          end: {
            line: 308,
            column: 9
          }
        }, {
          start: {
            line: 308,
            column: 12
          },
          end: {
            line: 308,
            column: 16
          }
        }],
        line: 302
      },
      "45": {
        loc: {
          start: {
            line: 336,
            column: 8
          },
          end: {
            line: 337,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 336,
            column: 8
          },
          end: {
            line: 337,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 336
      },
      "46": {
        loc: {
          start: {
            line: 339,
            column: 32
          },
          end: {
            line: 345,
            column: 16
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 339,
            column: 39
          },
          end: {
            line: 345,
            column: 9
          }
        }, {
          start: {
            line: 345,
            column: 12
          },
          end: {
            line: 345,
            column: 16
          }
        }],
        line: 339
      },
      "47": {
        loc: {
          start: {
            line: 364,
            column: 8
          },
          end: {
            line: 365,
            column: 32
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 364,
            column: 8
          },
          end: {
            line: 365,
            column: 32
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 364
      },
      "48": {
        loc: {
          start: {
            line: 366,
            column: 8
          },
          end: {
            line: 368,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 366,
            column: 8
          },
          end: {
            line: 368,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 366
      },
      "49": {
        loc: {
          start: {
            line: 378,
            column: 8
          },
          end: {
            line: 379,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 378,
            column: 8
          },
          end: {
            line: 379,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 378
      },
      "50": {
        loc: {
          start: {
            line: 401,
            column: 8
          },
          end: {
            line: 402,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 401,
            column: 8
          },
          end: {
            line: 402,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 401
      },
      "51": {
        loc: {
          start: {
            line: 404,
            column: 24
          },
          end: {
            line: 404,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 404,
            column: 24
          },
          end: {
            line: 404,
            column: 53
          }
        }, {
          start: {
            line: 404,
            column: 57
          },
          end: {
            line: 404,
            column: 59
          }
        }],
        line: 404
      },
      "52": {
        loc: {
          start: {
            line: 427,
            column: 8
          },
          end: {
            line: 428,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 427,
            column: 8
          },
          end: {
            line: 428,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 427
      },
      "53": {
        loc: {
          start: {
            line: 429,
            column: 8
          },
          end: {
            line: 434,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 429,
            column: 8
          },
          end: {
            line: 434,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 429
      },
      "54": {
        loc: {
          start: {
            line: 429,
            column: 12
          },
          end: {
            line: 429,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 429,
            column: 12
          },
          end: {
            line: 429,
            column: 21
          }
        }, {
          start: {
            line: 429,
            column: 25
          },
          end: {
            line: 429,
            column: 70
          }
        }],
        line: 429
      },
      "55": {
        loc: {
          start: {
            line: 445,
            column: 8
          },
          end: {
            line: 446,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 445,
            column: 8
          },
          end: {
            line: 446,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 445
      },
      "56": {
        loc: {
          start: {
            line: 452,
            column: 22
          },
          end: {
            line: 456,
            column: 20
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 452,
            column: 39
          },
          end: {
            line: 456,
            column: 13
          }
        }, {
          start: {
            line: 456,
            column: 16
          },
          end: {
            line: 456,
            column: 20
          }
        }],
        line: 452
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/kevin/card-show-finder/src/services/collectionService.ts",
      mappings: ";;;AAAA,0CAAuC;AACvC,oCAAwD;AACxD,qDAAkD,CAAC,oBAAoB;AAEvE;;;GAGG;AAEH,mDAAmD;AAEnD;;;;GAIG;AACI,MAAM,YAAY,GAAG,KAAK,EAAE,MAAc,EAAoD,EAAE;IACrG,IAAI,CAAC;QACH,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,mBAAQ;aACnC,IAAI,CAAC,YAAY,CAAC;aAClB,MAAM,CAAC,GAAG,CAAC;aACX,EAAE,CAAC,QAAQ,EAAE,MAAM,CAAC;aACpB,KAAK,CAAC,WAAW,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;QAE5C,IAAI,KAAK;YAAE,MAAM,KAAK,CAAC;QAEvB,uFAAuF;QACvF,MAAM,eAAe,GAAG,IAAI;YAC1B,CAAC,CAAC,MAAM,OAAO,CAAC,GAAG,CACf,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE;gBACtB,uEAAuE;gBACvE,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,MAAM,+BAAc,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC;gBACnF,OAAO;oBACL,EAAE,EAAE,IAAI,CAAC,EAAE;oBACX,MAAM,EAAE,IAAI,CAAC,MAAM;oBACnB,QAAQ,EAAE,SAAS,IAAI,IAAI,CAAC,QAAQ;oBACpC,KAAK,EAAE,IAAI,CAAC,KAAK;oBACjB,WAAW,EAAE,IAAI,CAAC,WAAW;oBAC7B,QAAQ,EAAE,IAAI,CAAC,QAAQ;oBACvB,YAAY,EAAE,IAAI,CAAC,YAAY;oBAC/B,SAAS,EAAE,IAAI,CAAC,SAAS;oBACzB,SAAS,EAAE,IAAI,CAAC,SAAS;iBAC1B,CAAC;YACJ,CAAC,CAAC,CACH;YACH,CAAC,CAAC,IAAI,CAAC;QAET,OAAO,EAAE,IAAI,EAAE,eAAe,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;IAChD,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;QACnD,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;IAC/B,CAAC;AACH,CAAC,CAAC;AApCW,QAAA,YAAY,gBAoCvB;AAEF;;;;;;GAMG;AACI,MAAM,WAAW,GAAG,KAAK,EAC9B,MAAc,EACd,QAAqE,EACrB,EAAE;IAClD,IAAI,CAAC;QACH,+CAA+C;QAC/C,MAAM,EAAE,IAAI,EAAE,aAAa,EAAE,KAAK,EAAE,UAAU,EAAE,GAAG,MAAM,IAAA,oBAAY,EAAC,MAAM,CAAC,CAAC;QAE9E,IAAI,UAAU;YAAE,MAAM,UAAU,CAAC;QAEjC,IAAI,aAAa,IAAI,aAAa,CAAC,MAAM,IAAI,EAAE,EAAE,CAAC;YAChD,OAAO;gBACL,IAAI,EAAE,IAAI;gBACV,KAAK,EAAE,IAAI,KAAK,CAAC,gFAAgF,CAAC;aACnG,CAAC;QACJ,CAAC;QAED,2DAA2D;QAC3D,IAAI,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;QACjC,IAAI,QAAQ,CAAC,UAAU,CAAC,YAAY,CAAC,EAAE,CAAC;YACtC,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,MAAM,+BAAc,CAAC,WAAW,CACvE,MAAM,EACN,QAAQ,EACR,SAAS,EACT,YAAY,CACb,CAAC;YACF,IAAI,SAAS,IAAI,CAAC,IAAI;gBAAE,MAAM,SAAS,CAAC;YACxC,QAAQ,GAAG,IAAI,CAAC,CAAC,wDAAwD;QAC3E,CAAC;QAED,4DAA4D;QAC5D,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,mBAAQ;aACnC,IAAI,CAAC,YAAY,CAAC;aAClB,MAAM,CAAC,CAAC;gBACP,MAAM,EAAE,MAAM;gBACd,QAAQ,EAAE,QAAQ;gBAClB,KAAK,EAAE,QAAQ,CAAC,KAAK,IAAI,EAAE;gBAC3B,WAAW,EAAE,QAAQ,CAAC,WAAW,IAAI,EAAE;gBACvC,QAAQ,EAAE,QAAQ,CAAC,QAAQ,IAAI,EAAE;gBACjC,YAAY,EAAE,QAAQ,CAAC,YAAY,IAAI,KAAK;gBAC5C,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;aACpC,CAAC,CAAC;aACF,MAAM,EAAE;aACR,MAAM,EAAE,CAAC;QAEZ,IAAI,KAAK;YAAE,MAAM,KAAK,CAAC;QAEvB,yDAAyD;QACzD,IAAI,SAA6B,CAAC;QAClC,IAAI,IAAI,EAAE,QAAQ,EAAE,CAAC;YACnB,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,MAAM,+BAAc,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACvE,SAAS,GAAG,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC;QACnC,CAAC;QAED,MAAM,eAAe,GAAG,IAAI,CAAC,CAAC,CAAC;YAC7B,EAAE,EAAE,IAAI,CAAC,EAAE;YACX,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,QAAQ,EAAE,SAAS;YACnB,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,YAAY,EAAE,IAAI,CAAC,YAAY;YAC/B,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,SAAS,EAAE,IAAI,CAAC,SAAS;SAC1B,CAAC,CAAC,CAAC,IAAI,CAAC;QAET,OAAO,EAAE,IAAI,EAAE,eAAe,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;IAChD,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,yBAAyB,EAAE,KAAK,CAAC,CAAC;QAChD,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;IAC/B,CAAC;AACH,CAAC,CAAC;AAxEW,QAAA,WAAW,eAwEtB;AAEF;;;;;GAKG;AACI,MAAM,cAAc,GAAG,KAAK,EACjC,MAAc,EACd,MAAc,EAC6B,EAAE;IAC7C,IAAI,CAAC;QACH,sCAAsC;QACtC,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,UAAU,EAAE,GAAG,MAAM,mBAAQ;aACrD,IAAI,CAAC,YAAY,CAAC;aAClB,MAAM,CAAC,UAAU,CAAC;aAClB,EAAE,CAAC,IAAI,EAAE,MAAM,CAAC;aAChB,EAAE,CAAC,QAAQ,EAAE,MAAM,CAAC;aACpB,MAAM,EAAE,CAAC;QAEZ,IAAI,UAAU;YAAE,MAAM,UAAU,CAAC;QAEjC,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,KAAK,CAAC,2DAA2D,CAAC,EAAE,CAAC;QAC3G,CAAC;QAED,oCAAoC;QACpC,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,mBAAQ;aAC7B,IAAI,CAAC,YAAY,CAAC;aAClB,MAAM,EAAE;aACR,EAAE,CAAC,IAAI,EAAE,MAAM,CAAC;aAChB,EAAE,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAExB,IAAI,KAAK;YAAE,MAAM,KAAK,CAAC;QAEvB,2DAA2D;QAC3D,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YAClB,MAAM,+BAAc,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAClD,CAAC;QAED,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;IACxC,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;QAClD,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;IACnC,CAAC;AACH,CAAC,CAAC;AAtCW,QAAA,cAAc,kBAsCzB;AAEF;;;;;;GAMG;AACI,MAAM,cAAc,GAAG,KAAK,EACjC,MAAc,EACd,MAAc,EACd,OAA+D,EACf,EAAE;IAClD,IAAI,CAAC;QACH,sCAAsC;QACtC,MAAM,EAAE,IAAI,EAAE,YAAY,EAAE,KAAK,EAAE,UAAU,EAAE,GAAG,MAAM,mBAAQ;aAC7D,IAAI,CAAC,YAAY,CAAC;aAClB,MAAM,CAAC,GAAG,CAAC;aACX,EAAE,CAAC,IAAI,EAAE,MAAM,CAAC;aAChB,EAAE,CAAC,QAAQ,EAAE,MAAM,CAAC;aACpB,MAAM,EAAE,CAAC;QAEZ,IAAI,UAAU;YAAE,MAAM,UAAU,CAAC;QAEjC,IAAI,CAAC,YAAY,EAAE,CAAC;YAClB,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,KAAK,CAAC,2DAA2D,CAAC,EAAE,CAAC;QACvG,CAAC;QAED,kCAAkC;QAClC,IAAI,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,YAAY,CAAC,QAAQ,CAAC;QACzD,IAAI,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,YAAY,CAAC,EAAE,CAAC;YAClE,0CAA0C;YAC1C,IAAI,YAAY,CAAC,QAAQ,EAAE,CAAC;gBAC1B,MAAM,+BAAc,CAAC,WAAW,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;YAC1D,CAAC;YACD,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,MAAM,+BAAc,CAAC,WAAW,CAC1E,MAAM,EACN,OAAO,CAAC,QAAQ,EAChB,SAAS,EACT,YAAY,CACb,CAAC;YACF,IAAI,SAAS,IAAI,CAAC,OAAO;gBAAE,MAAM,SAAS,CAAC;YAC3C,QAAQ,GAAG,OAAO,CAAC;QACrB,CAAC;QAED,8CAA8C;QAC9C,MAAM,UAAU,GAAQ;YACtB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACpC,CAAC;QAEF,IAAI,QAAQ,KAAK,SAAS;YAAE,UAAU,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAC3D,IAAI,OAAO,CAAC,KAAK,KAAK,SAAS;YAAE,UAAU,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;QAClE,IAAI,OAAO,CAAC,WAAW,KAAK,SAAS;YAAE,UAAU,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;QACpF,IAAI,OAAO,CAAC,QAAQ,KAAK,SAAS;YAAE,UAAU,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;QAC3E,IAAI,OAAO,CAAC,YAAY,KAAK,SAAS;YAAE,UAAU,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC;QAEvF,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,mBAAQ;aACnC,IAAI,CAAC,YAAY,CAAC;aAClB,MAAM,CAAC,UAAU,CAAC;aAClB,EAAE,CAAC,IAAI,EAAE,MAAM,CAAC;aAChB,EAAE,CAAC,QAAQ,EAAE,MAAM,CAAC;aACpB,MAAM,EAAE;aACR,MAAM,EAAE,CAAC;QAEZ,IAAI,KAAK;YAAE,MAAM,KAAK,CAAC;QAEvB,yDAAyD;QACzD,IAAI,SAA6B,CAAC;QAClC,IAAI,IAAI,EAAE,QAAQ,EAAE,CAAC;YACnB,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,MAAM,+BAAc,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACvE,SAAS,GAAG,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC;QACnC,CAAC;QAED,MAAM,eAAe,GAAG,IAAI,CAAC,CAAC,CAAC;YAC7B,EAAE,EAAE,IAAI,CAAC,EAAE;YACX,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,QAAQ,EAAE,SAAS;YACnB,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,YAAY,EAAE,IAAI,CAAC,YAAY;YAC/B,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,SAAS,EAAE,IAAI,CAAC,SAAS;SAC1B,CAAC,CAAC,CAAC,IAAI,CAAC;QAET,OAAO,EAAE,IAAI,EAAE,eAAe,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;IAChD,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;QAClD,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;IAC/B,CAAC;AACH,CAAC,CAAC;AAlFW,QAAA,cAAc,kBAkFzB;AAEF,wCAAwC;AAExC;;;;GAIG;AACI,MAAM,eAAe,GAAG,KAAK,EAClC,MAAc,EACkC,EAAE;IAClD,IAAI,CAAC;QACH,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,mBAAQ;aACnC,IAAI,CAAC,YAAY,CAAC;aAClB,MAAM,CAAC,GAAG,CAAC;aACX,EAAE,CAAC,QAAQ,EAAE,MAAM,CAAC;aACpB,WAAW,EAAE,CAAC;QAEjB,IAAI,KAAK,IAAI,KAAK,CAAC,IAAI,KAAK,UAAU,EAAE,CAAC,CAAC,uCAAuC;YAC/E,MAAM,KAAK,CAAC;QACd,CAAC;QAED,qCAAqC;QACrC,MAAM,eAAe,GAAG,IAAI,CAAC,CAAC,CAAC;YAC7B,EAAE,EAAE,IAAI,CAAC,EAAE;YACX,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,SAAS,EAAE,IAAI,CAAC,SAAS;SAC1B,CAAC,CAAC,CAAC,IAAI,CAAC;QAET,OAAO,EAAE,IAAI,EAAE,eAAe,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;IAChD,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;QAClD,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;IAC/B,CAAC;AACH,CAAC,CAAC;AA5BW,QAAA,eAAe,mBA4B1B;AAEF;;;;;GAKG;AACI,MAAM,cAAc,GAAG,KAAK,EACjC,MAAc,EACd,OAAe,EACiC,EAAE;IAClD,IAAI,CAAC;QACH,wCAAwC;QACxC,MAAM,EAAE,IAAI,EAAE,YAAY,EAAE,GAAG,MAAM,IAAA,uBAAe,EAAC,MAAM,CAAC,CAAC;QAE7D,IAAI,YAAY,EAAE,CAAC;YACjB,0DAA0D;YAC1D,OAAO,IAAA,sBAAc,EAAC,YAAY,CAAC,EAAE,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;QAC1D,CAAC;QAED,mDAAmD;QACnD,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,mBAAQ;aACnC,IAAI,CAAC,YAAY,CAAC;aAClB,MAAM,CAAC,CAAC;gBACP,MAAM,EAAE,MAAM;gBACd,OAAO;gBACP,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;aACpC,CAAC,CAAC;aACF,MAAM,EAAE;aACR,MAAM,EAAE,CAAC;QAEZ,IAAI,KAAK;YAAE,MAAM,KAAK,CAAC;QAEvB,qCAAqC;QACrC,MAAM,eAAe,GAAG,IAAI,CAAC,CAAC,CAAC;YAC7B,EAAE,EAAE,IAAI,CAAC,EAAE;YACX,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,SAAS,EAAE,IAAI,CAAC,SAAS;SAC1B,CAAC,CAAC,CAAC,IAAI,CAAC;QAET,OAAO,EAAE,IAAI,EAAE,eAAe,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;IAChD,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;QAClD,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;IAC/B,CAAC;AACH,CAAC,CAAC;AAzCW,QAAA,cAAc,kBAyCzB;AAEF;;;;;;GAMG;AACI,MAAM,cAAc,GAAG,KAAK,EACjC,UAAkB,EAClB,MAAc,EACd,OAAe,EACiC,EAAE;IAClD,IAAI,CAAC;QACH,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,mBAAQ;aACnC,IAAI,CAAC,YAAY,CAAC;aAClB,MAAM,CAAC;YACN,OAAO;YACP,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACpC,CAAC;aACD,EAAE,CAAC,IAAI,EAAE,UAAU,CAAC;aACpB,EAAE,CAAC,QAAQ,EAAE,MAAM,CAAC;aACpB,MAAM,EAAE;aACR,MAAM,EAAE,CAAC;QAEZ,IAAI,KAAK;YAAE,MAAM,KAAK,CAAC;QAEvB,qCAAqC;QACrC,MAAM,eAAe,GAAG,IAAI,CAAC,CAAC,CAAC;YAC7B,EAAE,EAAE,IAAI,CAAC,EAAE;YACX,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,SAAS,EAAE,IAAI,CAAC,SAAS;SAC1B,CAAC,CAAC,CAAC,IAAI,CAAC;QAET,OAAO,EAAE,IAAI,EAAE,eAAe,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;IAChD,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;QAClD,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;IAC/B,CAAC;AACH,CAAC,CAAC;AAjCW,QAAA,cAAc,kBAiCzB;AAEF;;;;;GAKG;AACI,MAAM,aAAa,GAAG,KAAK,EAChC,MAAc,EACd,MAAc,EAC6B,EAAE;IAC7C,IAAI,CAAC;QACH,0CAA0C;QAC1C,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,aAAa,EAAE,GAAG,MAAM,IAAA,uBAAe,EAAC,MAAM,CAAC,CAAC;QAE/E,IAAI,aAAa;YAAE,MAAM,aAAa,CAAC;QAEvC,IAAI,CAAC,QAAQ,EAAE,CAAC;YACd,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,KAAK,CAAC,+CAA+C,CAAC,EAAE,CAAC;QAC/F,CAAC;QAED,+CAA+C;QAC/C,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,mBAAQ;aAC7B,IAAI,CAAC,mBAAmB,CAAC;aACzB,MAAM,CAAC,CAAC;gBACP,MAAM,EAAE,MAAM;gBACd,MAAM,EAAE,MAAM;gBACd,UAAU,EAAE,QAAQ,CAAC,EAAE;gBACvB,QAAQ,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;aACnC,CAAC,CAAC,CAAC;QAEN,IAAI,KAAK;YAAE,MAAM,KAAK,CAAC;QAEvB,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;IACxC,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,0BAA0B,EAAE,KAAK,CAAC,CAAC;QACjD,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;IACnC,CAAC;AACH,CAAC,CAAC;AA/BW,QAAA,aAAa,iBA+BxB;AAEF;;;;GAIG;AACI,MAAM,iBAAiB,GAAG,KAAK,EAAE,MAAc,EAGnD,EAAE;IACH,IAAI,CAAC;QACH,gGAAgG;QAChG,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,mBAAQ;aACnC,IAAI,CAAC,mBAAmB,CAAC;aACzB,MAAM,CAAC,6CAA6C,CAAC;aACrD,EAAE,CAAC,QAAQ,EAAE,MAAM,CAAC;aACpB,EAAE,CAAC,YAAY,EAAE,gBAAQ,CAAC,UAAU,CAAC,CAAC;QAEzC,IAAI,KAAK;YAAE,MAAM,KAAK,CAAC;QAEvB,8CAA8C;QAC9C,MAAM,OAAO,GAAG,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;QAEpD,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;IACxC,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,kCAAkC,EAAE,KAAK,CAAC,CAAC;QACzD,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;IAC/B,CAAC;AACH,CAAC,CAAC;AAtBW,QAAA,iBAAiB,qBAsB5B;AAEF;;;;;GAKG;AACI,MAAM,2BAA2B,GAAG,KAAK,EAC9C,QAAgB,EAChB,MAAc,EAC+B,EAAE;IAC/C,IAAI,CAAC;QACH,mCAAmC;QACnC,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,MAAM,mBAAQ;aACxD,IAAI,CAAC,OAAO,CAAC;aACb,MAAM,CAAC,MAAM,CAAC;aACd,EAAE,CAAC,IAAI,EAAE,QAAQ,CAAC;aAClB,MAAM,EAAE,CAAC;QAEZ,IAAI,SAAS;YAAE,MAAM,SAAS,CAAC;QAE/B,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,IAAI,KAAK,gBAAQ,CAAC,UAAU,EAAE,CAAC;YACvD,OAAO;gBACL,IAAI,EAAE,IAAI;gBACV,KAAK,EAAE,IAAI,KAAK,CAAC,+CAA+C,CAAC;aAClE,CAAC;QACJ,CAAC;QAED,sCAAsC;QACtC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,mBAAQ;aACnC,IAAI,CAAC,mBAAmB,CAAC;aACzB,MAAM,CAAC;;;;;OAKP,CAAC;aACD,EAAE,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAExB,IAAI,KAAK;YAAE,MAAM,KAAK,CAAC;QAEvB,4CAA4C;QAC5C,MAAM,eAAe,GAAG,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACzC,EAAE,EAAE,IAAI,CAAC,EAAE;YACX,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,IAAI,EAAE,IAAI,CAAC,KAAK;YAChB,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;gBACzB,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE;gBACrB,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO;gBAC/B,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,SAAS;aACpC,CAAC,CAAC,CAAC,IAAI;SACT,CAAC,CAAC,CAAC;QAEJ,OAAO,EAAE,IAAI,EAAE,eAAe,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;IAChD,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,mCAAmC,EAAE,KAAK,CAAC,CAAC;QAC1D,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;IAC/B,CAAC;AACH,CAAC,CAAC;AAnDW,QAAA,2BAA2B,+BAmDtC",
      names: [],
      sources: ["/Users/kevin/card-show-finder/src/services/collectionService.ts"],
      sourcesContent: ["import { supabase } from '../supabase';\nimport { UserCard, WantList, UserRole } from '../types';\nimport { storageService } from './storageService'; // Signed-URL helper\n\n/**\n * Collection Service\n * Handles operations related to user card collections and want lists\n */\n\n// ======== User Card Collection Functions ========\n\n/**\n * Get all cards for a specific user\n * @param userId The ID of the user whose cards to fetch\n * @returns An array of UserCard objects\n */\nexport const getUserCards = async (userId: string): Promise<{ data: UserCard[] | null; error: any }> => {\n  try {\n    const { data, error } = await supabase\n      .from('user_cards')\n      .select('*')\n      .eq('userid', userId)\n      .order('createdat', { ascending: false });\n    \n    if (error) throw error;\n    \n    // Transform lowercase column names to camelCase & replace image paths with signed URLs\n    const transformedData = data\n      ? await Promise.all(\n          data.map(async (card) => {\n            // Generate a signed URL; fall back to raw path if something goes wrong\n            const { data: signedUrl } = await storageService.getSignedUrl(card.imageurl || '');\n            return {\n              id: card.id,\n              userId: card.userid,\n              imageUrl: signedUrl || card.imageurl,\n              title: card.title,\n              description: card.description,\n              category: card.category,\n              isCompressed: card.iscompressed,\n              createdAt: card.createdat,\n              updatedAt: card.updatedat,\n            };\n          })\n        )\n      : null;\n    \n    return { data: transformedData, error: null };\n  } catch (error) {\n    console.error('Error fetching user cards:', error);\n    return { data: null, error };\n  }\n};\n\n/**\n * Add a new card to the user's collection\n * Enforces a maximum of 10 cards per user\n * @param userId The ID of the user adding the card\n * @param cardData The card data to add\n * @returns The newly created UserCard object\n */\nexport const addUserCard = async (\n  userId: string, \n  cardData: Omit<UserCard, 'id' | 'userId' | 'createdAt' | 'updatedAt'>\n): Promise<{ data: UserCard | null; error: any }> => {\n  try {\n    // First check if the user already has 10 cards\n    const { data: existingCards, error: countError } = await getUserCards(userId);\n    \n    if (countError) throw countError;\n    \n    if (existingCards && existingCards.length >= 10) {\n      return { \n        data: null, \n        error: new Error('Maximum card limit reached (10). Please remove a card before adding a new one.') \n      };\n    }\n    \n    // Upload the card image to storage if it's a base64 string\n    let imageUrl = cardData.imageUrl;\n    if (imageUrl.startsWith('data:image')) {\n      const { data: path, error: uploadErr } = await storageService.uploadImage(\n        userId,\n        imageUrl,\n        undefined,\n        'image/jpeg'\n      );\n      if (uploadErr || !path) throw uploadErr;\n      imageUrl = path; // store the path; we'll convert to signed URL on return\n    }\n    \n    // Add the card to the database using lowercase column names\n    const { data, error } = await supabase\n      .from('user_cards')\n      .insert([{\n        userid: userId,\n        imageurl: imageUrl,\n        title: cardData.title || '',\n        description: cardData.description || '',\n        category: cardData.category || '',\n        iscompressed: cardData.isCompressed || false,\n        createdat: new Date().toISOString(),\n        updatedat: new Date().toISOString()\n      }])\n      .select()\n      .single();\n    \n    if (error) throw error;\n    \n    // Transform to camelCase for our app & attach signed URL\n    let signedUrl: string | undefined;\n    if (data?.imageurl) {\n      const { data: url } = await storageService.getSignedUrl(data.imageurl);\n      signedUrl = url || data.imageurl;\n    }\n\n    const transformedData = data ? {\n      id: data.id,\n      userId: data.userid,\n      imageUrl: signedUrl,\n      title: data.title,\n      description: data.description,\n      category: data.category,\n      isCompressed: data.iscompressed,\n      createdAt: data.createdat,\n      updatedAt: data.updatedat\n    } : null;\n    \n    return { data: transformedData, error: null };\n  } catch (error) {\n    console.error('Error adding user card:', error);\n    return { data: null, error };\n  }\n};\n\n/**\n * Delete a card from the user's collection\n * @param cardId The ID of the card to delete\n * @param userId The ID of the user (for verification)\n * @returns Success status\n */\nexport const deleteUserCard = async (\n  cardId: string,\n  userId: string\n): Promise<{ success: boolean; error: any }> => {\n  try {\n    // Verify the card belongs to the user\n    const { data: card, error: fetchError } = await supabase\n      .from('user_cards')\n      .select('imageurl')\n      .eq('id', cardId)\n      .eq('userid', userId)\n      .single();\n    \n    if (fetchError) throw fetchError;\n    \n    if (!card) {\n      return { success: false, error: new Error('Card not found or you do not have permission to delete it') };\n    }\n    \n    // Delete the card from the database\n    const { error } = await supabase\n      .from('user_cards')\n      .delete()\n      .eq('id', cardId)\n      .eq('userid', userId);\n    \n    if (error) throw error;\n    \n    // Delete the image from storage if it's stored in Supabase\n    if (card.imageurl) {\n      await storageService.deleteImage(card.imageurl);\n    }\n    \n    return { success: true, error: null };\n  } catch (error) {\n    console.error('Error deleting user card:', error);\n    return { success: false, error };\n  }\n};\n\n/**\n * Update a card's details\n * @param cardId The ID of the card to update\n * @param userId The ID of the user (for verification)\n * @param updates The fields to update\n * @returns The updated UserCard object\n */\nexport const updateUserCard = async (\n  cardId: string,\n  userId: string,\n  updates: Partial<Omit<UserCard, 'id' | 'userId' | 'createdAt'>>\n): Promise<{ data: UserCard | null; error: any }> => {\n  try {\n    // Verify the card belongs to the user\n    const { data: existingCard, error: fetchError } = await supabase\n      .from('user_cards')\n      .select('*')\n      .eq('id', cardId)\n      .eq('userid', userId)\n      .single();\n    \n    if (fetchError) throw fetchError;\n    \n    if (!existingCard) {\n      return { data: null, error: new Error('Card not found or you do not have permission to update it') };\n    }\n    \n    // Handle image update if provided\n    let imageUrl = updates.imageUrl || existingCard.imageurl;\n    if (updates.imageUrl && updates.imageUrl.startsWith('data:image')) {\n      // Delete old image if it's in our storage\n      if (existingCard.imageurl) {\n        await storageService.deleteImage(existingCard.imageurl);\n      }\n      const { data: newPath, error: uploadErr } = await storageService.uploadImage(\n        userId,\n        updates.imageUrl,\n        undefined,\n        'image/jpeg'\n      );\n      if (uploadErr || !newPath) throw uploadErr;\n      imageUrl = newPath;\n    }\n    \n    // Update the card with lowercase column names\n    const updateData: any = {\n      updatedat: new Date().toISOString()\n    };\n    \n    if (imageUrl !== undefined) updateData.imageurl = imageUrl;\n    if (updates.title !== undefined) updateData.title = updates.title;\n    if (updates.description !== undefined) updateData.description = updates.description;\n    if (updates.category !== undefined) updateData.category = updates.category;\n    if (updates.isCompressed !== undefined) updateData.iscompressed = updates.isCompressed;\n    \n    const { data, error } = await supabase\n      .from('user_cards')\n      .update(updateData)\n      .eq('id', cardId)\n      .eq('userid', userId)\n      .select()\n      .single();\n    \n    if (error) throw error;\n    \n    // Transform to camelCase for our app & attach signed URL\n    let signedUrl: string | undefined;\n    if (data?.imageurl) {\n      const { data: url } = await storageService.getSignedUrl(data.imageurl);\n      signedUrl = url || data.imageurl;\n    }\n\n    const transformedData = data ? {\n      id: data.id,\n      userId: data.userid,\n      imageUrl: signedUrl,\n      title: data.title,\n      description: data.description,\n      category: data.category,\n      isCompressed: data.iscompressed,\n      createdAt: data.createdat,\n      updatedAt: data.updatedat\n    } : null;\n    \n    return { data: transformedData, error: null };\n  } catch (error) {\n    console.error('Error updating user card:', error);\n    return { data: null, error };\n  }\n};\n\n// ======== Want List Functions ========\n\n/**\n * Get a user's want list\n * @param userId The ID of the user whose want list to fetch\n * @returns The user's WantList object\n */\nexport const getUserWantList = async (\n  userId: string\n): Promise<{ data: WantList | null; error: any }> => {\n  try {\n    const { data, error } = await supabase\n      .from('want_lists')\n      .select('*')\n      .eq('userid', userId)\n      .maybeSingle();\n    \n    if (error && error.code !== 'PGRST116') { // PGRST116 is \"no rows returned\" error\n      throw error;\n    }\n    \n    // Transform to camelCase for our app\n    const transformedData = data ? {\n      id: data.id,\n      userId: data.userid,\n      content: data.content,\n      createdAt: data.createdat,\n      updatedAt: data.updatedat\n    } : null;\n    \n    return { data: transformedData, error: null };\n  } catch (error) {\n    console.error('Error fetching want list:', error);\n    return { data: null, error };\n  }\n};\n\n/**\n * Create a new want list for a user\n * @param userId The ID of the user creating the want list\n * @param content The content of the want list\n * @returns The newly created WantList object\n */\nexport const createWantList = async (\n  userId: string,\n  content: string\n): Promise<{ data: WantList | null; error: any }> => {\n  try {\n    // Check if user already has a want list\n    const { data: existingList } = await getUserWantList(userId);\n    \n    if (existingList) {\n      // Update existing want list instead of creating a new one\n      return updateWantList(existingList.id, userId, content);\n    }\n    \n    // Create new want list with lowercase column names\n    const { data, error } = await supabase\n      .from('want_lists')\n      .insert([{\n        userid: userId,\n        content,\n        createdat: new Date().toISOString(),\n        updatedat: new Date().toISOString()\n      }])\n      .select()\n      .single();\n    \n    if (error) throw error;\n    \n    // Transform to camelCase for our app\n    const transformedData = data ? {\n      id: data.id,\n      userId: data.userid,\n      content: data.content,\n      createdAt: data.createdat,\n      updatedAt: data.updatedat\n    } : null;\n    \n    return { data: transformedData, error: null };\n  } catch (error) {\n    console.error('Error creating want list:', error);\n    return { data: null, error };\n  }\n};\n\n/**\n * Update an existing want list\n * @param wantListId The ID of the want list to update\n * @param userId The ID of the user (for verification)\n * @param content The new content for the want list\n * @returns The updated WantList object\n */\nexport const updateWantList = async (\n  wantListId: string,\n  userId: string,\n  content: string\n): Promise<{ data: WantList | null; error: any }> => {\n  try {\n    const { data, error } = await supabase\n      .from('want_lists')\n      .update({\n        content,\n        updatedat: new Date().toISOString()\n      })\n      .eq('id', wantListId)\n      .eq('userid', userId)\n      .select()\n      .single();\n    \n    if (error) throw error;\n    \n    // Transform to camelCase for our app\n    const transformedData = data ? {\n      id: data.id,\n      userId: data.userid,\n      content: data.content,\n      createdAt: data.createdat,\n      updatedAt: data.updatedat\n    } : null;\n    \n    return { data: transformedData, error: null };\n  } catch (error) {\n    console.error('Error updating want list:', error);\n    return { data: null, error };\n  }\n};\n\n/**\n * Share a want list with MVP dealers at a specific show\n * @param userId The ID of the user sharing the want list\n * @param showId The ID of the show where the want list will be shared\n * @returns Success status\n */\nexport const shareWantList = async (\n  userId: string,\n  showId: string\n): Promise<{ success: boolean; error: any }> => {\n  try {\n    // First check if the user has a want list\n    const { data: wantList, error: wantListError } = await getUserWantList(userId);\n    \n    if (wantListError) throw wantListError;\n    \n    if (!wantList) {\n      return { success: false, error: new Error('You must create a want list before sharing it') };\n    }\n    \n    // Create or update the shared want list record\n    const { error } = await supabase\n      .from('shared_want_lists')\n      .upsert([{\n        userid: userId,\n        showid: showId,\n        wantlistid: wantList.id,\n        sharedat: new Date().toISOString()\n      }]);\n    \n    if (error) throw error;\n    \n    return { success: true, error: null };\n  } catch (error) {\n    console.error('Error sharing want list:', error);\n    return { success: false, error };\n  }\n};\n\n/**\n * Get all MVP dealers who will be at a specific show\n * @param showId The ID of the show\n * @returns Array of dealer user IDs and their basic info\n */\nexport const getDealersForShow = async (showId: string): Promise<{ \n  data: { id: string; firstName: string; lastName?: string }[] | null; \n  error: any \n}> => {\n  try {\n    // This query assumes there's a 'show_participants' table that tracks who's attending which show\n    const { data, error } = await supabase\n      .from('show_participants')\n      .select('users:userid(id, firstName, lastName, role)')\n      .eq('showid', showId)\n      .eq('users.role', UserRole.MVP_DEALER);\n    \n    if (error) throw error;\n    \n    // Extract user data from the nested structure\n    const dealers = data?.map(item => item.users) || [];\n    \n    return { data: dealers, error: null };\n  } catch (error) {\n    console.error('Error fetching dealers for show:', error);\n    return { data: null, error };\n  }\n};\n\n/**\n * Get shared want lists for a dealer at a specific show\n * @param dealerId The ID of the dealer (MVP_DEALER role)\n * @param showId The ID of the show\n * @returns Array of want lists with user information\n */\nexport const getSharedWantListsForDealer = async (\n  dealerId: string,\n  showId: string\n): Promise<{ data: any[] | null; error: any }> => {\n  try {\n    // Verify the user is an MVP dealer\n    const { data: userData, error: userError } = await supabase\n      .from('users')\n      .select('role')\n      .eq('id', dealerId)\n      .single();\n    \n    if (userError) throw userError;\n    \n    if (!userData || userData.role !== UserRole.MVP_DEALER) {\n      return { \n        data: null, \n        error: new Error('Only MVP dealers can access shared want lists') \n      };\n    }\n    \n    // Get shared want lists for this show\n    const { data, error } = await supabase\n      .from('shared_want_lists')\n      .select(`\n        id,\n        sharedat,\n        users:userid(id, firstName, lastName),\n        wantLists:wantlistid(id, content, updatedat)\n      `)\n      .eq('showid', showId);\n    \n    if (error) throw error;\n    \n    // Transform the data to have camelCase keys\n    const transformedData = data?.map(item => ({\n      id: item.id,\n      sharedAt: item.sharedat,\n      user: item.users,\n      wantList: item.wantLists ? {\n        id: item.wantLists.id,\n        content: item.wantLists.content,\n        updatedAt: item.wantLists.updatedat\n      } : null\n    }));\n    \n    return { data: transformedData, error: null };\n  } catch (error) {\n    console.error('Error fetching shared want lists:', error);\n    return { data: null, error };\n  }\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "68f3f245760b132bba6a56d9804251af78456921"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_119hbycuot = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_119hbycuot();
cov_119hbycuot().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_119hbycuot().s[1]++;
exports.getSharedWantListsForDealer = exports.getDealersForShow = exports.shareWantList = exports.updateWantList = exports.createWantList = exports.getUserWantList = exports.updateUserCard = exports.deleteUserCard = exports.addUserCard = exports.getUserCards = void 0;
const supabase_1 =
/* istanbul ignore next */
(cov_119hbycuot().s[2]++, require("../supabase"));
const types_1 =
/* istanbul ignore next */
(cov_119hbycuot().s[3]++, require("../types"));
const storageService_1 =
/* istanbul ignore next */
(cov_119hbycuot().s[4]++, require("./storageService")); // Signed-URL helper
/**
 * Collection Service
 * Handles operations related to user card collections and want lists
 */
// ======== User Card Collection Functions ========
/**
 * Get all cards for a specific user
 * @param userId The ID of the user whose cards to fetch
 * @returns An array of UserCard objects
 */
/* istanbul ignore next */
cov_119hbycuot().s[5]++;
const getUserCards = async userId => {
  /* istanbul ignore next */
  cov_119hbycuot().f[0]++;
  cov_119hbycuot().s[6]++;
  try {
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_119hbycuot().s[7]++, await supabase_1.supabase.from('user_cards').select('*').eq('userid', userId).order('createdat', {
      ascending: false
    }));
    /* istanbul ignore next */
    cov_119hbycuot().s[8]++;
    if (error) {
      /* istanbul ignore next */
      cov_119hbycuot().b[0][0]++;
      cov_119hbycuot().s[9]++;
      throw error;
    } else
    /* istanbul ignore next */
    {
      cov_119hbycuot().b[0][1]++;
    }
    // Transform lowercase column names to camelCase & replace image paths with signed URLs
    const transformedData =
    /* istanbul ignore next */
    (cov_119hbycuot().s[10]++, data ?
    /* istanbul ignore next */
    (cov_119hbycuot().b[1][0]++, await Promise.all(data.map(async card => {
      /* istanbul ignore next */
      cov_119hbycuot().f[1]++;
      // Generate a signed URL; fall back to raw path if something goes wrong
      const {
        data: signedUrl
      } =
      /* istanbul ignore next */
      (cov_119hbycuot().s[11]++, await storageService_1.storageService.getSignedUrl(
      /* istanbul ignore next */
      (cov_119hbycuot().b[2][0]++, card.imageurl) ||
      /* istanbul ignore next */
      (cov_119hbycuot().b[2][1]++, '')));
      /* istanbul ignore next */
      cov_119hbycuot().s[12]++;
      return {
        id: card.id,
        userId: card.userid,
        imageUrl:
        /* istanbul ignore next */
        (cov_119hbycuot().b[3][0]++, signedUrl) ||
        /* istanbul ignore next */
        (cov_119hbycuot().b[3][1]++, card.imageurl),
        title: card.title,
        description: card.description,
        category: card.category,
        isCompressed: card.iscompressed,
        createdAt: card.createdat,
        updatedAt: card.updatedat
      };
    }))) :
    /* istanbul ignore next */
    (cov_119hbycuot().b[1][1]++, null));
    /* istanbul ignore next */
    cov_119hbycuot().s[13]++;
    return {
      data: transformedData,
      error: null
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_119hbycuot().s[14]++;
    console.error('Error fetching user cards:', error);
    /* istanbul ignore next */
    cov_119hbycuot().s[15]++;
    return {
      data: null,
      error
    };
  }
};
/* istanbul ignore next */
cov_119hbycuot().s[16]++;
exports.getUserCards = getUserCards;
/**
 * Add a new card to the user's collection
 * Enforces a maximum of 10 cards per user
 * @param userId The ID of the user adding the card
 * @param cardData The card data to add
 * @returns The newly created UserCard object
 */
/* istanbul ignore next */
cov_119hbycuot().s[17]++;
const addUserCard = async (userId, cardData) => {
  /* istanbul ignore next */
  cov_119hbycuot().f[2]++;
  cov_119hbycuot().s[18]++;
  try {
    // First check if the user already has 10 cards
    const {
      data: existingCards,
      error: countError
    } =
    /* istanbul ignore next */
    (cov_119hbycuot().s[19]++, await (0, exports.getUserCards)(userId));
    /* istanbul ignore next */
    cov_119hbycuot().s[20]++;
    if (countError) {
      /* istanbul ignore next */
      cov_119hbycuot().b[4][0]++;
      cov_119hbycuot().s[21]++;
      throw countError;
    } else
    /* istanbul ignore next */
    {
      cov_119hbycuot().b[4][1]++;
    }
    cov_119hbycuot().s[22]++;
    if (
    /* istanbul ignore next */
    (cov_119hbycuot().b[6][0]++, existingCards) &&
    /* istanbul ignore next */
    (cov_119hbycuot().b[6][1]++, existingCards.length >= 10)) {
      /* istanbul ignore next */
      cov_119hbycuot().b[5][0]++;
      cov_119hbycuot().s[23]++;
      return {
        data: null,
        error: new Error('Maximum card limit reached (10). Please remove a card before adding a new one.')
      };
    } else
    /* istanbul ignore next */
    {
      cov_119hbycuot().b[5][1]++;
    }
    // Upload the card image to storage if it's a base64 string
    let imageUrl =
    /* istanbul ignore next */
    (cov_119hbycuot().s[24]++, cardData.imageUrl);
    /* istanbul ignore next */
    cov_119hbycuot().s[25]++;
    if (imageUrl.startsWith('data:image')) {
      /* istanbul ignore next */
      cov_119hbycuot().b[7][0]++;
      const {
        data: path,
        error: uploadErr
      } =
      /* istanbul ignore next */
      (cov_119hbycuot().s[26]++, await storageService_1.storageService.uploadImage(userId, imageUrl, undefined, 'image/jpeg'));
      /* istanbul ignore next */
      cov_119hbycuot().s[27]++;
      if (
      /* istanbul ignore next */
      (cov_119hbycuot().b[9][0]++, uploadErr) ||
      /* istanbul ignore next */
      (cov_119hbycuot().b[9][1]++, !path)) {
        /* istanbul ignore next */
        cov_119hbycuot().b[8][0]++;
        cov_119hbycuot().s[28]++;
        throw uploadErr;
      } else
      /* istanbul ignore next */
      {
        cov_119hbycuot().b[8][1]++;
      }
      cov_119hbycuot().s[29]++;
      imageUrl = path; // store the path; we'll convert to signed URL on return
    } else
    /* istanbul ignore next */
    {
      cov_119hbycuot().b[7][1]++;
    }
    // Add the card to the database using lowercase column names
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_119hbycuot().s[30]++, await supabase_1.supabase.from('user_cards').insert([{
      userid: userId,
      imageurl: imageUrl,
      title:
      /* istanbul ignore next */
      (cov_119hbycuot().b[10][0]++, cardData.title) ||
      /* istanbul ignore next */
      (cov_119hbycuot().b[10][1]++, ''),
      description:
      /* istanbul ignore next */
      (cov_119hbycuot().b[11][0]++, cardData.description) ||
      /* istanbul ignore next */
      (cov_119hbycuot().b[11][1]++, ''),
      category:
      /* istanbul ignore next */
      (cov_119hbycuot().b[12][0]++, cardData.category) ||
      /* istanbul ignore next */
      (cov_119hbycuot().b[12][1]++, ''),
      iscompressed:
      /* istanbul ignore next */
      (cov_119hbycuot().b[13][0]++, cardData.isCompressed) ||
      /* istanbul ignore next */
      (cov_119hbycuot().b[13][1]++, false),
      createdat: new Date().toISOString(),
      updatedat: new Date().toISOString()
    }]).select().single());
    /* istanbul ignore next */
    cov_119hbycuot().s[31]++;
    if (error) {
      /* istanbul ignore next */
      cov_119hbycuot().b[14][0]++;
      cov_119hbycuot().s[32]++;
      throw error;
    } else
    /* istanbul ignore next */
    {
      cov_119hbycuot().b[14][1]++;
    }
    // Transform to camelCase for our app & attach signed URL
    let signedUrl;
    /* istanbul ignore next */
    cov_119hbycuot().s[33]++;
    if (data?.imageurl) {
      /* istanbul ignore next */
      cov_119hbycuot().b[15][0]++;
      const {
        data: url
      } =
      /* istanbul ignore next */
      (cov_119hbycuot().s[34]++, await storageService_1.storageService.getSignedUrl(data.imageurl));
      /* istanbul ignore next */
      cov_119hbycuot().s[35]++;
      signedUrl =
      /* istanbul ignore next */
      (cov_119hbycuot().b[16][0]++, url) ||
      /* istanbul ignore next */
      (cov_119hbycuot().b[16][1]++, data.imageurl);
    } else
    /* istanbul ignore next */
    {
      cov_119hbycuot().b[15][1]++;
    }
    const transformedData =
    /* istanbul ignore next */
    (cov_119hbycuot().s[36]++, data ?
    /* istanbul ignore next */
    (cov_119hbycuot().b[17][0]++, {
      id: data.id,
      userId: data.userid,
      imageUrl: signedUrl,
      title: data.title,
      description: data.description,
      category: data.category,
      isCompressed: data.iscompressed,
      createdAt: data.createdat,
      updatedAt: data.updatedat
    }) :
    /* istanbul ignore next */
    (cov_119hbycuot().b[17][1]++, null));
    /* istanbul ignore next */
    cov_119hbycuot().s[37]++;
    return {
      data: transformedData,
      error: null
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_119hbycuot().s[38]++;
    console.error('Error adding user card:', error);
    /* istanbul ignore next */
    cov_119hbycuot().s[39]++;
    return {
      data: null,
      error
    };
  }
};
/* istanbul ignore next */
cov_119hbycuot().s[40]++;
exports.addUserCard = addUserCard;
/**
 * Delete a card from the user's collection
 * @param cardId The ID of the card to delete
 * @param userId The ID of the user (for verification)
 * @returns Success status
 */
/* istanbul ignore next */
cov_119hbycuot().s[41]++;
const deleteUserCard = async (cardId, userId) => {
  /* istanbul ignore next */
  cov_119hbycuot().f[3]++;
  cov_119hbycuot().s[42]++;
  try {
    // Verify the card belongs to the user
    const {
      data: card,
      error: fetchError
    } =
    /* istanbul ignore next */
    (cov_119hbycuot().s[43]++, await supabase_1.supabase.from('user_cards').select('imageurl').eq('id', cardId).eq('userid', userId).single());
    /* istanbul ignore next */
    cov_119hbycuot().s[44]++;
    if (fetchError) {
      /* istanbul ignore next */
      cov_119hbycuot().b[18][0]++;
      cov_119hbycuot().s[45]++;
      throw fetchError;
    } else
    /* istanbul ignore next */
    {
      cov_119hbycuot().b[18][1]++;
    }
    cov_119hbycuot().s[46]++;
    if (!card) {
      /* istanbul ignore next */
      cov_119hbycuot().b[19][0]++;
      cov_119hbycuot().s[47]++;
      return {
        success: false,
        error: new Error('Card not found or you do not have permission to delete it')
      };
    } else
    /* istanbul ignore next */
    {
      cov_119hbycuot().b[19][1]++;
    }
    // Delete the card from the database
    const {
      error
    } =
    /* istanbul ignore next */
    (cov_119hbycuot().s[48]++, await supabase_1.supabase.from('user_cards').delete().eq('id', cardId).eq('userid', userId));
    /* istanbul ignore next */
    cov_119hbycuot().s[49]++;
    if (error) {
      /* istanbul ignore next */
      cov_119hbycuot().b[20][0]++;
      cov_119hbycuot().s[50]++;
      throw error;
    } else
    /* istanbul ignore next */
    {
      cov_119hbycuot().b[20][1]++;
    }
    // Delete the image from storage if it's stored in Supabase
    cov_119hbycuot().s[51]++;
    if (card.imageurl) {
      /* istanbul ignore next */
      cov_119hbycuot().b[21][0]++;
      cov_119hbycuot().s[52]++;
      await storageService_1.storageService.deleteImage(card.imageurl);
    } else
    /* istanbul ignore next */
    {
      cov_119hbycuot().b[21][1]++;
    }
    cov_119hbycuot().s[53]++;
    return {
      success: true,
      error: null
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_119hbycuot().s[54]++;
    console.error('Error deleting user card:', error);
    /* istanbul ignore next */
    cov_119hbycuot().s[55]++;
    return {
      success: false,
      error
    };
  }
};
/* istanbul ignore next */
cov_119hbycuot().s[56]++;
exports.deleteUserCard = deleteUserCard;
/**
 * Update a card's details
 * @param cardId The ID of the card to update
 * @param userId The ID of the user (for verification)
 * @param updates The fields to update
 * @returns The updated UserCard object
 */
/* istanbul ignore next */
cov_119hbycuot().s[57]++;
const updateUserCard = async (cardId, userId, updates) => {
  /* istanbul ignore next */
  cov_119hbycuot().f[4]++;
  cov_119hbycuot().s[58]++;
  try {
    // Verify the card belongs to the user
    const {
      data: existingCard,
      error: fetchError
    } =
    /* istanbul ignore next */
    (cov_119hbycuot().s[59]++, await supabase_1.supabase.from('user_cards').select('*').eq('id', cardId).eq('userid', userId).single());
    /* istanbul ignore next */
    cov_119hbycuot().s[60]++;
    if (fetchError) {
      /* istanbul ignore next */
      cov_119hbycuot().b[22][0]++;
      cov_119hbycuot().s[61]++;
      throw fetchError;
    } else
    /* istanbul ignore next */
    {
      cov_119hbycuot().b[22][1]++;
    }
    cov_119hbycuot().s[62]++;
    if (!existingCard) {
      /* istanbul ignore next */
      cov_119hbycuot().b[23][0]++;
      cov_119hbycuot().s[63]++;
      return {
        data: null,
        error: new Error('Card not found or you do not have permission to update it')
      };
    } else
    /* istanbul ignore next */
    {
      cov_119hbycuot().b[23][1]++;
    }
    // Handle image update if provided
    let imageUrl =
    /* istanbul ignore next */
    (cov_119hbycuot().s[64]++,
    /* istanbul ignore next */
    (cov_119hbycuot().b[24][0]++, updates.imageUrl) ||
    /* istanbul ignore next */
    (cov_119hbycuot().b[24][1]++, existingCard.imageurl));
    /* istanbul ignore next */
    cov_119hbycuot().s[65]++;
    if (
    /* istanbul ignore next */
    (cov_119hbycuot().b[26][0]++, updates.imageUrl) &&
    /* istanbul ignore next */
    (cov_119hbycuot().b[26][1]++, updates.imageUrl.startsWith('data:image'))) {
      /* istanbul ignore next */
      cov_119hbycuot().b[25][0]++;
      cov_119hbycuot().s[66]++;
      // Delete old image if it's in our storage
      if (existingCard.imageurl) {
        /* istanbul ignore next */
        cov_119hbycuot().b[27][0]++;
        cov_119hbycuot().s[67]++;
        await storageService_1.storageService.deleteImage(existingCard.imageurl);
      } else
      /* istanbul ignore next */
      {
        cov_119hbycuot().b[27][1]++;
      }
      const {
        data: newPath,
        error: uploadErr
      } =
      /* istanbul ignore next */
      (cov_119hbycuot().s[68]++, await storageService_1.storageService.uploadImage(userId, updates.imageUrl, undefined, 'image/jpeg'));
      /* istanbul ignore next */
      cov_119hbycuot().s[69]++;
      if (
      /* istanbul ignore next */
      (cov_119hbycuot().b[29][0]++, uploadErr) ||
      /* istanbul ignore next */
      (cov_119hbycuot().b[29][1]++, !newPath)) {
        /* istanbul ignore next */
        cov_119hbycuot().b[28][0]++;
        cov_119hbycuot().s[70]++;
        throw uploadErr;
      } else
      /* istanbul ignore next */
      {
        cov_119hbycuot().b[28][1]++;
      }
      cov_119hbycuot().s[71]++;
      imageUrl = newPath;
    } else
    /* istanbul ignore next */
    {
      cov_119hbycuot().b[25][1]++;
    }
    // Update the card with lowercase column names
    const updateData =
    /* istanbul ignore next */
    (cov_119hbycuot().s[72]++, {
      updatedat: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_119hbycuot().s[73]++;
    if (imageUrl !== undefined) {
      /* istanbul ignore next */
      cov_119hbycuot().b[30][0]++;
      cov_119hbycuot().s[74]++;
      updateData.imageurl = imageUrl;
    } else
    /* istanbul ignore next */
    {
      cov_119hbycuot().b[30][1]++;
    }
    cov_119hbycuot().s[75]++;
    if (updates.title !== undefined) {
      /* istanbul ignore next */
      cov_119hbycuot().b[31][0]++;
      cov_119hbycuot().s[76]++;
      updateData.title = updates.title;
    } else
    /* istanbul ignore next */
    {
      cov_119hbycuot().b[31][1]++;
    }
    cov_119hbycuot().s[77]++;
    if (updates.description !== undefined) {
      /* istanbul ignore next */
      cov_119hbycuot().b[32][0]++;
      cov_119hbycuot().s[78]++;
      updateData.description = updates.description;
    } else
    /* istanbul ignore next */
    {
      cov_119hbycuot().b[32][1]++;
    }
    cov_119hbycuot().s[79]++;
    if (updates.category !== undefined) {
      /* istanbul ignore next */
      cov_119hbycuot().b[33][0]++;
      cov_119hbycuot().s[80]++;
      updateData.category = updates.category;
    } else
    /* istanbul ignore next */
    {
      cov_119hbycuot().b[33][1]++;
    }
    cov_119hbycuot().s[81]++;
    if (updates.isCompressed !== undefined) {
      /* istanbul ignore next */
      cov_119hbycuot().b[34][0]++;
      cov_119hbycuot().s[82]++;
      updateData.iscompressed = updates.isCompressed;
    } else
    /* istanbul ignore next */
    {
      cov_119hbycuot().b[34][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_119hbycuot().s[83]++, await supabase_1.supabase.from('user_cards').update(updateData).eq('id', cardId).eq('userid', userId).select().single());
    /* istanbul ignore next */
    cov_119hbycuot().s[84]++;
    if (error) {
      /* istanbul ignore next */
      cov_119hbycuot().b[35][0]++;
      cov_119hbycuot().s[85]++;
      throw error;
    } else
    /* istanbul ignore next */
    {
      cov_119hbycuot().b[35][1]++;
    }
    // Transform to camelCase for our app & attach signed URL
    let signedUrl;
    /* istanbul ignore next */
    cov_119hbycuot().s[86]++;
    if (data?.imageurl) {
      /* istanbul ignore next */
      cov_119hbycuot().b[36][0]++;
      const {
        data: url
      } =
      /* istanbul ignore next */
      (cov_119hbycuot().s[87]++, await storageService_1.storageService.getSignedUrl(data.imageurl));
      /* istanbul ignore next */
      cov_119hbycuot().s[88]++;
      signedUrl =
      /* istanbul ignore next */
      (cov_119hbycuot().b[37][0]++, url) ||
      /* istanbul ignore next */
      (cov_119hbycuot().b[37][1]++, data.imageurl);
    } else
    /* istanbul ignore next */
    {
      cov_119hbycuot().b[36][1]++;
    }
    const transformedData =
    /* istanbul ignore next */
    (cov_119hbycuot().s[89]++, data ?
    /* istanbul ignore next */
    (cov_119hbycuot().b[38][0]++, {
      id: data.id,
      userId: data.userid,
      imageUrl: signedUrl,
      title: data.title,
      description: data.description,
      category: data.category,
      isCompressed: data.iscompressed,
      createdAt: data.createdat,
      updatedAt: data.updatedat
    }) :
    /* istanbul ignore next */
    (cov_119hbycuot().b[38][1]++, null));
    /* istanbul ignore next */
    cov_119hbycuot().s[90]++;
    return {
      data: transformedData,
      error: null
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_119hbycuot().s[91]++;
    console.error('Error updating user card:', error);
    /* istanbul ignore next */
    cov_119hbycuot().s[92]++;
    return {
      data: null,
      error
    };
  }
};
/* istanbul ignore next */
cov_119hbycuot().s[93]++;
exports.updateUserCard = updateUserCard;
// ======== Want List Functions ========
/**
 * Get a user's want list
 * @param userId The ID of the user whose want list to fetch
 * @returns The user's WantList object
 */
/* istanbul ignore next */
cov_119hbycuot().s[94]++;
const getUserWantList = async userId => {
  /* istanbul ignore next */
  cov_119hbycuot().f[5]++;
  cov_119hbycuot().s[95]++;
  try {
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_119hbycuot().s[96]++, await supabase_1.supabase.from('want_lists').select('*').eq('userid', userId).maybeSingle());
    /* istanbul ignore next */
    cov_119hbycuot().s[97]++;
    if (
    /* istanbul ignore next */
    (cov_119hbycuot().b[40][0]++, error) &&
    /* istanbul ignore next */
    (cov_119hbycuot().b[40][1]++, error.code !== 'PGRST116')) {
      /* istanbul ignore next */
      cov_119hbycuot().b[39][0]++;
      cov_119hbycuot().s[98]++;
      // PGRST116 is "no rows returned" error
      throw error;
    } else
    /* istanbul ignore next */
    {
      cov_119hbycuot().b[39][1]++;
    }
    // Transform to camelCase for our app
    const transformedData =
    /* istanbul ignore next */
    (cov_119hbycuot().s[99]++, data ?
    /* istanbul ignore next */
    (cov_119hbycuot().b[41][0]++, {
      id: data.id,
      userId: data.userid,
      content: data.content,
      createdAt: data.createdat,
      updatedAt: data.updatedat
    }) :
    /* istanbul ignore next */
    (cov_119hbycuot().b[41][1]++, null));
    /* istanbul ignore next */
    cov_119hbycuot().s[100]++;
    return {
      data: transformedData,
      error: null
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_119hbycuot().s[101]++;
    console.error('Error fetching want list:', error);
    /* istanbul ignore next */
    cov_119hbycuot().s[102]++;
    return {
      data: null,
      error
    };
  }
};
/* istanbul ignore next */
cov_119hbycuot().s[103]++;
exports.getUserWantList = getUserWantList;
/**
 * Create a new want list for a user
 * @param userId The ID of the user creating the want list
 * @param content The content of the want list
 * @returns The newly created WantList object
 */
/* istanbul ignore next */
cov_119hbycuot().s[104]++;
const createWantList = async (userId, content) => {
  /* istanbul ignore next */
  cov_119hbycuot().f[6]++;
  cov_119hbycuot().s[105]++;
  try {
    // Check if user already has a want list
    const {
      data: existingList
    } =
    /* istanbul ignore next */
    (cov_119hbycuot().s[106]++, await (0, exports.getUserWantList)(userId));
    /* istanbul ignore next */
    cov_119hbycuot().s[107]++;
    if (existingList) {
      /* istanbul ignore next */
      cov_119hbycuot().b[42][0]++;
      cov_119hbycuot().s[108]++;
      // Update existing want list instead of creating a new one
      return (0, exports.updateWantList)(existingList.id, userId, content);
    } else
    /* istanbul ignore next */
    {
      cov_119hbycuot().b[42][1]++;
    }
    // Create new want list with lowercase column names
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_119hbycuot().s[109]++, await supabase_1.supabase.from('want_lists').insert([{
      userid: userId,
      content,
      createdat: new Date().toISOString(),
      updatedat: new Date().toISOString()
    }]).select().single());
    /* istanbul ignore next */
    cov_119hbycuot().s[110]++;
    if (error) {
      /* istanbul ignore next */
      cov_119hbycuot().b[43][0]++;
      cov_119hbycuot().s[111]++;
      throw error;
    } else
    /* istanbul ignore next */
    {
      cov_119hbycuot().b[43][1]++;
    }
    // Transform to camelCase for our app
    const transformedData =
    /* istanbul ignore next */
    (cov_119hbycuot().s[112]++, data ?
    /* istanbul ignore next */
    (cov_119hbycuot().b[44][0]++, {
      id: data.id,
      userId: data.userid,
      content: data.content,
      createdAt: data.createdat,
      updatedAt: data.updatedat
    }) :
    /* istanbul ignore next */
    (cov_119hbycuot().b[44][1]++, null));
    /* istanbul ignore next */
    cov_119hbycuot().s[113]++;
    return {
      data: transformedData,
      error: null
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_119hbycuot().s[114]++;
    console.error('Error creating want list:', error);
    /* istanbul ignore next */
    cov_119hbycuot().s[115]++;
    return {
      data: null,
      error
    };
  }
};
/* istanbul ignore next */
cov_119hbycuot().s[116]++;
exports.createWantList = createWantList;
/**
 * Update an existing want list
 * @param wantListId The ID of the want list to update
 * @param userId The ID of the user (for verification)
 * @param content The new content for the want list
 * @returns The updated WantList object
 */
/* istanbul ignore next */
cov_119hbycuot().s[117]++;
const updateWantList = async (wantListId, userId, content) => {
  /* istanbul ignore next */
  cov_119hbycuot().f[7]++;
  cov_119hbycuot().s[118]++;
  try {
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_119hbycuot().s[119]++, await supabase_1.supabase.from('want_lists').update({
      content,
      updatedat: new Date().toISOString()
    }).eq('id', wantListId).eq('userid', userId).select().single());
    /* istanbul ignore next */
    cov_119hbycuot().s[120]++;
    if (error) {
      /* istanbul ignore next */
      cov_119hbycuot().b[45][0]++;
      cov_119hbycuot().s[121]++;
      throw error;
    } else
    /* istanbul ignore next */
    {
      cov_119hbycuot().b[45][1]++;
    }
    // Transform to camelCase for our app
    const transformedData =
    /* istanbul ignore next */
    (cov_119hbycuot().s[122]++, data ?
    /* istanbul ignore next */
    (cov_119hbycuot().b[46][0]++, {
      id: data.id,
      userId: data.userid,
      content: data.content,
      createdAt: data.createdat,
      updatedAt: data.updatedat
    }) :
    /* istanbul ignore next */
    (cov_119hbycuot().b[46][1]++, null));
    /* istanbul ignore next */
    cov_119hbycuot().s[123]++;
    return {
      data: transformedData,
      error: null
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_119hbycuot().s[124]++;
    console.error('Error updating want list:', error);
    /* istanbul ignore next */
    cov_119hbycuot().s[125]++;
    return {
      data: null,
      error
    };
  }
};
/* istanbul ignore next */
cov_119hbycuot().s[126]++;
exports.updateWantList = updateWantList;
/**
 * Share a want list with MVP dealers at a specific show
 * @param userId The ID of the user sharing the want list
 * @param showId The ID of the show where the want list will be shared
 * @returns Success status
 */
/* istanbul ignore next */
cov_119hbycuot().s[127]++;
const shareWantList = async (userId, showId) => {
  /* istanbul ignore next */
  cov_119hbycuot().f[8]++;
  cov_119hbycuot().s[128]++;
  try {
    // First check if the user has a want list
    const {
      data: wantList,
      error: wantListError
    } =
    /* istanbul ignore next */
    (cov_119hbycuot().s[129]++, await (0, exports.getUserWantList)(userId));
    /* istanbul ignore next */
    cov_119hbycuot().s[130]++;
    if (wantListError) {
      /* istanbul ignore next */
      cov_119hbycuot().b[47][0]++;
      cov_119hbycuot().s[131]++;
      throw wantListError;
    } else
    /* istanbul ignore next */
    {
      cov_119hbycuot().b[47][1]++;
    }
    cov_119hbycuot().s[132]++;
    if (!wantList) {
      /* istanbul ignore next */
      cov_119hbycuot().b[48][0]++;
      cov_119hbycuot().s[133]++;
      return {
        success: false,
        error: new Error('You must create a want list before sharing it')
      };
    } else
    /* istanbul ignore next */
    {
      cov_119hbycuot().b[48][1]++;
    }
    // Create or update the shared want list record
    const {
      error
    } =
    /* istanbul ignore next */
    (cov_119hbycuot().s[134]++, await supabase_1.supabase.from('shared_want_lists').upsert([{
      userid: userId,
      showid: showId,
      wantlistid: wantList.id,
      sharedat: new Date().toISOString()
    }]));
    /* istanbul ignore next */
    cov_119hbycuot().s[135]++;
    if (error) {
      /* istanbul ignore next */
      cov_119hbycuot().b[49][0]++;
      cov_119hbycuot().s[136]++;
      throw error;
    } else
    /* istanbul ignore next */
    {
      cov_119hbycuot().b[49][1]++;
    }
    cov_119hbycuot().s[137]++;
    return {
      success: true,
      error: null
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_119hbycuot().s[138]++;
    console.error('Error sharing want list:', error);
    /* istanbul ignore next */
    cov_119hbycuot().s[139]++;
    return {
      success: false,
      error
    };
  }
};
/* istanbul ignore next */
cov_119hbycuot().s[140]++;
exports.shareWantList = shareWantList;
/**
 * Get all MVP dealers who will be at a specific show
 * @param showId The ID of the show
 * @returns Array of dealer user IDs and their basic info
 */
/* istanbul ignore next */
cov_119hbycuot().s[141]++;
const getDealersForShow = async showId => {
  /* istanbul ignore next */
  cov_119hbycuot().f[9]++;
  cov_119hbycuot().s[142]++;
  try {
    // This query assumes there's a 'show_participants' table that tracks who's attending which show
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_119hbycuot().s[143]++, await supabase_1.supabase.from('show_participants').select('users:userid(id, firstName, lastName, role)').eq('showid', showId).eq('users.role', types_1.UserRole.MVP_DEALER));
    /* istanbul ignore next */
    cov_119hbycuot().s[144]++;
    if (error) {
      /* istanbul ignore next */
      cov_119hbycuot().b[50][0]++;
      cov_119hbycuot().s[145]++;
      throw error;
    } else
    /* istanbul ignore next */
    {
      cov_119hbycuot().b[50][1]++;
    }
    // Extract user data from the nested structure
    const dealers =
    /* istanbul ignore next */
    (cov_119hbycuot().s[146]++,
    /* istanbul ignore next */
    (cov_119hbycuot().b[51][0]++, data?.map(item => {
      /* istanbul ignore next */
      cov_119hbycuot().f[10]++;
      cov_119hbycuot().s[147]++;
      return item.users;
    })) ||
    /* istanbul ignore next */
    (cov_119hbycuot().b[51][1]++, []));
    /* istanbul ignore next */
    cov_119hbycuot().s[148]++;
    return {
      data: dealers,
      error: null
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_119hbycuot().s[149]++;
    console.error('Error fetching dealers for show:', error);
    /* istanbul ignore next */
    cov_119hbycuot().s[150]++;
    return {
      data: null,
      error
    };
  }
};
/* istanbul ignore next */
cov_119hbycuot().s[151]++;
exports.getDealersForShow = getDealersForShow;
/**
 * Get shared want lists for a dealer at a specific show
 * @param dealerId The ID of the dealer (MVP_DEALER role)
 * @param showId The ID of the show
 * @returns Array of want lists with user information
 */
/* istanbul ignore next */
cov_119hbycuot().s[152]++;
const getSharedWantListsForDealer = async (dealerId, showId) => {
  /* istanbul ignore next */
  cov_119hbycuot().f[11]++;
  cov_119hbycuot().s[153]++;
  try {
    // Verify the user is an MVP dealer
    const {
      data: userData,
      error: userError
    } =
    /* istanbul ignore next */
    (cov_119hbycuot().s[154]++, await supabase_1.supabase.from('users').select('role').eq('id', dealerId).single());
    /* istanbul ignore next */
    cov_119hbycuot().s[155]++;
    if (userError) {
      /* istanbul ignore next */
      cov_119hbycuot().b[52][0]++;
      cov_119hbycuot().s[156]++;
      throw userError;
    } else
    /* istanbul ignore next */
    {
      cov_119hbycuot().b[52][1]++;
    }
    cov_119hbycuot().s[157]++;
    if (
    /* istanbul ignore next */
    (cov_119hbycuot().b[54][0]++, !userData) ||
    /* istanbul ignore next */
    (cov_119hbycuot().b[54][1]++, userData.role !== types_1.UserRole.MVP_DEALER)) {
      /* istanbul ignore next */
      cov_119hbycuot().b[53][0]++;
      cov_119hbycuot().s[158]++;
      return {
        data: null,
        error: new Error('Only MVP dealers can access shared want lists')
      };
    } else
    /* istanbul ignore next */
    {
      cov_119hbycuot().b[53][1]++;
    }
    // Get shared want lists for this show
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_119hbycuot().s[159]++, await supabase_1.supabase.from('shared_want_lists').select(`
        id,
        sharedat,
        users:userid(id, firstName, lastName),
        wantLists:wantlistid(id, content, updatedat)
      `).eq('showid', showId));
    /* istanbul ignore next */
    cov_119hbycuot().s[160]++;
    if (error) {
      /* istanbul ignore next */
      cov_119hbycuot().b[55][0]++;
      cov_119hbycuot().s[161]++;
      throw error;
    } else
    /* istanbul ignore next */
    {
      cov_119hbycuot().b[55][1]++;
    }
    // Transform the data to have camelCase keys
    const transformedData =
    /* istanbul ignore next */
    (cov_119hbycuot().s[162]++, data?.map(item => {
      /* istanbul ignore next */
      cov_119hbycuot().f[12]++;
      cov_119hbycuot().s[163]++;
      return {
        id: item.id,
        sharedAt: item.sharedat,
        user: item.users,
        wantList: item.wantLists ?
        /* istanbul ignore next */
        (cov_119hbycuot().b[56][0]++, {
          id: item.wantLists.id,
          content: item.wantLists.content,
          updatedAt: item.wantLists.updatedat
        }) :
        /* istanbul ignore next */
        (cov_119hbycuot().b[56][1]++, null)
      };
    }));
    /* istanbul ignore next */
    cov_119hbycuot().s[164]++;
    return {
      data: transformedData,
      error: null
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_119hbycuot().s[165]++;
    console.error('Error fetching shared want lists:', error);
    /* istanbul ignore next */
    cov_119hbycuot().s[166]++;
    return {
      data: null,
      error
    };
  }
};
/* istanbul ignore next */
cov_119hbycuot().s[167]++;
exports.getSharedWantListsForDealer = getSharedWantListsForDealer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,