{"version":3,"names":["cov_2le0mjav29","actualCoverage","s","react_1","require","react_native_1","supabase_1","AuthContext_1","errorService_1","useShowDetail","showId","onShare","onOpenMap","f","show","setShow","useState","loading","setLoading","error","setError","isFavorite","setIsFavorite","isClaimingShow","setIsClaimingShow","isShowClaimed","setIsShowClaimed","participatingDealers","setParticipatingDealers","loadingDealers","setLoadingDealers","authContext","useAuth","user","b","authState","isShowOrganizer","setIsShowOrganizer","isCurrentUserOrganizer","setIsCurrentUserOrganizer","useEffect","userRole","role","hasOrganizerRole","fetchShowDetails","fetchParticipatingDealers","checkIfFavorite","data","showData","showError","supabase","from","select","eq","single","Error","organizerProfile","organizer_id","profileData","profileError","combinedData","profiles","id","claimed_by","console","participants","participantsError","length","participantUserIds","Set","map","p","userid","dealerProfiles","profilesError","in","or","dealers","profile","name","first_name","last_name","trim","substring","profileImageUrl","profile_image_url","toUpperCase","accountType","account_type","session","auth","getSession","toggleFavorite","sessionError","Alert","alert","userId","delete","insert","user_id","show_id","appError","handleSupabaseError","shareShow","openMapLocation","address","location","handleClaimShow","exports","default"],"sources":["/Users/kevin/card-show-finder/src/screens/ShowDetail/hooks/useShowDetail.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { Alert } from 'react-native';\nimport { supabase } from '../../../supabase';\nimport { useAuth } from '../../../contexts/AuthContext';\nimport { handleSupabaseError } from '../../../services/errorService';\n\n// Define types for better type safety\ntype UserRole = 'SHOW_ORGANIZER' | 'MVP_DEALER' | 'DEALER' | 'USER';\n\ninterface Dealer {\n  id: string;\n  name: string;\n  profileImageUrl?: string;\n  role: UserRole;\n  accountType?: string;\n}\n\ninterface ShowDetails {\n  id: string;\n  title: string;\n  description?: string;\n  location?: string;\n  address?: string;\n  start_date?: string;\n  end_date?: string;\n  start_time?: string;\n  end_time?: string;\n  entry_fee?: number | string;\n  organizer_id?: string;\n  claimed_by?: string;\n  profiles?: {\n    id?: string;\n    first_name?: string;\n    last_name?: string;\n    profile_image_url?: string;\n    username?: string;\n    full_name?: string;\n    avatar_url?: string;\n  };\n  [key: string]: any; // For additional properties\n}\n\ninterface UseShowDetailResult {\n  show: ShowDetails | null;\n  loading: boolean;\n  error: string | null;\n  isFavorite: boolean;\n  isShowOrganizer: boolean;\n  isCurrentUserOrganizer: boolean;\n  isClaimingShow: boolean;\n  participatingDealers: Dealer[];\n  loadingDealers: boolean;\n  fetchShowDetails: () => Promise<void>;\n  toggleFavorite: () => Promise<void>;\n  shareShow: () => Promise<void>;\n  openMapLocation: () => void;\n  handleClaimShow: () => void;\n}\n\n/**\n * Custom hook to handle show detail data fetching and state management\n * @param showId The ID of the show to fetch\n * @param onShare Function to handle sharing the show\n * @param onOpenMap Function to handle opening the map\n */\nexport const useShowDetail = (\n  showId: string,\n  onShare: (show: ShowDetails) => Promise<void>,\n  onOpenMap: (address: string) => void\n): UseShowDetailResult => {\n  const [show, setShow] = useState<ShowDetails | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [isFavorite, setIsFavorite] = useState(false);\n  const [isClaimingShow, setIsClaimingShow] = useState(false);\n  const [isShowClaimed, setIsShowClaimed] = useState(false);\n  const [participatingDealers, setParticipatingDealers] = useState<Dealer[]>([]);\n  const [loadingDealers, setLoadingDealers] = useState(false);\n  \n  // Auth context for current user\n  const authContext = useAuth();\n  const user = authContext.authState?.user || null;\n  \n  // Derived state\n  const [isShowOrganizer, setIsShowOrganizer] = useState(false);\n  const [isCurrentUserOrganizer, setIsCurrentUserOrganizer] = useState(false);\n\n  // Check if user is a show organizer\n  useEffect(() => {\n    if (user) {\n      const userRole = user.role as UserRole;\n      const hasOrganizerRole = userRole === 'SHOW_ORGANIZER';\n      setIsShowOrganizer(hasOrganizerRole);\n    } else {\n      setIsShowOrganizer(false);\n    }\n  }, [user]);\n\n  // Fetch show details and dealers when showId changes\n  useEffect(() => {\n    fetchShowDetails();\n    fetchParticipatingDealers();\n    checkIfFavorite();\n  }, [showId]);\n\n  /**\n   * Fetch show details from the database\n   */\n  const fetchShowDetails = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      /* ------------------------------------------------------------------\n       * Step 1: Fetch the show row on its own (no joins)\n       * ------------------------------------------------------------------ */\n      const {\n        data: showData,\n        error: showError,\n      } = await supabase.from('shows').select('*').eq('id', showId).single();\n\n      if (showError) throw showError;\n      if (!showData) throw new Error('Show not found');\n\n      /* ------------------------------------------------------------------\n       * Step 2: If the show has an organiser, fetch their profile\n       * ------------------------------------------------------------------ */\n      let organizerProfile: any = null;\n      if (showData.organizer_id) {\n        const {\n          data: profileData,\n          error: profileError,\n        } = await supabase\n          .from('profiles')\n          .select(\n            'id, first_name, last_name, profile_image_url, username, full_name, avatar_url'\n          )\n          .eq('id', showData.organizer_id)\n          .single();\n\n        if (!profileError && profileData) {\n          organizerProfile = profileData;\n        }\n      }\n\n      /* ------------------------------------------------------------------\n       * Step 3: Combine the data and update component state\n       * ------------------------------------------------------------------ */\n      const combinedData = {\n        ...showData,\n        profiles: organizerProfile,\n      };\n\n      setShow(combinedData);\n      setIsCurrentUserOrganizer(user?.id === showData.organizer_id);\n      setIsShowClaimed(!!showData.claimed_by);\n    } catch (error) {\n      console.error('Error fetching show details:', error);\n      setError('Failed to load show details');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  /**\n   * Fetch participating dealers for the show\n   */\n  const fetchParticipatingDealers = async () => {\n    setLoadingDealers(true);\n    try {\n      const { data: participants, error: participantsError } = await supabase\n        .from('show_participants')\n        .select('userid')\n        .eq('showid', showId);\n\n      if (participantsError) throw participantsError;\n      if (!participants || participants.length === 0) {\n        setParticipatingDealers([]);\n        return;\n      }\n\n      const participantUserIds = [...new Set(participants.map((p) => p.userid))];\n      const { data: dealerProfiles, error: profilesError } = await supabase\n        .from('profiles')\n        .select('id, first_name, last_name, profile_image_url, role, account_type')\n        .in('id', participantUserIds)\n        // Roles are stored lowercase in DB, so query accordingly\n        .or('role.eq.mvp_dealer,role.eq.dealer');\n\n      if (profilesError) throw profilesError;\n\n      const dealers = (dealerProfiles || []).map((profile) => ({\n        id: profile.id,\n        name: `${profile.first_name ?? ''} ${profile.last_name ?? ''}`.trim() || profile.id.substring(0, 8),\n        profileImageUrl: profile.profile_image_url,\n        // Normalise role to uppercase so downstream comparisons\n        // (`dealer.role === 'MVP_DEALER'`, etc.) work reliably.\n        role: ((profile.role ?? '') as string).toUpperCase() as UserRole,\n        accountType: profile.account_type,\n      }));\n      setParticipatingDealers(dealers);\n    } catch (error) {\n      console.error('Error in fetchParticipatingDealers:', error);\n      // Don't set error state here to avoid disrupting the main UI if dealers can't load\n    } finally {\n      setLoadingDealers(false);\n    }\n  };\n\n  /**\n   * Check if the current show is marked as a favorite by the user\n   */\n  const checkIfFavorite = async () => {\n    try {\n      const { data: { session } } = await supabase.auth.getSession();\n      if (!session?.user?.id) {\n        setIsFavorite(false);\n        return;\n      }\n      const { data, error } = await supabase\n        .from('user_favorite_shows')\n        .select()\n        .eq('user_id', session.user.id)\n        .eq('show_id', showId)\n        .single();\n      setIsFavorite(!error && !!data);\n    } catch (error) {\n      console.error('Error checking favorite status:', error);\n    }\n  };\n\n  /**\n   * Toggle the favorite status of the show\n   */\n  const toggleFavorite = async () => {\n    try {\n      const { data: { session }, error: sessionError } = await supabase.auth.getSession();\n      if (sessionError || !session?.user) {\n        Alert.alert('Sign In Required', 'Please sign in to save favorites');\n        return;\n      }\n      const userId = session.user.id;\n\n      if (isFavorite) {\n        const { error } = await supabase\n          .from('user_favorite_shows')\n          .delete()\n          .eq('user_id', userId)\n          .eq('show_id', showId);\n        if (error) throw error;\n        setIsFavorite(false);\n      } else {\n        const { error } = await supabase\n          .from('user_favorite_shows')\n          .insert([{ user_id: userId, show_id: showId }]);\n        if (error) throw error;\n        setIsFavorite(true);\n      }\n    } catch (error) {\n      const appError = handleSupabaseError(error);\n      console.error('🚨 UNEXPECTED ERROR in toggleFavorite:', appError);\n      Alert.alert('Error', 'An unexpected error occurred while updating favorites.');\n    }\n  };\n\n  /**\n   * Share the show details\n   */\n  const shareShow = async () => {\n    if (!show) return;\n    try {\n      await onShare(show);\n    } catch (error) {\n      console.error('Error sharing:', error);\n    }\n  };\n\n  /**\n   * Open the show location in a map app\n   */\n  const openMapLocation = () => {\n    if (!show) return;\n    const address = show.address || show.location || '';\n    onOpenMap(address);\n  };\n\n  /**\n   * Handle claiming a show (placeholder)\n   */\n  const handleClaimShow = () => {\n    Alert.alert(\"Claim Show\", \"This feature is coming soon!\");\n  };\n\n  return {\n    show,\n    loading,\n    error,\n    isFavorite,\n    isShowOrganizer,\n    isCurrentUserOrganizer,\n    isClaimingShow,\n    participatingDealers,\n    loadingDealers,\n    fetchShowDetails,\n    toggleFavorite,\n    shareShow,\n    openMapLocation,\n    handleClaimShow\n  };\n};\n\nexport default useShowDetail;\n"],"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","ignoreList":[]}