445316ec8dd47e694624d549fd9173ac
"use strict";

/* istanbul ignore next */
function cov_2le0mjav29() {
  var path = "/Users/kevin/card-show-finder/src/screens/ShowDetail/hooks/useShowDetail.ts";
  var hash = "3169676c9c5f2f7aff814b478d4a737bfdf1760d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kevin/card-show-finder/src/screens/ShowDetail/hooks/useShowDetail.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 31
        }
      },
      "2": {
        start: {
          line: 4,
          column: 16
        },
        end: {
          line: 4,
          column: 32
        }
      },
      "3": {
        start: {
          line: 5,
          column: 23
        },
        end: {
          line: 5,
          column: 46
        }
      },
      "4": {
        start: {
          line: 6,
          column: 19
        },
        end: {
          line: 6,
          column: 47
        }
      },
      "5": {
        start: {
          line: 7,
          column: 22
        },
        end: {
          line: 7,
          column: 62
        }
      },
      "6": {
        start: {
          line: 8,
          column: 23
        },
        end: {
          line: 8,
          column: 64
        }
      },
      "7": {
        start: {
          line: 15,
          column: 22
        },
        end: {
          line: 241,
          column: 1
        }
      },
      "8": {
        start: {
          line: 16,
          column: 28
        },
        end: {
          line: 16,
          column: 55
        }
      },
      "9": {
        start: {
          line: 17,
          column: 34
        },
        end: {
          line: 17,
          column: 61
        }
      },
      "10": {
        start: {
          line: 18,
          column: 30
        },
        end: {
          line: 18,
          column: 57
        }
      },
      "11": {
        start: {
          line: 19,
          column: 40
        },
        end: {
          line: 19,
          column: 68
        }
      },
      "12": {
        start: {
          line: 20,
          column: 48
        },
        end: {
          line: 20,
          column: 76
        }
      },
      "13": {
        start: {
          line: 21,
          column: 46
        },
        end: {
          line: 21,
          column: 74
        }
      },
      "14": {
        start: {
          line: 22,
          column: 60
        },
        end: {
          line: 22,
          column: 85
        }
      },
      "15": {
        start: {
          line: 23,
          column: 48
        },
        end: {
          line: 23,
          column: 76
        }
      },
      "16": {
        start: {
          line: 25,
          column: 24
        },
        end: {
          line: 25,
          column: 52
        }
      },
      "17": {
        start: {
          line: 26,
          column: 17
        },
        end: {
          line: 26,
          column: 52
        }
      },
      "18": {
        start: {
          line: 28,
          column: 50
        },
        end: {
          line: 28,
          column: 78
        }
      },
      "19": {
        start: {
          line: 29,
          column: 64
        },
        end: {
          line: 29,
          column: 92
        }
      },
      "20": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 40,
          column: 15
        }
      },
      "21": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 39,
          column: 9
        }
      },
      "22": {
        start: {
          line: 33,
          column: 29
        },
        end: {
          line: 33,
          column: 38
        }
      },
      "23": {
        start: {
          line: 34,
          column: 37
        },
        end: {
          line: 34,
          column: 66
        }
      },
      "24": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 35,
          column: 49
        }
      },
      "25": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 38
        }
      },
      "26": {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 46,
          column: 17
        }
      },
      "27": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 27
        }
      },
      "28": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 36
        }
      },
      "29": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 26
        }
      },
      "30": {
        start: {
          line: 50,
          column: 29
        },
        end: {
          line: 94,
          column: 5
        }
      },
      "31": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 93,
          column: 9
        }
      },
      "32": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 29
        }
      },
      "33": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 27
        }
      },
      "34": {
        start: {
          line: 57,
          column: 58
        },
        end: {
          line: 57,
          column: 135
        }
      },
      "35": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 59,
          column: 32
        }
      },
      "36": {
        start: {
          line: 59,
          column: 16
        },
        end: {
          line: 59,
          column: 32
        }
      },
      "37": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 61,
          column: 50
        }
      },
      "38": {
        start: {
          line: 61,
          column: 16
        },
        end: {
          line: 61,
          column: 50
        }
      },
      "39": {
        start: {
          line: 65,
          column: 35
        },
        end: {
          line: 65,
          column: 39
        }
      },
      "40": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 75,
          column: 13
        }
      },
      "41": {
        start: {
          line: 67,
          column: 68
        },
        end: {
          line: 71,
          column: 29
        }
      },
      "42": {
        start: {
          line: 72,
          column: 16
        },
        end: {
          line: 74,
          column: 17
        }
      },
      "43": {
        start: {
          line: 73,
          column: 20
        },
        end: {
          line: 73,
          column: 51
        }
      },
      "44": {
        start: {
          line: 79,
          column: 33
        },
        end: {
          line: 82,
          column: 13
        }
      },
      "45": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 83,
          column: 34
        }
      },
      "46": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 74
        }
      },
      "47": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 52
        }
      },
      "48": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 88,
          column: 65
        }
      },
      "49": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 52
        }
      },
      "50": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 30
        }
      },
      "51": {
        start: {
          line: 98,
          column: 38
        },
        end: {
          line: 138,
          column: 5
        }
      },
      "52": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 99,
          column: 32
        }
      },
      "53": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 137,
          column: 9
        }
      },
      "54": {
        start: {
          line: 101,
          column: 69
        },
        end: {
          line: 104,
          column: 37
        }
      },
      "55": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 106,
          column: 40
        }
      },
      "56": {
        start: {
          line: 106,
          column: 16
        },
        end: {
          line: 106,
          column: 40
        }
      },
      "57": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 110,
          column: 13
        }
      },
      "58": {
        start: {
          line: 108,
          column: 16
        },
        end: {
          line: 108,
          column: 44
        }
      },
      "59": {
        start: {
          line: 109,
          column: 16
        },
        end: {
          line: 109,
          column: 23
        }
      },
      "60": {
        start: {
          line: 111,
          column: 39
        },
        end: {
          line: 111,
          column: 86
        }
      },
      "61": {
        start: {
          line: 111,
          column: 75
        },
        end: {
          line: 111,
          column: 83
        }
      },
      "62": {
        start: {
          line: 112,
          column: 67
        },
        end: {
          line: 117,
          column: 56
        }
      },
      "63": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 119,
          column: 36
        }
      },
      "64": {
        start: {
          line: 119,
          column: 16
        },
        end: {
          line: 119,
          column: 36
        }
      },
      "65": {
        start: {
          line: 120,
          column: 28
        },
        end: {
          line: 128,
          column: 15
        }
      },
      "66": {
        start: {
          line: 120,
          column: 69
        },
        end: {
          line: 128,
          column: 13
        }
      },
      "67": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 129,
          column: 45
        }
      },
      "68": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 72
        }
      },
      "69": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 136,
          column: 37
        }
      },
      "70": {
        start: {
          line: 142,
          column: 28
        },
        end: {
          line: 160,
          column: 5
        }
      },
      "71": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 159,
          column: 9
        }
      },
      "72": {
        start: {
          line: 144,
          column: 42
        },
        end: {
          line: 144,
          column: 85
        }
      },
      "73": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 148,
          column: 13
        }
      },
      "74": {
        start: {
          line: 146,
          column: 16
        },
        end: {
          line: 146,
          column: 37
        }
      },
      "75": {
        start: {
          line: 147,
          column: 16
        },
        end: {
          line: 147,
          column: 23
        }
      },
      "76": {
        start: {
          line: 149,
          column: 36
        },
        end: {
          line: 154,
          column: 25
        }
      },
      "77": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 155,
          column: 44
        }
      },
      "78": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 158,
          column: 68
        }
      },
      "79": {
        start: {
          line: 164,
          column: 27
        },
        end: {
          line: 196,
          column: 5
        }
      },
      "80": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 195,
          column: 9
        }
      },
      "81": {
        start: {
          line: 166,
          column: 63
        },
        end: {
          line: 166,
          column: 106
        }
      },
      "82": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 170,
          column: 13
        }
      },
      "83": {
        start: {
          line: 168,
          column: 16
        },
        end: {
          line: 168,
          column: 99
        }
      },
      "84": {
        start: {
          line: 169,
          column: 16
        },
        end: {
          line: 169,
          column: 23
        }
      },
      "85": {
        start: {
          line: 171,
          column: 27
        },
        end: {
          line: 171,
          column: 42
        }
      },
      "86": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 189,
          column: 13
        }
      },
      "87": {
        start: {
          line: 173,
          column: 34
        },
        end: {
          line: 177,
          column: 42
        }
      },
      "88": {
        start: {
          line: 178,
          column: 16
        },
        end: {
          line: 179,
          column: 32
        }
      },
      "89": {
        start: {
          line: 179,
          column: 20
        },
        end: {
          line: 179,
          column: 32
        }
      },
      "90": {
        start: {
          line: 180,
          column: 16
        },
        end: {
          line: 180,
          column: 37
        }
      },
      "91": {
        start: {
          line: 183,
          column: 34
        },
        end: {
          line: 185,
          column: 67
        }
      },
      "92": {
        start: {
          line: 186,
          column: 16
        },
        end: {
          line: 187,
          column: 32
        }
      },
      "93": {
        start: {
          line: 187,
          column: 20
        },
        end: {
          line: 187,
          column: 32
        }
      },
      "94": {
        start: {
          line: 188,
          column: 16
        },
        end: {
          line: 188,
          column: 36
        }
      },
      "95": {
        start: {
          line: 192,
          column: 29
        },
        end: {
          line: 192,
          column: 75
        }
      },
      "96": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 78
        }
      },
      "97": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 194,
          column: 106
        }
      },
      "98": {
        start: {
          line: 200,
          column: 22
        },
        end: {
          line: 209,
          column: 5
        }
      },
      "99": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 202,
          column: 19
        }
      },
      "100": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 202,
          column: 19
        }
      },
      "101": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 208,
          column: 9
        }
      },
      "102": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 204,
          column: 32
        }
      },
      "103": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 207,
          column: 51
        }
      },
      "104": {
        start: {
          line: 213,
          column: 28
        },
        end: {
          line: 218,
          column: 5
        }
      },
      "105": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 215,
          column: 19
        }
      },
      "106": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 215,
          column: 19
        }
      },
      "107": {
        start: {
          line: 216,
          column: 24
        },
        end: {
          line: 216,
          column: 59
        }
      },
      "108": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 217,
          column: 27
        }
      },
      "109": {
        start: {
          line: 222,
          column: 28
        },
        end: {
          line: 224,
          column: 5
        }
      },
      "110": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 223,
          column: 81
        }
      },
      "111": {
        start: {
          line: 225,
          column: 4
        },
        end: {
          line: 240,
          column: 6
        }
      },
      "112": {
        start: {
          line: 242,
          column: 0
        },
        end: {
          line: 242,
          column: 38
        }
      },
      "113": {
        start: {
          line: 243,
          column: 0
        },
        end: {
          line: 243,
          column: 40
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 15,
            column: 22
          },
          end: {
            line: 15,
            column: 23
          }
        },
        loc: {
          start: {
            line: 15,
            column: 54
          },
          end: {
            line: 241,
            column: 1
          }
        },
        line: 15
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 31,
            column: 27
          },
          end: {
            line: 31,
            column: 28
          }
        },
        loc: {
          start: {
            line: 31,
            column: 33
          },
          end: {
            line: 40,
            column: 5
          }
        },
        line: 31
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 42,
            column: 27
          },
          end: {
            line: 42,
            column: 28
          }
        },
        loc: {
          start: {
            line: 42,
            column: 33
          },
          end: {
            line: 46,
            column: 5
          }
        },
        line: 42
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 50,
            column: 29
          },
          end: {
            line: 50,
            column: 30
          }
        },
        loc: {
          start: {
            line: 50,
            column: 41
          },
          end: {
            line: 94,
            column: 5
          }
        },
        line: 50
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 98,
            column: 38
          },
          end: {
            line: 98,
            column: 39
          }
        },
        loc: {
          start: {
            line: 98,
            column: 50
          },
          end: {
            line: 138,
            column: 5
          }
        },
        line: 98
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 111,
            column: 68
          },
          end: {
            line: 111,
            column: 69
          }
        },
        loc: {
          start: {
            line: 111,
            column: 75
          },
          end: {
            line: 111,
            column: 83
          }
        },
        line: 111
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 120,
            column: 55
          },
          end: {
            line: 120,
            column: 56
          }
        },
        loc: {
          start: {
            line: 120,
            column: 69
          },
          end: {
            line: 128,
            column: 13
          }
        },
        line: 120
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 142,
            column: 28
          },
          end: {
            line: 142,
            column: 29
          }
        },
        loc: {
          start: {
            line: 142,
            column: 40
          },
          end: {
            line: 160,
            column: 5
          }
        },
        line: 142
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 164,
            column: 27
          },
          end: {
            line: 164,
            column: 28
          }
        },
        loc: {
          start: {
            line: 164,
            column: 39
          },
          end: {
            line: 196,
            column: 5
          }
        },
        line: 164
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 200,
            column: 22
          },
          end: {
            line: 200,
            column: 23
          }
        },
        loc: {
          start: {
            line: 200,
            column: 34
          },
          end: {
            line: 209,
            column: 5
          }
        },
        line: 200
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 213,
            column: 28
          },
          end: {
            line: 213,
            column: 29
          }
        },
        loc: {
          start: {
            line: 213,
            column: 34
          },
          end: {
            line: 218,
            column: 5
          }
        },
        line: 213
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 222,
            column: 28
          },
          end: {
            line: 222,
            column: 29
          }
        },
        loc: {
          start: {
            line: 222,
            column: 34
          },
          end: {
            line: 224,
            column: 5
          }
        },
        line: 222
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 26,
            column: 17
          },
          end: {
            line: 26,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 26,
            column: 17
          },
          end: {
            line: 26,
            column: 44
          }
        }, {
          start: {
            line: 26,
            column: 48
          },
          end: {
            line: 26,
            column: 52
          }
        }],
        line: 26
      },
      "1": {
        loc: {
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 39,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 39,
            column: 9
          }
        }, {
          start: {
            line: 37,
            column: 13
          },
          end: {
            line: 39,
            column: 9
          }
        }],
        line: 32
      },
      "2": {
        loc: {
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 59,
            column: 32
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 59,
            column: 32
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "3": {
        loc: {
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 61,
            column: 50
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 61,
            column: 50
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "4": {
        loc: {
          start: {
            line: 66,
            column: 12
          },
          end: {
            line: 75,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 12
          },
          end: {
            line: 75,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 66
      },
      "5": {
        loc: {
          start: {
            line: 72,
            column: 16
          },
          end: {
            line: 74,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 16
          },
          end: {
            line: 74,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 72
      },
      "6": {
        loc: {
          start: {
            line: 72,
            column: 20
          },
          end: {
            line: 72,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 72,
            column: 20
          },
          end: {
            line: 72,
            column: 33
          }
        }, {
          start: {
            line: 72,
            column: 37
          },
          end: {
            line: 72,
            column: 48
          }
        }],
        line: 72
      },
      "7": {
        loc: {
          start: {
            line: 105,
            column: 12
          },
          end: {
            line: 106,
            column: 40
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 105,
            column: 12
          },
          end: {
            line: 106,
            column: 40
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 105
      },
      "8": {
        loc: {
          start: {
            line: 107,
            column: 12
          },
          end: {
            line: 110,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 12
          },
          end: {
            line: 110,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      },
      "9": {
        loc: {
          start: {
            line: 107,
            column: 16
          },
          end: {
            line: 107,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 107,
            column: 16
          },
          end: {
            line: 107,
            column: 29
          }
        }, {
          start: {
            line: 107,
            column: 33
          },
          end: {
            line: 107,
            column: 58
          }
        }],
        line: 107
      },
      "10": {
        loc: {
          start: {
            line: 118,
            column: 12
          },
          end: {
            line: 119,
            column: 36
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 12
          },
          end: {
            line: 119,
            column: 36
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 118
      },
      "11": {
        loc: {
          start: {
            line: 120,
            column: 29
          },
          end: {
            line: 120,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 120,
            column: 29
          },
          end: {
            line: 120,
            column: 43
          }
        }, {
          start: {
            line: 120,
            column: 47
          },
          end: {
            line: 120,
            column: 49
          }
        }],
        line: 120
      },
      "12": {
        loc: {
          start: {
            line: 122,
            column: 22
          },
          end: {
            line: 122,
            column: 115
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 122,
            column: 22
          },
          end: {
            line: 122,
            column: 85
          }
        }, {
          start: {
            line: 122,
            column: 89
          },
          end: {
            line: 122,
            column: 115
          }
        }],
        line: 122
      },
      "13": {
        loc: {
          start: {
            line: 122,
            column: 25
          },
          end: {
            line: 122,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 122,
            column: 25
          },
          end: {
            line: 122,
            column: 43
          }
        }, {
          start: {
            line: 122,
            column: 47
          },
          end: {
            line: 122,
            column: 49
          }
        }],
        line: 122
      },
      "14": {
        loc: {
          start: {
            line: 122,
            column: 53
          },
          end: {
            line: 122,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 122,
            column: 53
          },
          end: {
            line: 122,
            column: 70
          }
        }, {
          start: {
            line: 122,
            column: 74
          },
          end: {
            line: 122,
            column: 76
          }
        }],
        line: 122
      },
      "15": {
        loc: {
          start: {
            line: 126,
            column: 23
          },
          end: {
            line: 126,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 126,
            column: 23
          },
          end: {
            line: 126,
            column: 35
          }
        }, {
          start: {
            line: 126,
            column: 39
          },
          end: {
            line: 126,
            column: 41
          }
        }],
        line: 126
      },
      "16": {
        loc: {
          start: {
            line: 145,
            column: 12
          },
          end: {
            line: 148,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 12
          },
          end: {
            line: 148,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 145
      },
      "17": {
        loc: {
          start: {
            line: 155,
            column: 26
          },
          end: {
            line: 155,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 155,
            column: 26
          },
          end: {
            line: 155,
            column: 32
          }
        }, {
          start: {
            line: 155,
            column: 36
          },
          end: {
            line: 155,
            column: 42
          }
        }],
        line: 155
      },
      "18": {
        loc: {
          start: {
            line: 167,
            column: 12
          },
          end: {
            line: 170,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 167,
            column: 12
          },
          end: {
            line: 170,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 167
      },
      "19": {
        loc: {
          start: {
            line: 167,
            column: 16
          },
          end: {
            line: 167,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 167,
            column: 16
          },
          end: {
            line: 167,
            column: 28
          }
        }, {
          start: {
            line: 167,
            column: 32
          },
          end: {
            line: 167,
            column: 46
          }
        }],
        line: 167
      },
      "20": {
        loc: {
          start: {
            line: 172,
            column: 12
          },
          end: {
            line: 189,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 172,
            column: 12
          },
          end: {
            line: 189,
            column: 13
          }
        }, {
          start: {
            line: 182,
            column: 17
          },
          end: {
            line: 189,
            column: 13
          }
        }],
        line: 172
      },
      "21": {
        loc: {
          start: {
            line: 178,
            column: 16
          },
          end: {
            line: 179,
            column: 32
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 178,
            column: 16
          },
          end: {
            line: 179,
            column: 32
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 178
      },
      "22": {
        loc: {
          start: {
            line: 186,
            column: 16
          },
          end: {
            line: 187,
            column: 32
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 186,
            column: 16
          },
          end: {
            line: 187,
            column: 32
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 186
      },
      "23": {
        loc: {
          start: {
            line: 201,
            column: 8
          },
          end: {
            line: 202,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 201,
            column: 8
          },
          end: {
            line: 202,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 201
      },
      "24": {
        loc: {
          start: {
            line: 214,
            column: 8
          },
          end: {
            line: 215,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 214,
            column: 8
          },
          end: {
            line: 215,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 214
      },
      "25": {
        loc: {
          start: {
            line: 216,
            column: 24
          },
          end: {
            line: 216,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 216,
            column: 24
          },
          end: {
            line: 216,
            column: 36
          }
        }, {
          start: {
            line: 216,
            column: 40
          },
          end: {
            line: 216,
            column: 53
          }
        }, {
          start: {
            line: 216,
            column: 57
          },
          end: {
            line: 216,
            column: 59
          }
        }],
        line: 216
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0, 0]
    },
    inputSourceMap: {
      file: "/Users/kevin/card-show-finder/src/screens/ShowDetail/hooks/useShowDetail.ts",
      mappings: ";;;AAAA,iCAA4C;AAC5C,+CAAqC;AACrC,gDAA6C;AAC7C,+DAAwD;AACxD,iEAAqE;AAuDrE;;;;;GAKG;AACI,MAAM,aAAa,GAAG,CAC3B,MAAc,EACd,OAA6C,EAC7C,SAAoC,EACf,EAAE;IACvB,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,GAAG,IAAA,gBAAQ,EAAqB,IAAI,CAAC,CAAC;IAC3D,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,GAAG,IAAA,gBAAQ,EAAC,IAAI,CAAC,CAAC;IAC7C,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,IAAA,gBAAQ,EAAgB,IAAI,CAAC,CAAC;IACxD,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,GAAG,IAAA,gBAAQ,EAAC,KAAK,CAAC,CAAC;IACpD,MAAM,CAAC,cAAc,EAAE,iBAAiB,CAAC,GAAG,IAAA,gBAAQ,EAAC,KAAK,CAAC,CAAC;IAC5D,MAAM,CAAC,aAAa,EAAE,gBAAgB,CAAC,GAAG,IAAA,gBAAQ,EAAC,KAAK,CAAC,CAAC;IAC1D,MAAM,CAAC,oBAAoB,EAAE,uBAAuB,CAAC,GAAG,IAAA,gBAAQ,EAAW,EAAE,CAAC,CAAC;IAC/E,MAAM,CAAC,cAAc,EAAE,iBAAiB,CAAC,GAAG,IAAA,gBAAQ,EAAC,KAAK,CAAC,CAAC;IAE5D,gCAAgC;IAChC,MAAM,WAAW,GAAG,IAAA,qBAAO,GAAE,CAAC;IAC9B,MAAM,IAAI,GAAG,WAAW,CAAC,SAAS,EAAE,IAAI,IAAI,IAAI,CAAC;IAEjD,gBAAgB;IAChB,MAAM,CAAC,eAAe,EAAE,kBAAkB,CAAC,GAAG,IAAA,gBAAQ,EAAC,KAAK,CAAC,CAAC;IAC9D,MAAM,CAAC,sBAAsB,EAAE,yBAAyB,CAAC,GAAG,IAAA,gBAAQ,EAAC,KAAK,CAAC,CAAC;IAE5E,oCAAoC;IACpC,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,IAAI,IAAI,EAAE,CAAC;YACT,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAgB,CAAC;YACvC,MAAM,gBAAgB,GAAG,QAAQ,KAAK,gBAAgB,CAAC;YACvD,kBAAkB,CAAC,gBAAgB,CAAC,CAAC;QACvC,CAAC;aAAM,CAAC;YACN,kBAAkB,CAAC,KAAK,CAAC,CAAC;QAC5B,CAAC;IACH,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;IAEX,qDAAqD;IACrD,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,gBAAgB,EAAE,CAAC;QACnB,yBAAyB,EAAE,CAAC;QAC5B,eAAe,EAAE,CAAC;IACpB,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;IAEb;;OAEG;IACH,MAAM,gBAAgB,GAAG,KAAK,IAAI,EAAE;QAClC,IAAI,CAAC;YACH,UAAU,CAAC,IAAI,CAAC,CAAC;YACjB,QAAQ,CAAC,IAAI,CAAC,CAAC;YAEf;;oFAEwE;YACxE,MAAM,EACJ,IAAI,EAAE,QAAQ,EACd,KAAK,EAAE,SAAS,GACjB,GAAG,MAAM,mBAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,MAAM,EAAE,CAAC;YAEvE,IAAI,SAAS;gBAAE,MAAM,SAAS,CAAC;YAC/B,IAAI,CAAC,QAAQ;gBAAE,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;YAEjD;;oFAEwE;YACxE,IAAI,gBAAgB,GAAQ,IAAI,CAAC;YACjC,IAAI,QAAQ,CAAC,YAAY,EAAE,CAAC;gBAC1B,MAAM,EACJ,IAAI,EAAE,WAAW,EACjB,KAAK,EAAE,YAAY,GACpB,GAAG,MAAM,mBAAQ;qBACf,IAAI,CAAC,UAAU,CAAC;qBAChB,MAAM,CACL,+EAA+E,CAChF;qBACA,EAAE,CAAC,IAAI,EAAE,QAAQ,CAAC,YAAY,CAAC;qBAC/B,MAAM,EAAE,CAAC;gBAEZ,IAAI,CAAC,YAAY,IAAI,WAAW,EAAE,CAAC;oBACjC,gBAAgB,GAAG,WAAW,CAAC;gBACjC,CAAC;YACH,CAAC;YAED;;oFAEwE;YACxE,MAAM,YAAY,GAAG;gBACnB,GAAG,QAAQ;gBACX,QAAQ,EAAE,gBAAgB;aAC3B,CAAC;YAEF,OAAO,CAAC,YAAY,CAAC,CAAC;YACtB,yBAAyB,CAAC,IAAI,EAAE,EAAE,KAAK,QAAQ,CAAC,YAAY,CAAC,CAAC;YAC9D,gBAAgB,CAAC,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QAC1C,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,8BAA8B,EAAE,KAAK,CAAC,CAAC;YACrD,QAAQ,CAAC,6BAA6B,CAAC,CAAC;QAC1C,CAAC;gBAAS,CAAC;YACT,UAAU,CAAC,KAAK,CAAC,CAAC;QACpB,CAAC;IACH,CAAC,CAAC;IAEF;;OAEG;IACH,MAAM,yBAAyB,GAAG,KAAK,IAAI,EAAE;QAC3C,iBAAiB,CAAC,IAAI,CAAC,CAAC;QACxB,IAAI,CAAC;YACH,MAAM,EAAE,IAAI,EAAE,YAAY,EAAE,KAAK,EAAE,iBAAiB,EAAE,GAAG,MAAM,mBAAQ;iBACpE,IAAI,CAAC,mBAAmB,CAAC;iBACzB,MAAM,CAAC,QAAQ,CAAC;iBAChB,EAAE,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;YAExB,IAAI,iBAAiB;gBAAE,MAAM,iBAAiB,CAAC;YAC/C,IAAI,CAAC,YAAY,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBAC/C,uBAAuB,CAAC,EAAE,CAAC,CAAC;gBAC5B,OAAO;YACT,CAAC;YAED,MAAM,kBAAkB,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC3E,MAAM,EAAE,IAAI,EAAE,cAAc,EAAE,KAAK,EAAE,aAAa,EAAE,GAAG,MAAM,mBAAQ;iBAClE,IAAI,CAAC,UAAU,CAAC;iBAChB,MAAM,CAAC,kEAAkE,CAAC;iBAC1E,EAAE,CAAC,IAAI,EAAE,kBAAkB,CAAC;gBAC7B,yDAAyD;iBACxD,EAAE,CAAC,mCAAmC,CAAC,CAAC;YAE3C,IAAI,aAAa;gBAAE,MAAM,aAAa,CAAC;YAEvC,MAAM,OAAO,GAAG,CAAC,cAAc,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;gBACvD,EAAE,EAAE,OAAO,CAAC,EAAE;gBACd,IAAI,EAAE,GAAG,OAAO,CAAC,UAAU,IAAI,EAAE,IAAI,OAAO,CAAC,SAAS,IAAI,EAAE,EAAE,CAAC,IAAI,EAAE,IAAI,OAAO,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;gBACnG,eAAe,EAAE,OAAO,CAAC,iBAAiB;gBAC1C,wDAAwD;gBACxD,wDAAwD;gBACxD,IAAI,EAAG,CAAC,OAAO,CAAC,IAAI,IAAI,EAAE,CAAY,CAAC,WAAW,EAAc;gBAChE,WAAW,EAAE,OAAO,CAAC,YAAY;aAClC,CAAC,CAAC,CAAC;YACJ,uBAAuB,CAAC,OAAO,CAAC,CAAC;QACnC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,qCAAqC,EAAE,KAAK,CAAC,CAAC;YAC5D,mFAAmF;QACrF,CAAC;gBAAS,CAAC;YACT,iBAAiB,CAAC,KAAK,CAAC,CAAC;QAC3B,CAAC;IACH,CAAC,CAAC;IAEF;;OAEG;IACH,MAAM,eAAe,GAAG,KAAK,IAAI,EAAE;QACjC,IAAI,CAAC;YACH,MAAM,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,EAAE,GAAG,MAAM,mBAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;YAC/D,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC;gBACvB,aAAa,CAAC,KAAK,CAAC,CAAC;gBACrB,OAAO;YACT,CAAC;YACD,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,mBAAQ;iBACnC,IAAI,CAAC,qBAAqB,CAAC;iBAC3B,MAAM,EAAE;iBACR,EAAE,CAAC,SAAS,EAAE,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC;iBAC9B,EAAE,CAAC,SAAS,EAAE,MAAM,CAAC;iBACrB,MAAM,EAAE,CAAC;YACZ,aAAa,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;QAClC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,iCAAiC,EAAE,KAAK,CAAC,CAAC;QAC1D,CAAC;IACH,CAAC,CAAC;IAEF;;OAEG;IACH,MAAM,cAAc,GAAG,KAAK,IAAI,EAAE;QAChC,IAAI,CAAC;YACH,MAAM,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,EAAE,KAAK,EAAE,YAAY,EAAE,GAAG,MAAM,mBAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;YACpF,IAAI,YAAY,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC;gBACnC,oBAAK,CAAC,KAAK,CAAC,kBAAkB,EAAE,kCAAkC,CAAC,CAAC;gBACpE,OAAO;YACT,CAAC;YACD,MAAM,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC;YAE/B,IAAI,UAAU,EAAE,CAAC;gBACf,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,mBAAQ;qBAC7B,IAAI,CAAC,qBAAqB,CAAC;qBAC3B,MAAM,EAAE;qBACR,EAAE,CAAC,SAAS,EAAE,MAAM,CAAC;qBACrB,EAAE,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;gBACzB,IAAI,KAAK;oBAAE,MAAM,KAAK,CAAC;gBACvB,aAAa,CAAC,KAAK,CAAC,CAAC;YACvB,CAAC;iBAAM,CAAC;gBACN,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,mBAAQ;qBAC7B,IAAI,CAAC,qBAAqB,CAAC;qBAC3B,MAAM,CAAC,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;gBAClD,IAAI,KAAK;oBAAE,MAAM,KAAK,CAAC;gBACvB,aAAa,CAAC,IAAI,CAAC,CAAC;YACtB,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,QAAQ,GAAG,IAAA,kCAAmB,EAAC,KAAK,CAAC,CAAC;YAC5C,OAAO,CAAC,KAAK,CAAC,wCAAwC,EAAE,QAAQ,CAAC,CAAC;YAClE,oBAAK,CAAC,KAAK,CAAC,OAAO,EAAE,wDAAwD,CAAC,CAAC;QACjF,CAAC;IACH,CAAC,CAAC;IAEF;;OAEG;IACH,MAAM,SAAS,GAAG,KAAK,IAAI,EAAE;QAC3B,IAAI,CAAC,IAAI;YAAE,OAAO;QAClB,IAAI,CAAC;YACH,MAAM,OAAO,CAAC,IAAI,CAAC,CAAC;QACtB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC;QACzC,CAAC;IACH,CAAC,CAAC;IAEF;;OAEG;IACH,MAAM,eAAe,GAAG,GAAG,EAAE;QAC3B,IAAI,CAAC,IAAI;YAAE,OAAO;QAClB,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC;QACpD,SAAS,CAAC,OAAO,CAAC,CAAC;IACrB,CAAC,CAAC;IAEF;;OAEG;IACH,MAAM,eAAe,GAAG,GAAG,EAAE;QAC3B,oBAAK,CAAC,KAAK,CAAC,YAAY,EAAE,8BAA8B,CAAC,CAAC;IAC5D,CAAC,CAAC;IAEF,OAAO;QACL,IAAI;QACJ,OAAO;QACP,KAAK;QACL,UAAU;QACV,eAAe;QACf,sBAAsB;QACtB,cAAc;QACd,oBAAoB;QACpB,cAAc;QACd,gBAAgB;QAChB,cAAc;QACd,SAAS;QACT,eAAe;QACf,eAAe;KAChB,CAAC;AACJ,CAAC,CAAC;AApPW,QAAA,aAAa,iBAoPxB;AAEF,kBAAe,qBAAa,CAAC",
      names: [],
      sources: ["/Users/kevin/card-show-finder/src/screens/ShowDetail/hooks/useShowDetail.ts"],
      sourcesContent: ["import { useState, useEffect } from 'react';\nimport { Alert } from 'react-native';\nimport { supabase } from '../../../supabase';\nimport { useAuth } from '../../../contexts/AuthContext';\nimport { handleSupabaseError } from '../../../services/errorService';\n\n// Define types for better type safety\ntype UserRole = 'SHOW_ORGANIZER' | 'MVP_DEALER' | 'DEALER' | 'USER';\n\ninterface Dealer {\n  id: string;\n  name: string;\n  profileImageUrl?: string;\n  role: UserRole;\n  accountType?: string;\n}\n\ninterface ShowDetails {\n  id: string;\n  title: string;\n  description?: string;\n  location?: string;\n  address?: string;\n  start_date?: string;\n  end_date?: string;\n  start_time?: string;\n  end_time?: string;\n  entry_fee?: number | string;\n  organizer_id?: string;\n  claimed_by?: string;\n  profiles?: {\n    id?: string;\n    first_name?: string;\n    last_name?: string;\n    profile_image_url?: string;\n    username?: string;\n    full_name?: string;\n    avatar_url?: string;\n  };\n  [key: string]: any; // For additional properties\n}\n\ninterface UseShowDetailResult {\n  show: ShowDetails | null;\n  loading: boolean;\n  error: string | null;\n  isFavorite: boolean;\n  isShowOrganizer: boolean;\n  isCurrentUserOrganizer: boolean;\n  isClaimingShow: boolean;\n  participatingDealers: Dealer[];\n  loadingDealers: boolean;\n  fetchShowDetails: () => Promise<void>;\n  toggleFavorite: () => Promise<void>;\n  shareShow: () => Promise<void>;\n  openMapLocation: () => void;\n  handleClaimShow: () => void;\n}\n\n/**\n * Custom hook to handle show detail data fetching and state management\n * @param showId The ID of the show to fetch\n * @param onShare Function to handle sharing the show\n * @param onOpenMap Function to handle opening the map\n */\nexport const useShowDetail = (\n  showId: string,\n  onShare: (show: ShowDetails) => Promise<void>,\n  onOpenMap: (address: string) => void\n): UseShowDetailResult => {\n  const [show, setShow] = useState<ShowDetails | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [isFavorite, setIsFavorite] = useState(false);\n  const [isClaimingShow, setIsClaimingShow] = useState(false);\n  const [isShowClaimed, setIsShowClaimed] = useState(false);\n  const [participatingDealers, setParticipatingDealers] = useState<Dealer[]>([]);\n  const [loadingDealers, setLoadingDealers] = useState(false);\n  \n  // Auth context for current user\n  const authContext = useAuth();\n  const user = authContext.authState?.user || null;\n  \n  // Derived state\n  const [isShowOrganizer, setIsShowOrganizer] = useState(false);\n  const [isCurrentUserOrganizer, setIsCurrentUserOrganizer] = useState(false);\n\n  // Check if user is a show organizer\n  useEffect(() => {\n    if (user) {\n      const userRole = user.role as UserRole;\n      const hasOrganizerRole = userRole === 'SHOW_ORGANIZER';\n      setIsShowOrganizer(hasOrganizerRole);\n    } else {\n      setIsShowOrganizer(false);\n    }\n  }, [user]);\n\n  // Fetch show details and dealers when showId changes\n  useEffect(() => {\n    fetchShowDetails();\n    fetchParticipatingDealers();\n    checkIfFavorite();\n  }, [showId]);\n\n  /**\n   * Fetch show details from the database\n   */\n  const fetchShowDetails = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      /* ------------------------------------------------------------------\n       * Step 1: Fetch the show row on its own (no joins)\n       * ------------------------------------------------------------------ */\n      const {\n        data: showData,\n        error: showError,\n      } = await supabase.from('shows').select('*').eq('id', showId).single();\n\n      if (showError) throw showError;\n      if (!showData) throw new Error('Show not found');\n\n      /* ------------------------------------------------------------------\n       * Step 2: If the show has an organiser, fetch their profile\n       * ------------------------------------------------------------------ */\n      let organizerProfile: any = null;\n      if (showData.organizer_id) {\n        const {\n          data: profileData,\n          error: profileError,\n        } = await supabase\n          .from('profiles')\n          .select(\n            'id, first_name, last_name, profile_image_url, username, full_name, avatar_url'\n          )\n          .eq('id', showData.organizer_id)\n          .single();\n\n        if (!profileError && profileData) {\n          organizerProfile = profileData;\n        }\n      }\n\n      /* ------------------------------------------------------------------\n       * Step 3: Combine the data and update component state\n       * ------------------------------------------------------------------ */\n      const combinedData = {\n        ...showData,\n        profiles: organizerProfile,\n      };\n\n      setShow(combinedData);\n      setIsCurrentUserOrganizer(user?.id === showData.organizer_id);\n      setIsShowClaimed(!!showData.claimed_by);\n    } catch (error) {\n      console.error('Error fetching show details:', error);\n      setError('Failed to load show details');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  /**\n   * Fetch participating dealers for the show\n   */\n  const fetchParticipatingDealers = async () => {\n    setLoadingDealers(true);\n    try {\n      const { data: participants, error: participantsError } = await supabase\n        .from('show_participants')\n        .select('userid')\n        .eq('showid', showId);\n\n      if (participantsError) throw participantsError;\n      if (!participants || participants.length === 0) {\n        setParticipatingDealers([]);\n        return;\n      }\n\n      const participantUserIds = [...new Set(participants.map((p) => p.userid))];\n      const { data: dealerProfiles, error: profilesError } = await supabase\n        .from('profiles')\n        .select('id, first_name, last_name, profile_image_url, role, account_type')\n        .in('id', participantUserIds)\n        // Roles are stored lowercase in DB, so query accordingly\n        .or('role.eq.mvp_dealer,role.eq.dealer');\n\n      if (profilesError) throw profilesError;\n\n      const dealers = (dealerProfiles || []).map((profile) => ({\n        id: profile.id,\n        name: `${profile.first_name ?? ''} ${profile.last_name ?? ''}`.trim() || profile.id.substring(0, 8),\n        profileImageUrl: profile.profile_image_url,\n        // Normalise role to uppercase so downstream comparisons\n        // (`dealer.role === 'MVP_DEALER'`, etc.) work reliably.\n        role: ((profile.role ?? '') as string).toUpperCase() as UserRole,\n        accountType: profile.account_type,\n      }));\n      setParticipatingDealers(dealers);\n    } catch (error) {\n      console.error('Error in fetchParticipatingDealers:', error);\n      // Don't set error state here to avoid disrupting the main UI if dealers can't load\n    } finally {\n      setLoadingDealers(false);\n    }\n  };\n\n  /**\n   * Check if the current show is marked as a favorite by the user\n   */\n  const checkIfFavorite = async () => {\n    try {\n      const { data: { session } } = await supabase.auth.getSession();\n      if (!session?.user?.id) {\n        setIsFavorite(false);\n        return;\n      }\n      const { data, error } = await supabase\n        .from('user_favorite_shows')\n        .select()\n        .eq('user_id', session.user.id)\n        .eq('show_id', showId)\n        .single();\n      setIsFavorite(!error && !!data);\n    } catch (error) {\n      console.error('Error checking favorite status:', error);\n    }\n  };\n\n  /**\n   * Toggle the favorite status of the show\n   */\n  const toggleFavorite = async () => {\n    try {\n      const { data: { session }, error: sessionError } = await supabase.auth.getSession();\n      if (sessionError || !session?.user) {\n        Alert.alert('Sign In Required', 'Please sign in to save favorites');\n        return;\n      }\n      const userId = session.user.id;\n\n      if (isFavorite) {\n        const { error } = await supabase\n          .from('user_favorite_shows')\n          .delete()\n          .eq('user_id', userId)\n          .eq('show_id', showId);\n        if (error) throw error;\n        setIsFavorite(false);\n      } else {\n        const { error } = await supabase\n          .from('user_favorite_shows')\n          .insert([{ user_id: userId, show_id: showId }]);\n        if (error) throw error;\n        setIsFavorite(true);\n      }\n    } catch (error) {\n      const appError = handleSupabaseError(error);\n      console.error('\uD83D\uDEA8 UNEXPECTED ERROR in toggleFavorite:', appError);\n      Alert.alert('Error', 'An unexpected error occurred while updating favorites.');\n    }\n  };\n\n  /**\n   * Share the show details\n   */\n  const shareShow = async () => {\n    if (!show) return;\n    try {\n      await onShare(show);\n    } catch (error) {\n      console.error('Error sharing:', error);\n    }\n  };\n\n  /**\n   * Open the show location in a map app\n   */\n  const openMapLocation = () => {\n    if (!show) return;\n    const address = show.address || show.location || '';\n    onOpenMap(address);\n  };\n\n  /**\n   * Handle claiming a show (placeholder)\n   */\n  const handleClaimShow = () => {\n    Alert.alert(\"Claim Show\", \"This feature is coming soon!\");\n  };\n\n  return {\n    show,\n    loading,\n    error,\n    isFavorite,\n    isShowOrganizer,\n    isCurrentUserOrganizer,\n    isClaimingShow,\n    participatingDealers,\n    loadingDealers,\n    fetchShowDetails,\n    toggleFavorite,\n    shareShow,\n    openMapLocation,\n    handleClaimShow\n  };\n};\n\nexport default useShowDetail;\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3169676c9c5f2f7aff814b478d4a737bfdf1760d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2le0mjav29 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2le0mjav29();
cov_2le0mjav29().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2le0mjav29().s[1]++;
exports.useShowDetail = void 0;
const react_1 =
/* istanbul ignore next */
(cov_2le0mjav29().s[2]++, require("react"));
const react_native_1 =
/* istanbul ignore next */
(cov_2le0mjav29().s[3]++, require("react-native"));
const supabase_1 =
/* istanbul ignore next */
(cov_2le0mjav29().s[4]++, require("../../../supabase"));
const AuthContext_1 =
/* istanbul ignore next */
(cov_2le0mjav29().s[5]++, require("../../../contexts/AuthContext"));
const errorService_1 =
/* istanbul ignore next */
(cov_2le0mjav29().s[6]++, require("../../../services/errorService"));
/**
 * Custom hook to handle show detail data fetching and state management
 * @param showId The ID of the show to fetch
 * @param onShare Function to handle sharing the show
 * @param onOpenMap Function to handle opening the map
 */
/* istanbul ignore next */
cov_2le0mjav29().s[7]++;
const useShowDetail = (showId, onShare, onOpenMap) => {
  /* istanbul ignore next */
  cov_2le0mjav29().f[0]++;
  const [show, setShow] =
  /* istanbul ignore next */
  (cov_2le0mjav29().s[8]++, (0, react_1.useState)(null));
  const [loading, setLoading] =
  /* istanbul ignore next */
  (cov_2le0mjav29().s[9]++, (0, react_1.useState)(true));
  const [error, setError] =
  /* istanbul ignore next */
  (cov_2le0mjav29().s[10]++, (0, react_1.useState)(null));
  const [isFavorite, setIsFavorite] =
  /* istanbul ignore next */
  (cov_2le0mjav29().s[11]++, (0, react_1.useState)(false));
  const [isClaimingShow, setIsClaimingShow] =
  /* istanbul ignore next */
  (cov_2le0mjav29().s[12]++, (0, react_1.useState)(false));
  const [isShowClaimed, setIsShowClaimed] =
  /* istanbul ignore next */
  (cov_2le0mjav29().s[13]++, (0, react_1.useState)(false));
  const [participatingDealers, setParticipatingDealers] =
  /* istanbul ignore next */
  (cov_2le0mjav29().s[14]++, (0, react_1.useState)([]));
  const [loadingDealers, setLoadingDealers] =
  /* istanbul ignore next */
  (cov_2le0mjav29().s[15]++, (0, react_1.useState)(false));
  // Auth context for current user
  const authContext =
  /* istanbul ignore next */
  (cov_2le0mjav29().s[16]++, (0, AuthContext_1.useAuth)());
  const user =
  /* istanbul ignore next */
  (cov_2le0mjav29().s[17]++,
  /* istanbul ignore next */
  (cov_2le0mjav29().b[0][0]++, authContext.authState?.user) ||
  /* istanbul ignore next */
  (cov_2le0mjav29().b[0][1]++, null));
  // Derived state
  const [isShowOrganizer, setIsShowOrganizer] =
  /* istanbul ignore next */
  (cov_2le0mjav29().s[18]++, (0, react_1.useState)(false));
  const [isCurrentUserOrganizer, setIsCurrentUserOrganizer] =
  /* istanbul ignore next */
  (cov_2le0mjav29().s[19]++, (0, react_1.useState)(false));
  // Check if user is a show organizer
  /* istanbul ignore next */
  cov_2le0mjav29().s[20]++;
  (0, react_1.useEffect)(() => {
    /* istanbul ignore next */
    cov_2le0mjav29().f[1]++;
    cov_2le0mjav29().s[21]++;
    if (user) {
      /* istanbul ignore next */
      cov_2le0mjav29().b[1][0]++;
      const userRole =
      /* istanbul ignore next */
      (cov_2le0mjav29().s[22]++, user.role);
      const hasOrganizerRole =
      /* istanbul ignore next */
      (cov_2le0mjav29().s[23]++, userRole === 'SHOW_ORGANIZER');
      /* istanbul ignore next */
      cov_2le0mjav29().s[24]++;
      setIsShowOrganizer(hasOrganizerRole);
    } else {
      /* istanbul ignore next */
      cov_2le0mjav29().b[1][1]++;
      cov_2le0mjav29().s[25]++;
      setIsShowOrganizer(false);
    }
  }, [user]);
  // Fetch show details and dealers when showId changes
  /* istanbul ignore next */
  cov_2le0mjav29().s[26]++;
  (0, react_1.useEffect)(() => {
    /* istanbul ignore next */
    cov_2le0mjav29().f[2]++;
    cov_2le0mjav29().s[27]++;
    fetchShowDetails();
    /* istanbul ignore next */
    cov_2le0mjav29().s[28]++;
    fetchParticipatingDealers();
    /* istanbul ignore next */
    cov_2le0mjav29().s[29]++;
    checkIfFavorite();
  }, [showId]);
  /**
   * Fetch show details from the database
   */
  /* istanbul ignore next */
  cov_2le0mjav29().s[30]++;
  const fetchShowDetails = async () => {
    /* istanbul ignore next */
    cov_2le0mjav29().f[3]++;
    cov_2le0mjav29().s[31]++;
    try {
      /* istanbul ignore next */
      cov_2le0mjav29().s[32]++;
      setLoading(true);
      /* istanbul ignore next */
      cov_2le0mjav29().s[33]++;
      setError(null);
      /* ------------------------------------------------------------------
       * Step 1: Fetch the show row on its own (no joins)
       * ------------------------------------------------------------------ */
      const {
        data: showData,
        error: showError
      } =
      /* istanbul ignore next */
      (cov_2le0mjav29().s[34]++, await supabase_1.supabase.from('shows').select('*').eq('id', showId).single());
      /* istanbul ignore next */
      cov_2le0mjav29().s[35]++;
      if (showError) {
        /* istanbul ignore next */
        cov_2le0mjav29().b[2][0]++;
        cov_2le0mjav29().s[36]++;
        throw showError;
      } else
      /* istanbul ignore next */
      {
        cov_2le0mjav29().b[2][1]++;
      }
      cov_2le0mjav29().s[37]++;
      if (!showData) {
        /* istanbul ignore next */
        cov_2le0mjav29().b[3][0]++;
        cov_2le0mjav29().s[38]++;
        throw new Error('Show not found');
      } else
      /* istanbul ignore next */
      {
        cov_2le0mjav29().b[3][1]++;
      }
      /* ------------------------------------------------------------------
       * Step 2: If the show has an organiser, fetch their profile
       * ------------------------------------------------------------------ */
      let organizerProfile =
      /* istanbul ignore next */
      (cov_2le0mjav29().s[39]++, null);
      /* istanbul ignore next */
      cov_2le0mjav29().s[40]++;
      if (showData.organizer_id) {
        /* istanbul ignore next */
        cov_2le0mjav29().b[4][0]++;
        const {
          data: profileData,
          error: profileError
        } =
        /* istanbul ignore next */
        (cov_2le0mjav29().s[41]++, await supabase_1.supabase.from('profiles').select('id, first_name, last_name, profile_image_url, username, full_name, avatar_url').eq('id', showData.organizer_id).single());
        /* istanbul ignore next */
        cov_2le0mjav29().s[42]++;
        if (
        /* istanbul ignore next */
        (cov_2le0mjav29().b[6][0]++, !profileError) &&
        /* istanbul ignore next */
        (cov_2le0mjav29().b[6][1]++, profileData)) {
          /* istanbul ignore next */
          cov_2le0mjav29().b[5][0]++;
          cov_2le0mjav29().s[43]++;
          organizerProfile = profileData;
        } else
        /* istanbul ignore next */
        {
          cov_2le0mjav29().b[5][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_2le0mjav29().b[4][1]++;
      }
      /* ------------------------------------------------------------------
       * Step 3: Combine the data and update component state
       * ------------------------------------------------------------------ */
      const combinedData =
      /* istanbul ignore next */
      (cov_2le0mjav29().s[44]++, {
        ...showData,
        profiles: organizerProfile
      });
      /* istanbul ignore next */
      cov_2le0mjav29().s[45]++;
      setShow(combinedData);
      /* istanbul ignore next */
      cov_2le0mjav29().s[46]++;
      setIsCurrentUserOrganizer(user?.id === showData.organizer_id);
      /* istanbul ignore next */
      cov_2le0mjav29().s[47]++;
      setIsShowClaimed(!!showData.claimed_by);
    } catch (error) {
      /* istanbul ignore next */
      cov_2le0mjav29().s[48]++;
      console.error('Error fetching show details:', error);
      /* istanbul ignore next */
      cov_2le0mjav29().s[49]++;
      setError('Failed to load show details');
    } finally {
      /* istanbul ignore next */
      cov_2le0mjav29().s[50]++;
      setLoading(false);
    }
  };
  /**
   * Fetch participating dealers for the show
   */
  /* istanbul ignore next */
  cov_2le0mjav29().s[51]++;
  const fetchParticipatingDealers = async () => {
    /* istanbul ignore next */
    cov_2le0mjav29().f[4]++;
    cov_2le0mjav29().s[52]++;
    setLoadingDealers(true);
    /* istanbul ignore next */
    cov_2le0mjav29().s[53]++;
    try {
      const {
        data: participants,
        error: participantsError
      } =
      /* istanbul ignore next */
      (cov_2le0mjav29().s[54]++, await supabase_1.supabase.from('show_participants').select('userid').eq('showid', showId));
      /* istanbul ignore next */
      cov_2le0mjav29().s[55]++;
      if (participantsError) {
        /* istanbul ignore next */
        cov_2le0mjav29().b[7][0]++;
        cov_2le0mjav29().s[56]++;
        throw participantsError;
      } else
      /* istanbul ignore next */
      {
        cov_2le0mjav29().b[7][1]++;
      }
      cov_2le0mjav29().s[57]++;
      if (
      /* istanbul ignore next */
      (cov_2le0mjav29().b[9][0]++, !participants) ||
      /* istanbul ignore next */
      (cov_2le0mjav29().b[9][1]++, participants.length === 0)) {
        /* istanbul ignore next */
        cov_2le0mjav29().b[8][0]++;
        cov_2le0mjav29().s[58]++;
        setParticipatingDealers([]);
        /* istanbul ignore next */
        cov_2le0mjav29().s[59]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2le0mjav29().b[8][1]++;
      }
      const participantUserIds =
      /* istanbul ignore next */
      (cov_2le0mjav29().s[60]++, [...new Set(participants.map(p => {
        /* istanbul ignore next */
        cov_2le0mjav29().f[5]++;
        cov_2le0mjav29().s[61]++;
        return p.userid;
      }))]);
      const {
        data: dealerProfiles,
        error: profilesError
      } =
      /* istanbul ignore next */
      (cov_2le0mjav29().s[62]++, await supabase_1.supabase.from('profiles').select('id, first_name, last_name, profile_image_url, role, account_type').in('id', participantUserIds)
      // Roles are stored lowercase in DB, so query accordingly
      .or('role.eq.mvp_dealer,role.eq.dealer'));
      /* istanbul ignore next */
      cov_2le0mjav29().s[63]++;
      if (profilesError) {
        /* istanbul ignore next */
        cov_2le0mjav29().b[10][0]++;
        cov_2le0mjav29().s[64]++;
        throw profilesError;
      } else
      /* istanbul ignore next */
      {
        cov_2le0mjav29().b[10][1]++;
      }
      const dealers =
      /* istanbul ignore next */
      (cov_2le0mjav29().s[65]++, (
      /* istanbul ignore next */
      (cov_2le0mjav29().b[11][0]++, dealerProfiles) ||
      /* istanbul ignore next */
      (cov_2le0mjav29().b[11][1]++, [])).map(profile => {
        /* istanbul ignore next */
        cov_2le0mjav29().f[6]++;
        cov_2le0mjav29().s[66]++;
        return {
          id: profile.id,
          name:
          /* istanbul ignore next */
          (cov_2le0mjav29().b[12][0]++, `${
          /* istanbul ignore next */
          (cov_2le0mjav29().b[13][0]++, profile.first_name) ??
          /* istanbul ignore next */
          (cov_2le0mjav29().b[13][1]++, '')} ${
          /* istanbul ignore next */
          (cov_2le0mjav29().b[14][0]++, profile.last_name) ??
          /* istanbul ignore next */
          (cov_2le0mjav29().b[14][1]++, '')}`.trim()) ||
          /* istanbul ignore next */
          (cov_2le0mjav29().b[12][1]++, profile.id.substring(0, 8)),
          profileImageUrl: profile.profile_image_url,
          // Normalise role to uppercase so downstream comparisons
          // (`dealer.role === 'MVP_DEALER'`, etc.) work reliably.
          role: (
          /* istanbul ignore next */
          (cov_2le0mjav29().b[15][0]++, profile.role) ??
          /* istanbul ignore next */
          (cov_2le0mjav29().b[15][1]++, '')).toUpperCase(),
          accountType: profile.account_type
        };
      }));
      /* istanbul ignore next */
      cov_2le0mjav29().s[67]++;
      setParticipatingDealers(dealers);
    } catch (error) {
      /* istanbul ignore next */
      cov_2le0mjav29().s[68]++;
      console.error('Error in fetchParticipatingDealers:', error);
      // Don't set error state here to avoid disrupting the main UI if dealers can't load
    } finally {
      /* istanbul ignore next */
      cov_2le0mjav29().s[69]++;
      setLoadingDealers(false);
    }
  };
  /**
   * Check if the current show is marked as a favorite by the user
   */
  /* istanbul ignore next */
  cov_2le0mjav29().s[70]++;
  const checkIfFavorite = async () => {
    /* istanbul ignore next */
    cov_2le0mjav29().f[7]++;
    cov_2le0mjav29().s[71]++;
    try {
      const {
        data: {
          session
        }
      } =
      /* istanbul ignore next */
      (cov_2le0mjav29().s[72]++, await supabase_1.supabase.auth.getSession());
      /* istanbul ignore next */
      cov_2le0mjav29().s[73]++;
      if (!session?.user?.id) {
        /* istanbul ignore next */
        cov_2le0mjav29().b[16][0]++;
        cov_2le0mjav29().s[74]++;
        setIsFavorite(false);
        /* istanbul ignore next */
        cov_2le0mjav29().s[75]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2le0mjav29().b[16][1]++;
      }
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_2le0mjav29().s[76]++, await supabase_1.supabase.from('user_favorite_shows').select().eq('user_id', session.user.id).eq('show_id', showId).single());
      /* istanbul ignore next */
      cov_2le0mjav29().s[77]++;
      setIsFavorite(
      /* istanbul ignore next */
      (cov_2le0mjav29().b[17][0]++, !error) &&
      /* istanbul ignore next */
      (cov_2le0mjav29().b[17][1]++, !!data));
    } catch (error) {
      /* istanbul ignore next */
      cov_2le0mjav29().s[78]++;
      console.error('Error checking favorite status:', error);
    }
  };
  /**
   * Toggle the favorite status of the show
   */
  /* istanbul ignore next */
  cov_2le0mjav29().s[79]++;
  const toggleFavorite = async () => {
    /* istanbul ignore next */
    cov_2le0mjav29().f[8]++;
    cov_2le0mjav29().s[80]++;
    try {
      const {
        data: {
          session
        },
        error: sessionError
      } =
      /* istanbul ignore next */
      (cov_2le0mjav29().s[81]++, await supabase_1.supabase.auth.getSession());
      /* istanbul ignore next */
      cov_2le0mjav29().s[82]++;
      if (
      /* istanbul ignore next */
      (cov_2le0mjav29().b[19][0]++, sessionError) ||
      /* istanbul ignore next */
      (cov_2le0mjav29().b[19][1]++, !session?.user)) {
        /* istanbul ignore next */
        cov_2le0mjav29().b[18][0]++;
        cov_2le0mjav29().s[83]++;
        react_native_1.Alert.alert('Sign In Required', 'Please sign in to save favorites');
        /* istanbul ignore next */
        cov_2le0mjav29().s[84]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2le0mjav29().b[18][1]++;
      }
      const userId =
      /* istanbul ignore next */
      (cov_2le0mjav29().s[85]++, session.user.id);
      /* istanbul ignore next */
      cov_2le0mjav29().s[86]++;
      if (isFavorite) {
        /* istanbul ignore next */
        cov_2le0mjav29().b[20][0]++;
        const {
          error
        } =
        /* istanbul ignore next */
        (cov_2le0mjav29().s[87]++, await supabase_1.supabase.from('user_favorite_shows').delete().eq('user_id', userId).eq('show_id', showId));
        /* istanbul ignore next */
        cov_2le0mjav29().s[88]++;
        if (error) {
          /* istanbul ignore next */
          cov_2le0mjav29().b[21][0]++;
          cov_2le0mjav29().s[89]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_2le0mjav29().b[21][1]++;
        }
        cov_2le0mjav29().s[90]++;
        setIsFavorite(false);
      } else {
        /* istanbul ignore next */
        cov_2le0mjav29().b[20][1]++;
        const {
          error
        } =
        /* istanbul ignore next */
        (cov_2le0mjav29().s[91]++, await supabase_1.supabase.from('user_favorite_shows').insert([{
          user_id: userId,
          show_id: showId
        }]));
        /* istanbul ignore next */
        cov_2le0mjav29().s[92]++;
        if (error) {
          /* istanbul ignore next */
          cov_2le0mjav29().b[22][0]++;
          cov_2le0mjav29().s[93]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_2le0mjav29().b[22][1]++;
        }
        cov_2le0mjav29().s[94]++;
        setIsFavorite(true);
      }
    } catch (error) {
      const appError =
      /* istanbul ignore next */
      (cov_2le0mjav29().s[95]++, (0, errorService_1.handleSupabaseError)(error));
      /* istanbul ignore next */
      cov_2le0mjav29().s[96]++;
      console.error('🚨 UNEXPECTED ERROR in toggleFavorite:', appError);
      /* istanbul ignore next */
      cov_2le0mjav29().s[97]++;
      react_native_1.Alert.alert('Error', 'An unexpected error occurred while updating favorites.');
    }
  };
  /**
   * Share the show details
   */
  /* istanbul ignore next */
  cov_2le0mjav29().s[98]++;
  const shareShow = async () => {
    /* istanbul ignore next */
    cov_2le0mjav29().f[9]++;
    cov_2le0mjav29().s[99]++;
    if (!show) {
      /* istanbul ignore next */
      cov_2le0mjav29().b[23][0]++;
      cov_2le0mjav29().s[100]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2le0mjav29().b[23][1]++;
    }
    cov_2le0mjav29().s[101]++;
    try {
      /* istanbul ignore next */
      cov_2le0mjav29().s[102]++;
      await onShare(show);
    } catch (error) {
      /* istanbul ignore next */
      cov_2le0mjav29().s[103]++;
      console.error('Error sharing:', error);
    }
  };
  /**
   * Open the show location in a map app
   */
  /* istanbul ignore next */
  cov_2le0mjav29().s[104]++;
  const openMapLocation = () => {
    /* istanbul ignore next */
    cov_2le0mjav29().f[10]++;
    cov_2le0mjav29().s[105]++;
    if (!show) {
      /* istanbul ignore next */
      cov_2le0mjav29().b[24][0]++;
      cov_2le0mjav29().s[106]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2le0mjav29().b[24][1]++;
    }
    const address =
    /* istanbul ignore next */
    (cov_2le0mjav29().s[107]++,
    /* istanbul ignore next */
    (cov_2le0mjav29().b[25][0]++, show.address) ||
    /* istanbul ignore next */
    (cov_2le0mjav29().b[25][1]++, show.location) ||
    /* istanbul ignore next */
    (cov_2le0mjav29().b[25][2]++, ''));
    /* istanbul ignore next */
    cov_2le0mjav29().s[108]++;
    onOpenMap(address);
  };
  /**
   * Handle claiming a show (placeholder)
   */
  /* istanbul ignore next */
  cov_2le0mjav29().s[109]++;
  const handleClaimShow = () => {
    /* istanbul ignore next */
    cov_2le0mjav29().f[11]++;
    cov_2le0mjav29().s[110]++;
    react_native_1.Alert.alert("Claim Show", "This feature is coming soon!");
  };
  /* istanbul ignore next */
  cov_2le0mjav29().s[111]++;
  return {
    show,
    loading,
    error,
    isFavorite,
    isShowOrganizer,
    isCurrentUserOrganizer,
    isClaimingShow,
    participatingDealers,
    loadingDealers,
    fetchShowDetails,
    toggleFavorite,
    shareShow,
    openMapLocation,
    handleClaimShow
  };
};
/* istanbul ignore next */
cov_2le0mjav29().s[112]++;
exports.useShowDetail = useShowDetail;
/* istanbul ignore next */
cov_2le0mjav29().s[113]++;
exports.default = exports.useShowDetail;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,