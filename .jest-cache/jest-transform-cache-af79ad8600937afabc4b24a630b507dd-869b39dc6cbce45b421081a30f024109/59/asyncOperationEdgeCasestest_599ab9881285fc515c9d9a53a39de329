09d1528ab732e0c30c0f32d24e1afdb4
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    setItem: jest.fn(),
    getItem: jest.fn(),
    removeItem: jest.fn(),
    getAllKeys: jest.fn(),
    multiGet: jest.fn(),
    multiSet: jest.fn(),
    multiRemove: jest.fn(),
    clear: jest.fn()
  };
});
_getJestObj().mock('@react-native-community/netinfo', function () {
  return {
    addEventListener: jest.fn(),
    fetch: jest.fn()
  };
});
_getJestObj().mock('react-native', function () {
  var rn = jest.requireActual('react-native');
  return Object.assign({}, rn, {
    AppState: Object.assign({}, rn.AppState, {
      addEventListener: jest.fn(),
      currentState: 'active'
    }),
    NativeModules: Object.assign({}, rn.NativeModules, {
      RNCNetInfo: {
        getCurrentState: jest.fn(),
        addListener: jest.fn(),
        removeListeners: jest.fn()
      },
      RNCAsyncStorage: {
        multiGet: jest.fn(),
        multiSet: jest.fn(),
        multiRemove: jest.fn(),
        clear: jest.fn()
      }
    }),
    NativeEventEmitter: jest.fn(function () {
      return {
        addListener: jest.fn(),
        removeAllListeners: jest.fn()
      };
    })
  });
});
_getJestObj().mock('../../src/supabase', function () {
  return {
    supabase: {
      from: jest.fn().mockReturnThis(),
      select: jest.fn().mockReturnThis(),
      insert: jest.fn().mockReturnThis(),
      update: jest.fn().mockReturnThis(),
      delete: jest.fn().mockReturnThis(),
      eq: jest.fn().mockReturnThis(),
      in: jest.fn().mockReturnThis(),
      single: jest.fn(),
      auth: {
        getSession: jest.fn(),
        signIn: jest.fn(),
        signOut: jest.fn(),
        onAuthStateChange: jest.fn()
      },
      storage: {
        from: jest.fn().mockReturnThis(),
        upload: jest.fn(),
        download: jest.fn(),
        getPublicUrl: jest.fn(),
        list: jest.fn(),
        remove: jest.fn()
      }
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _reactNative = require("react-native");
var _netinfo = _interopRequireDefault(require("@react-native-community/netinfo"));
var _mockdate = _interopRequireDefault(require("mockdate"));
var _errorService = require("../../src/services/errorService");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
global.fetch = jest.fn();
describe('Edge Cases and Async Operations', function () {
  var consoleErrorSpy;
  var consoleWarnSpy;
  var setTimeoutSpy;
  var clearTimeoutSpy;
  beforeEach(function () {
    jest.clearAllMocks();
    jest.useFakeTimers();
    consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation(function () {});
    consoleWarnSpy = jest.spyOn(console, 'warn').mockImplementation(function () {});
    setTimeoutSpy = jest.spyOn(global, 'setTimeout');
    clearTimeoutSpy = jest.spyOn(global, 'clearTimeout');
    _asyncStorage.default.getItem.mockResolvedValue(null);
    _asyncStorage.default.setItem.mockResolvedValue(undefined);
    _netinfo.default.fetch.mockResolvedValue({
      isConnected: true,
      isInternetReachable: true,
      type: 'wifi'
    });
    _reactNative.AppState.addEventListener.mockImplementation(function (_, callback) {
      return {
        remove: jest.fn()
      };
    });
    global.fetch.mockResolvedValue({
      ok: true,
      json: jest.fn().mockResolvedValue({})
    });
    _mockdate.default.reset();
  });
  afterEach(function () {
    jest.clearAllTimers();
    jest.useRealTimers();
    consoleErrorSpy.mockRestore();
    consoleWarnSpy.mockRestore();
    setTimeoutSpy.mockRestore();
    clearTimeoutSpy.mockRestore();
  });
  describe('Race Conditions', function () {
    test('should handle multiple concurrent AsyncStorage operations on the same key', (0, _asyncToGenerator2.default)(function* () {
      var key = 'user_preferences';
      var initialData = JSON.stringify({
        theme: 'light',
        notifications: true
      });
      var newData1 = JSON.stringify({
        theme: 'dark',
        notifications: true
      });
      var newData2 = JSON.stringify({
        theme: 'light',
        notifications: false
      });
      var storedValue = initialData;
      _asyncStorage.default.getItem.mockImplementation((0, _asyncToGenerator2.default)(function* () {
        yield new Promise(function (resolve) {
          return setTimeout(resolve, Math.random() * 10);
        });
        return storedValue;
      }));
      _asyncStorage.default.setItem.mockImplementation(function () {
        var _ref3 = (0, _asyncToGenerator2.default)(function* (k, value) {
          yield new Promise(function (resolve) {
            return setTimeout(resolve, Math.random() * 10);
          });
          if (k === key) {
            storedValue = value;
          }
          return undefined;
        });
        return function (_x, _x2) {
          return _ref3.apply(this, arguments);
        };
      }());
      var update1 = function () {
        var _ref4 = (0, _asyncToGenerator2.default)(function* () {
          var data = JSON.parse((yield _asyncStorage.default.getItem(key)) || '{}');
          data.theme = 'dark';
          yield _asyncStorage.default.setItem(key, JSON.stringify(data));
          return data;
        });
        return function update1() {
          return _ref4.apply(this, arguments);
        };
      }();
      var update2 = function () {
        var _ref5 = (0, _asyncToGenerator2.default)(function* () {
          var data = JSON.parse((yield _asyncStorage.default.getItem(key)) || '{}');
          data.notifications = false;
          yield _asyncStorage.default.setItem(key, JSON.stringify(data));
          return data;
        });
        return function update2() {
          return _ref5.apply(this, arguments);
        };
      }();
      var _yield$Promise$all = yield Promise.all([update1(), update2()]),
        _yield$Promise$all2 = (0, _slicedToArray2.default)(_yield$Promise$all, 2),
        result1 = _yield$Promise$all2[0],
        result2 = _yield$Promise$all2[1];
      expect(result1).not.toEqual(result2);
      var finalValue = JSON.parse(storedValue);
      expect(finalValue).toEqual(expect.objectContaining({
        theme: expect.any(String),
        notifications: expect.any(Boolean)
      }));
      expect(result1.theme).toBe('dark');
      expect(result2.notifications).toBe(false);
    }));
    test('should implement optimistic locking to prevent race conditions', (0, _asyncToGenerator2.default)(function* () {
      var key = 'counter';
      var currentVersion = 1;
      var currentValue = 0;
      _asyncStorage.default.getItem.mockImplementation((0, _asyncToGenerator2.default)(function* () {
        return JSON.stringify({
          value: currentValue,
          version: currentVersion
        });
      }));
      _asyncStorage.default.setItem.mockImplementation(function () {
        var _ref8 = (0, _asyncToGenerator2.default)(function* (k, valueStr) {
          var data = JSON.parse(valueStr);
          if (data.version === currentVersion) {
            currentValue = data.value;
            currentVersion++;
            return undefined;
          } else {
            throw new Error('Version mismatch - data was modified by another process');
          }
        });
        return function (_x3, _x4) {
          return _ref8.apply(this, arguments);
        };
      }());
      var incrementWithRetry = function () {
        var _ref9 = (0, _asyncToGenerator2.default)(function* () {
          var maxRetries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;
          var retries = 0;
          while (retries < maxRetries) {
            try {
              var dataStr = yield _asyncStorage.default.getItem(key);
              var data = JSON.parse(dataStr || '{"value":0,"version":1}');
              var newData = {
                value: data.value + 1,
                version: data.version
              };
              yield _asyncStorage.default.setItem(key, JSON.stringify(newData));
              return newData.value;
            } catch (error) {
              retries++;
              if (retries >= maxRetries) {
                throw error;
              }
              yield new Promise(function (r) {
                return setTimeout(r, 10 * Math.pow(2, retries));
              });
            }
          }
          throw new Error('Failed after max retries');
        });
        return function incrementWithRetry() {
          return _ref9.apply(this, arguments);
        };
      }();
      var results = yield Promise.allSettled([incrementWithRetry(), incrementWithRetry(), incrementWithRetry()]);
      expect(results.every(function (r) {
        return r.status === 'fulfilled';
      })).toBe(true);
      expect(currentValue).toBe(3);
      expect(currentVersion).toBe(4);
    }));
  });
  describe('Memory Management', function () {
    test('should properly cleanup event listeners when component unmounts', function () {
      var mockRemove = jest.fn();
      var mockRemoveAllListeners = jest.fn();
      _reactNative.AppState.addEventListener.mockReturnValue({
        remove: mockRemove
      });
      _netinfo.default.addEventListener.mockReturnValue({
        unsubscribe: mockRemove
      });
      var mockEventEmitter = new _reactNative.NativeEventEmitter();
      mockEventEmitter.removeAllListeners = mockRemoveAllListeners;
      var appStateListener = _reactNative.AppState.addEventListener('change', function () {});
      var netInfoListener = _netinfo.default.addEventListener(function () {});
      mockEventEmitter.addListener('someEvent', function () {});
      appStateListener.remove();
      netInfoListener.unsubscribe();
      mockEventEmitter.removeAllListeners('someEvent');
      expect(mockRemove).toHaveBeenCalledTimes(2);
      expect(mockRemoveAllListeners).toHaveBeenCalledTimes(1);
    });
    test('should cancel timers to prevent memory leaks', function () {
      var mockCallback = jest.fn();
      var timerId = setTimeout(mockCallback, 5000);
      clearTimeout(timerId);
      jest.advanceTimersByTime(10000);
      expect(mockCallback).not.toHaveBeenCalled();
      expect(clearTimeoutSpy).toHaveBeenCalledWith(timerId);
    });
    test('should handle abandoned promises that could cause memory leaks', (0, _asyncToGenerator2.default)(function* () {
      var mockAbortController = new AbortController();
      var mockSignal = mockAbortController.signal;
      global.fetch.mockImplementation(function (url, options) {
        return new Promise(function (resolve, reject) {
          var timeoutId = setTimeout(function () {
            resolve({
              ok: true,
              json: function json() {
                return Promise.resolve({
                  data: 'success'
                });
              }
            });
          }, 5000);
          if (options != null && options.signal) {
            options.signal.addEventListener('abort', function () {
              clearTimeout(timeoutId);
              reject(new DOMException('Aborted', 'AbortError'));
            });
          }
        });
      });
      var fetchPromise = fetch('https://api.example.com/data', {
        signal: mockSignal
      });
      mockAbortController.abort();
      yield expect(fetchPromise).rejects.toThrow('Aborted');
    }));
  });
  describe('Promise Chain Failures', function () {
    test('should handle errors in the middle of promise chains', (0, _asyncToGenerator2.default)(function* () {
      var processData = function () {
        var _ref10 = (0, _asyncToGenerator2.default)(function* (data) {
          var validatedData = yield Promise.resolve(data);
          var transformedData = yield Promise.reject(new Error('Transform failed'));
          var savedData = yield Promise.resolve(Object.assign({}, transformedData, {
            saved: true
          }));
          return savedData;
        });
        return function processData(_x5) {
          return _ref10.apply(this, arguments);
        };
      }();
      yield expect(processData({
        test: true
      })).rejects.toThrow('Transform failed');
    }));
    test('should handle errors in nested promise chains', (0, _asyncToGenerator2.default)(function* () {
      var innerOperation = function () {
        var _ref12 = (0, _asyncToGenerator2.default)(function* () {
          throw new Error('Inner operation failed');
        });
        return function innerOperation() {
          return _ref12.apply(this, arguments);
        };
      }();
      var middleOperation = function () {
        var _ref13 = (0, _asyncToGenerator2.default)(function* () {
          try {
            return yield innerOperation();
          } catch (error) {
            throw new Error(`Middle operation caught: ${error.message}`);
          }
        });
        return function middleOperation() {
          return _ref13.apply(this, arguments);
        };
      }();
      var outerOperation = function () {
        var _ref14 = (0, _asyncToGenerator2.default)(function* () {
          try {
            return yield middleOperation();
          } catch (error) {
            throw new Error(`Outer operation caught: ${error.message}`);
          }
        });
        return function outerOperation() {
          return _ref14.apply(this, arguments);
        };
      }();
      yield expect(outerOperation()).rejects.toThrow('Outer operation caught: Middle operation caught: Inner operation failed');
    }));
    test('should recover from promise chain failures with fallback values', (0, _asyncToGenerator2.default)(function* () {
      var fetchWithFallback = function () {
        var _ref16 = (0, _asyncToGenerator2.default)(function* (url, fallback) {
          try {
            var response = yield fetch(url);
            if (!response.ok) {
              throw new Error(`HTTP error ${response.status}`);
            }
            return yield response.json();
          } catch (error) {
            console.error('Error fetching data:', error);
            return fallback;
          }
        });
        return function fetchWithFallback(_x6, _x7) {
          return _ref16.apply(this, arguments);
        };
      }();
      global.fetch.mockRejectedValue(new Error('Network error'));
      var result = yield fetchWithFallback('https://api.example.com/data', {
        fallback: true
      });
      expect(result).toEqual({
        fallback: true
      });
      expect(consoleErrorSpy).toHaveBeenCalled();
    }));
  });
  describe('Timeout Handling', function () {
    test('should handle promise timeout with race pattern', (0, _asyncToGenerator2.default)(function* () {
      var timeoutPromise = function timeoutPromise(ms) {
        return new Promise(function (_, reject) {
          setTimeout(function () {
            return reject(new Error(`Operation timed out after ${ms}ms`));
          }, ms);
        });
      };
      var slowOperation = function slowOperation() {
        return new Promise(function (resolve) {
          setTimeout(function () {
            return resolve('Success');
          }, 2000);
        });
      };
      yield expect(Promise.race([slowOperation(), timeoutPromise(1000)])).rejects.toThrow('Operation timed out after 1000ms');
      jest.advanceTimersByTime(1000);
    }));
    test('should implement custom timeout for fetch operations', (0, _asyncToGenerator2.default)(function* () {
      var fetchWithTimeout = function fetchWithTimeout(url) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 5000;
        var controller = new AbortController();
        var signal = controller.signal;
        var timeoutId = setTimeout(function () {
          return controller.abort();
        }, timeout);
        return Promise.race([fetch(url, Object.assign({}, options, {
          signal: signal
        })), new Promise(function (_, reject) {
          setTimeout(function () {
            clearTimeout(timeoutId);
            reject(new Error(`Fetch timed out after ${timeout}ms`));
          }, timeout);
        })]).finally(function () {
          return clearTimeout(timeoutId);
        });
      };
      global.fetch.mockImplementation(function () {
        return new Promise(function (resolve) {
          setTimeout(resolve, 10000);
        });
      });
      yield expect(fetchWithTimeout('https://api.example.com/data', {}, 1000)).rejects.toThrow('Fetch timed out after 1000ms');
      jest.advanceTimersByTime(1000);
    }));
    test('should handle timeouts in parallel operations', (0, _asyncToGenerator2.default)(function* () {
      var operationWithTimeout = function () {
        var _ref20 = (0, _asyncToGenerator2.default)(function* (id, duration, timeout) {
          return new Promise(function (resolve, reject) {
            var timeoutId = setTimeout(function () {
              reject(new Error(`Operation ${id} timed out after ${timeout}ms`));
            }, timeout);
            setTimeout(function () {
              clearTimeout(timeoutId);
              resolve(`Operation ${id} completed in ${duration}ms`);
            }, duration);
          });
        });
        return function operationWithTimeout(_x8, _x9, _x0) {
          return _ref20.apply(this, arguments);
        };
      }();
      var results = yield Promise.allSettled([operationWithTimeout(1, 500, 1000), operationWithTimeout(2, 1500, 1000), operationWithTimeout(3, 800, 1000)]);
      jest.advanceTimersByTime(1500);
      expect(results[0].status).toBe('fulfilled');
      expect(results[1].status).toBe('rejected');
      expect(results[2].status).toBe('fulfilled');
      if (results[1].status === 'rejected') {
        expect(results[1].reason.message).toContain('Operation 2 timed out');
      }
    }));
  });
  describe('Concurrent Operations', function () {
    test('should limit concurrency of parallel operations', (0, _asyncToGenerator2.default)(function* () {
      var concurrencyLimit = 3;
      var activeOperations = 0;
      var maxConcurrentOperations = 0;
      var operation = function () {
        var _ref22 = (0, _asyncToGenerator2.default)(function* (id) {
          activeOperations++;
          maxConcurrentOperations = Math.max(maxConcurrentOperations, activeOperations);
          yield new Promise(function (resolve) {
            return setTimeout(resolve, 100);
          });
          activeOperations--;
          return `Operation ${id} completed`;
        });
        return function operation(_x1) {
          return _ref22.apply(this, arguments);
        };
      }();
      var runWithConcurrencyLimit = function () {
        var _ref23 = (0, _asyncToGenerator2.default)(function* (operations, limit) {
          var results = [];
          var executing = [];
          var _loop = function* _loop(_operation) {
            var p = Promise.resolve().then(function () {
              return _operation();
            });
            results.push(p);
            if (limit <= operations.length) {
              var e = p.then(function () {
                executing.splice(executing.indexOf(e), 1);
              });
              executing.push(e);
              if (executing.length >= limit) {
                yield Promise.race(executing);
              }
            }
          };
          for (var _operation of operations) {
            yield* _loop(_operation);
          }
          return Promise.all(results);
        });
        return function runWithConcurrencyLimit(_x10, _x11) {
          return _ref23.apply(this, arguments);
        };
      }();
      var operations = Array(10).fill(null).map(function (_, i) {
        return function () {
          return operation(i + 1);
        };
      });
      yield runWithConcurrencyLimit(operations, concurrencyLimit);
      expect(maxConcurrentOperations).toBeLessThanOrEqual(concurrencyLimit);
    }));
    test('should handle errors in concurrent operations without stopping others', (0, _asyncToGenerator2.default)(function* () {
      var operations = [function () {
        return Promise.resolve('Operation 1 success');
      }, function () {
        return Promise.reject(new Error('Operation 2 failed'));
      }, function () {
        return Promise.resolve('Operation 3 success');
      }, function () {
        return Promise.reject(new Error('Operation 4 failed'));
      }, function () {
        return Promise.resolve('Operation 5 success');
      }];
      var results = yield Promise.allSettled(operations.map(function (op) {
        return op();
      }));
      expect(results[0].status).toBe('fulfilled');
      expect(results[1].status).toBe('rejected');
      expect(results[2].status).toBe('fulfilled');
      expect(results[3].status).toBe('rejected');
      expect(results[4].status).toBe('fulfilled');
      var successResults = results.filter(function (r) {
        return r.status === 'fulfilled';
      });
      expect(successResults.length).toBe(3);
    }));
    test('should prioritize operations in concurrent queue', (0, _asyncToGenerator2.default)(function* () {
      var priorityQueue = [{
        id: 1,
        priority: 2,
        operation: function operation() {
          return Promise.resolve('Operation 1 (Medium)');
        }
      }, {
        id: 2,
        priority: 1,
        operation: function operation() {
          return Promise.resolve('Operation 2 (High)');
        }
      }, {
        id: 3,
        priority: 3,
        operation: function operation() {
          return Promise.resolve('Operation 3 (Low)');
        }
      }, {
        id: 4,
        priority: 1,
        operation: function operation() {
          return Promise.resolve('Operation 4 (High)');
        }
      }, {
        id: 5,
        priority: 2,
        operation: function operation() {
          return Promise.resolve('Operation 5 (Medium)');
        }
      }];
      priorityQueue.sort(function (a, b) {
        return a.priority - b.priority;
      });
      var executionOrder = [];
      var results = yield Promise.all(priorityQueue.map(function (item) {
        return item.operation().then(function (result) {
          executionOrder.push(item.id);
          return result;
        });
      }));
      expect(executionOrder[0]).toBe(2);
      expect(executionOrder[1]).toBe(4);
      expect(executionOrder[executionOrder.length - 1]).toBe(3);
    }));
  });
  describe('Data Structure Edge Cases', function () {
    test('should handle deeply nested objects', (0, _asyncToGenerator2.default)(function* () {
      var deeplyNested = {
        level1: {
          level2: {
            level3: {
              level4: {
                level5: {
                  value: 'Deep value'
                }
              }
            }
          }
        }
      };
      _asyncStorage.default.setItem.mockImplementation(function () {
        return Promise.resolve();
      });
      yield _asyncStorage.default.setItem('deeplyNested', JSON.stringify(deeplyNested));
      _asyncStorage.default.getItem.mockImplementation(function () {
        return Promise.resolve(JSON.stringify(deeplyNested));
      });
      var retrieved = JSON.parse((yield _asyncStorage.default.getItem('deeplyNested')) || '{}');
      expect(retrieved.level1.level2.level3.level4.level5.value).toBe('Deep value');
    }));
    test('should handle circular references', (0, _asyncToGenerator2.default)(function* () {
      var circular = {
        name: 'Circular Object',
        value: 42
      };
      circular.self = circular;
      circular.child = {
        parent: circular,
        name: 'Child Object'
      };
      expect(function () {
        return JSON.stringify(circular);
      }).toThrow();
      var serialized = JSON.stringify(circular, function (key, value) {
        if (key && typeof value === 'object' && value !== null) {
          if (Object.values(value).includes(circular)) {
            return '[Circular Reference]';
          }
        }
        return value;
      });
      expect(serialized).toContain('[Circular Reference]');
      var deserialized = JSON.parse(serialized);
      expect(deserialized.name).toBe('Circular Object');
      expect(deserialized.value).toBe(42);
      expect(deserialized.child.name).toBe('Child Object');
      expect(deserialized.child.parent).toBe('[Circular Reference]');
    }));
    test('should handle Unicode and special characters', (0, _asyncToGenerator2.default)(function* () {
      var specialCharsObject = {
        emoji: '😀🚀🌟🔥🎉',
        arabic: 'مرحبا بالعالم',
        chinese: '你好世界',
        russian: 'Привет, мир',
        japanese: 'こんにちは世界',
        korean: '안녕하세요 세계',
        thai: 'สวัสดีชาวโลก',
        specialChars: '©®™§¶†‡♠♣♥♦¿¡«»',
        escapeChars: '\n\t\r\b\f\\\'\\"'
      };
      _asyncStorage.default.setItem.mockImplementation(function () {
        return Promise.resolve();
      });
      yield _asyncStorage.default.setItem('specialChars', JSON.stringify(specialCharsObject));
      _asyncStorage.default.getItem.mockImplementation(function () {
        return Promise.resolve(JSON.stringify(specialCharsObject));
      });
      var retrieved = JSON.parse((yield _asyncStorage.default.getItem('specialChars')) || '{}');
      expect(retrieved.emoji).toBe(specialCharsObject.emoji);
      expect(retrieved.arabic).toBe(specialCharsObject.arabic);
      expect(retrieved.chinese).toBe(specialCharsObject.chinese);
      expect(retrieved.russian).toBe(specialCharsObject.russian);
      expect(retrieved.japanese).toBe(specialCharsObject.japanese);
      expect(retrieved.korean).toBe(specialCharsObject.korean);
      expect(retrieved.thai).toBe(specialCharsObject.thai);
      expect(retrieved.specialChars).toBe(specialCharsObject.specialChars);
      expect(retrieved.escapeChars).toBe(specialCharsObject.escapeChars);
    }));
    test('should handle malformed data', (0, _asyncToGenerator2.default)(function* () {
      var malformedJSON = '{"name": "Test", "value": 42, missing: quotes, unclosed: {';
      expect(function () {
        return JSON.parse(malformedJSON);
      }).toThrow(SyntaxError);
      var safeParse = function safeParse(json) {
        var fallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        try {
          return JSON.parse(json);
        } catch (error) {
          console.error('Error parsing JSON:', error);
          return fallback;
        }
      };
      var result = safeParse(malformedJSON, {
        error: true
      });
      expect(result).toEqual({
        error: true
      });
      expect(consoleErrorSpy).toHaveBeenCalled();
    }));
  });
  describe('Error Propagation', function () {
    test('should propagate errors through async chains', (0, _asyncToGenerator2.default)(function* () {
      var step1 = function () {
        var _ref31 = (0, _asyncToGenerator2.default)(function* () {
          throw new Error('Error in step 1');
        });
        return function step1() {
          return _ref31.apply(this, arguments);
        };
      }();
      var step2 = function () {
        var _ref32 = (0, _asyncToGenerator2.default)(function* () {
          yield step1();
          return 'Step 2 completed';
        });
        return function step2() {
          return _ref32.apply(this, arguments);
        };
      }();
      var step3 = function () {
        var _ref33 = (0, _asyncToGenerator2.default)(function* () {
          var result = yield step2();
          return `Step 3 completed with ${result}`;
        });
        return function step3() {
          return _ref33.apply(this, arguments);
        };
      }();
      yield expect(step3()).rejects.toThrow('Error in step 1');
    }));
    test('should transform errors through async chains', (0, _asyncToGenerator2.default)(function* () {
      var step1 = function () {
        var _ref35 = (0, _asyncToGenerator2.default)(function* () {
          throw new Error('Database connection failed');
        });
        return function step1() {
          return _ref35.apply(this, arguments);
        };
      }();
      var step2 = function () {
        var _ref36 = (0, _asyncToGenerator2.default)(function* () {
          try {
            yield step1();
            return 'Step 2 completed';
          } catch (error) {
            throw new Error(`Data retrieval error: ${error.message}`);
          }
        });
        return function step2() {
          return _ref36.apply(this, arguments);
        };
      }();
      var step3 = function () {
        var _ref37 = (0, _asyncToGenerator2.default)(function* () {
          try {
            var result = yield step2();
            return `Step 3 completed with ${result}`;
          } catch (error) {
            throw new Error(`Processing error: ${error.message}`);
          }
        });
        return function step3() {
          return _ref37.apply(this, arguments);
        };
      }();
      yield expect(step3()).rejects.toThrow('Processing error: Data retrieval error: Database connection failed');
    }));
    test('should handle errors with context information', (0, _asyncToGenerator2.default)(function* () {
      var executeOperation = function () {
        var _ref39 = (0, _asyncToGenerator2.default)(function* (context) {
          try {
            throw new Error('Operation failed');
          } catch (error) {
            var appError = (0, _errorService.handleSupabaseError)(error, {
              context: context
            });
            throw appError;
          }
        });
        return function executeOperation(_x12) {
          return _ref39.apply(this, arguments);
        };
      }();
      try {
        yield executeOperation('test-context');
        fail('Should have thrown an error');
      } catch (error) {
        expect(error.message).toBe('Operation failed');
        expect(error.context).toEqual({
          context: 'test-context'
        });
      }
    }));
    test('should aggregate errors from multiple operations', (0, _asyncToGenerator2.default)(function* () {
      var operations = [function () {
        return Promise.resolve('Operation 1 success');
      }, function () {
        return Promise.reject(new Error('Operation 2 failed'));
      }, function () {
        return Promise.resolve('Operation 3 success');
      }, function () {
        return Promise.reject(new Error('Operation 4 failed'));
      }];
      var executeAll = function () {
        var _ref41 = (0, _asyncToGenerator2.default)(function* (ops) {
          var results = yield Promise.allSettled(ops.map(function (op) {
            return op();
          }));
          var successes = results.filter(function (r) {
            return r.status === 'fulfilled';
          }).map(function (r) {
            return r.value;
          });
          var failures = results.filter(function (r) {
            return r.status === 'rejected';
          }).map(function (r) {
            return r.reason;
          });
          if (failures.length > 0) {
            var error = new Error(`${failures.length} operations failed`);
            error.failures = failures;
            error.successes = successes;
            throw error;
          }
          return successes;
        });
        return function executeAll(_x13) {
          return _ref41.apply(this, arguments);
        };
      }();
      try {
        yield executeAll(operations);
        fail('Should have thrown an error');
      } catch (error) {
        expect(error.message).toBe('2 operations failed');
        expect(error.failures.length).toBe(2);
        expect(error.failures[0].message).toBe('Operation 2 failed');
        expect(error.failures[1].message).toBe('Operation 4 failed');
        expect(error.successes.length).toBe(2);
        expect(error.successes).toEqual(['Operation 1 success', 'Operation 3 success']);
      }
    }));
  });
  describe('Performance Optimization', function () {
    test('should efficiently process large arrays with chunking', (0, _asyncToGenerator2.default)(function* () {
      var largeArray = Array(1000).fill(null).map(function (_, i) {
        return {
          id: i,
          value: `Item ${i}`
        };
      });
      var processInChunks = function () {
        var _ref43 = (0, _asyncToGenerator2.default)(function* (items, chunkSize, processor) {
          var results = [];
          for (var i = 0; i < items.length; i += chunkSize) {
            var chunk = items.slice(i, i + chunkSize);
            var chunkResults = yield processor(chunk);
            results.push.apply(results, (0, _toConsumableArray2.default)(chunkResults));
            yield new Promise(function (resolve) {
              return setTimeout(resolve, 0);
            });
          }
          return results;
        });
        return function processInChunks(_x14, _x15, _x16) {
          return _ref43.apply(this, arguments);
        };
      }();
      var processItems = jest.fn().mockImplementation(function () {
        var _ref44 = (0, _asyncToGenerator2.default)(function* (items) {
          return items.map(function (item) {
            return Object.assign({}, item, {
              processed: true
            });
          });
        });
        return function (_x17) {
          return _ref44.apply(this, arguments);
        };
      }());
      var startTime = performance.now();
      var results = yield processInChunks(largeArray, 100, processItems);
      var endTime = performance.now();
      expect(results.length).toBe(1000);
      expect(results[0].processed).toBe(true);
      expect(results[999].processed).toBe(true);
      expect(processItems).toHaveBeenCalledTimes(10);
      var duration = endTime - startTime;
      expect(duration).toBeLessThan(1000);
    }));
    test('should implement retry with exponential backoff', (0, _asyncToGenerator2.default)(function* () {
      var attempts = 0;
      var maxAttempts = 5;
      var unreliableOperation = jest.fn().mockImplementation(function () {
        attempts++;
        if (attempts < 3) {
          return Promise.reject(new Error(`Attempt ${attempts} failed`));
        }
        return Promise.resolve(`Success on attempt ${attempts}`);
      });
      var withRetry = function () {
        var _ref46 = (0, _asyncToGenerator2.default)(function* (operation, maxRetries) {
          var _lastError;
          var baseDelay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;
          var factor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2;
          var lastError = null;
          var _loop2 = function* _loop2() {
              try {
                return {
                  v: yield operation()
                };
              } catch (error) {
                lastError = error;
                console.warn(`Attempt ${attempt} failed: ${lastError.message}`);
                if (attempt < maxRetries) {
                  var delay = baseDelay * Math.pow(factor, attempt - 1);
                  yield new Promise(function (resolve) {
                    return setTimeout(resolve, delay);
                  });
                }
              }
            },
            _ret;
          for (var attempt = 1; attempt <= maxRetries; attempt++) {
            _ret = yield* _loop2();
            if (_ret) return _ret.v;
          }
          throw new Error(`All ${maxRetries} attempts failed. Last error: ${(_lastError = lastError) == null ? void 0 : _lastError.message}`);
        });
        return function withRetry(_x18, _x19) {
          return _ref46.apply(this, arguments);
        };
      }();
      var result = yield withRetry(unreliableOperation, maxAttempts);
      expect(result).toBe('Success on attempt 3');
      expect(unreliableOperation).toHaveBeenCalledTimes(3);
      expect(consoleWarnSpy).toHaveBeenCalledTimes(2);
    }));
    test('should implement conditional retry based on error type', (0, _asyncToGenerator2.default)(function* () {
      var networkError = new Error('Network error');
      networkError.code = 'NETWORK_ERROR';
      var validationError = new Error('Validation error');
      validationError.code = 'VALIDATION_ERROR';
      var callCount = 0;
      var operation = jest.fn().mockImplementation(function () {
        callCount++;
        if (callCount === 1) {
          return Promise.reject(networkError);
        } else if (callCount === 2) {
          return Promise.reject(validationError);
        }
        return Promise.resolve('Success');
      });
      var withConditionalRetry = function () {
        var _ref48 = (0, _asyncToGenerator2.default)(function* (operation, maxRetries, shouldRetry) {
          var attempts = 0;
          var lastError = null;
          while (attempts < maxRetries) {
            try {
              return yield operation();
            } catch (error) {
              lastError = error;
              attempts++;
              if (attempts >= maxRetries || !shouldRetry(lastError)) {
                throw lastError;
              }
              yield new Promise(function (resolve) {
                return setTimeout(resolve, 10);
              });
            }
          }
          throw lastError;
        });
        return function withConditionalRetry(_x20, _x21, _x22) {
          return _ref48.apply(this, arguments);
        };
      }();
      var shouldRetry = function shouldRetry(error) {
        return error.code === 'NETWORK_ERROR';
      };
      yield expect(withConditionalRetry(operation, 3, shouldRetry)).rejects.toThrow('Validation error');
      expect(operation).toHaveBeenCalledTimes(2);
    }));
    test('should handle rapid concurrent operations', (0, _asyncToGenerator2.default)(function* () {
      var concurrentOperations = 50;
      var completedOperations = 0;
      var failedOperations = 0;
      _asyncStorage.default.setItem.mockImplementation(function () {
        if (Math.random() < 0.1) {
          return Promise.reject(new Error('Random failure'));
        }
        return Promise.resolve();
      });
      var startTime = performance.now();
      var promises = Array(concurrentOperations).fill(null).map(function (_, i) {
        return _asyncStorage.default.setItem(`key-${i}`, `value-${i}`).then(function () {
          completedOperations += 1;
        }).catch(function () {
          failedOperations += 1;
        });
      });
      yield Promise.all(promises);
      expect(completedOperations + failedOperations).toBe(concurrentOperations);
      expect(completedOperations).toBeGreaterThan(0);
      expect(failedOperations).toBeGreaterThan(0);
      var duration = performance.now() - startTime;
      expect(duration).toBeLessThan(1000);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,