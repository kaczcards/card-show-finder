{"version":3,"names":["supabase_1","cov_sa5xt6wt7","s","require","userRoleService","__importStar","findDirectConversation","userA","userB","f","data","convoData","error","convoError","supabase","from","select","eq","in","b","console","conversationMatches","filter","convo","conversation_participants","length","userIds","map","p","user_id","includes","id","legacyData","legacyError","or","order","ascending","limit","conversation_id","exports","createConversation","params","userId","participantIds","isGroup","showId","createDirectConversation","createGroupConversation","Error","existingConversationId","conversationData","conversationError","insert","type","created_at","Date","toISOString","single","conversationId","participants","profiles","forEach","i","profile","find","prof","display_name","full_name","photo_url","avatar_url","participantsError","creatorId","show_id","allParticipantIds","Set","participantRecords","unread_count","startConversationFromProfile","currentUserId","profileUserId","initialMessage","recipientRole","getUserRole","IS_TEST_MODE","canUserReceiveMessage","sendMessage","getConversationParticipants","getConversations","conversationsData","conversationsError","rpc","participationsData","participationsError","conversationIds","allParticipantsData","allParticipantsError","neq","participantsByConversation","participant","push","conversations","participant_count","last_message_text","last_message_timestamp","sort","a","timeA","getTime","timeB","getMessages","senderId","recipientId","messageText","senderRole","Promise","all","canReplyToMessage","canSendDirectMessage","finalConversationId","newMessage","messageError","sender_id","message_text","read_by_user_ids","update","updateError","sendGroupMessage","participantCheck","participantCheckError","sendBroadcastMessage","message","recipientRoles","functions","invoke","body","recipient_roles","is_pre_show","isPreShow","moderateMessage","moderatorId","messageId","reason","p_message_id","p_moderator_id","p_reason","err","reportMessage","reporterId","p_reporter_id","markMessageAsRead","msgData","decrementUnreadCount","markConversationAsRead","messages","not","updatedCount","subscribeToMessages","onNewMessage","channel","on","event","schema","table","payload","new","subscribe","getTotalUnreadCount","reduce","total","item"],"sources":["/Users/kevin/card-show-finder/src/services/messagingService.ts"],"sourcesContent":["import { supabase } from '../supabase';\nimport * as userRoleService from './userRoleService';\nimport { UserRole } from './userRoleService';\n\n// TypeScript interfaces for Messages and Conversations\nexport interface Message {\n  id: string;\n  conversation_id: string;\n  sender_id: string;\n  message_text: string;\n  created_at: string;\n  read_by_user_ids: string[];\n  sender_profile?: {\n    id: string;\n    username?: string;\n    full_name?: string;\n    avatar_url?: string;\n  };\n}\n\nexport interface Conversation {\n  id: string;\n  type: 'direct' | 'group' | 'show';\n  show_id?: string;\n  participant_count: number;\n  last_message_text?: string;\n  last_message_timestamp?: string;\n  unread_count: number;\n  participants: {\n    user_id: string;\n    display_name?: string;\n    photo_url?: string;\n  }[];\n}\n\n// Broadcast message parameters\nexport interface BroadcastMessageParams {\n  senderId: string;\n  message: string;\n  recipientRoles: UserRole[];\n  showId?: string;\n  /**\n   * Optional override to explicitly mark the broadcast\n   * as pre-show (TRUE) or post-show (FALSE).  When omitted\n   * the edge-function infers this from current date vs show date.\n   */\n  isPreShow?: boolean;\n}\n\n// ---------------------------------------------------------------------------\n//  Conversation functions\n// ---------------------------------------------------------------------------\n\n/**\n * Try to find an existing one-to-one (direct) conversation between two users.\n * @param userA First user id\n * @param userB Second user id\n * @returns conversation id or null if none exists\n */\nexport const findDirectConversation = async (\n  userA: string,\n  userB: string\n): Promise<string | null> => {\n  try {\n    // Try to find in conversation_participants table (preferred approach)\n    const { data: convoData, error: convoError } = await supabase\n      .from('conversations')\n      .select(`\n        id,\n        type,\n        conversation_participants!inner(user_id)\n      `)\n      .eq('type', 'direct')\n      .in('conversation_participants.user_id', [userA, userB]);\n\n    if (convoError) {\n      console.error('[messagingService/findDirectConversation] advanced lookup error', convoError);\n      // Fall back to legacy approach\n    } else {\n      // Group results by conversation_id and count participants\n      const conversationMatches = convoData\n        .filter(convo => convo.conversation_participants.length === 2)\n        .filter(convo => {\n          // Check if both users are in this conversation\n          const userIds = convo.conversation_participants.map((p: any) => p.user_id);\n          return userIds.includes(userA) && userIds.includes(userB);\n        });\n      \n      if (conversationMatches.length > 0) {\n        return conversationMatches[0].id;\n      }\n    }\n\n    // Legacy fallback: Look in messages table\n    const { data: legacyData, error: legacyError } = await supabase\n      .from('messages')\n      .select('conversation_id')\n      .or(`and(sender_id.eq.${userA},recipient_id.eq.${userB}),and(sender_id.eq.${userB},recipient_id.eq.${userA})`)\n      .order('created_at', { ascending: false })\n      .limit(1);\n\n    if (legacyError) {\n      console.error('[messagingService/findDirectConversation] legacy error', legacyError);\n      return null;\n    }\n\n    if (legacyData && legacyData.length > 0) {\n      return legacyData[0].conversation_id;\n    }\n\n    return null;\n  } catch (error) {\n    console.error('[messagingService/findDirectConversation] exception', error);\n    return null;\n  }\n};\n\n/**\n * Create a direct conversation between two users.\n * This function creates the conversation record, adds participants,\n * but does NOT send any messages.\n * @param userA First user id\n * @param userB Second user id\n * @returns The conversation ID\n */\n\n/**\n * Generic conversation creation function that handles both direct and group conversations.\n * @param {Object} params - The conversation parameters\n * @param {string} params.userId - The ID of the user creating the conversation\n * @param {string[]} params.participantIds - Array of user IDs to include (for direct conversations, should contain one ID)\n * @param {boolean} params.isGroup - Whether this is a group conversation\n * @param {string} [params.showId] - Optional show ID for show-specific groups\n * @returns {Promise<string>} The conversation ID\n */\nexport const createConversation = async (params: { \n  userId: string;\n  participantIds: string[];\n  isGroup?: boolean;\n  showId?: string;\n}): Promise<string> => {\n  try {\n    const { userId, participantIds, isGroup = false, showId } = params;\n    \n    // Direct conversation (between two users)\n    if (!isGroup && participantIds.length === 1) {\n      return await createDirectConversation(userId, participantIds[0]);\n    }\n    \n    // Group conversation\n    if (isGroup || participantIds.length > 1) {\n      return await createGroupConversation(userId, participantIds, showId);\n    }\n    \n    throw new Error('Invalid conversation parameters');\n  } catch (error) {\n    console.error('[messagingService/createConversation] exception', error);\n    throw error;\n  }\n};\n\nexport const createDirectConversation = async (\n  userA: string,\n  userB: string\n): Promise<string> => {\n  try {\n    // First check if conversation already exists\n    const existingConversationId = await findDirectConversation(userA, userB);\n    if (existingConversationId) {\n      return existingConversationId;\n    }\n    \n    // Create a new conversation\n    const { data: conversationData, error: conversationError } = await supabase\n      .from('conversations')\n      .insert({\n        type: 'direct',\n        created_at: new Date().toISOString()\n      })\n      .select()\n      .single();\n    \n    if (conversationError || !conversationData) {\n      console.error('[messagingService/createDirectConversation] conversation error', conversationError);\n      throw new Error('Failed to create conversation');\n    }\n    \n    const conversationId = conversationData.id;\n    \n    // Add participants\n    const participants = [\n      { conversation_id: conversationId, user_id: userA },\n      { conversation_id: conversationId, user_id: userB }\n    ];\n    \n    // Fetch user profiles to get display names and photos\n    const { data: profiles } = await supabase\n      .from('profiles')\n      .select('id, full_name, avatar_url')\n      .in('id', [userA, userB]);\n      \n    if (profiles) {\n      participants.forEach((p, i) => {\n        const profile = profiles.find(prof => prof.id === p.user_id);\n        if (profile) {\n          participants[i] = {\n            ...p,\n            display_name: profile.full_name,\n            photo_url: profile.avatar_url\n          };\n        }\n      });\n    }\n    \n    const { error: participantsError } = await supabase\n      .from('conversation_participants')\n      .insert(participants);\n      \n    if (participantsError) {\n      console.error('[messagingService/createDirectConversation] participants error', participantsError);\n      // We created the conversation but failed to add participants\n      // This is a partial failure, but we still return the conversation ID\n      // A cleanup job could remove orphaned conversations\n    }\n    \n    return conversationId;\n  } catch (error) {\n    console.error('[messagingService/createDirectConversation] exception', error);\n    throw error;\n  }\n};\n\n/**\n * Creates a group conversation for broadcasting messages.\n * @param creatorId The ID of the user creating the group\n * @param participants Array of user IDs to include in the group \n * @param showId Optional Show ID if this is a show-specific group\n * @returns The conversation ID\n */\nexport const createGroupConversation = async (\n  creatorId: string,\n  participants: string[],\n  showId?: string\n): Promise<string> => {\n  try {\n    // Create a new group conversation\n    const { data: conversationData, error: conversationError } = await supabase\n      .from('conversations')\n      .insert({\n        type: showId ? 'show' : 'group',\n        show_id: showId || null,\n        created_at: new Date().toISOString()\n      })\n      .select()\n      .single();\n    \n    if (conversationError || !conversationData) {\n      console.error('[messagingService/createGroupConversation] conversation error', conversationError);\n      throw new Error('Failed to create group conversation');\n    }\n    \n    const conversationId = conversationData.id;\n    \n    // Always include the creator in the participants list\n    const allParticipantIds = [...new Set([creatorId, ...participants])];\n    \n    // Fetch user profiles for all participants\n    const { data: profiles } = await supabase\n      .from('profiles')\n      .select('id, full_name, avatar_url')\n      .in('id', allParticipantIds);\n    \n    // Create participant records\n    const participantRecords = allParticipantIds.map(userId => {\n      const profile = profiles?.find(p => p.id === userId);\n      return {\n        conversation_id: conversationId,\n        user_id: userId,\n        display_name: profile?.full_name,\n        photo_url: profile?.avatar_url,\n        // Only the creator has read all messages initially\n        unread_count: userId === creatorId ? 0 : 1\n      };\n    });\n    \n    // Insert all participants\n    const { error: participantsError } = await supabase\n      .from('conversation_participants')\n      .insert(participantRecords);\n    \n    if (participantsError) {\n      console.error('[messagingService/createGroupConversation] participants error', participantsError);\n      // Continue despite partial failure\n    }\n    \n    return conversationId;\n  } catch (error) {\n    console.error('[messagingService/createGroupConversation] exception', error);\n    throw error;\n  }\n};\n\n/**\n * Start a new conversation from a profile view.\n * Creates the conversation if needed, sends the initial message,\n * and returns the conversation ID for navigation.\n * \n * @param currentUserId The ID of the current user initiating the conversation\n * @param profileUserId The ID of the user whose profile is being viewed\n * @param initialMessage The first message to send\n * @returns Conversation ID for navigation\n */\nexport const startConversationFromProfile = async (\n  currentUserId: string,\n  profileUserId: string,\n  initialMessage: string\n): Promise<string> => {\n  try {\n    // Check if the recipient can receive messages\n    const recipientRole = await userRoleService.getUserRole(profileUserId);\n    if (!recipientRole) {\n      throw new Error('User not found');\n    }\n    \n    if (!userRoleService.IS_TEST_MODE && !userRoleService.canUserReceiveMessage(recipientRole)) {\n      throw new Error('This user cannot receive messages due to their role');\n    }\n    \n    // Create or find conversation\n    const conversationId = await createDirectConversation(currentUserId, profileUserId);\n    \n    // Send initial message\n    await sendMessage(currentUserId, profileUserId, initialMessage, conversationId);\n    \n    return conversationId;\n  } catch (error) {\n    console.error('[messagingService/startConversationFromProfile]', error);\n    throw error;\n  }\n};\n\n/**\n * Get participants (excluding optional filters) of a conversation.\n * Returned data structure mirrors Supabase `.from().select()` call so\n * callers can destructure `{ data, error }` just like a direct query.\n *\n * NOTE: We intentionally keep this lightweight – any additional profile\n * fields should be added by callers via `select()` if/when needed.\n *\n * @param conversationId The conversation to fetch participants for\n */\nexport const getConversationParticipants = async (\n  conversationId: string\n) => {\n  return supabase\n    .from('conversation_participants')\n    .select('user_id, display_name, photo_url')\n    .eq('conversation_id', conversationId);\n};\n\n/**\n * Get all conversations for the current user\n * @param userId The ID of the current user\n * @returns Array of conversations with last message and unread count\n */\nexport const getConversations = async (userId: string): Promise<Conversation[]> => {\n  try {\n    // Try to use the RPC function first (most efficient)\n    const { data: conversationsData, error: conversationsError } = await supabase\n      .rpc('get_user_conversations', { user_id: userId });\n      \n    if (!conversationsError && conversationsData) {\n      // console.log('Got conversations from RPC:', conversationsData);\n      return conversationsData;\n    }\n    \n    console.error('Error fetching conversations with RPC, falling back to query:', conversationsError);\n    \n    // Fallback to querying directly\n    const { data: participationsData, error: participationsError } = await supabase\n      .from('conversation_participants')\n      .select(`\n        conversation_id,\n        unread_count,\n        conversations!inner(\n          id, \n          type, \n          show_id, \n          last_message_text, \n          last_message_timestamp\n        )\n      `)\n      .eq('user_id', userId);\n      \n    if (participationsError) {\n      console.error('Error fetching conversations', participationsError);\n      throw new Error('Failed to fetch conversations');\n    }\n    \n    if (!participationsData || participationsData.length === 0) {\n      return [];\n    }\n    \n    // Get all conversation IDs\n    const conversationIds = participationsData.map(p => p.conversation_id);\n    \n    // Get all participants for these conversations\n    const { data: allParticipantsData, error: allParticipantsError } = await supabase\n      .from('conversation_participants')\n      .select(`\n        conversation_id,\n        user_id,\n        display_name,\n        photo_url\n      `)\n      .in('conversation_id', conversationIds)\n      .neq('user_id', userId);\n      \n    if (allParticipantsError) {\n      console.error('Error fetching participants', allParticipantsError);\n      // Continue with partial data\n    }\n    \n    // Group participants by conversation\n    const participantsByConversation: Record<string, any[]> = {};\n    \n    if (allParticipantsData) {\n      allParticipantsData.forEach(participant => {\n        if (!participantsByConversation[participant.conversation_id]) {\n          participantsByConversation[participant.conversation_id] = [];\n        }\n        participantsByConversation[participant.conversation_id].push({\n          user_id: participant.user_id,\n          display_name: participant.display_name,\n          photo_url: participant.photo_url\n        });\n      });\n    }\n    \n    // Build conversations data structure\n    const conversations: Conversation[] = participationsData.map(p => {\n      const convo = p.conversations;\n      return {\n        id: convo.id,\n        type: convo.type,\n        show_id: convo.show_id,\n        participant_count: (participantsByConversation[convo.id]?.length || 0) + 1, // +1 for self\n        last_message_text: convo.last_message_text,\n        last_message_timestamp: convo.last_message_timestamp,\n        unread_count: p.unread_count || 0,\n        participants: participantsByConversation[convo.id] || []\n      };\n    });\n    \n    // Sort by most recent message\n    return conversations.sort((a, b) => {\n      const timeA = a.last_message_timestamp ? new Date(a.last_message_timestamp).getTime() : 0;\n      const timeB = b.last_message_timestamp ? new Date(b.last_message_timestamp).getTime() : 0;\n      return timeB - timeA;\n    });\n  } catch (error) {\n    console.error('Error in getConversations:', error);\n    throw error;\n  }\n};\n\n// ---------------------------------------------------------------------------\n//  Message functions\n// ---------------------------------------------------------------------------\n\n/**\n * Get messages for a specific conversation\n * @param conversationId The ID of the conversation\n * @returns Array of messages in the conversation\n */\nexport const getMessages = async (conversationId: string): Promise<Message[]> => {\n  try {\n    // Get messages with joined profiles\n    const { data, error } = await supabase\n      .from('messages')\n      .select(`\n        id,\n        conversation_id,\n        sender_id,\n        message_text,\n        created_at,\n        read_by_user_ids,\n        profiles!sender_profile:sender_id(\n          id,\n          username,\n          full_name,\n          avatar_url\n        )\n      `)\n      .eq('conversation_id', conversationId)\n      .order('created_at', { ascending: true });\n      \n    if (error) {\n      console.error('Error fetching messages:', error);\n      throw new Error('Failed to fetch messages');\n    }\n    \n    return data || [];\n  } catch (error) {\n    console.error('Error in getMessages:', error);\n    throw error;\n  }\n};\n\n/**\n * Send a new message in a conversation\n * @param senderId The ID of the sender\n * @param recipientId The ID of the recipient (for direct messages)\n * @param messageText The message content\n * @param conversationId The existing conversation ID (optional)\n * @returns The newly created message\n */\nexport const sendMessage = async (\n  senderId: string,\n  recipientId: string,\n  messageText: string,\n  conversationId?: string\n): Promise<Message> => {\n  try {\n    /* ------------------------------------------------------------------\n     * Role-based permission checks\n     * ------------------------------------------------------------------ */\n    if (!userRoleService.IS_TEST_MODE) {\n      const [senderRole, recipientRole] = await Promise.all([\n        userRoleService.getUserRole(senderId),\n        userRoleService.getUserRole(recipientId),\n      ]);\n\n      if (!senderRole || !recipientRole) {\n        throw new Error('Unable to determine user roles');\n      }\n\n      // If conversation already exists the sender might just be replying\n      // – apply `canReply` check in that case.\n      if (conversationId) {\n        if (!userRoleService.canReplyToMessage(senderRole)) {\n          throw new Error('Your role does not allow replying to messages');\n        }\n      } else {\n        // New DM – validate sender→recipient rule\n        if (\n          !userRoleService.canSendDirectMessage(\n            senderRole,\n            recipientRole,\n          )\n        ) {\n          throw new Error('You are not allowed to start a conversation with this user');\n        }\n      }\n    }\n\n    // Ensure we have a conversation ID\n    const finalConversationId = conversationId || await createDirectConversation(senderId, recipientId);\n    \n    // Insert the message\n    const { data: newMessage, error: messageError } = await supabase\n      .from('messages')\n      .insert({\n        conversation_id: finalConversationId,\n        sender_id: senderId,\n        message_text: messageText,\n        read_by_user_ids: [senderId] // Sender has automatically read their own message\n      })\n      .select()\n      .single();\n      \n    if (messageError) {\n      console.error('Error sending message:', messageError);\n      throw new Error('Failed to send message');\n    }\n    \n    // The conversation last message update and participant unread count\n    // update should happen via database triggers, but we'll update manually\n    // as a fallback in case the trigger fails\n    try {\n      // Update the conversation's last message info\n      await supabase\n        .from('conversations')\n        .update({\n          last_message_text: messageText,\n          last_message_timestamp: new Date().toISOString()\n        })\n        .eq('id', finalConversationId);\n        \n      // Increment unread count for recipients\n      await supabase\n        .from('conversation_participants')\n        .update({ unread_count: supabase.rpc('increment_unread') })\n        .eq('conversation_id', finalConversationId)\n        .neq('user_id', senderId);\n    } catch (updateError) {\n      console.error('Failed to update conversation metadata:', updateError);\n      // Continue since the message was sent successfully\n    }\n    \n    return newMessage;\n  } catch (error) {\n    console.error('Error in sendMessage:', error);\n    throw error;\n  }\n};\n\n/**\n * Send a message to a group conversation\n * @param senderId The ID of the sender\n * @param conversationId The ID of the group conversation\n * @param messageText The message content\n * @returns The newly created message\n */\nexport const sendGroupMessage = async (\n  senderId: string,\n  conversationId: string,\n  messageText: string\n): Promise<Message> => {\n  try {\n    // Check if the user is part of this conversation\n    const { data: participantCheck, error: participantCheckError } = await supabase\n      .from('conversation_participants')\n      .select('user_id')\n      .eq('conversation_id', conversationId)\n      .eq('user_id', senderId)\n      .single();\n    \n    if (participantCheckError || !participantCheck) {\n      throw new Error('You are not a participant in this conversation');\n    }\n    \n    // Insert the message\n    const { data: newMessage, error: messageError } = await supabase\n      .from('messages')\n      .insert({\n        conversation_id: conversationId,\n        sender_id: senderId,\n        message_text: messageText,\n        read_by_user_ids: [senderId] // Sender has automatically read their own message\n      })\n      .select()\n      .single();\n      \n    if (messageError) {\n      console.error('Error sending group message:', messageError);\n      throw new Error('Failed to send message');\n    }\n    \n    // Update the conversation's last message info\n    await supabase\n      .from('conversations')\n      .update({\n        last_message_text: messageText,\n        last_message_timestamp: new Date().toISOString()\n      })\n      .eq('id', conversationId);\n      \n    // Increment unread count for all other participants\n    await supabase\n      .from('conversation_participants')\n      .update({ unread_count: supabase.rpc('increment_unread') })\n      .eq('conversation_id', conversationId)\n      .neq('user_id', senderId);\n    \n    return newMessage;\n  } catch (error) {\n    console.error('Error in sendGroupMessage:', error);\n    throw error;\n  }\n};\n\n/**\n * Send a broadcast message to multiple recipients based on their roles.\n * This creates a group conversation and sends the initial message.\n * \n * @param params Object containing senderId, message, recipientRoles, and optional showId\n * @returns The conversation ID of the newly created group\n */\nexport const sendBroadcastMessage = async (\n  params: BroadcastMessageParams\n): Promise<string> => {\n  const { senderId, message, recipientRoles, showId } = params;\n  \n  try {\n    // ------------------------------------------------------------------\n    // 1. Call the edge function which performs all permission / quota work\n    // ------------------------------------------------------------------\n\n    const { data, error } = await supabase.functions.invoke(\n      'send-broadcast',\n      {\n        body: {\n          sender_id: senderId,\n          message,\n          recipient_roles: recipientRoles,\n          show_id: showId,\n          is_pre_show: params.isPreShow,\n        },\n      },\n    );\n\n    if (error) {\n      console.error('[messagingService/sendBroadcastMessage] edge-function error', error);\n      throw new Error(error.message || 'Failed to send broadcast message');\n    }\n\n    if (!data?.conversation_id) {\n      throw new Error('Unexpected response from broadcast service');\n    }\n\n    return data.conversation_id as string;\n  } catch (error) {\n    console.error('Error in sendBroadcastMessage:', error);\n    throw error;\n  }\n};\n\n// ---------------------------------------------------------------------------\n//  Moderation helpers\n// ---------------------------------------------------------------------------\n\n/**\n * Soft delete / moderate a message.  Only show organisers (their shows)\n * or admins can perform this action (enforced server-side).\n */\nexport const moderateMessage = async (\n  moderatorId: string,\n  messageId: string,\n  reason = 'Content violation',\n): Promise<boolean> => {\n  try {\n    const { data, error } = await supabase.rpc(\n      'moderate_delete_message',\n      {\n        p_message_id: messageId,\n        p_moderator_id: moderatorId,\n        p_reason: reason,\n      },\n    );\n    if (error) throw error;\n    return data as boolean;\n  } catch (err) {\n    console.error('[messagingService/moderateMessage]', err);\n    return false;\n  }\n};\n\n/**\n * Report a message as inappropriate.  Anyone in the conversation can report.\n */\nexport const reportMessage = async (\n  reporterId: string,\n  messageId: string,\n  reason: string,\n): Promise<boolean> => {\n  try {\n    const { data, error } = await supabase.rpc(\n      'report_message',\n      {\n        p_message_id: messageId,\n        p_reporter_id: reporterId,\n        p_reason: reason,\n      },\n    );\n    if (error) throw error;\n    return data as boolean;\n  } catch (err) {\n    console.error('[messagingService/reportMessage]', err);\n    return false;\n  }\n};\n\n/**\n * Mark a single message as read\n * @param messageId The ID of the message\n * @param userId The ID of the current user\n * @returns Boolean indicating success\n */\nexport const markMessageAsRead = async (\n  messageId: string,\n  userId: string\n): Promise<boolean> => {\n  try {\n    // Check if the user is already in read_by_user_ids\n    const { data: message } = await supabase\n      .from('messages')\n      .select('read_by_user_ids')\n      .eq('id', messageId)\n      .single();\n      \n    if (!message) {\n      return false;\n    }\n    \n    if (message.read_by_user_ids && message.read_by_user_ids.includes(userId)) {\n      // Already marked as read\n      return true;\n    }\n    \n    // Update read_by_user_ids\n    const { error } = await supabase\n      .from('messages')\n      .update({\n        read_by_user_ids: [...(message.read_by_user_ids || []), userId]\n      })\n      .eq('id', messageId);\n      \n    if (error) {\n      console.error('Error marking message as read:', error);\n      return false;\n    }\n    \n    // Try to update unread count in conversation_participants\n    try {\n      const { data: msgData } = await supabase\n        .from('messages')\n        .select('conversation_id')\n        .eq('id', messageId)\n        .single();\n        \n      if (msgData) {\n        await decrementUnreadCount(msgData.conversation_id, userId);\n      }\n    } catch (error) {\n      console.error('Error updating unread count:', error);\n      // Continue since the message was marked as read\n    }\n    \n    return true;\n  } catch (error) {\n    console.error('Error in markMessageAsRead:', error);\n    return false;\n  }\n};\n\n/**\n * Mark all messages in a conversation as read\n * @param conversationId The ID of the conversation\n * @param userId The ID of the current user\n * @returns Number of messages marked as read\n */\nexport const markConversationAsRead = async (\n  conversationId: string,\n  userId: string\n): Promise<number> => {\n  try {\n    // First get all unread messages in the conversation\n    const { data: messages } = await supabase\n      .from('messages')\n      .select('id, read_by_user_ids')\n      .eq('conversation_id', conversationId)\n      .not('read_by_user_ids', 'cs', `{${userId}}`);\n      \n    if (!messages || messages.length === 0) {\n      return 0;\n    }\n    \n    // Update each message\n    let updatedCount = 0;\n    \n    for (const message of messages) {\n      const { error } = await supabase\n        .from('messages')\n        .update({\n          read_by_user_ids: [...(message.read_by_user_ids || []), userId]\n        })\n        .eq('id', message.id);\n        \n      if (!error) {\n        updatedCount++;\n      }\n    }\n    \n    // Reset unread count in conversation_participants\n    if (updatedCount > 0) {\n      await supabase\n        .from('conversation_participants')\n        .update({ unread_count: 0 })\n        .eq('conversation_id', conversationId)\n        .eq('user_id', userId);\n    }\n    \n    return updatedCount;\n  } catch (error) {\n    console.error('Error in markConversationAsRead:', error);\n    throw error;\n  }\n};\n\n/**\n * Helper function to decrement unread count for a user in a conversation\n */\nconst decrementUnreadCount = async (conversationId: string, userId: string): Promise<void> => {\n  try {\n    await supabase\n      .from('conversation_participants')\n      .update({ \n        unread_count: supabase.rpc('decrement_unread') \n      })\n      .eq('conversation_id', conversationId)\n      .eq('user_id', userId);\n  } catch (error) {\n    console.error('Error decrementing unread count:', error);\n  }\n};\n\n/**\n * Subscribe to realtime messages for a conversation\n * @param conversationId The conversation to monitor\n * @param onNewMessage Callback function when new messages arrive\n * @returns Supabase channel subscription that caller should unsubscribe from\n */\nexport const subscribeToMessages = (\n  conversationId: string,\n  onNewMessage: (message: Message) => void\n) => {\n  const channel = supabase\n    .channel(`messages:${conversationId}`)\n    .on('postgres_changes', {\n      event: 'INSERT',\n      schema: 'public',\n      table: 'messages',\n      filter: `conversation_id=eq.${conversationId}`\n    }, (payload) => {\n      onNewMessage(payload.new as unknown as Message);\n    })\n    .subscribe();\n    \n  return channel;\n};\n\n/**\n * Get total unread message count across all conversations\n * @param userId User ID to check for\n * @returns Total number of unread messages\n */\nexport const getTotalUnreadCount = async (userId: string): Promise<number> => {\n  try {\n    const { data, error } = await supabase\n      .from('conversation_participants')\n      .select('unread_count')\n      .eq('user_id', userId);\n      \n    if (error) {\n      console.error('Error fetching unread count:', error);\n      return 0;\n    }\n    \n    return data.reduce((total, item) => total + (item.unread_count || 0), 0);\n  } catch (error) {\n    console.error('Error in getTotalUnreadCount:', error);\n    return 0;\n  }\n};\n"],"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","ignoreList":[]}