e3e8e1e3afd092f3ab712943d5851aaf
"use strict";

/* istanbul ignore next */
function cov_sa5xt6wt7() {
  var path = "/Users/kevin/card-show-finder/src/services/messagingService.ts";
  var hash = "d7290ec129716b7208f5509aad096ef3493790ef";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kevin/card-show-finder/src/services/messagingService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 12,
          column: 3
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "2": {
        start: {
          line: 3,
          column: 26
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "3": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 52
        }
      },
      "4": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 7,
          column: 5
        }
      },
      "5": {
        start: {
          line: 6,
          column: 6
        },
        end: {
          line: 6,
          column: 68
        }
      },
      "6": {
        start: {
          line: 6,
          column: 51
        },
        end: {
          line: 6,
          column: 63
        }
      },
      "7": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 39
        }
      },
      "8": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "9": {
        start: {
          line: 10,
          column: 26
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "10": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 17
        }
      },
      "11": {
        start: {
          line: 13,
          column: 25
        },
        end: {
          line: 17,
          column: 2
        }
      },
      "12": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 72
        }
      },
      "13": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 21
        }
      },
      "14": {
        start: {
          line: 18,
          column: 19
        },
        end: {
          line: 34,
          column: 4
        }
      },
      "15": {
        start: {
          line: 19,
          column: 18
        },
        end: {
          line: 26,
          column: 5
        }
      },
      "16": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 24,
          column: 10
        }
      },
      "17": {
        start: {
          line: 21,
          column: 21
        },
        end: {
          line: 21,
          column: 23
        }
      },
      "18": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "19": {
        start: {
          line: 22,
          column: 29
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "20": {
        start: {
          line: 22,
          column: 77
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "21": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 22
        }
      },
      "22": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 26
        }
      },
      "23": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 33,
          column: 6
        }
      },
      "24": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "25": {
        start: {
          line: 28,
          column: 35
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "26": {
        start: {
          line: 29,
          column: 21
        },
        end: {
          line: 29,
          column: 23
        }
      },
      "27": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "28": {
        start: {
          line: 30,
          column: 25
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "29": {
        start: {
          line: 30,
          column: 38
        },
        end: {
          line: 30,
          column: 50
        }
      },
      "30": {
        start: {
          line: 30,
          column: 56
        },
        end: {
          line: 30,
          column: 57
        }
      },
      "31": {
        start: {
          line: 30,
          column: 78
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "32": {
        start: {
          line: 30,
          column: 102
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "33": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 40
        }
      },
      "34": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 22
        }
      },
      "35": {
        start: {
          line: 35,
          column: 0
        },
        end: {
          line: 35,
          column: 62
        }
      },
      "36": {
        start: {
          line: 36,
          column: 0
        },
        end: {
          line: 36,
          column: 515
        }
      },
      "37": {
        start: {
          line: 37,
          column: 19
        },
        end: {
          line: 37,
          column: 41
        }
      },
      "38": {
        start: {
          line: 38,
          column: 24
        },
        end: {
          line: 38,
          column: 66
        }
      },
      "39": {
        start: {
          line: 48,
          column: 31
        },
        end: {
          line: 97,
          column: 1
        }
      },
      "40": {
        start: {
          line: 49,
          column: 4
        },
        end: {
          line: 96,
          column: 5
        }
      },
      "41": {
        start: {
          line: 51,
          column: 55
        },
        end: {
          line: 59,
          column: 68
        }
      },
      "42": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 76,
          column: 9
        }
      },
      "43": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 105
        }
      },
      "44": {
        start: {
          line: 66,
          column: 40
        },
        end: {
          line: 72,
          column: 14
        }
      },
      "45": {
        start: {
          line: 67,
          column: 33
        },
        end: {
          line: 67,
          column: 77
        }
      },
      "46": {
        start: {
          line: 70,
          column: 32
        },
        end: {
          line: 70,
          column: 85
        }
      },
      "47": {
        start: {
          line: 70,
          column: 75
        },
        end: {
          line: 70,
          column: 84
        }
      },
      "48": {
        start: {
          line: 71,
          column: 16
        },
        end: {
          line: 71,
          column: 74
        }
      },
      "49": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 75,
          column: 13
        }
      },
      "50": {
        start: {
          line: 74,
          column: 16
        },
        end: {
          line: 74,
          column: 49
        }
      },
      "51": {
        start: {
          line: 78,
          column: 57
        },
        end: {
          line: 83,
          column: 21
        }
      },
      "52": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 87,
          column: 9
        }
      },
      "53": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 97
        }
      },
      "54": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 24
        }
      },
      "55": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 90,
          column: 9
        }
      },
      "56": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 49
        }
      },
      "57": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 91,
          column: 20
        }
      },
      "58": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 94,
          column: 84
        }
      },
      "59": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 95,
          column: 20
        }
      },
      "60": {
        start: {
          line: 98,
          column: 0
        },
        end: {
          line: 98,
          column: 56
        }
      },
      "61": {
        start: {
          line: 116,
          column: 27
        },
        end: {
          line: 133,
          column: 1
        }
      },
      "62": {
        start: {
          line: 117,
          column: 4
        },
        end: {
          line: 132,
          column: 5
        }
      },
      "63": {
        start: {
          line: 118,
          column: 68
        },
        end: {
          line: 118,
          column: 74
        }
      },
      "64": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 122,
          column: 9
        }
      },
      "65": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 121,
          column: 90
        }
      },
      "66": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 126,
          column: 9
        }
      },
      "67": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 94
        }
      },
      "68": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 127,
          column: 59
        }
      },
      "69": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 130,
          column: 80
        }
      },
      "70": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 131,
          column: 20
        }
      },
      "71": {
        start: {
          line: 134,
          column: 0
        },
        end: {
          line: 134,
          column: 48
        }
      },
      "72": {
        start: {
          line: 135,
          column: 33
        },
        end: {
          line: 193,
          column: 1
        }
      },
      "73": {
        start: {
          line: 136,
          column: 4
        },
        end: {
          line: 192,
          column: 5
        }
      },
      "74": {
        start: {
          line: 138,
          column: 39
        },
        end: {
          line: 138,
          column: 94
        }
      },
      "75": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 141,
          column: 9
        }
      },
      "76": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 140,
          column: 42
        }
      },
      "77": {
        start: {
          line: 143,
          column: 69
        },
        end: {
          line: 150,
          column: 21
        }
      },
      "78": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 154,
          column: 9
        }
      },
      "79": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 152,
          column: 111
        }
      },
      "80": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 153,
          column: 61
        }
      },
      "81": {
        start: {
          line: 155,
          column: 31
        },
        end: {
          line: 155,
          column: 50
        }
      },
      "82": {
        start: {
          line: 157,
          column: 29
        },
        end: {
          line: 160,
          column: 9
        }
      },
      "83": {
        start: {
          line: 162,
          column: 35
        },
        end: {
          line: 165,
          column: 37
        }
      },
      "84": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 177,
          column: 9
        }
      },
      "85": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 176,
          column: 15
        }
      },
      "86": {
        start: {
          line: 168,
          column: 32
        },
        end: {
          line: 168,
          column: 76
        }
      },
      "87": {
        start: {
          line: 168,
          column: 54
        },
        end: {
          line: 168,
          column: 75
        }
      },
      "88": {
        start: {
          line: 169,
          column: 16
        },
        end: {
          line: 175,
          column: 17
        }
      },
      "89": {
        start: {
          line: 170,
          column: 20
        },
        end: {
          line: 174,
          column: 22
        }
      },
      "90": {
        start: {
          line: 178,
          column: 45
        },
        end: {
          line: 180,
          column: 33
        }
      },
      "91": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 186,
          column: 9
        }
      },
      "92": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 182,
          column: 111
        }
      },
      "93": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 187,
          column: 30
        }
      },
      "94": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 190,
          column: 86
        }
      },
      "95": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 191,
          column: 20
        }
      },
      "96": {
        start: {
          line: 194,
          column: 0
        },
        end: {
          line: 194,
          column: 60
        }
      },
      "97": {
        start: {
          line: 202,
          column: 32
        },
        end: {
          line: 252,
          column: 1
        }
      },
      "98": {
        start: {
          line: 203,
          column: 4
        },
        end: {
          line: 251,
          column: 5
        }
      },
      "99": {
        start: {
          line: 205,
          column: 69
        },
        end: {
          line: 213,
          column: 21
        }
      },
      "100": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 217,
          column: 9
        }
      },
      "101": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 215,
          column: 110
        }
      },
      "102": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 216,
          column: 67
        }
      },
      "103": {
        start: {
          line: 218,
          column: 31
        },
        end: {
          line: 218,
          column: 50
        }
      },
      "104": {
        start: {
          line: 220,
          column: 34
        },
        end: {
          line: 220,
          column: 76
        }
      },
      "105": {
        start: {
          line: 222,
          column: 35
        },
        end: {
          line: 225,
          column: 40
        }
      },
      "106": {
        start: {
          line: 227,
          column: 35
        },
        end: {
          line: 237,
          column: 10
        }
      },
      "107": {
        start: {
          line: 228,
          column: 28
        },
        end: {
          line: 228,
          column: 64
        }
      },
      "108": {
        start: {
          line: 228,
          column: 48
        },
        end: {
          line: 228,
          column: 63
        }
      },
      "109": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 236,
          column: 14
        }
      },
      "110": {
        start: {
          line: 239,
          column: 45
        },
        end: {
          line: 241,
          column: 39
        }
      },
      "111": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 245,
          column: 9
        }
      },
      "112": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 243,
          column: 110
        }
      },
      "113": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 246,
          column: 30
        }
      },
      "114": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 249,
          column: 85
        }
      },
      "115": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 250,
          column: 20
        }
      },
      "116": {
        start: {
          line: 253,
          column: 0
        },
        end: {
          line: 253,
          column: 58
        }
      },
      "117": {
        start: {
          line: 264,
          column: 37
        },
        end: {
          line: 284,
          column: 1
        }
      },
      "118": {
        start: {
          line: 265,
          column: 4
        },
        end: {
          line: 283,
          column: 5
        }
      },
      "119": {
        start: {
          line: 267,
          column: 30
        },
        end: {
          line: 267,
          column: 78
        }
      },
      "120": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 270,
          column: 9
        }
      },
      "121": {
        start: {
          line: 269,
          column: 12
        },
        end: {
          line: 269,
          column: 46
        }
      },
      "122": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 273,
          column: 9
        }
      },
      "123": {
        start: {
          line: 272,
          column: 12
        },
        end: {
          line: 272,
          column: 83
        }
      },
      "124": {
        start: {
          line: 275,
          column: 31
        },
        end: {
          line: 275,
          column: 104
        }
      },
      "125": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 277,
          column: 101
        }
      },
      "126": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 278,
          column: 30
        }
      },
      "127": {
        start: {
          line: 281,
          column: 8
        },
        end: {
          line: 281,
          column: 80
        }
      },
      "128": {
        start: {
          line: 282,
          column: 8
        },
        end: {
          line: 282,
          column: 20
        }
      },
      "129": {
        start: {
          line: 285,
          column: 0
        },
        end: {
          line: 285,
          column: 68
        }
      },
      "130": {
        start: {
          line: 296,
          column: 36
        },
        end: {
          line: 301,
          column: 1
        }
      },
      "131": {
        start: {
          line: 297,
          column: 4
        },
        end: {
          line: 300,
          column: 47
        }
      },
      "132": {
        start: {
          line: 302,
          column: 0
        },
        end: {
          line: 302,
          column: 66
        }
      },
      "133": {
        start: {
          line: 308,
          column: 25
        },
        end: {
          line: 396,
          column: 1
        }
      },
      "134": {
        start: {
          line: 309,
          column: 4
        },
        end: {
          line: 395,
          column: 5
        }
      },
      "135": {
        start: {
          line: 311,
          column: 71
        },
        end: {
          line: 312,
          column: 63
        }
      },
      "136": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 316,
          column: 9
        }
      },
      "137": {
        start: {
          line: 315,
          column: 12
        },
        end: {
          line: 315,
          column: 37
        }
      },
      "138": {
        start: {
          line: 317,
          column: 8
        },
        end: {
          line: 317,
          column: 107
        }
      },
      "139": {
        start: {
          line: 319,
          column: 73
        },
        end: {
          line: 332,
          column: 34
        }
      },
      "140": {
        start: {
          line: 333,
          column: 8
        },
        end: {
          line: 336,
          column: 9
        }
      },
      "141": {
        start: {
          line: 334,
          column: 12
        },
        end: {
          line: 334,
          column: 79
        }
      },
      "142": {
        start: {
          line: 335,
          column: 12
        },
        end: {
          line: 335,
          column: 61
        }
      },
      "143": {
        start: {
          line: 337,
          column: 8
        },
        end: {
          line: 339,
          column: 9
        }
      },
      "144": {
        start: {
          line: 338,
          column: 12
        },
        end: {
          line: 338,
          column: 22
        }
      },
      "145": {
        start: {
          line: 341,
          column: 32
        },
        end: {
          line: 341,
          column: 78
        }
      },
      "146": {
        start: {
          line: 341,
          column: 60
        },
        end: {
          line: 341,
          column: 77
        }
      },
      "147": {
        start: {
          line: 343,
          column: 75
        },
        end: {
          line: 352,
          column: 35
        }
      },
      "148": {
        start: {
          line: 353,
          column: 8
        },
        end: {
          line: 356,
          column: 9
        }
      },
      "149": {
        start: {
          line: 354,
          column: 12
        },
        end: {
          line: 354,
          column: 79
        }
      },
      "150": {
        start: {
          line: 358,
          column: 43
        },
        end: {
          line: 358,
          column: 45
        }
      },
      "151": {
        start: {
          line: 359,
          column: 8
        },
        end: {
          line: 370,
          column: 9
        }
      },
      "152": {
        start: {
          line: 360,
          column: 12
        },
        end: {
          line: 369,
          column: 15
        }
      },
      "153": {
        start: {
          line: 361,
          column: 16
        },
        end: {
          line: 363,
          column: 17
        }
      },
      "154": {
        start: {
          line: 362,
          column: 20
        },
        end: {
          line: 362,
          column: 81
        }
      },
      "155": {
        start: {
          line: 364,
          column: 16
        },
        end: {
          line: 368,
          column: 19
        }
      },
      "156": {
        start: {
          line: 372,
          column: 30
        },
        end: {
          line: 384,
          column: 10
        }
      },
      "157": {
        start: {
          line: 373,
          column: 26
        },
        end: {
          line: 373,
          column: 41
        }
      },
      "158": {
        start: {
          line: 374,
          column: 12
        },
        end: {
          line: 383,
          column: 14
        }
      },
      "159": {
        start: {
          line: 386,
          column: 8
        },
        end: {
          line: 390,
          column: 11
        }
      },
      "160": {
        start: {
          line: 387,
          column: 26
        },
        end: {
          line: 387,
          column: 101
        }
      },
      "161": {
        start: {
          line: 388,
          column: 26
        },
        end: {
          line: 388,
          column: 101
        }
      },
      "162": {
        start: {
          line: 389,
          column: 12
        },
        end: {
          line: 389,
          column: 33
        }
      },
      "163": {
        start: {
          line: 393,
          column: 8
        },
        end: {
          line: 393,
          column: 59
        }
      },
      "164": {
        start: {
          line: 394,
          column: 8
        },
        end: {
          line: 394,
          column: 20
        }
      },
      "165": {
        start: {
          line: 397,
          column: 0
        },
        end: {
          line: 397,
          column: 44
        }
      },
      "166": {
        start: {
          line: 406,
          column: 20
        },
        end: {
          line: 437,
          column: 1
        }
      },
      "167": {
        start: {
          line: 407,
          column: 4
        },
        end: {
          line: 436,
          column: 5
        }
      },
      "168": {
        start: {
          line: 409,
          column: 32
        },
        end: {
          line: 426,
          column: 53
        }
      },
      "169": {
        start: {
          line: 427,
          column: 8
        },
        end: {
          line: 430,
          column: 9
        }
      },
      "170": {
        start: {
          line: 428,
          column: 12
        },
        end: {
          line: 428,
          column: 61
        }
      },
      "171": {
        start: {
          line: 429,
          column: 12
        },
        end: {
          line: 429,
          column: 56
        }
      },
      "172": {
        start: {
          line: 431,
          column: 8
        },
        end: {
          line: 431,
          column: 26
        }
      },
      "173": {
        start: {
          line: 434,
          column: 8
        },
        end: {
          line: 434,
          column: 54
        }
      },
      "174": {
        start: {
          line: 435,
          column: 8
        },
        end: {
          line: 435,
          column: 20
        }
      },
      "175": {
        start: {
          line: 438,
          column: 0
        },
        end: {
          line: 438,
          column: 34
        }
      },
      "176": {
        start: {
          line: 447,
          column: 20
        },
        end: {
          line: 520,
          column: 1
        }
      },
      "177": {
        start: {
          line: 448,
          column: 4
        },
        end: {
          line: 519,
          column: 5
        }
      },
      "178": {
        start: {
          line: 452,
          column: 8
        },
        end: {
          line: 473,
          column: 9
        }
      },
      "179": {
        start: {
          line: 453,
          column: 48
        },
        end: {
          line: 456,
          column: 14
        }
      },
      "180": {
        start: {
          line: 457,
          column: 12
        },
        end: {
          line: 459,
          column: 13
        }
      },
      "181": {
        start: {
          line: 458,
          column: 16
        },
        end: {
          line: 458,
          column: 66
        }
      },
      "182": {
        start: {
          line: 462,
          column: 12
        },
        end: {
          line: 472,
          column: 13
        }
      },
      "183": {
        start: {
          line: 463,
          column: 16
        },
        end: {
          line: 465,
          column: 17
        }
      },
      "184": {
        start: {
          line: 464,
          column: 20
        },
        end: {
          line: 464,
          column: 85
        }
      },
      "185": {
        start: {
          line: 469,
          column: 16
        },
        end: {
          line: 471,
          column: 17
        }
      },
      "186": {
        start: {
          line: 470,
          column: 20
        },
        end: {
          line: 470,
          column: 98
        }
      },
      "187": {
        start: {
          line: 475,
          column: 36
        },
        end: {
          line: 475,
          column: 120
        }
      },
      "188": {
        start: {
          line: 477,
          column: 58
        },
        end: {
          line: 486,
          column: 21
        }
      },
      "189": {
        start: {
          line: 487,
          column: 8
        },
        end: {
          line: 490,
          column: 9
        }
      },
      "190": {
        start: {
          line: 488,
          column: 12
        },
        end: {
          line: 488,
          column: 66
        }
      },
      "191": {
        start: {
          line: 489,
          column: 12
        },
        end: {
          line: 489,
          column: 54
        }
      },
      "192": {
        start: {
          line: 494,
          column: 8
        },
        end: {
          line: 513,
          column: 9
        }
      },
      "193": {
        start: {
          line: 496,
          column: 12
        },
        end: {
          line: 502,
          column: 47
        }
      },
      "194": {
        start: {
          line: 504,
          column: 12
        },
        end: {
          line: 508,
          column: 42
        }
      },
      "195": {
        start: {
          line: 511,
          column: 12
        },
        end: {
          line: 511,
          column: 82
        }
      },
      "196": {
        start: {
          line: 514,
          column: 8
        },
        end: {
          line: 514,
          column: 26
        }
      },
      "197": {
        start: {
          line: 517,
          column: 8
        },
        end: {
          line: 517,
          column: 54
        }
      },
      "198": {
        start: {
          line: 518,
          column: 8
        },
        end: {
          line: 518,
          column: 20
        }
      },
      "199": {
        start: {
          line: 521,
          column: 0
        },
        end: {
          line: 521,
          column: 34
        }
      },
      "200": {
        start: {
          line: 529,
          column: 25
        },
        end: {
          line: 576,
          column: 1
        }
      },
      "201": {
        start: {
          line: 530,
          column: 4
        },
        end: {
          line: 575,
          column: 5
        }
      },
      "202": {
        start: {
          line: 532,
          column: 73
        },
        end: {
          line: 537,
          column: 21
        }
      },
      "203": {
        start: {
          line: 538,
          column: 8
        },
        end: {
          line: 540,
          column: 9
        }
      },
      "204": {
        start: {
          line: 539,
          column: 12
        },
        end: {
          line: 539,
          column: 78
        }
      },
      "205": {
        start: {
          line: 542,
          column: 58
        },
        end: {
          line: 551,
          column: 21
        }
      },
      "206": {
        start: {
          line: 552,
          column: 8
        },
        end: {
          line: 555,
          column: 9
        }
      },
      "207": {
        start: {
          line: 553,
          column: 12
        },
        end: {
          line: 553,
          column: 72
        }
      },
      "208": {
        start: {
          line: 554,
          column: 12
        },
        end: {
          line: 554,
          column: 54
        }
      },
      "209": {
        start: {
          line: 557,
          column: 8
        },
        end: {
          line: 563,
          column: 38
        }
      },
      "210": {
        start: {
          line: 565,
          column: 8
        },
        end: {
          line: 569,
          column: 38
        }
      },
      "211": {
        start: {
          line: 570,
          column: 8
        },
        end: {
          line: 570,
          column: 26
        }
      },
      "212": {
        start: {
          line: 573,
          column: 8
        },
        end: {
          line: 573,
          column: 59
        }
      },
      "213": {
        start: {
          line: 574,
          column: 8
        },
        end: {
          line: 574,
          column: 20
        }
      },
      "214": {
        start: {
          line: 577,
          column: 0
        },
        end: {
          line: 577,
          column: 44
        }
      },
      "215": {
        start: {
          line: 585,
          column: 29
        },
        end: {
          line: 613,
          column: 1
        }
      },
      "216": {
        start: {
          line: 586,
          column: 58
        },
        end: {
          line: 586,
          column: 64
        }
      },
      "217": {
        start: {
          line: 587,
          column: 4
        },
        end: {
          line: 612,
          column: 5
        }
      },
      "218": {
        start: {
          line: 591,
          column: 32
        },
        end: {
          line: 599,
          column: 10
        }
      },
      "219": {
        start: {
          line: 600,
          column: 8
        },
        end: {
          line: 603,
          column: 9
        }
      },
      "220": {
        start: {
          line: 601,
          column: 12
        },
        end: {
          line: 601,
          column: 96
        }
      },
      "221": {
        start: {
          line: 602,
          column: 12
        },
        end: {
          line: 602,
          column: 81
        }
      },
      "222": {
        start: {
          line: 604,
          column: 8
        },
        end: {
          line: 606,
          column: 9
        }
      },
      "223": {
        start: {
          line: 605,
          column: 12
        },
        end: {
          line: 605,
          column: 74
        }
      },
      "224": {
        start: {
          line: 607,
          column: 8
        },
        end: {
          line: 607,
          column: 36
        }
      },
      "225": {
        start: {
          line: 610,
          column: 8
        },
        end: {
          line: 610,
          column: 63
        }
      },
      "226": {
        start: {
          line: 611,
          column: 8
        },
        end: {
          line: 611,
          column: 20
        }
      },
      "227": {
        start: {
          line: 614,
          column: 0
        },
        end: {
          line: 614,
          column: 52
        }
      },
      "228": {
        start: {
          line: 622,
          column: 24
        },
        end: {
          line: 637,
          column: 1
        }
      },
      "229": {
        start: {
          line: 623,
          column: 4
        },
        end: {
          line: 636,
          column: 5
        }
      },
      "230": {
        start: {
          line: 624,
          column: 32
        },
        end: {
          line: 628,
          column: 10
        }
      },
      "231": {
        start: {
          line: 629,
          column: 8
        },
        end: {
          line: 630,
          column: 24
        }
      },
      "232": {
        start: {
          line: 630,
          column: 12
        },
        end: {
          line: 630,
          column: 24
        }
      },
      "233": {
        start: {
          line: 631,
          column: 8
        },
        end: {
          line: 631,
          column: 20
        }
      },
      "234": {
        start: {
          line: 634,
          column: 8
        },
        end: {
          line: 634,
          column: 65
        }
      },
      "235": {
        start: {
          line: 635,
          column: 8
        },
        end: {
          line: 635,
          column: 21
        }
      },
      "236": {
        start: {
          line: 638,
          column: 0
        },
        end: {
          line: 638,
          column: 42
        }
      },
      "237": {
        start: {
          line: 642,
          column: 22
        },
        end: {
          line: 657,
          column: 1
        }
      },
      "238": {
        start: {
          line: 643,
          column: 4
        },
        end: {
          line: 656,
          column: 5
        }
      },
      "239": {
        start: {
          line: 644,
          column: 32
        },
        end: {
          line: 648,
          column: 10
        }
      },
      "240": {
        start: {
          line: 649,
          column: 8
        },
        end: {
          line: 650,
          column: 24
        }
      },
      "241": {
        start: {
          line: 650,
          column: 12
        },
        end: {
          line: 650,
          column: 24
        }
      },
      "242": {
        start: {
          line: 651,
          column: 8
        },
        end: {
          line: 651,
          column: 20
        }
      },
      "243": {
        start: {
          line: 654,
          column: 8
        },
        end: {
          line: 654,
          column: 63
        }
      },
      "244": {
        start: {
          line: 655,
          column: 8
        },
        end: {
          line: 655,
          column: 21
        }
      },
      "245": {
        start: {
          line: 658,
          column: 0
        },
        end: {
          line: 658,
          column: 38
        }
      },
      "246": {
        start: {
          line: 665,
          column: 26
        },
        end: {
          line: 712,
          column: 1
        }
      },
      "247": {
        start: {
          line: 666,
          column: 4
        },
        end: {
          line: 711,
          column: 5
        }
      },
      "248": {
        start: {
          line: 668,
          column: 34
        },
        end: {
          line: 672,
          column: 21
        }
      },
      "249": {
        start: {
          line: 673,
          column: 8
        },
        end: {
          line: 675,
          column: 9
        }
      },
      "250": {
        start: {
          line: 674,
          column: 12
        },
        end: {
          line: 674,
          column: 25
        }
      },
      "251": {
        start: {
          line: 676,
          column: 8
        },
        end: {
          line: 679,
          column: 9
        }
      },
      "252": {
        start: {
          line: 678,
          column: 12
        },
        end: {
          line: 678,
          column: 24
        }
      },
      "253": {
        start: {
          line: 681,
          column: 26
        },
        end: {
          line: 686,
          column: 32
        }
      },
      "254": {
        start: {
          line: 687,
          column: 8
        },
        end: {
          line: 690,
          column: 9
        }
      },
      "255": {
        start: {
          line: 688,
          column: 12
        },
        end: {
          line: 688,
          column: 67
        }
      },
      "256": {
        start: {
          line: 689,
          column: 12
        },
        end: {
          line: 689,
          column: 25
        }
      },
      "257": {
        start: {
          line: 692,
          column: 8
        },
        end: {
          line: 705,
          column: 9
        }
      },
      "258": {
        start: {
          line: 693,
          column: 38
        },
        end: {
          line: 697,
          column: 25
        }
      },
      "259": {
        start: {
          line: 698,
          column: 12
        },
        end: {
          line: 700,
          column: 13
        }
      },
      "260": {
        start: {
          line: 699,
          column: 16
        },
        end: {
          line: 699,
          column: 76
        }
      },
      "261": {
        start: {
          line: 703,
          column: 12
        },
        end: {
          line: 703,
          column: 65
        }
      },
      "262": {
        start: {
          line: 706,
          column: 8
        },
        end: {
          line: 706,
          column: 20
        }
      },
      "263": {
        start: {
          line: 709,
          column: 8
        },
        end: {
          line: 709,
          column: 60
        }
      },
      "264": {
        start: {
          line: 710,
          column: 8
        },
        end: {
          line: 710,
          column: 21
        }
      },
      "265": {
        start: {
          line: 713,
          column: 0
        },
        end: {
          line: 713,
          column: 46
        }
      },
      "266": {
        start: {
          line: 720,
          column: 31
        },
        end: {
          line: 758,
          column: 1
        }
      },
      "267": {
        start: {
          line: 721,
          column: 4
        },
        end: {
          line: 757,
          column: 5
        }
      },
      "268": {
        start: {
          line: 723,
          column: 35
        },
        end: {
          line: 727,
          column: 57
        }
      },
      "269": {
        start: {
          line: 728,
          column: 8
        },
        end: {
          line: 730,
          column: 9
        }
      },
      "270": {
        start: {
          line: 729,
          column: 12
        },
        end: {
          line: 729,
          column: 21
        }
      },
      "271": {
        start: {
          line: 732,
          column: 27
        },
        end: {
          line: 732,
          column: 28
        }
      },
      "272": {
        start: {
          line: 733,
          column: 8
        },
        end: {
          line: 743,
          column: 9
        }
      },
      "273": {
        start: {
          line: 734,
          column: 30
        },
        end: {
          line: 739,
          column: 37
        }
      },
      "274": {
        start: {
          line: 740,
          column: 12
        },
        end: {
          line: 742,
          column: 13
        }
      },
      "275": {
        start: {
          line: 741,
          column: 16
        },
        end: {
          line: 741,
          column: 31
        }
      },
      "276": {
        start: {
          line: 745,
          column: 8
        },
        end: {
          line: 751,
          column: 9
        }
      },
      "277": {
        start: {
          line: 746,
          column: 12
        },
        end: {
          line: 750,
          column: 39
        }
      },
      "278": {
        start: {
          line: 752,
          column: 8
        },
        end: {
          line: 752,
          column: 28
        }
      },
      "279": {
        start: {
          line: 755,
          column: 8
        },
        end: {
          line: 755,
          column: 65
        }
      },
      "280": {
        start: {
          line: 756,
          column: 8
        },
        end: {
          line: 756,
          column: 20
        }
      },
      "281": {
        start: {
          line: 759,
          column: 0
        },
        end: {
          line: 759,
          column: 56
        }
      },
      "282": {
        start: {
          line: 763,
          column: 29
        },
        end: {
          line: 776,
          column: 1
        }
      },
      "283": {
        start: {
          line: 764,
          column: 4
        },
        end: {
          line: 775,
          column: 5
        }
      },
      "284": {
        start: {
          line: 765,
          column: 8
        },
        end: {
          line: 771,
          column: 35
        }
      },
      "285": {
        start: {
          line: 774,
          column: 8
        },
        end: {
          line: 774,
          column: 65
        }
      },
      "286": {
        start: {
          line: 783,
          column: 28
        },
        end: {
          line: 796,
          column: 1
        }
      },
      "287": {
        start: {
          line: 784,
          column: 20
        },
        end: {
          line: 794,
          column: 20
        }
      },
      "288": {
        start: {
          line: 792,
          column: 8
        },
        end: {
          line: 792,
          column: 34
        }
      },
      "289": {
        start: {
          line: 795,
          column: 4
        },
        end: {
          line: 795,
          column: 19
        }
      },
      "290": {
        start: {
          line: 797,
          column: 0
        },
        end: {
          line: 797,
          column: 50
        }
      },
      "291": {
        start: {
          line: 803,
          column: 28
        },
        end: {
          line: 819,
          column: 1
        }
      },
      "292": {
        start: {
          line: 804,
          column: 4
        },
        end: {
          line: 818,
          column: 5
        }
      },
      "293": {
        start: {
          line: 805,
          column: 32
        },
        end: {
          line: 808,
          column: 34
        }
      },
      "294": {
        start: {
          line: 809,
          column: 8
        },
        end: {
          line: 812,
          column: 9
        }
      },
      "295": {
        start: {
          line: 810,
          column: 12
        },
        end: {
          line: 810,
          column: 65
        }
      },
      "296": {
        start: {
          line: 811,
          column: 12
        },
        end: {
          line: 811,
          column: 21
        }
      },
      "297": {
        start: {
          line: 813,
          column: 8
        },
        end: {
          line: 813,
          column: 81
        }
      },
      "298": {
        start: {
          line: 813,
          column: 44
        },
        end: {
          line: 813,
          column: 76
        }
      },
      "299": {
        start: {
          line: 816,
          column: 8
        },
        end: {
          line: 816,
          column: 62
        }
      },
      "300": {
        start: {
          line: 817,
          column: 8
        },
        end: {
          line: 817,
          column: 17
        }
      },
      "301": {
        start: {
          line: 820,
          column: 0
        },
        end: {
          line: 820,
          column: 50
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 2,
            column: 75
          }
        },
        loc: {
          start: {
            line: 2,
            column: 96
          },
          end: {
            line: 9,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 6,
            column: 38
          },
          end: {
            line: 6,
            column: 39
          }
        },
        loc: {
          start: {
            line: 6,
            column: 49
          },
          end: {
            line: 6,
            column: 65
          }
        },
        line: 6
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 9,
            column: 7
          }
        },
        loc: {
          start: {
            line: 9,
            column: 28
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 9
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 13,
            column: 81
          }
        },
        loc: {
          start: {
            line: 13,
            column: 95
          },
          end: {
            line: 15,
            column: 1
          }
        },
        line: 13
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 15,
            column: 6
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 15
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 18,
            column: 51
          },
          end: {
            line: 18,
            column: 52
          }
        },
        loc: {
          start: {
            line: 18,
            column: 63
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 18
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 19,
            column: 18
          },
          end: {
            line: 19,
            column: 19
          }
        },
        loc: {
          start: {
            line: 19,
            column: 30
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 19
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 20,
            column: 49
          }
        },
        loc: {
          start: {
            line: 20,
            column: 61
          },
          end: {
            line: 24,
            column: 9
          }
        },
        line: 20
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 27,
            column: 12
          }
        },
        loc: {
          start: {
            line: 27,
            column: 26
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 27
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 48,
            column: 31
          },
          end: {
            line: 48,
            column: 32
          }
        },
        loc: {
          start: {
            line: 48,
            column: 55
          },
          end: {
            line: 97,
            column: 1
          }
        },
        line: 48
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 67,
            column: 24
          },
          end: {
            line: 67,
            column: 25
          }
        },
        loc: {
          start: {
            line: 67,
            column: 33
          },
          end: {
            line: 67,
            column: 77
          }
        },
        line: 67
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 68,
            column: 24
          },
          end: {
            line: 68,
            column: 25
          }
        },
        loc: {
          start: {
            line: 68,
            column: 33
          },
          end: {
            line: 72,
            column: 13
          }
        },
        line: 68
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 70,
            column: 68
          },
          end: {
            line: 70,
            column: 69
          }
        },
        loc: {
          start: {
            line: 70,
            column: 75
          },
          end: {
            line: 70,
            column: 84
          }
        },
        line: 70
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 116,
            column: 27
          },
          end: {
            line: 116,
            column: 28
          }
        },
        loc: {
          start: {
            line: 116,
            column: 45
          },
          end: {
            line: 133,
            column: 1
          }
        },
        line: 116
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 135,
            column: 33
          },
          end: {
            line: 135,
            column: 34
          }
        },
        loc: {
          start: {
            line: 135,
            column: 57
          },
          end: {
            line: 193,
            column: 1
          }
        },
        line: 135
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 167,
            column: 33
          },
          end: {
            line: 167,
            column: 34
          }
        },
        loc: {
          start: {
            line: 167,
            column: 43
          },
          end: {
            line: 176,
            column: 13
          }
        },
        line: 167
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 168,
            column: 46
          },
          end: {
            line: 168,
            column: 47
          }
        },
        loc: {
          start: {
            line: 168,
            column: 54
          },
          end: {
            line: 168,
            column: 75
          }
        },
        line: 168
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 202,
            column: 32
          },
          end: {
            line: 202,
            column: 33
          }
        },
        loc: {
          start: {
            line: 202,
            column: 75
          },
          end: {
            line: 252,
            column: 1
          }
        },
        line: 202
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 227,
            column: 57
          },
          end: {
            line: 227,
            column: 58
          }
        },
        loc: {
          start: {
            line: 227,
            column: 67
          },
          end: {
            line: 237,
            column: 9
          }
        },
        line: 227
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 228,
            column: 43
          },
          end: {
            line: 228,
            column: 44
          }
        },
        loc: {
          start: {
            line: 228,
            column: 48
          },
          end: {
            line: 228,
            column: 63
          }
        },
        line: 228
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 264,
            column: 37
          },
          end: {
            line: 264,
            column: 38
          }
        },
        loc: {
          start: {
            line: 264,
            column: 93
          },
          end: {
            line: 284,
            column: 1
          }
        },
        line: 264
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 296,
            column: 36
          },
          end: {
            line: 296,
            column: 37
          }
        },
        loc: {
          start: {
            line: 296,
            column: 62
          },
          end: {
            line: 301,
            column: 1
          }
        },
        line: 296
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 308,
            column: 25
          },
          end: {
            line: 308,
            column: 26
          }
        },
        loc: {
          start: {
            line: 308,
            column: 43
          },
          end: {
            line: 396,
            column: 1
          }
        },
        line: 308
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 341,
            column: 55
          },
          end: {
            line: 341,
            column: 56
          }
        },
        loc: {
          start: {
            line: 341,
            column: 60
          },
          end: {
            line: 341,
            column: 77
          }
        },
        line: 341
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 360,
            column: 40
          },
          end: {
            line: 360,
            column: 41
          }
        },
        loc: {
          start: {
            line: 360,
            column: 55
          },
          end: {
            line: 369,
            column: 13
          }
        },
        line: 360
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 372,
            column: 53
          },
          end: {
            line: 372,
            column: 54
          }
        },
        loc: {
          start: {
            line: 372,
            column: 58
          },
          end: {
            line: 384,
            column: 9
          }
        },
        line: 372
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 386,
            column: 34
          },
          end: {
            line: 386,
            column: 35
          }
        },
        loc: {
          start: {
            line: 386,
            column: 44
          },
          end: {
            line: 390,
            column: 9
          }
        },
        line: 386
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 406,
            column: 20
          },
          end: {
            line: 406,
            column: 21
          }
        },
        loc: {
          start: {
            line: 406,
            column: 46
          },
          end: {
            line: 437,
            column: 1
          }
        },
        line: 406
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 447,
            column: 20
          },
          end: {
            line: 447,
            column: 21
          }
        },
        loc: {
          start: {
            line: 447,
            column: 82
          },
          end: {
            line: 520,
            column: 1
          }
        },
        line: 447
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 529,
            column: 25
          },
          end: {
            line: 529,
            column: 26
          }
        },
        loc: {
          start: {
            line: 529,
            column: 74
          },
          end: {
            line: 576,
            column: 1
          }
        },
        line: 529
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 585,
            column: 29
          },
          end: {
            line: 585,
            column: 30
          }
        },
        loc: {
          start: {
            line: 585,
            column: 47
          },
          end: {
            line: 613,
            column: 1
          }
        },
        line: 585
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 622,
            column: 24
          },
          end: {
            line: 622,
            column: 25
          }
        },
        loc: {
          start: {
            line: 622,
            column: 88
          },
          end: {
            line: 637,
            column: 1
          }
        },
        line: 622
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 642,
            column: 22
          },
          end: {
            line: 642,
            column: 23
          }
        },
        loc: {
          start: {
            line: 642,
            column: 63
          },
          end: {
            line: 657,
            column: 1
          }
        },
        line: 642
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 665,
            column: 26
          },
          end: {
            line: 665,
            column: 27
          }
        },
        loc: {
          start: {
            line: 665,
            column: 55
          },
          end: {
            line: 712,
            column: 1
          }
        },
        line: 665
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 720,
            column: 31
          },
          end: {
            line: 720,
            column: 32
          }
        },
        loc: {
          start: {
            line: 720,
            column: 65
          },
          end: {
            line: 758,
            column: 1
          }
        },
        line: 720
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 763,
            column: 29
          },
          end: {
            line: 763,
            column: 30
          }
        },
        loc: {
          start: {
            line: 763,
            column: 63
          },
          end: {
            line: 776,
            column: 1
          }
        },
        line: 763
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 783,
            column: 28
          },
          end: {
            line: 783,
            column: 29
          }
        },
        loc: {
          start: {
            line: 783,
            column: 62
          },
          end: {
            line: 796,
            column: 1
          }
        },
        line: 783
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 791,
            column: 7
          },
          end: {
            line: 791,
            column: 8
          }
        },
        loc: {
          start: {
            line: 791,
            column: 20
          },
          end: {
            line: 793,
            column: 5
          }
        },
        line: 791
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 803,
            column: 28
          },
          end: {
            line: 803,
            column: 29
          }
        },
        loc: {
          start: {
            line: 803,
            column: 46
          },
          end: {
            line: 819,
            column: 1
          }
        },
        line: 803
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 813,
            column: 27
          },
          end: {
            line: 813,
            column: 28
          }
        },
        loc: {
          start: {
            line: 813,
            column: 44
          },
          end: {
            line: 813,
            column: 76
          }
        },
        line: 813
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 12,
            column: 3
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 9,
            column: 1
          }
        }, {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 12,
            column: 1
          }
        }],
        line: 2
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 5
      },
      "4": {
        loc: {
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 13
          }
        }, {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "5": {
        loc: {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 34
          },
          end: {
            line: 5,
            column: 47
          }
        }, {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "6": {
        loc: {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 63
          }
        }, {
          start: {
            line: 5,
            column: 67
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "7": {
        loc: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 10
      },
      "8": {
        loc: {
          start: {
            line: 13,
            column: 25
          },
          end: {
            line: 17,
            column: 2
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 26
          },
          end: {
            line: 13,
            column: 30
          }
        }, {
          start: {
            line: 13,
            column: 34
          },
          end: {
            line: 13,
            column: 57
          }
        }, {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "9": {
        loc: {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 15,
            column: 1
          }
        }, {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "10": {
        loc: {
          start: {
            line: 18,
            column: 19
          },
          end: {
            line: 34,
            column: 4
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 18,
            column: 24
          }
        }, {
          start: {
            line: 18,
            column: 28
          },
          end: {
            line: 18,
            column: 45
          }
        }, {
          start: {
            line: 18,
            column: 50
          },
          end: {
            line: 34,
            column: 4
          }
        }],
        line: 18
      },
      "11": {
        loc: {
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 20,
            column: 44
          }
        }, {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 24,
            column: 9
          }
        }],
        line: 20
      },
      "12": {
        loc: {
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "13": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "14": {
        loc: {
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 15
          }
        }, {
          start: {
            line: 28,
            column: 19
          },
          end: {
            line: 28,
            column: 33
          }
        }],
        line: 28
      },
      "15": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "16": {
        loc: {
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "17": {
        loc: {
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 76,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 76,
            column: 9
          }
        }, {
          start: {
            line: 64,
            column: 13
          },
          end: {
            line: 76,
            column: 9
          }
        }],
        line: 60
      },
      "18": {
        loc: {
          start: {
            line: 71,
            column: 23
          },
          end: {
            line: 71,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 71,
            column: 23
          },
          end: {
            line: 71,
            column: 46
          }
        }, {
          start: {
            line: 71,
            column: 50
          },
          end: {
            line: 71,
            column: 73
          }
        }],
        line: 71
      },
      "19": {
        loc: {
          start: {
            line: 73,
            column: 12
          },
          end: {
            line: 75,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 12
          },
          end: {
            line: 75,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      },
      "20": {
        loc: {
          start: {
            line: 84,
            column: 8
          },
          end: {
            line: 87,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 84,
            column: 8
          },
          end: {
            line: 87,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 84
      },
      "21": {
        loc: {
          start: {
            line: 88,
            column: 8
          },
          end: {
            line: 90,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 88,
            column: 8
          },
          end: {
            line: 90,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 88
      },
      "22": {
        loc: {
          start: {
            line: 88,
            column: 12
          },
          end: {
            line: 88,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 88,
            column: 12
          },
          end: {
            line: 88,
            column: 22
          }
        }, {
          start: {
            line: 88,
            column: 26
          },
          end: {
            line: 88,
            column: 47
          }
        }],
        line: 88
      },
      "23": {
        loc: {
          start: {
            line: 118,
            column: 40
          },
          end: {
            line: 118,
            column: 55
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 118,
            column: 50
          },
          end: {
            line: 118,
            column: 55
          }
        }],
        line: 118
      },
      "24": {
        loc: {
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 122,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 122,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 120
      },
      "25": {
        loc: {
          start: {
            line: 120,
            column: 12
          },
          end: {
            line: 120,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 120,
            column: 12
          },
          end: {
            line: 120,
            column: 20
          }
        }, {
          start: {
            line: 120,
            column: 24
          },
          end: {
            line: 120,
            column: 51
          }
        }],
        line: 120
      },
      "26": {
        loc: {
          start: {
            line: 124,
            column: 8
          },
          end: {
            line: 126,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 8
          },
          end: {
            line: 126,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 124
      },
      "27": {
        loc: {
          start: {
            line: 124,
            column: 12
          },
          end: {
            line: 124,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 124,
            column: 12
          },
          end: {
            line: 124,
            column: 19
          }
        }, {
          start: {
            line: 124,
            column: 23
          },
          end: {
            line: 124,
            column: 48
          }
        }],
        line: 124
      },
      "28": {
        loc: {
          start: {
            line: 139,
            column: 8
          },
          end: {
            line: 141,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 139,
            column: 8
          },
          end: {
            line: 141,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 139
      },
      "29": {
        loc: {
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 154,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 154,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 151
      },
      "30": {
        loc: {
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 151,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 151,
            column: 29
          }
        }, {
          start: {
            line: 151,
            column: 33
          },
          end: {
            line: 151,
            column: 50
          }
        }],
        line: 151
      },
      "31": {
        loc: {
          start: {
            line: 166,
            column: 8
          },
          end: {
            line: 177,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 166,
            column: 8
          },
          end: {
            line: 177,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 166
      },
      "32": {
        loc: {
          start: {
            line: 169,
            column: 16
          },
          end: {
            line: 175,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 169,
            column: 16
          },
          end: {
            line: 175,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 169
      },
      "33": {
        loc: {
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 186,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 186,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 181
      },
      "34": {
        loc: {
          start: {
            line: 208,
            column: 18
          },
          end: {
            line: 208,
            column: 43
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 208,
            column: 27
          },
          end: {
            line: 208,
            column: 33
          }
        }, {
          start: {
            line: 208,
            column: 36
          },
          end: {
            line: 208,
            column: 43
          }
        }],
        line: 208
      },
      "35": {
        loc: {
          start: {
            line: 209,
            column: 21
          },
          end: {
            line: 209,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 209,
            column: 21
          },
          end: {
            line: 209,
            column: 27
          }
        }, {
          start: {
            line: 209,
            column: 31
          },
          end: {
            line: 209,
            column: 35
          }
        }],
        line: 209
      },
      "36": {
        loc: {
          start: {
            line: 214,
            column: 8
          },
          end: {
            line: 217,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 214,
            column: 8
          },
          end: {
            line: 217,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 214
      },
      "37": {
        loc: {
          start: {
            line: 214,
            column: 12
          },
          end: {
            line: 214,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 214,
            column: 12
          },
          end: {
            line: 214,
            column: 29
          }
        }, {
          start: {
            line: 214,
            column: 33
          },
          end: {
            line: 214,
            column: 50
          }
        }],
        line: 214
      },
      "38": {
        loc: {
          start: {
            line: 235,
            column: 30
          },
          end: {
            line: 235,
            column: 58
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 235,
            column: 53
          },
          end: {
            line: 235,
            column: 54
          }
        }, {
          start: {
            line: 235,
            column: 57
          },
          end: {
            line: 235,
            column: 58
          }
        }],
        line: 235
      },
      "39": {
        loc: {
          start: {
            line: 242,
            column: 8
          },
          end: {
            line: 245,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 242,
            column: 8
          },
          end: {
            line: 245,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 242
      },
      "40": {
        loc: {
          start: {
            line: 268,
            column: 8
          },
          end: {
            line: 270,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 268,
            column: 8
          },
          end: {
            line: 270,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 268
      },
      "41": {
        loc: {
          start: {
            line: 271,
            column: 8
          },
          end: {
            line: 273,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 271,
            column: 8
          },
          end: {
            line: 273,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 271
      },
      "42": {
        loc: {
          start: {
            line: 271,
            column: 12
          },
          end: {
            line: 271,
            column: 98
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 271,
            column: 12
          },
          end: {
            line: 271,
            column: 41
          }
        }, {
          start: {
            line: 271,
            column: 45
          },
          end: {
            line: 271,
            column: 98
          }
        }],
        line: 271
      },
      "43": {
        loc: {
          start: {
            line: 313,
            column: 8
          },
          end: {
            line: 316,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 313,
            column: 8
          },
          end: {
            line: 316,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 313
      },
      "44": {
        loc: {
          start: {
            line: 313,
            column: 12
          },
          end: {
            line: 313,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 313,
            column: 12
          },
          end: {
            line: 313,
            column: 31
          }
        }, {
          start: {
            line: 313,
            column: 35
          },
          end: {
            line: 313,
            column: 52
          }
        }],
        line: 313
      },
      "45": {
        loc: {
          start: {
            line: 333,
            column: 8
          },
          end: {
            line: 336,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 333,
            column: 8
          },
          end: {
            line: 336,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 333
      },
      "46": {
        loc: {
          start: {
            line: 337,
            column: 8
          },
          end: {
            line: 339,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 337,
            column: 8
          },
          end: {
            line: 339,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 337
      },
      "47": {
        loc: {
          start: {
            line: 337,
            column: 12
          },
          end: {
            line: 337,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 337,
            column: 12
          },
          end: {
            line: 337,
            column: 31
          }
        }, {
          start: {
            line: 337,
            column: 35
          },
          end: {
            line: 337,
            column: 66
          }
        }],
        line: 337
      },
      "48": {
        loc: {
          start: {
            line: 353,
            column: 8
          },
          end: {
            line: 356,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 353,
            column: 8
          },
          end: {
            line: 356,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 353
      },
      "49": {
        loc: {
          start: {
            line: 359,
            column: 8
          },
          end: {
            line: 370,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 359,
            column: 8
          },
          end: {
            line: 370,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 359
      },
      "50": {
        loc: {
          start: {
            line: 361,
            column: 16
          },
          end: {
            line: 363,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 361,
            column: 16
          },
          end: {
            line: 363,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 361
      },
      "51": {
        loc: {
          start: {
            line: 378,
            column: 36
          },
          end: {
            line: 378,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 378,
            column: 36
          },
          end: {
            line: 378,
            column: 80
          }
        }, {
          start: {
            line: 378,
            column: 84
          },
          end: {
            line: 378,
            column: 85
          }
        }],
        line: 378
      },
      "52": {
        loc: {
          start: {
            line: 381,
            column: 30
          },
          end: {
            line: 381,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 381,
            column: 30
          },
          end: {
            line: 381,
            column: 44
          }
        }, {
          start: {
            line: 381,
            column: 48
          },
          end: {
            line: 381,
            column: 49
          }
        }],
        line: 381
      },
      "53": {
        loc: {
          start: {
            line: 382,
            column: 30
          },
          end: {
            line: 382,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 382,
            column: 30
          },
          end: {
            line: 382,
            column: 66
          }
        }, {
          start: {
            line: 382,
            column: 70
          },
          end: {
            line: 382,
            column: 72
          }
        }],
        line: 382
      },
      "54": {
        loc: {
          start: {
            line: 387,
            column: 26
          },
          end: {
            line: 387,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 387,
            column: 53
          },
          end: {
            line: 387,
            column: 97
          }
        }, {
          start: {
            line: 387,
            column: 100
          },
          end: {
            line: 387,
            column: 101
          }
        }],
        line: 387
      },
      "55": {
        loc: {
          start: {
            line: 388,
            column: 26
          },
          end: {
            line: 388,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 388,
            column: 53
          },
          end: {
            line: 388,
            column: 97
          }
        }, {
          start: {
            line: 388,
            column: 100
          },
          end: {
            line: 388,
            column: 101
          }
        }],
        line: 388
      },
      "56": {
        loc: {
          start: {
            line: 427,
            column: 8
          },
          end: {
            line: 430,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 427,
            column: 8
          },
          end: {
            line: 430,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 427
      },
      "57": {
        loc: {
          start: {
            line: 431,
            column: 15
          },
          end: {
            line: 431,
            column: 25
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 431,
            column: 15
          },
          end: {
            line: 431,
            column: 19
          }
        }, {
          start: {
            line: 431,
            column: 23
          },
          end: {
            line: 431,
            column: 25
          }
        }],
        line: 431
      },
      "58": {
        loc: {
          start: {
            line: 452,
            column: 8
          },
          end: {
            line: 473,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 452,
            column: 8
          },
          end: {
            line: 473,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 452
      },
      "59": {
        loc: {
          start: {
            line: 457,
            column: 12
          },
          end: {
            line: 459,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 457,
            column: 12
          },
          end: {
            line: 459,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 457
      },
      "60": {
        loc: {
          start: {
            line: 457,
            column: 16
          },
          end: {
            line: 457,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 457,
            column: 16
          },
          end: {
            line: 457,
            column: 27
          }
        }, {
          start: {
            line: 457,
            column: 31
          },
          end: {
            line: 457,
            column: 45
          }
        }],
        line: 457
      },
      "61": {
        loc: {
          start: {
            line: 462,
            column: 12
          },
          end: {
            line: 472,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 462,
            column: 12
          },
          end: {
            line: 472,
            column: 13
          }
        }, {
          start: {
            line: 467,
            column: 17
          },
          end: {
            line: 472,
            column: 13
          }
        }],
        line: 462
      },
      "62": {
        loc: {
          start: {
            line: 463,
            column: 16
          },
          end: {
            line: 465,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 463,
            column: 16
          },
          end: {
            line: 465,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 463
      },
      "63": {
        loc: {
          start: {
            line: 469,
            column: 16
          },
          end: {
            line: 471,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 469,
            column: 16
          },
          end: {
            line: 471,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 469
      },
      "64": {
        loc: {
          start: {
            line: 475,
            column: 36
          },
          end: {
            line: 475,
            column: 120
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 475,
            column: 36
          },
          end: {
            line: 475,
            column: 50
          }
        }, {
          start: {
            line: 475,
            column: 54
          },
          end: {
            line: 475,
            column: 120
          }
        }],
        line: 475
      },
      "65": {
        loc: {
          start: {
            line: 487,
            column: 8
          },
          end: {
            line: 490,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 487,
            column: 8
          },
          end: {
            line: 490,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 487
      },
      "66": {
        loc: {
          start: {
            line: 538,
            column: 8
          },
          end: {
            line: 540,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 538,
            column: 8
          },
          end: {
            line: 540,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 538
      },
      "67": {
        loc: {
          start: {
            line: 538,
            column: 12
          },
          end: {
            line: 538,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 538,
            column: 12
          },
          end: {
            line: 538,
            column: 33
          }
        }, {
          start: {
            line: 538,
            column: 37
          },
          end: {
            line: 538,
            column: 54
          }
        }],
        line: 538
      },
      "68": {
        loc: {
          start: {
            line: 552,
            column: 8
          },
          end: {
            line: 555,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 552,
            column: 8
          },
          end: {
            line: 555,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 552
      },
      "69": {
        loc: {
          start: {
            line: 600,
            column: 8
          },
          end: {
            line: 603,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 600,
            column: 8
          },
          end: {
            line: 603,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 600
      },
      "70": {
        loc: {
          start: {
            line: 602,
            column: 28
          },
          end: {
            line: 602,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 602,
            column: 28
          },
          end: {
            line: 602,
            column: 41
          }
        }, {
          start: {
            line: 602,
            column: 45
          },
          end: {
            line: 602,
            column: 79
          }
        }],
        line: 602
      },
      "71": {
        loc: {
          start: {
            line: 604,
            column: 8
          },
          end: {
            line: 606,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 604,
            column: 8
          },
          end: {
            line: 606,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 604
      },
      "72": {
        loc: {
          start: {
            line: 622,
            column: 55
          },
          end: {
            line: 622,
            column: 83
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 622,
            column: 64
          },
          end: {
            line: 622,
            column: 83
          }
        }],
        line: 622
      },
      "73": {
        loc: {
          start: {
            line: 629,
            column: 8
          },
          end: {
            line: 630,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 629,
            column: 8
          },
          end: {
            line: 630,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 629
      },
      "74": {
        loc: {
          start: {
            line: 649,
            column: 8
          },
          end: {
            line: 650,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 649,
            column: 8
          },
          end: {
            line: 650,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 649
      },
      "75": {
        loc: {
          start: {
            line: 673,
            column: 8
          },
          end: {
            line: 675,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 673,
            column: 8
          },
          end: {
            line: 675,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 673
      },
      "76": {
        loc: {
          start: {
            line: 676,
            column: 8
          },
          end: {
            line: 679,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 676,
            column: 8
          },
          end: {
            line: 679,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 676
      },
      "77": {
        loc: {
          start: {
            line: 676,
            column: 12
          },
          end: {
            line: 676,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 676,
            column: 12
          },
          end: {
            line: 676,
            column: 36
          }
        }, {
          start: {
            line: 676,
            column: 40
          },
          end: {
            line: 676,
            column: 81
          }
        }],
        line: 676
      },
      "78": {
        loc: {
          start: {
            line: 684,
            column: 35
          },
          end: {
            line: 684,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 684,
            column: 35
          },
          end: {
            line: 684,
            column: 59
          }
        }, {
          start: {
            line: 684,
            column: 63
          },
          end: {
            line: 684,
            column: 65
          }
        }],
        line: 684
      },
      "79": {
        loc: {
          start: {
            line: 687,
            column: 8
          },
          end: {
            line: 690,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 687,
            column: 8
          },
          end: {
            line: 690,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 687
      },
      "80": {
        loc: {
          start: {
            line: 698,
            column: 12
          },
          end: {
            line: 700,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 698,
            column: 12
          },
          end: {
            line: 700,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 698
      },
      "81": {
        loc: {
          start: {
            line: 728,
            column: 8
          },
          end: {
            line: 730,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 728,
            column: 8
          },
          end: {
            line: 730,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 728
      },
      "82": {
        loc: {
          start: {
            line: 728,
            column: 12
          },
          end: {
            line: 728,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 728,
            column: 12
          },
          end: {
            line: 728,
            column: 21
          }
        }, {
          start: {
            line: 728,
            column: 25
          },
          end: {
            line: 728,
            column: 46
          }
        }],
        line: 728
      },
      "83": {
        loc: {
          start: {
            line: 737,
            column: 39
          },
          end: {
            line: 737,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 737,
            column: 39
          },
          end: {
            line: 737,
            column: 63
          }
        }, {
          start: {
            line: 737,
            column: 67
          },
          end: {
            line: 737,
            column: 69
          }
        }],
        line: 737
      },
      "84": {
        loc: {
          start: {
            line: 740,
            column: 12
          },
          end: {
            line: 742,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 740,
            column: 12
          },
          end: {
            line: 742,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 740
      },
      "85": {
        loc: {
          start: {
            line: 745,
            column: 8
          },
          end: {
            line: 751,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 745,
            column: 8
          },
          end: {
            line: 751,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 745
      },
      "86": {
        loc: {
          start: {
            line: 809,
            column: 8
          },
          end: {
            line: 812,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 809,
            column: 8
          },
          end: {
            line: 812,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 809
      },
      "87": {
        loc: {
          start: {
            line: 813,
            column: 53
          },
          end: {
            line: 813,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 813,
            column: 53
          },
          end: {
            line: 813,
            column: 70
          }
        }, {
          start: {
            line: 813,
            column: 74
          },
          end: {
            line: 813,
            column: 75
          }
        }],
        line: 813
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0,
      "282": 0,
      "283": 0,
      "284": 0,
      "285": 0,
      "286": 0,
      "287": 0,
      "288": 0,
      "289": 0,
      "290": 0,
      "291": 0,
      "292": 0,
      "293": 0,
      "294": 0,
      "295": 0,
      "296": 0,
      "297": 0,
      "298": 0,
      "299": 0,
      "300": 0,
      "301": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0],
      "77": [0, 0],
      "78": [0, 0],
      "79": [0, 0],
      "80": [0, 0],
      "81": [0, 0],
      "82": [0, 0],
      "83": [0, 0],
      "84": [0, 0],
      "85": [0, 0],
      "86": [0, 0],
      "87": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/kevin/card-show-finder/src/services/messagingService.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/kevin/card-show-finder/src/services/messagingService.ts"],
      sourcesContent: ["import { supabase } from '../supabase';\nimport * as userRoleService from './userRoleService';\nimport { UserRole } from './userRoleService';\n\n// TypeScript interfaces for Messages and Conversations\nexport interface Message {\n  id: string;\n  conversation_id: string;\n  sender_id: string;\n  message_text: string;\n  created_at: string;\n  read_by_user_ids: string[];\n  sender_profile?: {\n    id: string;\n    username?: string;\n    full_name?: string;\n    avatar_url?: string;\n  };\n}\n\nexport interface Conversation {\n  id: string;\n  type: 'direct' | 'group' | 'show';\n  show_id?: string;\n  participant_count: number;\n  last_message_text?: string;\n  last_message_timestamp?: string;\n  unread_count: number;\n  participants: {\n    user_id: string;\n    display_name?: string;\n    photo_url?: string;\n  }[];\n}\n\n// Broadcast message parameters\nexport interface BroadcastMessageParams {\n  senderId: string;\n  message: string;\n  recipientRoles: UserRole[];\n  showId?: string;\n  /**\n   * Optional override to explicitly mark the broadcast\n   * as pre-show (TRUE) or post-show (FALSE).  When omitted\n   * the edge-function infers this from current date vs show date.\n   */\n  isPreShow?: boolean;\n}\n\n// ---------------------------------------------------------------------------\n//  Conversation functions\n// ---------------------------------------------------------------------------\n\n/**\n * Try to find an existing one-to-one (direct) conversation between two users.\n * @param userA First user id\n * @param userB Second user id\n * @returns conversation id or null if none exists\n */\nexport const findDirectConversation = async (\n  userA: string,\n  userB: string\n): Promise<string | null> => {\n  try {\n    // Try to find in conversation_participants table (preferred approach)\n    const { data: convoData, error: convoError } = await supabase\n      .from('conversations')\n      .select(`\n        id,\n        type,\n        conversation_participants!inner(user_id)\n      `)\n      .eq('type', 'direct')\n      .in('conversation_participants.user_id', [userA, userB]);\n\n    if (convoError) {\n      console.error('[messagingService/findDirectConversation] advanced lookup error', convoError);\n      // Fall back to legacy approach\n    } else {\n      // Group results by conversation_id and count participants\n      const conversationMatches = convoData\n        .filter(convo => convo.conversation_participants.length === 2)\n        .filter(convo => {\n          // Check if both users are in this conversation\n          const userIds = convo.conversation_participants.map((p: any) => p.user_id);\n          return userIds.includes(userA) && userIds.includes(userB);\n        });\n      \n      if (conversationMatches.length > 0) {\n        return conversationMatches[0].id;\n      }\n    }\n\n    // Legacy fallback: Look in messages table\n    const { data: legacyData, error: legacyError } = await supabase\n      .from('messages')\n      .select('conversation_id')\n      .or(`and(sender_id.eq.${userA},recipient_id.eq.${userB}),and(sender_id.eq.${userB},recipient_id.eq.${userA})`)\n      .order('created_at', { ascending: false })\n      .limit(1);\n\n    if (legacyError) {\n      console.error('[messagingService/findDirectConversation] legacy error', legacyError);\n      return null;\n    }\n\n    if (legacyData && legacyData.length > 0) {\n      return legacyData[0].conversation_id;\n    }\n\n    return null;\n  } catch (error) {\n    console.error('[messagingService/findDirectConversation] exception', error);\n    return null;\n  }\n};\n\n/**\n * Create a direct conversation between two users.\n * This function creates the conversation record, adds participants,\n * but does NOT send any messages.\n * @param userA First user id\n * @param userB Second user id\n * @returns The conversation ID\n */\n\n/**\n * Generic conversation creation function that handles both direct and group conversations.\n * @param {Object} params - The conversation parameters\n * @param {string} params.userId - The ID of the user creating the conversation\n * @param {string[]} params.participantIds - Array of user IDs to include (for direct conversations, should contain one ID)\n * @param {boolean} params.isGroup - Whether this is a group conversation\n * @param {string} [params.showId] - Optional show ID for show-specific groups\n * @returns {Promise<string>} The conversation ID\n */\nexport const createConversation = async (params: { \n  userId: string;\n  participantIds: string[];\n  isGroup?: boolean;\n  showId?: string;\n}): Promise<string> => {\n  try {\n    const { userId, participantIds, isGroup = false, showId } = params;\n    \n    // Direct conversation (between two users)\n    if (!isGroup && participantIds.length === 1) {\n      return await createDirectConversation(userId, participantIds[0]);\n    }\n    \n    // Group conversation\n    if (isGroup || participantIds.length > 1) {\n      return await createGroupConversation(userId, participantIds, showId);\n    }\n    \n    throw new Error('Invalid conversation parameters');\n  } catch (error) {\n    console.error('[messagingService/createConversation] exception', error);\n    throw error;\n  }\n};\n\nexport const createDirectConversation = async (\n  userA: string,\n  userB: string\n): Promise<string> => {\n  try {\n    // First check if conversation already exists\n    const existingConversationId = await findDirectConversation(userA, userB);\n    if (existingConversationId) {\n      return existingConversationId;\n    }\n    \n    // Create a new conversation\n    const { data: conversationData, error: conversationError } = await supabase\n      .from('conversations')\n      .insert({\n        type: 'direct',\n        created_at: new Date().toISOString()\n      })\n      .select()\n      .single();\n    \n    if (conversationError || !conversationData) {\n      console.error('[messagingService/createDirectConversation] conversation error', conversationError);\n      throw new Error('Failed to create conversation');\n    }\n    \n    const conversationId = conversationData.id;\n    \n    // Add participants\n    const participants = [\n      { conversation_id: conversationId, user_id: userA },\n      { conversation_id: conversationId, user_id: userB }\n    ];\n    \n    // Fetch user profiles to get display names and photos\n    const { data: profiles } = await supabase\n      .from('profiles')\n      .select('id, full_name, avatar_url')\n      .in('id', [userA, userB]);\n      \n    if (profiles) {\n      participants.forEach((p, i) => {\n        const profile = profiles.find(prof => prof.id === p.user_id);\n        if (profile) {\n          participants[i] = {\n            ...p,\n            display_name: profile.full_name,\n            photo_url: profile.avatar_url\n          };\n        }\n      });\n    }\n    \n    const { error: participantsError } = await supabase\n      .from('conversation_participants')\n      .insert(participants);\n      \n    if (participantsError) {\n      console.error('[messagingService/createDirectConversation] participants error', participantsError);\n      // We created the conversation but failed to add participants\n      // This is a partial failure, but we still return the conversation ID\n      // A cleanup job could remove orphaned conversations\n    }\n    \n    return conversationId;\n  } catch (error) {\n    console.error('[messagingService/createDirectConversation] exception', error);\n    throw error;\n  }\n};\n\n/**\n * Creates a group conversation for broadcasting messages.\n * @param creatorId The ID of the user creating the group\n * @param participants Array of user IDs to include in the group \n * @param showId Optional Show ID if this is a show-specific group\n * @returns The conversation ID\n */\nexport const createGroupConversation = async (\n  creatorId: string,\n  participants: string[],\n  showId?: string\n): Promise<string> => {\n  try {\n    // Create a new group conversation\n    const { data: conversationData, error: conversationError } = await supabase\n      .from('conversations')\n      .insert({\n        type: showId ? 'show' : 'group',\n        show_id: showId || null,\n        created_at: new Date().toISOString()\n      })\n      .select()\n      .single();\n    \n    if (conversationError || !conversationData) {\n      console.error('[messagingService/createGroupConversation] conversation error', conversationError);\n      throw new Error('Failed to create group conversation');\n    }\n    \n    const conversationId = conversationData.id;\n    \n    // Always include the creator in the participants list\n    const allParticipantIds = [...new Set([creatorId, ...participants])];\n    \n    // Fetch user profiles for all participants\n    const { data: profiles } = await supabase\n      .from('profiles')\n      .select('id, full_name, avatar_url')\n      .in('id', allParticipantIds);\n    \n    // Create participant records\n    const participantRecords = allParticipantIds.map(userId => {\n      const profile = profiles?.find(p => p.id === userId);\n      return {\n        conversation_id: conversationId,\n        user_id: userId,\n        display_name: profile?.full_name,\n        photo_url: profile?.avatar_url,\n        // Only the creator has read all messages initially\n        unread_count: userId === creatorId ? 0 : 1\n      };\n    });\n    \n    // Insert all participants\n    const { error: participantsError } = await supabase\n      .from('conversation_participants')\n      .insert(participantRecords);\n    \n    if (participantsError) {\n      console.error('[messagingService/createGroupConversation] participants error', participantsError);\n      // Continue despite partial failure\n    }\n    \n    return conversationId;\n  } catch (error) {\n    console.error('[messagingService/createGroupConversation] exception', error);\n    throw error;\n  }\n};\n\n/**\n * Start a new conversation from a profile view.\n * Creates the conversation if needed, sends the initial message,\n * and returns the conversation ID for navigation.\n * \n * @param currentUserId The ID of the current user initiating the conversation\n * @param profileUserId The ID of the user whose profile is being viewed\n * @param initialMessage The first message to send\n * @returns Conversation ID for navigation\n */\nexport const startConversationFromProfile = async (\n  currentUserId: string,\n  profileUserId: string,\n  initialMessage: string\n): Promise<string> => {\n  try {\n    // Check if the recipient can receive messages\n    const recipientRole = await userRoleService.getUserRole(profileUserId);\n    if (!recipientRole) {\n      throw new Error('User not found');\n    }\n    \n    if (!userRoleService.IS_TEST_MODE && !userRoleService.canUserReceiveMessage(recipientRole)) {\n      throw new Error('This user cannot receive messages due to their role');\n    }\n    \n    // Create or find conversation\n    const conversationId = await createDirectConversation(currentUserId, profileUserId);\n    \n    // Send initial message\n    await sendMessage(currentUserId, profileUserId, initialMessage, conversationId);\n    \n    return conversationId;\n  } catch (error) {\n    console.error('[messagingService/startConversationFromProfile]', error);\n    throw error;\n  }\n};\n\n/**\n * Get participants (excluding optional filters) of a conversation.\n * Returned data structure mirrors Supabase `.from().select()` call so\n * callers can destructure `{ data, error }` just like a direct query.\n *\n * NOTE: We intentionally keep this lightweight \u2013 any additional profile\n * fields should be added by callers via `select()` if/when needed.\n *\n * @param conversationId The conversation to fetch participants for\n */\nexport const getConversationParticipants = async (\n  conversationId: string\n) => {\n  return supabase\n    .from('conversation_participants')\n    .select('user_id, display_name, photo_url')\n    .eq('conversation_id', conversationId);\n};\n\n/**\n * Get all conversations for the current user\n * @param userId The ID of the current user\n * @returns Array of conversations with last message and unread count\n */\nexport const getConversations = async (userId: string): Promise<Conversation[]> => {\n  try {\n    // Try to use the RPC function first (most efficient)\n    const { data: conversationsData, error: conversationsError } = await supabase\n      .rpc('get_user_conversations', { user_id: userId });\n      \n    if (!conversationsError && conversationsData) {\n      // console.log('Got conversations from RPC:', conversationsData);\n      return conversationsData;\n    }\n    \n    console.error('Error fetching conversations with RPC, falling back to query:', conversationsError);\n    \n    // Fallback to querying directly\n    const { data: participationsData, error: participationsError } = await supabase\n      .from('conversation_participants')\n      .select(`\n        conversation_id,\n        unread_count,\n        conversations!inner(\n          id, \n          type, \n          show_id, \n          last_message_text, \n          last_message_timestamp\n        )\n      `)\n      .eq('user_id', userId);\n      \n    if (participationsError) {\n      console.error('Error fetching conversations', participationsError);\n      throw new Error('Failed to fetch conversations');\n    }\n    \n    if (!participationsData || participationsData.length === 0) {\n      return [];\n    }\n    \n    // Get all conversation IDs\n    const conversationIds = participationsData.map(p => p.conversation_id);\n    \n    // Get all participants for these conversations\n    const { data: allParticipantsData, error: allParticipantsError } = await supabase\n      .from('conversation_participants')\n      .select(`\n        conversation_id,\n        user_id,\n        display_name,\n        photo_url\n      `)\n      .in('conversation_id', conversationIds)\n      .neq('user_id', userId);\n      \n    if (allParticipantsError) {\n      console.error('Error fetching participants', allParticipantsError);\n      // Continue with partial data\n    }\n    \n    // Group participants by conversation\n    const participantsByConversation: Record<string, any[]> = {};\n    \n    if (allParticipantsData) {\n      allParticipantsData.forEach(participant => {\n        if (!participantsByConversation[participant.conversation_id]) {\n          participantsByConversation[participant.conversation_id] = [];\n        }\n        participantsByConversation[participant.conversation_id].push({\n          user_id: participant.user_id,\n          display_name: participant.display_name,\n          photo_url: participant.photo_url\n        });\n      });\n    }\n    \n    // Build conversations data structure\n    const conversations: Conversation[] = participationsData.map(p => {\n      const convo = p.conversations;\n      return {\n        id: convo.id,\n        type: convo.type,\n        show_id: convo.show_id,\n        participant_count: (participantsByConversation[convo.id]?.length || 0) + 1, // +1 for self\n        last_message_text: convo.last_message_text,\n        last_message_timestamp: convo.last_message_timestamp,\n        unread_count: p.unread_count || 0,\n        participants: participantsByConversation[convo.id] || []\n      };\n    });\n    \n    // Sort by most recent message\n    return conversations.sort((a, b) => {\n      const timeA = a.last_message_timestamp ? new Date(a.last_message_timestamp).getTime() : 0;\n      const timeB = b.last_message_timestamp ? new Date(b.last_message_timestamp).getTime() : 0;\n      return timeB - timeA;\n    });\n  } catch (error) {\n    console.error('Error in getConversations:', error);\n    throw error;\n  }\n};\n\n// ---------------------------------------------------------------------------\n//  Message functions\n// ---------------------------------------------------------------------------\n\n/**\n * Get messages for a specific conversation\n * @param conversationId The ID of the conversation\n * @returns Array of messages in the conversation\n */\nexport const getMessages = async (conversationId: string): Promise<Message[]> => {\n  try {\n    // Get messages with joined profiles\n    const { data, error } = await supabase\n      .from('messages')\n      .select(`\n        id,\n        conversation_id,\n        sender_id,\n        message_text,\n        created_at,\n        read_by_user_ids,\n        profiles!sender_profile:sender_id(\n          id,\n          username,\n          full_name,\n          avatar_url\n        )\n      `)\n      .eq('conversation_id', conversationId)\n      .order('created_at', { ascending: true });\n      \n    if (error) {\n      console.error('Error fetching messages:', error);\n      throw new Error('Failed to fetch messages');\n    }\n    \n    return data || [];\n  } catch (error) {\n    console.error('Error in getMessages:', error);\n    throw error;\n  }\n};\n\n/**\n * Send a new message in a conversation\n * @param senderId The ID of the sender\n * @param recipientId The ID of the recipient (for direct messages)\n * @param messageText The message content\n * @param conversationId The existing conversation ID (optional)\n * @returns The newly created message\n */\nexport const sendMessage = async (\n  senderId: string,\n  recipientId: string,\n  messageText: string,\n  conversationId?: string\n): Promise<Message> => {\n  try {\n    /* ------------------------------------------------------------------\n     * Role-based permission checks\n     * ------------------------------------------------------------------ */\n    if (!userRoleService.IS_TEST_MODE) {\n      const [senderRole, recipientRole] = await Promise.all([\n        userRoleService.getUserRole(senderId),\n        userRoleService.getUserRole(recipientId),\n      ]);\n\n      if (!senderRole || !recipientRole) {\n        throw new Error('Unable to determine user roles');\n      }\n\n      // If conversation already exists the sender might just be replying\n      // \u2013 apply `canReply` check in that case.\n      if (conversationId) {\n        if (!userRoleService.canReplyToMessage(senderRole)) {\n          throw new Error('Your role does not allow replying to messages');\n        }\n      } else {\n        // New DM \u2013 validate sender\u2192recipient rule\n        if (\n          !userRoleService.canSendDirectMessage(\n            senderRole,\n            recipientRole,\n          )\n        ) {\n          throw new Error('You are not allowed to start a conversation with this user');\n        }\n      }\n    }\n\n    // Ensure we have a conversation ID\n    const finalConversationId = conversationId || await createDirectConversation(senderId, recipientId);\n    \n    // Insert the message\n    const { data: newMessage, error: messageError } = await supabase\n      .from('messages')\n      .insert({\n        conversation_id: finalConversationId,\n        sender_id: senderId,\n        message_text: messageText,\n        read_by_user_ids: [senderId] // Sender has automatically read their own message\n      })\n      .select()\n      .single();\n      \n    if (messageError) {\n      console.error('Error sending message:', messageError);\n      throw new Error('Failed to send message');\n    }\n    \n    // The conversation last message update and participant unread count\n    // update should happen via database triggers, but we'll update manually\n    // as a fallback in case the trigger fails\n    try {\n      // Update the conversation's last message info\n      await supabase\n        .from('conversations')\n        .update({\n          last_message_text: messageText,\n          last_message_timestamp: new Date().toISOString()\n        })\n        .eq('id', finalConversationId);\n        \n      // Increment unread count for recipients\n      await supabase\n        .from('conversation_participants')\n        .update({ unread_count: supabase.rpc('increment_unread') })\n        .eq('conversation_id', finalConversationId)\n        .neq('user_id', senderId);\n    } catch (updateError) {\n      console.error('Failed to update conversation metadata:', updateError);\n      // Continue since the message was sent successfully\n    }\n    \n    return newMessage;\n  } catch (error) {\n    console.error('Error in sendMessage:', error);\n    throw error;\n  }\n};\n\n/**\n * Send a message to a group conversation\n * @param senderId The ID of the sender\n * @param conversationId The ID of the group conversation\n * @param messageText The message content\n * @returns The newly created message\n */\nexport const sendGroupMessage = async (\n  senderId: string,\n  conversationId: string,\n  messageText: string\n): Promise<Message> => {\n  try {\n    // Check if the user is part of this conversation\n    const { data: participantCheck, error: participantCheckError } = await supabase\n      .from('conversation_participants')\n      .select('user_id')\n      .eq('conversation_id', conversationId)\n      .eq('user_id', senderId)\n      .single();\n    \n    if (participantCheckError || !participantCheck) {\n      throw new Error('You are not a participant in this conversation');\n    }\n    \n    // Insert the message\n    const { data: newMessage, error: messageError } = await supabase\n      .from('messages')\n      .insert({\n        conversation_id: conversationId,\n        sender_id: senderId,\n        message_text: messageText,\n        read_by_user_ids: [senderId] // Sender has automatically read their own message\n      })\n      .select()\n      .single();\n      \n    if (messageError) {\n      console.error('Error sending group message:', messageError);\n      throw new Error('Failed to send message');\n    }\n    \n    // Update the conversation's last message info\n    await supabase\n      .from('conversations')\n      .update({\n        last_message_text: messageText,\n        last_message_timestamp: new Date().toISOString()\n      })\n      .eq('id', conversationId);\n      \n    // Increment unread count for all other participants\n    await supabase\n      .from('conversation_participants')\n      .update({ unread_count: supabase.rpc('increment_unread') })\n      .eq('conversation_id', conversationId)\n      .neq('user_id', senderId);\n    \n    return newMessage;\n  } catch (error) {\n    console.error('Error in sendGroupMessage:', error);\n    throw error;\n  }\n};\n\n/**\n * Send a broadcast message to multiple recipients based on their roles.\n * This creates a group conversation and sends the initial message.\n * \n * @param params Object containing senderId, message, recipientRoles, and optional showId\n * @returns The conversation ID of the newly created group\n */\nexport const sendBroadcastMessage = async (\n  params: BroadcastMessageParams\n): Promise<string> => {\n  const { senderId, message, recipientRoles, showId } = params;\n  \n  try {\n    // ------------------------------------------------------------------\n    // 1. Call the edge function which performs all permission / quota work\n    // ------------------------------------------------------------------\n\n    const { data, error } = await supabase.functions.invoke(\n      'send-broadcast',\n      {\n        body: {\n          sender_id: senderId,\n          message,\n          recipient_roles: recipientRoles,\n          show_id: showId,\n          is_pre_show: params.isPreShow,\n        },\n      },\n    );\n\n    if (error) {\n      console.error('[messagingService/sendBroadcastMessage] edge-function error', error);\n      throw new Error(error.message || 'Failed to send broadcast message');\n    }\n\n    if (!data?.conversation_id) {\n      throw new Error('Unexpected response from broadcast service');\n    }\n\n    return data.conversation_id as string;\n  } catch (error) {\n    console.error('Error in sendBroadcastMessage:', error);\n    throw error;\n  }\n};\n\n// ---------------------------------------------------------------------------\n//  Moderation helpers\n// ---------------------------------------------------------------------------\n\n/**\n * Soft delete / moderate a message.  Only show organisers (their shows)\n * or admins can perform this action (enforced server-side).\n */\nexport const moderateMessage = async (\n  moderatorId: string,\n  messageId: string,\n  reason = 'Content violation',\n): Promise<boolean> => {\n  try {\n    const { data, error } = await supabase.rpc(\n      'moderate_delete_message',\n      {\n        p_message_id: messageId,\n        p_moderator_id: moderatorId,\n        p_reason: reason,\n      },\n    );\n    if (error) throw error;\n    return data as boolean;\n  } catch (err) {\n    console.error('[messagingService/moderateMessage]', err);\n    return false;\n  }\n};\n\n/**\n * Report a message as inappropriate.  Anyone in the conversation can report.\n */\nexport const reportMessage = async (\n  reporterId: string,\n  messageId: string,\n  reason: string,\n): Promise<boolean> => {\n  try {\n    const { data, error } = await supabase.rpc(\n      'report_message',\n      {\n        p_message_id: messageId,\n        p_reporter_id: reporterId,\n        p_reason: reason,\n      },\n    );\n    if (error) throw error;\n    return data as boolean;\n  } catch (err) {\n    console.error('[messagingService/reportMessage]', err);\n    return false;\n  }\n};\n\n/**\n * Mark a single message as read\n * @param messageId The ID of the message\n * @param userId The ID of the current user\n * @returns Boolean indicating success\n */\nexport const markMessageAsRead = async (\n  messageId: string,\n  userId: string\n): Promise<boolean> => {\n  try {\n    // Check if the user is already in read_by_user_ids\n    const { data: message } = await supabase\n      .from('messages')\n      .select('read_by_user_ids')\n      .eq('id', messageId)\n      .single();\n      \n    if (!message) {\n      return false;\n    }\n    \n    if (message.read_by_user_ids && message.read_by_user_ids.includes(userId)) {\n      // Already marked as read\n      return true;\n    }\n    \n    // Update read_by_user_ids\n    const { error } = await supabase\n      .from('messages')\n      .update({\n        read_by_user_ids: [...(message.read_by_user_ids || []), userId]\n      })\n      .eq('id', messageId);\n      \n    if (error) {\n      console.error('Error marking message as read:', error);\n      return false;\n    }\n    \n    // Try to update unread count in conversation_participants\n    try {\n      const { data: msgData } = await supabase\n        .from('messages')\n        .select('conversation_id')\n        .eq('id', messageId)\n        .single();\n        \n      if (msgData) {\n        await decrementUnreadCount(msgData.conversation_id, userId);\n      }\n    } catch (error) {\n      console.error('Error updating unread count:', error);\n      // Continue since the message was marked as read\n    }\n    \n    return true;\n  } catch (error) {\n    console.error('Error in markMessageAsRead:', error);\n    return false;\n  }\n};\n\n/**\n * Mark all messages in a conversation as read\n * @param conversationId The ID of the conversation\n * @param userId The ID of the current user\n * @returns Number of messages marked as read\n */\nexport const markConversationAsRead = async (\n  conversationId: string,\n  userId: string\n): Promise<number> => {\n  try {\n    // First get all unread messages in the conversation\n    const { data: messages } = await supabase\n      .from('messages')\n      .select('id, read_by_user_ids')\n      .eq('conversation_id', conversationId)\n      .not('read_by_user_ids', 'cs', `{${userId}}`);\n      \n    if (!messages || messages.length === 0) {\n      return 0;\n    }\n    \n    // Update each message\n    let updatedCount = 0;\n    \n    for (const message of messages) {\n      const { error } = await supabase\n        .from('messages')\n        .update({\n          read_by_user_ids: [...(message.read_by_user_ids || []), userId]\n        })\n        .eq('id', message.id);\n        \n      if (!error) {\n        updatedCount++;\n      }\n    }\n    \n    // Reset unread count in conversation_participants\n    if (updatedCount > 0) {\n      await supabase\n        .from('conversation_participants')\n        .update({ unread_count: 0 })\n        .eq('conversation_id', conversationId)\n        .eq('user_id', userId);\n    }\n    \n    return updatedCount;\n  } catch (error) {\n    console.error('Error in markConversationAsRead:', error);\n    throw error;\n  }\n};\n\n/**\n * Helper function to decrement unread count for a user in a conversation\n */\nconst decrementUnreadCount = async (conversationId: string, userId: string): Promise<void> => {\n  try {\n    await supabase\n      .from('conversation_participants')\n      .update({ \n        unread_count: supabase.rpc('decrement_unread') \n      })\n      .eq('conversation_id', conversationId)\n      .eq('user_id', userId);\n  } catch (error) {\n    console.error('Error decrementing unread count:', error);\n  }\n};\n\n/**\n * Subscribe to realtime messages for a conversation\n * @param conversationId The conversation to monitor\n * @param onNewMessage Callback function when new messages arrive\n * @returns Supabase channel subscription that caller should unsubscribe from\n */\nexport const subscribeToMessages = (\n  conversationId: string,\n  onNewMessage: (message: Message) => void\n) => {\n  const channel = supabase\n    .channel(`messages:${conversationId}`)\n    .on('postgres_changes', {\n      event: 'INSERT',\n      schema: 'public',\n      table: 'messages',\n      filter: `conversation_id=eq.${conversationId}`\n    }, (payload) => {\n      onNewMessage(payload.new as unknown as Message);\n    })\n    .subscribe();\n    \n  return channel;\n};\n\n/**\n * Get total unread message count across all conversations\n * @param userId User ID to check for\n * @returns Total number of unread messages\n */\nexport const getTotalUnreadCount = async (userId: string): Promise<number> => {\n  try {\n    const { data, error } = await supabase\n      .from('conversation_participants')\n      .select('unread_count')\n      .eq('user_id', userId);\n      \n    if (error) {\n      console.error('Error fetching unread count:', error);\n      return 0;\n    }\n    \n    return data.reduce((total, item) => total + (item.unread_count || 0), 0);\n  } catch (error) {\n    console.error('Error in getTotalUnreadCount:', error);\n    return 0;\n  }\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d7290ec129716b7208f5509aad096ef3493790ef"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_sa5xt6wt7 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_sa5xt6wt7();
var __createBinding =
/* istanbul ignore next */
(cov_sa5xt6wt7().s[0]++,
/* istanbul ignore next */
(cov_sa5xt6wt7().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_sa5xt6wt7().b[0][1]++, this.__createBinding) ||
/* istanbul ignore next */
(cov_sa5xt6wt7().b[0][2]++, Object.create ?
/* istanbul ignore next */
(cov_sa5xt6wt7().b[1][0]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_sa5xt6wt7().f[0]++;
  cov_sa5xt6wt7().s[1]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_sa5xt6wt7().b[2][0]++;
    cov_sa5xt6wt7().s[2]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_sa5xt6wt7().b[2][1]++;
  }
  var desc =
  /* istanbul ignore next */
  (cov_sa5xt6wt7().s[3]++, Object.getOwnPropertyDescriptor(m, k));
  /* istanbul ignore next */
  cov_sa5xt6wt7().s[4]++;
  if (
  /* istanbul ignore next */
  (cov_sa5xt6wt7().b[4][0]++, !desc) ||
  /* istanbul ignore next */
  (cov_sa5xt6wt7().b[4][1]++, "get" in desc ?
  /* istanbul ignore next */
  (cov_sa5xt6wt7().b[5][0]++, !m.__esModule) :
  /* istanbul ignore next */
  (cov_sa5xt6wt7().b[5][1]++,
  /* istanbul ignore next */
  (cov_sa5xt6wt7().b[6][0]++, desc.writable) ||
  /* istanbul ignore next */
  (cov_sa5xt6wt7().b[6][1]++, desc.configurable)))) {
    /* istanbul ignore next */
    cov_sa5xt6wt7().b[3][0]++;
    cov_sa5xt6wt7().s[5]++;
    desc = {
      enumerable: true,
      get: function () {
        /* istanbul ignore next */
        cov_sa5xt6wt7().f[1]++;
        cov_sa5xt6wt7().s[6]++;
        return m[k];
      }
    };
  } else
  /* istanbul ignore next */
  {
    cov_sa5xt6wt7().b[3][1]++;
  }
  cov_sa5xt6wt7().s[7]++;
  Object.defineProperty(o, k2, desc);
}) :
/* istanbul ignore next */
(cov_sa5xt6wt7().b[1][1]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_sa5xt6wt7().f[2]++;
  cov_sa5xt6wt7().s[8]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_sa5xt6wt7().b[7][0]++;
    cov_sa5xt6wt7().s[9]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_sa5xt6wt7().b[7][1]++;
  }
  cov_sa5xt6wt7().s[10]++;
  o[k2] = m[k];
})));
var __setModuleDefault =
/* istanbul ignore next */
(cov_sa5xt6wt7().s[11]++,
/* istanbul ignore next */
(cov_sa5xt6wt7().b[8][0]++, this) &&
/* istanbul ignore next */
(cov_sa5xt6wt7().b[8][1]++, this.__setModuleDefault) ||
/* istanbul ignore next */
(cov_sa5xt6wt7().b[8][2]++, Object.create ?
/* istanbul ignore next */
(cov_sa5xt6wt7().b[9][0]++, function (o, v) {
  /* istanbul ignore next */
  cov_sa5xt6wt7().f[3]++;
  cov_sa5xt6wt7().s[12]++;
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
}) :
/* istanbul ignore next */
(cov_sa5xt6wt7().b[9][1]++, function (o, v) {
  /* istanbul ignore next */
  cov_sa5xt6wt7().f[4]++;
  cov_sa5xt6wt7().s[13]++;
  o["default"] = v;
})));
var __importStar =
/* istanbul ignore next */
(cov_sa5xt6wt7().s[14]++,
/* istanbul ignore next */
(cov_sa5xt6wt7().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_sa5xt6wt7().b[10][1]++, this.__importStar) ||
/* istanbul ignore next */
(cov_sa5xt6wt7().b[10][2]++, function () {
  /* istanbul ignore next */
  cov_sa5xt6wt7().f[5]++;
  cov_sa5xt6wt7().s[15]++;
  var ownKeys = function (o) {
    /* istanbul ignore next */
    cov_sa5xt6wt7().f[6]++;
    cov_sa5xt6wt7().s[16]++;
    ownKeys =
    /* istanbul ignore next */
    (cov_sa5xt6wt7().b[11][0]++, Object.getOwnPropertyNames) ||
    /* istanbul ignore next */
    (cov_sa5xt6wt7().b[11][1]++, function (o) {
      /* istanbul ignore next */
      cov_sa5xt6wt7().f[7]++;
      var ar =
      /* istanbul ignore next */
      (cov_sa5xt6wt7().s[17]++, []);
      /* istanbul ignore next */
      cov_sa5xt6wt7().s[18]++;
      for (var k in o) {
        /* istanbul ignore next */
        cov_sa5xt6wt7().s[19]++;
        if (Object.prototype.hasOwnProperty.call(o, k)) {
          /* istanbul ignore next */
          cov_sa5xt6wt7().b[12][0]++;
          cov_sa5xt6wt7().s[20]++;
          ar[ar.length] = k;
        } else
        /* istanbul ignore next */
        {
          cov_sa5xt6wt7().b[12][1]++;
        }
      }
      /* istanbul ignore next */
      cov_sa5xt6wt7().s[21]++;
      return ar;
    });
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[22]++;
    return ownKeys(o);
  };
  /* istanbul ignore next */
  cov_sa5xt6wt7().s[23]++;
  return function (mod) {
    /* istanbul ignore next */
    cov_sa5xt6wt7().f[8]++;
    cov_sa5xt6wt7().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_sa5xt6wt7().b[14][0]++, mod) &&
    /* istanbul ignore next */
    (cov_sa5xt6wt7().b[14][1]++, mod.__esModule)) {
      /* istanbul ignore next */
      cov_sa5xt6wt7().b[13][0]++;
      cov_sa5xt6wt7().s[25]++;
      return mod;
    } else
    /* istanbul ignore next */
    {
      cov_sa5xt6wt7().b[13][1]++;
    }
    var result =
    /* istanbul ignore next */
    (cov_sa5xt6wt7().s[26]++, {});
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[27]++;
    if (mod != null) {
      /* istanbul ignore next */
      cov_sa5xt6wt7().b[15][0]++;
      cov_sa5xt6wt7().s[28]++;
      for (var k =
        /* istanbul ignore next */
        (cov_sa5xt6wt7().s[29]++, ownKeys(mod)), i =
        /* istanbul ignore next */
        (cov_sa5xt6wt7().s[30]++, 0); i < k.length; i++) {
        /* istanbul ignore next */
        cov_sa5xt6wt7().s[31]++;
        if (k[i] !== "default") {
          /* istanbul ignore next */
          cov_sa5xt6wt7().b[16][0]++;
          cov_sa5xt6wt7().s[32]++;
          __createBinding(result, mod, k[i]);
        } else
        /* istanbul ignore next */
        {
          cov_sa5xt6wt7().b[16][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_sa5xt6wt7().b[15][1]++;
    }
    cov_sa5xt6wt7().s[33]++;
    __setModuleDefault(result, mod);
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[34]++;
    return result;
  };
}()));
/* istanbul ignore next */
cov_sa5xt6wt7().s[35]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_sa5xt6wt7().s[36]++;
exports.getTotalUnreadCount = exports.subscribeToMessages = exports.markConversationAsRead = exports.markMessageAsRead = exports.reportMessage = exports.moderateMessage = exports.sendBroadcastMessage = exports.sendGroupMessage = exports.sendMessage = exports.getMessages = exports.getConversations = exports.getConversationParticipants = exports.startConversationFromProfile = exports.createGroupConversation = exports.createDirectConversation = exports.createConversation = exports.findDirectConversation = void 0;
const supabase_1 =
/* istanbul ignore next */
(cov_sa5xt6wt7().s[37]++, require("../supabase"));
const userRoleService =
/* istanbul ignore next */
(cov_sa5xt6wt7().s[38]++, __importStar(require("./userRoleService")));
// ---------------------------------------------------------------------------
//  Conversation functions
// ---------------------------------------------------------------------------
/**
 * Try to find an existing one-to-one (direct) conversation between two users.
 * @param userA First user id
 * @param userB Second user id
 * @returns conversation id or null if none exists
 */
/* istanbul ignore next */
cov_sa5xt6wt7().s[39]++;
const findDirectConversation = async (userA, userB) => {
  /* istanbul ignore next */
  cov_sa5xt6wt7().f[9]++;
  cov_sa5xt6wt7().s[40]++;
  try {
    // Try to find in conversation_participants table (preferred approach)
    const {
      data: convoData,
      error: convoError
    } =
    /* istanbul ignore next */
    (cov_sa5xt6wt7().s[41]++, await supabase_1.supabase.from('conversations').select(`
        id,
        type,
        conversation_participants!inner(user_id)
      `).eq('type', 'direct').in('conversation_participants.user_id', [userA, userB]));
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[42]++;
    if (convoError) {
      /* istanbul ignore next */
      cov_sa5xt6wt7().b[17][0]++;
      cov_sa5xt6wt7().s[43]++;
      console.error('[messagingService/findDirectConversation] advanced lookup error', convoError);
      // Fall back to legacy approach
    } else {
      /* istanbul ignore next */
      cov_sa5xt6wt7().b[17][1]++;
      // Group results by conversation_id and count participants
      const conversationMatches =
      /* istanbul ignore next */
      (cov_sa5xt6wt7().s[44]++, convoData.filter(convo => {
        /* istanbul ignore next */
        cov_sa5xt6wt7().f[10]++;
        cov_sa5xt6wt7().s[45]++;
        return convo.conversation_participants.length === 2;
      }).filter(convo => {
        /* istanbul ignore next */
        cov_sa5xt6wt7().f[11]++;
        // Check if both users are in this conversation
        const userIds =
        /* istanbul ignore next */
        (cov_sa5xt6wt7().s[46]++, convo.conversation_participants.map(p => {
          /* istanbul ignore next */
          cov_sa5xt6wt7().f[12]++;
          cov_sa5xt6wt7().s[47]++;
          return p.user_id;
        }));
        /* istanbul ignore next */
        cov_sa5xt6wt7().s[48]++;
        return /* istanbul ignore next */(cov_sa5xt6wt7().b[18][0]++, userIds.includes(userA)) &&
        /* istanbul ignore next */
        (cov_sa5xt6wt7().b[18][1]++, userIds.includes(userB));
      }));
      /* istanbul ignore next */
      cov_sa5xt6wt7().s[49]++;
      if (conversationMatches.length > 0) {
        /* istanbul ignore next */
        cov_sa5xt6wt7().b[19][0]++;
        cov_sa5xt6wt7().s[50]++;
        return conversationMatches[0].id;
      } else
      /* istanbul ignore next */
      {
        cov_sa5xt6wt7().b[19][1]++;
      }
    }
    // Legacy fallback: Look in messages table
    const {
      data: legacyData,
      error: legacyError
    } =
    /* istanbul ignore next */
    (cov_sa5xt6wt7().s[51]++, await supabase_1.supabase.from('messages').select('conversation_id').or(`and(sender_id.eq.${userA},recipient_id.eq.${userB}),and(sender_id.eq.${userB},recipient_id.eq.${userA})`).order('created_at', {
      ascending: false
    }).limit(1));
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[52]++;
    if (legacyError) {
      /* istanbul ignore next */
      cov_sa5xt6wt7().b[20][0]++;
      cov_sa5xt6wt7().s[53]++;
      console.error('[messagingService/findDirectConversation] legacy error', legacyError);
      /* istanbul ignore next */
      cov_sa5xt6wt7().s[54]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_sa5xt6wt7().b[20][1]++;
    }
    cov_sa5xt6wt7().s[55]++;
    if (
    /* istanbul ignore next */
    (cov_sa5xt6wt7().b[22][0]++, legacyData) &&
    /* istanbul ignore next */
    (cov_sa5xt6wt7().b[22][1]++, legacyData.length > 0)) {
      /* istanbul ignore next */
      cov_sa5xt6wt7().b[21][0]++;
      cov_sa5xt6wt7().s[56]++;
      return legacyData[0].conversation_id;
    } else
    /* istanbul ignore next */
    {
      cov_sa5xt6wt7().b[21][1]++;
    }
    cov_sa5xt6wt7().s[57]++;
    return null;
  } catch (error) {
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[58]++;
    console.error('[messagingService/findDirectConversation] exception', error);
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[59]++;
    return null;
  }
};
/* istanbul ignore next */
cov_sa5xt6wt7().s[60]++;
exports.findDirectConversation = findDirectConversation;
/**
 * Create a direct conversation between two users.
 * This function creates the conversation record, adds participants,
 * but does NOT send any messages.
 * @param userA First user id
 * @param userB Second user id
 * @returns The conversation ID
 */
/**
 * Generic conversation creation function that handles both direct and group conversations.
 * @param {Object} params - The conversation parameters
 * @param {string} params.userId - The ID of the user creating the conversation
 * @param {string[]} params.participantIds - Array of user IDs to include (for direct conversations, should contain one ID)
 * @param {boolean} params.isGroup - Whether this is a group conversation
 * @param {string} [params.showId] - Optional show ID for show-specific groups
 * @returns {Promise<string>} The conversation ID
 */
/* istanbul ignore next */
cov_sa5xt6wt7().s[61]++;
const createConversation = async params => {
  /* istanbul ignore next */
  cov_sa5xt6wt7().f[13]++;
  cov_sa5xt6wt7().s[62]++;
  try {
    const {
      userId,
      participantIds,
      isGroup =
      /* istanbul ignore next */
      (cov_sa5xt6wt7().b[23][0]++, false),
      showId
    } =
    /* istanbul ignore next */
    (cov_sa5xt6wt7().s[63]++, params);
    // Direct conversation (between two users)
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[64]++;
    if (
    /* istanbul ignore next */
    (cov_sa5xt6wt7().b[25][0]++, !isGroup) &&
    /* istanbul ignore next */
    (cov_sa5xt6wt7().b[25][1]++, participantIds.length === 1)) {
      /* istanbul ignore next */
      cov_sa5xt6wt7().b[24][0]++;
      cov_sa5xt6wt7().s[65]++;
      return await (0, exports.createDirectConversation)(userId, participantIds[0]);
    } else
    /* istanbul ignore next */
    {
      cov_sa5xt6wt7().b[24][1]++;
    }
    // Group conversation
    cov_sa5xt6wt7().s[66]++;
    if (
    /* istanbul ignore next */
    (cov_sa5xt6wt7().b[27][0]++, isGroup) ||
    /* istanbul ignore next */
    (cov_sa5xt6wt7().b[27][1]++, participantIds.length > 1)) {
      /* istanbul ignore next */
      cov_sa5xt6wt7().b[26][0]++;
      cov_sa5xt6wt7().s[67]++;
      return await (0, exports.createGroupConversation)(userId, participantIds, showId);
    } else
    /* istanbul ignore next */
    {
      cov_sa5xt6wt7().b[26][1]++;
    }
    cov_sa5xt6wt7().s[68]++;
    throw new Error('Invalid conversation parameters');
  } catch (error) {
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[69]++;
    console.error('[messagingService/createConversation] exception', error);
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[70]++;
    throw error;
  }
};
/* istanbul ignore next */
cov_sa5xt6wt7().s[71]++;
exports.createConversation = createConversation;
/* istanbul ignore next */
cov_sa5xt6wt7().s[72]++;
const createDirectConversation = async (userA, userB) => {
  /* istanbul ignore next */
  cov_sa5xt6wt7().f[14]++;
  cov_sa5xt6wt7().s[73]++;
  try {
    // First check if conversation already exists
    const existingConversationId =
    /* istanbul ignore next */
    (cov_sa5xt6wt7().s[74]++, await (0, exports.findDirectConversation)(userA, userB));
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[75]++;
    if (existingConversationId) {
      /* istanbul ignore next */
      cov_sa5xt6wt7().b[28][0]++;
      cov_sa5xt6wt7().s[76]++;
      return existingConversationId;
    } else
    /* istanbul ignore next */
    {
      cov_sa5xt6wt7().b[28][1]++;
    }
    // Create a new conversation
    const {
      data: conversationData,
      error: conversationError
    } =
    /* istanbul ignore next */
    (cov_sa5xt6wt7().s[77]++, await supabase_1.supabase.from('conversations').insert({
      type: 'direct',
      created_at: new Date().toISOString()
    }).select().single());
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[78]++;
    if (
    /* istanbul ignore next */
    (cov_sa5xt6wt7().b[30][0]++, conversationError) ||
    /* istanbul ignore next */
    (cov_sa5xt6wt7().b[30][1]++, !conversationData)) {
      /* istanbul ignore next */
      cov_sa5xt6wt7().b[29][0]++;
      cov_sa5xt6wt7().s[79]++;
      console.error('[messagingService/createDirectConversation] conversation error', conversationError);
      /* istanbul ignore next */
      cov_sa5xt6wt7().s[80]++;
      throw new Error('Failed to create conversation');
    } else
    /* istanbul ignore next */
    {
      cov_sa5xt6wt7().b[29][1]++;
    }
    const conversationId =
    /* istanbul ignore next */
    (cov_sa5xt6wt7().s[81]++, conversationData.id);
    // Add participants
    const participants =
    /* istanbul ignore next */
    (cov_sa5xt6wt7().s[82]++, [{
      conversation_id: conversationId,
      user_id: userA
    }, {
      conversation_id: conversationId,
      user_id: userB
    }]);
    // Fetch user profiles to get display names and photos
    const {
      data: profiles
    } =
    /* istanbul ignore next */
    (cov_sa5xt6wt7().s[83]++, await supabase_1.supabase.from('profiles').select('id, full_name, avatar_url').in('id', [userA, userB]));
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[84]++;
    if (profiles) {
      /* istanbul ignore next */
      cov_sa5xt6wt7().b[31][0]++;
      cov_sa5xt6wt7().s[85]++;
      participants.forEach((p, i) => {
        /* istanbul ignore next */
        cov_sa5xt6wt7().f[15]++;
        const profile =
        /* istanbul ignore next */
        (cov_sa5xt6wt7().s[86]++, profiles.find(prof => {
          /* istanbul ignore next */
          cov_sa5xt6wt7().f[16]++;
          cov_sa5xt6wt7().s[87]++;
          return prof.id === p.user_id;
        }));
        /* istanbul ignore next */
        cov_sa5xt6wt7().s[88]++;
        if (profile) {
          /* istanbul ignore next */
          cov_sa5xt6wt7().b[32][0]++;
          cov_sa5xt6wt7().s[89]++;
          participants[i] = {
            ...p,
            display_name: profile.full_name,
            photo_url: profile.avatar_url
          };
        } else
        /* istanbul ignore next */
        {
          cov_sa5xt6wt7().b[32][1]++;
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_sa5xt6wt7().b[31][1]++;
    }
    const {
      error: participantsError
    } =
    /* istanbul ignore next */
    (cov_sa5xt6wt7().s[90]++, await supabase_1.supabase.from('conversation_participants').insert(participants));
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[91]++;
    if (participantsError) {
      /* istanbul ignore next */
      cov_sa5xt6wt7().b[33][0]++;
      cov_sa5xt6wt7().s[92]++;
      console.error('[messagingService/createDirectConversation] participants error', participantsError);
      // We created the conversation but failed to add participants
      // This is a partial failure, but we still return the conversation ID
      // A cleanup job could remove orphaned conversations
    } else
    /* istanbul ignore next */
    {
      cov_sa5xt6wt7().b[33][1]++;
    }
    cov_sa5xt6wt7().s[93]++;
    return conversationId;
  } catch (error) {
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[94]++;
    console.error('[messagingService/createDirectConversation] exception', error);
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[95]++;
    throw error;
  }
};
/* istanbul ignore next */
cov_sa5xt6wt7().s[96]++;
exports.createDirectConversation = createDirectConversation;
/**
 * Creates a group conversation for broadcasting messages.
 * @param creatorId The ID of the user creating the group
 * @param participants Array of user IDs to include in the group
 * @param showId Optional Show ID if this is a show-specific group
 * @returns The conversation ID
 */
/* istanbul ignore next */
cov_sa5xt6wt7().s[97]++;
const createGroupConversation = async (creatorId, participants, showId) => {
  /* istanbul ignore next */
  cov_sa5xt6wt7().f[17]++;
  cov_sa5xt6wt7().s[98]++;
  try {
    // Create a new group conversation
    const {
      data: conversationData,
      error: conversationError
    } =
    /* istanbul ignore next */
    (cov_sa5xt6wt7().s[99]++, await supabase_1.supabase.from('conversations').insert({
      type: showId ?
      /* istanbul ignore next */
      (cov_sa5xt6wt7().b[34][0]++, 'show') :
      /* istanbul ignore next */
      (cov_sa5xt6wt7().b[34][1]++, 'group'),
      show_id:
      /* istanbul ignore next */
      (cov_sa5xt6wt7().b[35][0]++, showId) ||
      /* istanbul ignore next */
      (cov_sa5xt6wt7().b[35][1]++, null),
      created_at: new Date().toISOString()
    }).select().single());
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[100]++;
    if (
    /* istanbul ignore next */
    (cov_sa5xt6wt7().b[37][0]++, conversationError) ||
    /* istanbul ignore next */
    (cov_sa5xt6wt7().b[37][1]++, !conversationData)) {
      /* istanbul ignore next */
      cov_sa5xt6wt7().b[36][0]++;
      cov_sa5xt6wt7().s[101]++;
      console.error('[messagingService/createGroupConversation] conversation error', conversationError);
      /* istanbul ignore next */
      cov_sa5xt6wt7().s[102]++;
      throw new Error('Failed to create group conversation');
    } else
    /* istanbul ignore next */
    {
      cov_sa5xt6wt7().b[36][1]++;
    }
    const conversationId =
    /* istanbul ignore next */
    (cov_sa5xt6wt7().s[103]++, conversationData.id);
    // Always include the creator in the participants list
    const allParticipantIds =
    /* istanbul ignore next */
    (cov_sa5xt6wt7().s[104]++, [...new Set([creatorId, ...participants])]);
    // Fetch user profiles for all participants
    const {
      data: profiles
    } =
    /* istanbul ignore next */
    (cov_sa5xt6wt7().s[105]++, await supabase_1.supabase.from('profiles').select('id, full_name, avatar_url').in('id', allParticipantIds));
    // Create participant records
    const participantRecords =
    /* istanbul ignore next */
    (cov_sa5xt6wt7().s[106]++, allParticipantIds.map(userId => {
      /* istanbul ignore next */
      cov_sa5xt6wt7().f[18]++;
      const profile =
      /* istanbul ignore next */
      (cov_sa5xt6wt7().s[107]++, profiles?.find(p => {
        /* istanbul ignore next */
        cov_sa5xt6wt7().f[19]++;
        cov_sa5xt6wt7().s[108]++;
        return p.id === userId;
      }));
      /* istanbul ignore next */
      cov_sa5xt6wt7().s[109]++;
      return {
        conversation_id: conversationId,
        user_id: userId,
        display_name: profile?.full_name,
        photo_url: profile?.avatar_url,
        // Only the creator has read all messages initially
        unread_count: userId === creatorId ?
        /* istanbul ignore next */
        (cov_sa5xt6wt7().b[38][0]++, 0) :
        /* istanbul ignore next */
        (cov_sa5xt6wt7().b[38][1]++, 1)
      };
    }));
    // Insert all participants
    const {
      error: participantsError
    } =
    /* istanbul ignore next */
    (cov_sa5xt6wt7().s[110]++, await supabase_1.supabase.from('conversation_participants').insert(participantRecords));
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[111]++;
    if (participantsError) {
      /* istanbul ignore next */
      cov_sa5xt6wt7().b[39][0]++;
      cov_sa5xt6wt7().s[112]++;
      console.error('[messagingService/createGroupConversation] participants error', participantsError);
      // Continue despite partial failure
    } else
    /* istanbul ignore next */
    {
      cov_sa5xt6wt7().b[39][1]++;
    }
    cov_sa5xt6wt7().s[113]++;
    return conversationId;
  } catch (error) {
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[114]++;
    console.error('[messagingService/createGroupConversation] exception', error);
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[115]++;
    throw error;
  }
};
/* istanbul ignore next */
cov_sa5xt6wt7().s[116]++;
exports.createGroupConversation = createGroupConversation;
/**
 * Start a new conversation from a profile view.
 * Creates the conversation if needed, sends the initial message,
 * and returns the conversation ID for navigation.
 *
 * @param currentUserId The ID of the current user initiating the conversation
 * @param profileUserId The ID of the user whose profile is being viewed
 * @param initialMessage The first message to send
 * @returns Conversation ID for navigation
 */
/* istanbul ignore next */
cov_sa5xt6wt7().s[117]++;
const startConversationFromProfile = async (currentUserId, profileUserId, initialMessage) => {
  /* istanbul ignore next */
  cov_sa5xt6wt7().f[20]++;
  cov_sa5xt6wt7().s[118]++;
  try {
    // Check if the recipient can receive messages
    const recipientRole =
    /* istanbul ignore next */
    (cov_sa5xt6wt7().s[119]++, await userRoleService.getUserRole(profileUserId));
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[120]++;
    if (!recipientRole) {
      /* istanbul ignore next */
      cov_sa5xt6wt7().b[40][0]++;
      cov_sa5xt6wt7().s[121]++;
      throw new Error('User not found');
    } else
    /* istanbul ignore next */
    {
      cov_sa5xt6wt7().b[40][1]++;
    }
    cov_sa5xt6wt7().s[122]++;
    if (
    /* istanbul ignore next */
    (cov_sa5xt6wt7().b[42][0]++, !userRoleService.IS_TEST_MODE) &&
    /* istanbul ignore next */
    (cov_sa5xt6wt7().b[42][1]++, !userRoleService.canUserReceiveMessage(recipientRole))) {
      /* istanbul ignore next */
      cov_sa5xt6wt7().b[41][0]++;
      cov_sa5xt6wt7().s[123]++;
      throw new Error('This user cannot receive messages due to their role');
    } else
    /* istanbul ignore next */
    {
      cov_sa5xt6wt7().b[41][1]++;
    }
    // Create or find conversation
    const conversationId =
    /* istanbul ignore next */
    (cov_sa5xt6wt7().s[124]++, await (0, exports.createDirectConversation)(currentUserId, profileUserId));
    // Send initial message
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[125]++;
    await (0, exports.sendMessage)(currentUserId, profileUserId, initialMessage, conversationId);
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[126]++;
    return conversationId;
  } catch (error) {
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[127]++;
    console.error('[messagingService/startConversationFromProfile]', error);
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[128]++;
    throw error;
  }
};
/* istanbul ignore next */
cov_sa5xt6wt7().s[129]++;
exports.startConversationFromProfile = startConversationFromProfile;
/**
 * Get participants (excluding optional filters) of a conversation.
 * Returned data structure mirrors Supabase `.from().select()` call so
 * callers can destructure `{ data, error }` just like a direct query.
 *
 * NOTE: We intentionally keep this lightweight – any additional profile
 * fields should be added by callers via `select()` if/when needed.
 *
 * @param conversationId The conversation to fetch participants for
 */
/* istanbul ignore next */
cov_sa5xt6wt7().s[130]++;
const getConversationParticipants = async conversationId => {
  /* istanbul ignore next */
  cov_sa5xt6wt7().f[21]++;
  cov_sa5xt6wt7().s[131]++;
  return supabase_1.supabase.from('conversation_participants').select('user_id, display_name, photo_url').eq('conversation_id', conversationId);
};
/* istanbul ignore next */
cov_sa5xt6wt7().s[132]++;
exports.getConversationParticipants = getConversationParticipants;
/**
 * Get all conversations for the current user
 * @param userId The ID of the current user
 * @returns Array of conversations with last message and unread count
 */
/* istanbul ignore next */
cov_sa5xt6wt7().s[133]++;
const getConversations = async userId => {
  /* istanbul ignore next */
  cov_sa5xt6wt7().f[22]++;
  cov_sa5xt6wt7().s[134]++;
  try {
    // Try to use the RPC function first (most efficient)
    const {
      data: conversationsData,
      error: conversationsError
    } =
    /* istanbul ignore next */
    (cov_sa5xt6wt7().s[135]++, await supabase_1.supabase.rpc('get_user_conversations', {
      user_id: userId
    }));
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[136]++;
    if (
    /* istanbul ignore next */
    (cov_sa5xt6wt7().b[44][0]++, !conversationsError) &&
    /* istanbul ignore next */
    (cov_sa5xt6wt7().b[44][1]++, conversationsData)) {
      /* istanbul ignore next */
      cov_sa5xt6wt7().b[43][0]++;
      cov_sa5xt6wt7().s[137]++;
      // console.log('Got conversations from RPC:', conversationsData);
      return conversationsData;
    } else
    /* istanbul ignore next */
    {
      cov_sa5xt6wt7().b[43][1]++;
    }
    cov_sa5xt6wt7().s[138]++;
    console.error('Error fetching conversations with RPC, falling back to query:', conversationsError);
    // Fallback to querying directly
    const {
      data: participationsData,
      error: participationsError
    } =
    /* istanbul ignore next */
    (cov_sa5xt6wt7().s[139]++, await supabase_1.supabase.from('conversation_participants').select(`
        conversation_id,
        unread_count,
        conversations!inner(
          id, 
          type, 
          show_id, 
          last_message_text, 
          last_message_timestamp
        )
      `).eq('user_id', userId));
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[140]++;
    if (participationsError) {
      /* istanbul ignore next */
      cov_sa5xt6wt7().b[45][0]++;
      cov_sa5xt6wt7().s[141]++;
      console.error('Error fetching conversations', participationsError);
      /* istanbul ignore next */
      cov_sa5xt6wt7().s[142]++;
      throw new Error('Failed to fetch conversations');
    } else
    /* istanbul ignore next */
    {
      cov_sa5xt6wt7().b[45][1]++;
    }
    cov_sa5xt6wt7().s[143]++;
    if (
    /* istanbul ignore next */
    (cov_sa5xt6wt7().b[47][0]++, !participationsData) ||
    /* istanbul ignore next */
    (cov_sa5xt6wt7().b[47][1]++, participationsData.length === 0)) {
      /* istanbul ignore next */
      cov_sa5xt6wt7().b[46][0]++;
      cov_sa5xt6wt7().s[144]++;
      return [];
    } else
    /* istanbul ignore next */
    {
      cov_sa5xt6wt7().b[46][1]++;
    }
    // Get all conversation IDs
    const conversationIds =
    /* istanbul ignore next */
    (cov_sa5xt6wt7().s[145]++, participationsData.map(p => {
      /* istanbul ignore next */
      cov_sa5xt6wt7().f[23]++;
      cov_sa5xt6wt7().s[146]++;
      return p.conversation_id;
    }));
    // Get all participants for these conversations
    const {
      data: allParticipantsData,
      error: allParticipantsError
    } =
    /* istanbul ignore next */
    (cov_sa5xt6wt7().s[147]++, await supabase_1.supabase.from('conversation_participants').select(`
        conversation_id,
        user_id,
        display_name,
        photo_url
      `).in('conversation_id', conversationIds).neq('user_id', userId));
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[148]++;
    if (allParticipantsError) {
      /* istanbul ignore next */
      cov_sa5xt6wt7().b[48][0]++;
      cov_sa5xt6wt7().s[149]++;
      console.error('Error fetching participants', allParticipantsError);
      // Continue with partial data
    } else
    /* istanbul ignore next */
    {
      cov_sa5xt6wt7().b[48][1]++;
    }
    // Group participants by conversation
    const participantsByConversation =
    /* istanbul ignore next */
    (cov_sa5xt6wt7().s[150]++, {});
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[151]++;
    if (allParticipantsData) {
      /* istanbul ignore next */
      cov_sa5xt6wt7().b[49][0]++;
      cov_sa5xt6wt7().s[152]++;
      allParticipantsData.forEach(participant => {
        /* istanbul ignore next */
        cov_sa5xt6wt7().f[24]++;
        cov_sa5xt6wt7().s[153]++;
        if (!participantsByConversation[participant.conversation_id]) {
          /* istanbul ignore next */
          cov_sa5xt6wt7().b[50][0]++;
          cov_sa5xt6wt7().s[154]++;
          participantsByConversation[participant.conversation_id] = [];
        } else
        /* istanbul ignore next */
        {
          cov_sa5xt6wt7().b[50][1]++;
        }
        cov_sa5xt6wt7().s[155]++;
        participantsByConversation[participant.conversation_id].push({
          user_id: participant.user_id,
          display_name: participant.display_name,
          photo_url: participant.photo_url
        });
      });
    } else
    /* istanbul ignore next */
    {
      cov_sa5xt6wt7().b[49][1]++;
    }
    // Build conversations data structure
    const conversations =
    /* istanbul ignore next */
    (cov_sa5xt6wt7().s[156]++, participationsData.map(p => {
      /* istanbul ignore next */
      cov_sa5xt6wt7().f[25]++;
      const convo =
      /* istanbul ignore next */
      (cov_sa5xt6wt7().s[157]++, p.conversations);
      /* istanbul ignore next */
      cov_sa5xt6wt7().s[158]++;
      return {
        id: convo.id,
        type: convo.type,
        show_id: convo.show_id,
        participant_count: (
        /* istanbul ignore next */
        (cov_sa5xt6wt7().b[51][0]++, participantsByConversation[convo.id]?.length) ||
        /* istanbul ignore next */
        (cov_sa5xt6wt7().b[51][1]++, 0)) + 1,
        // +1 for self
        last_message_text: convo.last_message_text,
        last_message_timestamp: convo.last_message_timestamp,
        unread_count:
        /* istanbul ignore next */
        (cov_sa5xt6wt7().b[52][0]++, p.unread_count) ||
        /* istanbul ignore next */
        (cov_sa5xt6wt7().b[52][1]++, 0),
        participants:
        /* istanbul ignore next */
        (cov_sa5xt6wt7().b[53][0]++, participantsByConversation[convo.id]) ||
        /* istanbul ignore next */
        (cov_sa5xt6wt7().b[53][1]++, [])
      };
    }));
    // Sort by most recent message
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[159]++;
    return conversations.sort((a, b) => {
      /* istanbul ignore next */
      cov_sa5xt6wt7().f[26]++;
      const timeA =
      /* istanbul ignore next */
      (cov_sa5xt6wt7().s[160]++, a.last_message_timestamp ?
      /* istanbul ignore next */
      (cov_sa5xt6wt7().b[54][0]++, new Date(a.last_message_timestamp).getTime()) :
      /* istanbul ignore next */
      (cov_sa5xt6wt7().b[54][1]++, 0));
      const timeB =
      /* istanbul ignore next */
      (cov_sa5xt6wt7().s[161]++, b.last_message_timestamp ?
      /* istanbul ignore next */
      (cov_sa5xt6wt7().b[55][0]++, new Date(b.last_message_timestamp).getTime()) :
      /* istanbul ignore next */
      (cov_sa5xt6wt7().b[55][1]++, 0));
      /* istanbul ignore next */
      cov_sa5xt6wt7().s[162]++;
      return timeB - timeA;
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[163]++;
    console.error('Error in getConversations:', error);
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[164]++;
    throw error;
  }
};
/* istanbul ignore next */
cov_sa5xt6wt7().s[165]++;
exports.getConversations = getConversations;
// ---------------------------------------------------------------------------
//  Message functions
// ---------------------------------------------------------------------------
/**
 * Get messages for a specific conversation
 * @param conversationId The ID of the conversation
 * @returns Array of messages in the conversation
 */
/* istanbul ignore next */
cov_sa5xt6wt7().s[166]++;
const getMessages = async conversationId => {
  /* istanbul ignore next */
  cov_sa5xt6wt7().f[27]++;
  cov_sa5xt6wt7().s[167]++;
  try {
    // Get messages with joined profiles
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_sa5xt6wt7().s[168]++, await supabase_1.supabase.from('messages').select(`
        id,
        conversation_id,
        sender_id,
        message_text,
        created_at,
        read_by_user_ids,
        profiles!sender_profile:sender_id(
          id,
          username,
          full_name,
          avatar_url
        )
      `).eq('conversation_id', conversationId).order('created_at', {
      ascending: true
    }));
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[169]++;
    if (error) {
      /* istanbul ignore next */
      cov_sa5xt6wt7().b[56][0]++;
      cov_sa5xt6wt7().s[170]++;
      console.error('Error fetching messages:', error);
      /* istanbul ignore next */
      cov_sa5xt6wt7().s[171]++;
      throw new Error('Failed to fetch messages');
    } else
    /* istanbul ignore next */
    {
      cov_sa5xt6wt7().b[56][1]++;
    }
    cov_sa5xt6wt7().s[172]++;
    return /* istanbul ignore next */(cov_sa5xt6wt7().b[57][0]++, data) ||
    /* istanbul ignore next */
    (cov_sa5xt6wt7().b[57][1]++, []);
  } catch (error) {
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[173]++;
    console.error('Error in getMessages:', error);
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[174]++;
    throw error;
  }
};
/* istanbul ignore next */
cov_sa5xt6wt7().s[175]++;
exports.getMessages = getMessages;
/**
 * Send a new message in a conversation
 * @param senderId The ID of the sender
 * @param recipientId The ID of the recipient (for direct messages)
 * @param messageText The message content
 * @param conversationId The existing conversation ID (optional)
 * @returns The newly created message
 */
/* istanbul ignore next */
cov_sa5xt6wt7().s[176]++;
const sendMessage = async (senderId, recipientId, messageText, conversationId) => {
  /* istanbul ignore next */
  cov_sa5xt6wt7().f[28]++;
  cov_sa5xt6wt7().s[177]++;
  try {
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[178]++;
    /* ------------------------------------------------------------------
     * Role-based permission checks
     * ------------------------------------------------------------------ */
    if (!userRoleService.IS_TEST_MODE) {
      /* istanbul ignore next */
      cov_sa5xt6wt7().b[58][0]++;
      const [senderRole, recipientRole] =
      /* istanbul ignore next */
      (cov_sa5xt6wt7().s[179]++, await Promise.all([userRoleService.getUserRole(senderId), userRoleService.getUserRole(recipientId)]));
      /* istanbul ignore next */
      cov_sa5xt6wt7().s[180]++;
      if (
      /* istanbul ignore next */
      (cov_sa5xt6wt7().b[60][0]++, !senderRole) ||
      /* istanbul ignore next */
      (cov_sa5xt6wt7().b[60][1]++, !recipientRole)) {
        /* istanbul ignore next */
        cov_sa5xt6wt7().b[59][0]++;
        cov_sa5xt6wt7().s[181]++;
        throw new Error('Unable to determine user roles');
      } else
      /* istanbul ignore next */
      {
        cov_sa5xt6wt7().b[59][1]++;
      }
      // If conversation already exists the sender might just be replying
      // – apply `canReply` check in that case.
      cov_sa5xt6wt7().s[182]++;
      if (conversationId) {
        /* istanbul ignore next */
        cov_sa5xt6wt7().b[61][0]++;
        cov_sa5xt6wt7().s[183]++;
        if (!userRoleService.canReplyToMessage(senderRole)) {
          /* istanbul ignore next */
          cov_sa5xt6wt7().b[62][0]++;
          cov_sa5xt6wt7().s[184]++;
          throw new Error('Your role does not allow replying to messages');
        } else
        /* istanbul ignore next */
        {
          cov_sa5xt6wt7().b[62][1]++;
        }
      } else {
        /* istanbul ignore next */
        cov_sa5xt6wt7().b[61][1]++;
        cov_sa5xt6wt7().s[185]++;
        // New DM – validate sender→recipient rule
        if (!userRoleService.canSendDirectMessage(senderRole, recipientRole)) {
          /* istanbul ignore next */
          cov_sa5xt6wt7().b[63][0]++;
          cov_sa5xt6wt7().s[186]++;
          throw new Error('You are not allowed to start a conversation with this user');
        } else
        /* istanbul ignore next */
        {
          cov_sa5xt6wt7().b[63][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_sa5xt6wt7().b[58][1]++;
    }
    // Ensure we have a conversation ID
    const finalConversationId =
    /* istanbul ignore next */
    (cov_sa5xt6wt7().s[187]++,
    /* istanbul ignore next */
    (cov_sa5xt6wt7().b[64][0]++, conversationId) ||
    /* istanbul ignore next */
    (cov_sa5xt6wt7().b[64][1]++, await (0, exports.createDirectConversation)(senderId, recipientId)));
    // Insert the message
    const {
      data: newMessage,
      error: messageError
    } =
    /* istanbul ignore next */
    (cov_sa5xt6wt7().s[188]++, await supabase_1.supabase.from('messages').insert({
      conversation_id: finalConversationId,
      sender_id: senderId,
      message_text: messageText,
      read_by_user_ids: [senderId] // Sender has automatically read their own message
    }).select().single());
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[189]++;
    if (messageError) {
      /* istanbul ignore next */
      cov_sa5xt6wt7().b[65][0]++;
      cov_sa5xt6wt7().s[190]++;
      console.error('Error sending message:', messageError);
      /* istanbul ignore next */
      cov_sa5xt6wt7().s[191]++;
      throw new Error('Failed to send message');
    } else
    /* istanbul ignore next */
    {
      cov_sa5xt6wt7().b[65][1]++;
    }
    // The conversation last message update and participant unread count
    // update should happen via database triggers, but we'll update manually
    // as a fallback in case the trigger fails
    cov_sa5xt6wt7().s[192]++;
    try {
      /* istanbul ignore next */
      cov_sa5xt6wt7().s[193]++;
      // Update the conversation's last message info
      await supabase_1.supabase.from('conversations').update({
        last_message_text: messageText,
        last_message_timestamp: new Date().toISOString()
      }).eq('id', finalConversationId);
      // Increment unread count for recipients
      /* istanbul ignore next */
      cov_sa5xt6wt7().s[194]++;
      await supabase_1.supabase.from('conversation_participants').update({
        unread_count: supabase_1.supabase.rpc('increment_unread')
      }).eq('conversation_id', finalConversationId).neq('user_id', senderId);
    } catch (updateError) {
      /* istanbul ignore next */
      cov_sa5xt6wt7().s[195]++;
      console.error('Failed to update conversation metadata:', updateError);
      // Continue since the message was sent successfully
    }
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[196]++;
    return newMessage;
  } catch (error) {
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[197]++;
    console.error('Error in sendMessage:', error);
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[198]++;
    throw error;
  }
};
/* istanbul ignore next */
cov_sa5xt6wt7().s[199]++;
exports.sendMessage = sendMessage;
/**
 * Send a message to a group conversation
 * @param senderId The ID of the sender
 * @param conversationId The ID of the group conversation
 * @param messageText The message content
 * @returns The newly created message
 */
/* istanbul ignore next */
cov_sa5xt6wt7().s[200]++;
const sendGroupMessage = async (senderId, conversationId, messageText) => {
  /* istanbul ignore next */
  cov_sa5xt6wt7().f[29]++;
  cov_sa5xt6wt7().s[201]++;
  try {
    // Check if the user is part of this conversation
    const {
      data: participantCheck,
      error: participantCheckError
    } =
    /* istanbul ignore next */
    (cov_sa5xt6wt7().s[202]++, await supabase_1.supabase.from('conversation_participants').select('user_id').eq('conversation_id', conversationId).eq('user_id', senderId).single());
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[203]++;
    if (
    /* istanbul ignore next */
    (cov_sa5xt6wt7().b[67][0]++, participantCheckError) ||
    /* istanbul ignore next */
    (cov_sa5xt6wt7().b[67][1]++, !participantCheck)) {
      /* istanbul ignore next */
      cov_sa5xt6wt7().b[66][0]++;
      cov_sa5xt6wt7().s[204]++;
      throw new Error('You are not a participant in this conversation');
    } else
    /* istanbul ignore next */
    {
      cov_sa5xt6wt7().b[66][1]++;
    }
    // Insert the message
    const {
      data: newMessage,
      error: messageError
    } =
    /* istanbul ignore next */
    (cov_sa5xt6wt7().s[205]++, await supabase_1.supabase.from('messages').insert({
      conversation_id: conversationId,
      sender_id: senderId,
      message_text: messageText,
      read_by_user_ids: [senderId] // Sender has automatically read their own message
    }).select().single());
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[206]++;
    if (messageError) {
      /* istanbul ignore next */
      cov_sa5xt6wt7().b[68][0]++;
      cov_sa5xt6wt7().s[207]++;
      console.error('Error sending group message:', messageError);
      /* istanbul ignore next */
      cov_sa5xt6wt7().s[208]++;
      throw new Error('Failed to send message');
    } else
    /* istanbul ignore next */
    {
      cov_sa5xt6wt7().b[68][1]++;
    }
    // Update the conversation's last message info
    cov_sa5xt6wt7().s[209]++;
    await supabase_1.supabase.from('conversations').update({
      last_message_text: messageText,
      last_message_timestamp: new Date().toISOString()
    }).eq('id', conversationId);
    // Increment unread count for all other participants
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[210]++;
    await supabase_1.supabase.from('conversation_participants').update({
      unread_count: supabase_1.supabase.rpc('increment_unread')
    }).eq('conversation_id', conversationId).neq('user_id', senderId);
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[211]++;
    return newMessage;
  } catch (error) {
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[212]++;
    console.error('Error in sendGroupMessage:', error);
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[213]++;
    throw error;
  }
};
/* istanbul ignore next */
cov_sa5xt6wt7().s[214]++;
exports.sendGroupMessage = sendGroupMessage;
/**
 * Send a broadcast message to multiple recipients based on their roles.
 * This creates a group conversation and sends the initial message.
 *
 * @param params Object containing senderId, message, recipientRoles, and optional showId
 * @returns The conversation ID of the newly created group
 */
/* istanbul ignore next */
cov_sa5xt6wt7().s[215]++;
const sendBroadcastMessage = async params => {
  /* istanbul ignore next */
  cov_sa5xt6wt7().f[30]++;
  const {
    senderId,
    message,
    recipientRoles,
    showId
  } =
  /* istanbul ignore next */
  (cov_sa5xt6wt7().s[216]++, params);
  /* istanbul ignore next */
  cov_sa5xt6wt7().s[217]++;
  try {
    // ------------------------------------------------------------------
    // 1. Call the edge function which performs all permission / quota work
    // ------------------------------------------------------------------
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_sa5xt6wt7().s[218]++, await supabase_1.supabase.functions.invoke('send-broadcast', {
      body: {
        sender_id: senderId,
        message,
        recipient_roles: recipientRoles,
        show_id: showId,
        is_pre_show: params.isPreShow
      }
    }));
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[219]++;
    if (error) {
      /* istanbul ignore next */
      cov_sa5xt6wt7().b[69][0]++;
      cov_sa5xt6wt7().s[220]++;
      console.error('[messagingService/sendBroadcastMessage] edge-function error', error);
      /* istanbul ignore next */
      cov_sa5xt6wt7().s[221]++;
      throw new Error(
      /* istanbul ignore next */
      (cov_sa5xt6wt7().b[70][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_sa5xt6wt7().b[70][1]++, 'Failed to send broadcast message'));
    } else
    /* istanbul ignore next */
    {
      cov_sa5xt6wt7().b[69][1]++;
    }
    cov_sa5xt6wt7().s[222]++;
    if (!data?.conversation_id) {
      /* istanbul ignore next */
      cov_sa5xt6wt7().b[71][0]++;
      cov_sa5xt6wt7().s[223]++;
      throw new Error('Unexpected response from broadcast service');
    } else
    /* istanbul ignore next */
    {
      cov_sa5xt6wt7().b[71][1]++;
    }
    cov_sa5xt6wt7().s[224]++;
    return data.conversation_id;
  } catch (error) {
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[225]++;
    console.error('Error in sendBroadcastMessage:', error);
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[226]++;
    throw error;
  }
};
/* istanbul ignore next */
cov_sa5xt6wt7().s[227]++;
exports.sendBroadcastMessage = sendBroadcastMessage;
// ---------------------------------------------------------------------------
//  Moderation helpers
// ---------------------------------------------------------------------------
/**
 * Soft delete / moderate a message.  Only show organisers (their shows)
 * or admins can perform this action (enforced server-side).
 */
/* istanbul ignore next */
cov_sa5xt6wt7().s[228]++;
const moderateMessage = async (moderatorId, messageId, reason =
/* istanbul ignore next */
(cov_sa5xt6wt7().b[72][0]++, 'Content violation')) => {
  /* istanbul ignore next */
  cov_sa5xt6wt7().f[31]++;
  cov_sa5xt6wt7().s[229]++;
  try {
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_sa5xt6wt7().s[230]++, await supabase_1.supabase.rpc('moderate_delete_message', {
      p_message_id: messageId,
      p_moderator_id: moderatorId,
      p_reason: reason
    }));
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[231]++;
    if (error) {
      /* istanbul ignore next */
      cov_sa5xt6wt7().b[73][0]++;
      cov_sa5xt6wt7().s[232]++;
      throw error;
    } else
    /* istanbul ignore next */
    {
      cov_sa5xt6wt7().b[73][1]++;
    }
    cov_sa5xt6wt7().s[233]++;
    return data;
  } catch (err) {
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[234]++;
    console.error('[messagingService/moderateMessage]', err);
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[235]++;
    return false;
  }
};
/* istanbul ignore next */
cov_sa5xt6wt7().s[236]++;
exports.moderateMessage = moderateMessage;
/**
 * Report a message as inappropriate.  Anyone in the conversation can report.
 */
/* istanbul ignore next */
cov_sa5xt6wt7().s[237]++;
const reportMessage = async (reporterId, messageId, reason) => {
  /* istanbul ignore next */
  cov_sa5xt6wt7().f[32]++;
  cov_sa5xt6wt7().s[238]++;
  try {
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_sa5xt6wt7().s[239]++, await supabase_1.supabase.rpc('report_message', {
      p_message_id: messageId,
      p_reporter_id: reporterId,
      p_reason: reason
    }));
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[240]++;
    if (error) {
      /* istanbul ignore next */
      cov_sa5xt6wt7().b[74][0]++;
      cov_sa5xt6wt7().s[241]++;
      throw error;
    } else
    /* istanbul ignore next */
    {
      cov_sa5xt6wt7().b[74][1]++;
    }
    cov_sa5xt6wt7().s[242]++;
    return data;
  } catch (err) {
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[243]++;
    console.error('[messagingService/reportMessage]', err);
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[244]++;
    return false;
  }
};
/* istanbul ignore next */
cov_sa5xt6wt7().s[245]++;
exports.reportMessage = reportMessage;
/**
 * Mark a single message as read
 * @param messageId The ID of the message
 * @param userId The ID of the current user
 * @returns Boolean indicating success
 */
/* istanbul ignore next */
cov_sa5xt6wt7().s[246]++;
const markMessageAsRead = async (messageId, userId) => {
  /* istanbul ignore next */
  cov_sa5xt6wt7().f[33]++;
  cov_sa5xt6wt7().s[247]++;
  try {
    // Check if the user is already in read_by_user_ids
    const {
      data: message
    } =
    /* istanbul ignore next */
    (cov_sa5xt6wt7().s[248]++, await supabase_1.supabase.from('messages').select('read_by_user_ids').eq('id', messageId).single());
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[249]++;
    if (!message) {
      /* istanbul ignore next */
      cov_sa5xt6wt7().b[75][0]++;
      cov_sa5xt6wt7().s[250]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_sa5xt6wt7().b[75][1]++;
    }
    cov_sa5xt6wt7().s[251]++;
    if (
    /* istanbul ignore next */
    (cov_sa5xt6wt7().b[77][0]++, message.read_by_user_ids) &&
    /* istanbul ignore next */
    (cov_sa5xt6wt7().b[77][1]++, message.read_by_user_ids.includes(userId))) {
      /* istanbul ignore next */
      cov_sa5xt6wt7().b[76][0]++;
      cov_sa5xt6wt7().s[252]++;
      // Already marked as read
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_sa5xt6wt7().b[76][1]++;
    }
    // Update read_by_user_ids
    const {
      error
    } =
    /* istanbul ignore next */
    (cov_sa5xt6wt7().s[253]++, await supabase_1.supabase.from('messages').update({
      read_by_user_ids: [...(
      /* istanbul ignore next */
      (cov_sa5xt6wt7().b[78][0]++, message.read_by_user_ids) ||
      /* istanbul ignore next */
      (cov_sa5xt6wt7().b[78][1]++, [])), userId]
    }).eq('id', messageId));
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[254]++;
    if (error) {
      /* istanbul ignore next */
      cov_sa5xt6wt7().b[79][0]++;
      cov_sa5xt6wt7().s[255]++;
      console.error('Error marking message as read:', error);
      /* istanbul ignore next */
      cov_sa5xt6wt7().s[256]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_sa5xt6wt7().b[79][1]++;
    }
    // Try to update unread count in conversation_participants
    cov_sa5xt6wt7().s[257]++;
    try {
      const {
        data: msgData
      } =
      /* istanbul ignore next */
      (cov_sa5xt6wt7().s[258]++, await supabase_1.supabase.from('messages').select('conversation_id').eq('id', messageId).single());
      /* istanbul ignore next */
      cov_sa5xt6wt7().s[259]++;
      if (msgData) {
        /* istanbul ignore next */
        cov_sa5xt6wt7().b[80][0]++;
        cov_sa5xt6wt7().s[260]++;
        await decrementUnreadCount(msgData.conversation_id, userId);
      } else
      /* istanbul ignore next */
      {
        cov_sa5xt6wt7().b[80][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_sa5xt6wt7().s[261]++;
      console.error('Error updating unread count:', error);
      // Continue since the message was marked as read
    }
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[262]++;
    return true;
  } catch (error) {
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[263]++;
    console.error('Error in markMessageAsRead:', error);
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[264]++;
    return false;
  }
};
/* istanbul ignore next */
cov_sa5xt6wt7().s[265]++;
exports.markMessageAsRead = markMessageAsRead;
/**
 * Mark all messages in a conversation as read
 * @param conversationId The ID of the conversation
 * @param userId The ID of the current user
 * @returns Number of messages marked as read
 */
/* istanbul ignore next */
cov_sa5xt6wt7().s[266]++;
const markConversationAsRead = async (conversationId, userId) => {
  /* istanbul ignore next */
  cov_sa5xt6wt7().f[34]++;
  cov_sa5xt6wt7().s[267]++;
  try {
    // First get all unread messages in the conversation
    const {
      data: messages
    } =
    /* istanbul ignore next */
    (cov_sa5xt6wt7().s[268]++, await supabase_1.supabase.from('messages').select('id, read_by_user_ids').eq('conversation_id', conversationId).not('read_by_user_ids', 'cs', `{${userId}}`));
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[269]++;
    if (
    /* istanbul ignore next */
    (cov_sa5xt6wt7().b[82][0]++, !messages) ||
    /* istanbul ignore next */
    (cov_sa5xt6wt7().b[82][1]++, messages.length === 0)) {
      /* istanbul ignore next */
      cov_sa5xt6wt7().b[81][0]++;
      cov_sa5xt6wt7().s[270]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_sa5xt6wt7().b[81][1]++;
    }
    // Update each message
    let updatedCount =
    /* istanbul ignore next */
    (cov_sa5xt6wt7().s[271]++, 0);
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[272]++;
    for (const message of messages) {
      const {
        error
      } =
      /* istanbul ignore next */
      (cov_sa5xt6wt7().s[273]++, await supabase_1.supabase.from('messages').update({
        read_by_user_ids: [...(
        /* istanbul ignore next */
        (cov_sa5xt6wt7().b[83][0]++, message.read_by_user_ids) ||
        /* istanbul ignore next */
        (cov_sa5xt6wt7().b[83][1]++, [])), userId]
      }).eq('id', message.id));
      /* istanbul ignore next */
      cov_sa5xt6wt7().s[274]++;
      if (!error) {
        /* istanbul ignore next */
        cov_sa5xt6wt7().b[84][0]++;
        cov_sa5xt6wt7().s[275]++;
        updatedCount++;
      } else
      /* istanbul ignore next */
      {
        cov_sa5xt6wt7().b[84][1]++;
      }
    }
    // Reset unread count in conversation_participants
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[276]++;
    if (updatedCount > 0) {
      /* istanbul ignore next */
      cov_sa5xt6wt7().b[85][0]++;
      cov_sa5xt6wt7().s[277]++;
      await supabase_1.supabase.from('conversation_participants').update({
        unread_count: 0
      }).eq('conversation_id', conversationId).eq('user_id', userId);
    } else
    /* istanbul ignore next */
    {
      cov_sa5xt6wt7().b[85][1]++;
    }
    cov_sa5xt6wt7().s[278]++;
    return updatedCount;
  } catch (error) {
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[279]++;
    console.error('Error in markConversationAsRead:', error);
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[280]++;
    throw error;
  }
};
/* istanbul ignore next */
cov_sa5xt6wt7().s[281]++;
exports.markConversationAsRead = markConversationAsRead;
/**
 * Helper function to decrement unread count for a user in a conversation
 */
/* istanbul ignore next */
cov_sa5xt6wt7().s[282]++;
const decrementUnreadCount = async (conversationId, userId) => {
  /* istanbul ignore next */
  cov_sa5xt6wt7().f[35]++;
  cov_sa5xt6wt7().s[283]++;
  try {
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[284]++;
    await supabase_1.supabase.from('conversation_participants').update({
      unread_count: supabase_1.supabase.rpc('decrement_unread')
    }).eq('conversation_id', conversationId).eq('user_id', userId);
  } catch (error) {
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[285]++;
    console.error('Error decrementing unread count:', error);
  }
};
/**
 * Subscribe to realtime messages for a conversation
 * @param conversationId The conversation to monitor
 * @param onNewMessage Callback function when new messages arrive
 * @returns Supabase channel subscription that caller should unsubscribe from
 */
/* istanbul ignore next */
cov_sa5xt6wt7().s[286]++;
const subscribeToMessages = (conversationId, onNewMessage) => {
  /* istanbul ignore next */
  cov_sa5xt6wt7().f[36]++;
  const channel =
  /* istanbul ignore next */
  (cov_sa5xt6wt7().s[287]++, supabase_1.supabase.channel(`messages:${conversationId}`).on('postgres_changes', {
    event: 'INSERT',
    schema: 'public',
    table: 'messages',
    filter: `conversation_id=eq.${conversationId}`
  }, payload => {
    /* istanbul ignore next */
    cov_sa5xt6wt7().f[37]++;
    cov_sa5xt6wt7().s[288]++;
    onNewMessage(payload.new);
  }).subscribe());
  /* istanbul ignore next */
  cov_sa5xt6wt7().s[289]++;
  return channel;
};
/* istanbul ignore next */
cov_sa5xt6wt7().s[290]++;
exports.subscribeToMessages = subscribeToMessages;
/**
 * Get total unread message count across all conversations
 * @param userId User ID to check for
 * @returns Total number of unread messages
 */
/* istanbul ignore next */
cov_sa5xt6wt7().s[291]++;
const getTotalUnreadCount = async userId => {
  /* istanbul ignore next */
  cov_sa5xt6wt7().f[38]++;
  cov_sa5xt6wt7().s[292]++;
  try {
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_sa5xt6wt7().s[293]++, await supabase_1.supabase.from('conversation_participants').select('unread_count').eq('user_id', userId));
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[294]++;
    if (error) {
      /* istanbul ignore next */
      cov_sa5xt6wt7().b[86][0]++;
      cov_sa5xt6wt7().s[295]++;
      console.error('Error fetching unread count:', error);
      /* istanbul ignore next */
      cov_sa5xt6wt7().s[296]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_sa5xt6wt7().b[86][1]++;
    }
    cov_sa5xt6wt7().s[297]++;
    return data.reduce((total, item) => {
      /* istanbul ignore next */
      cov_sa5xt6wt7().f[39]++;
      cov_sa5xt6wt7().s[298]++;
      return total + (
      /* istanbul ignore next */
      (cov_sa5xt6wt7().b[87][0]++, item.unread_count) ||
      /* istanbul ignore next */
      (cov_sa5xt6wt7().b[87][1]++, 0));
    }, 0);
  } catch (error) {
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[299]++;
    console.error('Error in getTotalUnreadCount:', error);
    /* istanbul ignore next */
    cov_sa5xt6wt7().s[300]++;
    return 0;
  }
};
/* istanbul ignore next */
cov_sa5xt6wt7().s[301]++;
exports.getTotalUnreadCount = getTotalUnreadCount;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,