{"version":3,"names":["useInfiniteQuery","getPaginatedShows","cov_2jkwhs2ywk","s","useInfiniteShows","params","_data$pages$","f","_ref","coordinates","_ref$radius","radius","b","_ref$startDate","startDate","Date","_ref$endDate","endDate","setDate","getDate","maxEntryFee","features","categories","_ref$pageSize","pageSize","_ref$enabled","enabled","isValidCoordinates","latitude","longitude","Number","isNaN","effectiveCoordinates","console","debug","_ref2","queryKey","queryFn","_queryFn","_asyncToGenerator","_ref3","_ref3$pageParam","pageParam","queryParams","page","result","error","Error","_x","apply","arguments","getNextPageParam","lastPage","pagination","currentPage","totalPages","undefined","staleTime","refetchOnWindowFocus","data","fetchNextPage","hasNextPage","isFetchingNextPage","isLoading","isError","queryError","refetch","refresh","_ref4","flattenedShows","pages","flatMap","totalCount","errorMessage","message","shows","_fetchNextPage2","isRefreshing"],"sources":["useInfiniteShows.ts"],"sourcesContent":["import { useInfiniteQuery } from '@tanstack/react-query';\nimport { getPaginatedShows, PaginatedShowsParams } from '../services/showService';\nimport { Show, ShowFilters, Coordinates } from '../types';\n\n/**\n * Interface for the parameters accepted by useInfiniteShows hook\n */\nexport interface InfiniteShowsParams extends ShowFilters {\n  /**\n   * User's current coordinates (required for geo-filtering)\n   */\n  coordinates: Coordinates;\n  \n  /**\n   * Number of shows to fetch per page\n   * @default 20\n   */\n  pageSize?: number;\n  \n  /**\n   * Whether to enable the query automatically\n   * @default true\n   */\n  enabled?: boolean;\n}\n\n/**\n * Result interface returned by useInfiniteShows hook\n */\nexport interface InfiniteShowsResult {\n  /**\n   * Flattened array of all shows across all loaded pages\n   */\n  shows: Show[];\n  \n  /**\n   * Total count of shows matching the filter criteria\n   */\n  totalCount: number;\n  \n  /**\n   * Whether there are more pages that can be loaded\n   */\n  hasNextPage: boolean;\n  \n  /**\n   * Function to fetch the next page of shows\n   */\n  fetchNextPage: () => Promise<void>;\n  \n  /**\n   * Function to refresh all data\n   */\n  refresh: () => Promise<void>;\n  \n  /**\n   * Whether the initial data is loading\n   */\n  isLoading: boolean;\n  \n  /**\n   * Whether more data is being fetched\n   */\n  isFetchingNextPage: boolean;\n  \n  /**\n   * Whether a refresh is in progress\n   */\n  isRefreshing: boolean;\n  \n  /**\n   * Error message if any\n   */\n  error: string | null;\n}\n\n/**\n * Custom hook that uses React Query's useInfiniteQuery to implement infinite scrolling\n * for the shows list on the home screen.\n * \n * @param params - Filtering parameters and coordinates\n * @returns An object with shows data, loading states, and functions to fetch more data\n */\nexport const useInfiniteShows = (params: InfiniteShowsParams): InfiniteShowsResult => {\n  const {\n    coordinates,\n    radius = 25,\n    startDate = new Date(),\n    endDate = new Date(new Date().setDate(new Date().getDate() + 30)),\n    maxEntryFee,\n    features,\n    categories,\n    pageSize = 20,\n    enabled = true,\n  } = params;\n  \n  /**\n   * ------------------------------------------------------------------\n   * Coordinate handling\n   * ------------------------------------------------------------------\n   * HomeScreen (and potentially other callers) may pass `null` or an\n   * incomplete coordinates object while location permissions are being\n   * resolved.  Previously we threw an error, which prevented the hook\n   * from ever executing and left the UI in an empty-state loop.\n   *\n   * Instead, we now:\n   *   1. Detect whether the incoming coordinates are valid numbers\n   *   2. If invalid, fall back to a sensible default (Carmel, IN) which\n   *      is seeded with real shows in seed data\n   *   3. Log a debug message so developers can see when the fallback\n   *      path is taken\n   */\n  const isValidCoordinates =\n    coordinates &&\n    typeof coordinates.latitude === 'number' &&\n    typeof coordinates.longitude === 'number' &&\n    !Number.isNaN(coordinates.latitude) &&\n    !Number.isNaN(coordinates.longitude);\n\n  const effectiveCoordinates: Coordinates = isValidCoordinates\n    ? coordinates\n    : { latitude: 39.9784, longitude: -86.118 }; // Carmel, IN\n\n  if (!isValidCoordinates) {\n    // eslint-disable-next-line no-console\n    console.debug(\n      '[useInfiniteShows] Invalid or missing coordinates supplied. ' +\n        'Falling back to default coordinates (Carmel, IN).',\n      coordinates\n    );\n  }\n  \n  // Set up the infinite query\n  const {\n    data,\n    fetchNextPage,\n    hasNextPage,\n    isFetchingNextPage,\n    isLoading,\n    isError,\n    error: queryError,\n    refetch,\n  } = useInfiniteQuery({\n    queryKey: ['shows', 'infinite', { \n      coordinates: effectiveCoordinates, \n      radius, \n      startDate, \n      endDate, \n      maxEntryFee, \n      features, \n      categories, \n      pageSize \n    }],\n    queryFn: async ({ pageParam = 1 }) => {\n      // Prepare parameters for the paginated shows query\n      const queryParams: PaginatedShowsParams = {\n        latitude: effectiveCoordinates.latitude,\n        longitude: effectiveCoordinates.longitude,\n        radius,\n        startDate,\n        endDate,\n        maxEntryFee,\n        features,\n        categories,\n        pageSize,\n        page: pageParam,\n      };\n      \n      // Call the service function to get paginated shows\n      const result = await getPaginatedShows(queryParams);\n      \n      // If there's an error, throw it so React Query can handle it\n      if (result.error) {\n        throw new Error(result.error);\n      }\n      \n      return result;\n    },\n    getNextPageParam: (lastPage) => {\n      // If we've reached the last page, return undefined (stops infinite loading)\n      if (lastPage.pagination.currentPage >= lastPage.pagination.totalPages) {\n        return undefined;\n      }\n      \n      // Otherwise, return the next page number\n      return lastPage.pagination.currentPage + 1;\n    },\n    enabled,\n    staleTime: 60 * 1000, // Consider data fresh for 1 minute\n    refetchOnWindowFocus: false,\n  });\n  \n  // Function to refresh data\n  const refresh = async (): Promise<void> => {\n    await refetch();\n  };\n  \n  // Flatten the pages of shows into a single array\n  const flattenedShows = data?.pages.flatMap(page => page.data) || [];\n  \n  // Get the total count from the first page (or 0 if no data)\n  const totalCount = data?.pages[0]?.pagination.totalCount || 0;\n  \n  // Extract error message if any\n  const errorMessage = isError ? (queryError as Error)?.message || 'Failed to load shows' : null;\n  \n  return {\n    shows: flattenedShows,\n    totalCount,\n    hasNextPage: !!hasNextPage,\n    fetchNextPage: async () => {\n      if (hasNextPage && !isFetchingNextPage) {\n        await fetchNextPage();\n      }\n    },\n    refresh,\n    isLoading,\n    isFetchingNextPage,\n    isRefreshing: false, // This would need to be tracked separately if needed\n    error: errorMessage,\n  };\n};\n\nexport default useInfiniteShows;\n"],"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","ignoreList":[]}