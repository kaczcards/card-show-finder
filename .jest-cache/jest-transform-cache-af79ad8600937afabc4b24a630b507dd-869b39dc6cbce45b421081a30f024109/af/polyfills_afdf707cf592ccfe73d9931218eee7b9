0dd30806d43721d82d1d03db161e2938
"use strict";

/**
 * polyfills.ts
 *
 * This file contains polyfills for modern JavaScript features that might not be
 * available in all environments, particularly React Native.
 *
 * Usage:
 * Import this file at the entry point of your application (e.g., App.tsx)
 * ```
 * import './src/utils/polyfills';
 * ```
 */
/* istanbul ignore next */
function cov_f1wkvrkx() {
  var path = "/Users/kevin/card-show-finder/src/utils/polyfills.ts";
  var hash = "cf20f50a80a15ebaa02975d129b9a4a784237337";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kevin/card-show-finder/src/utils/polyfills.ts",
    statementMap: {
      "0": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 14,
          column: 62
        }
      },
      "1": {
        start: {
          line: 33,
          column: 0
        },
        end: {
          line: 57,
          column: 1
        }
      },
      "2": {
        start: {
          line: 39,
          column: 22
        },
        end: {
          line: 50,
          column: 5
        }
      },
      "3": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 41,
          column: 25
        }
      },
      "4": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 41,
          column: 25
        }
      },
      "5": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 49,
          column: 9
        }
      },
      "6": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 53
        }
      },
      "7": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 46,
          column: 136
        }
      },
      "8": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 48,
          column: 25
        }
      },
      "9": {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 52,
          column: 43
        }
      },
      "10": {
        start: {
          line: 54,
          column: 4
        },
        end: {
          line: 56,
          column: 5
        }
      },
      "11": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 92
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 39,
            column: 22
          },
          end: {
            line: 39,
            column: 23
          }
        },
        loc: {
          start: {
            line: 39,
            column: 33
          },
          end: {
            line: 50,
            column: 5
          }
        },
        line: 39
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 33,
            column: 0
          },
          end: {
            line: 57,
            column: 1
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 0
          },
          end: {
            line: 57,
            column: 1
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 33
      },
      "1": {
        loc: {
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 41,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 41,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "2": {
        loc: {
          start: {
            line: 46,
            column: 78
          },
          end: {
            line: 46,
            column: 134
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 46,
            column: 103
          },
          end: {
            line: 46,
            column: 116
          }
        }, {
          start: {
            line: 46,
            column: 119
          },
          end: {
            line: 46,
            column: 134
          }
        }],
        line: 46
      },
      "3": {
        loc: {
          start: {
            line: 54,
            column: 4
          },
          end: {
            line: 56,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 4
          },
          end: {
            line: 56,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/kevin/card-show-finder/src/utils/polyfills.ts",
      mappings: ";AAAA;;;;;;;;;;;GAWG;;AAEH;;;;;;;;;;;;;;;;GAgBG;AAEH,oDAAoD;AACpD,IAAI,OAAO,UAAU,CAAC,eAAe,KAAK,UAAU,EAAE,CAAC;IAIrD;;;;OAIG;IACH,MAAM,SAAS,GAA4B,CAAI,KAAQ,EAAK,EAAE;QAC5D,IAAI,KAAK,KAAK,SAAS;YAAE,OAAO,KAAK,CAAC;QAEtC,IAAI,CAAC;YACH,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;QAC3C,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,IAAI,CACV,mDAAmD,EACnD,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,CACzD,CAAC;YACF,qEAAqE;YACrE,OAAO,KAAK,CAAC;QACf,CAAC;IACH,CAAC,CAAC;IAEF,iDAAiD;IACjD,UAAU,CAAC,eAAe,GAAG,SAAS,CAAC;IAEvC,iEAAiE;IACjE,IAAI,OAAO,EAAE,CAAC;QACZ,OAAO,CAAC,GAAG,CAAC,sEAAsE,CAAC,CAAC;IACtF,CAAC;AACH,CAAC",
      names: [],
      sources: ["/Users/kevin/card-show-finder/src/utils/polyfills.ts"],
      sourcesContent: ["/**\n * polyfills.ts\n * \n * This file contains polyfills for modern JavaScript features that might not be\n * available in all environments, particularly React Native.\n * \n * Usage:\n * Import this file at the entry point of your application (e.g., App.tsx)\n * ```\n * import './src/utils/polyfills';\n * ```\n */\n\n/**\n * structuredClone Polyfill\n * \n * The structuredClone() global method creates a deep clone of a given value using\n * the structured clone algorithm. This polyfill provides a simplified version\n * that works for most JSON-serializable data, which is sufficient for Supabase's needs.\n * \n * Limitations of this polyfill:\n * - Cannot clone functions, Symbols, WeakMaps, etc.\n * - Cannot handle circular references\n * - Loses prototype chain information\n * - Date objects become strings\n * - RegExp, Map, Set objects are not properly cloned\n * \n * These limitations are acceptable for Supabase usage as it primarily deals with\n * JSON-serializable data for authentication and database operations.\n */\n\n// Only add the polyfill if it doesn't already exist\nif (typeof globalThis.structuredClone !== 'function') {\n  // Define the type for the polyfill to match the native function\n  type StructuredCloneFunction = <T>(value: T) => T;\n\n  /**\n   * Simple implementation using JSON serialization/deserialization\n   * This is sufficient for most Supabase use cases which involve\n   * serializable session and user data\n   */\n  const jsonClone: StructuredCloneFunction = <T>(value: T): T => {\n    if (value === undefined) return value;\n    \n    try {\n      return JSON.parse(JSON.stringify(value));\n    } catch (error) {\n      console.warn(\n        '[structuredClone polyfill] Failed to clone value:',\n        error instanceof Error ? error.message : 'Unknown error'\n      );\n      // Return the original value as fallback (though it won't be a clone)\n      return value;\n    }\n  };\n\n  // Add to globalThis so it's available everywhere\n  globalThis.structuredClone = jsonClone;\n\n  // Log that the polyfill has been applied (helpful for debugging)\n  if (__DEV__) {\n    console.log('[Polyfill] Added structuredClone polyfill for Supabase compatibility');\n  }\n}\n\n/**\n * Type declaration to make TypeScript aware of our polyfill\n * This ensures no type errors when using structuredClone\n */\ndeclare global {\n  interface Window {\n    structuredClone<T>(value: T): T;\n  }\n  \n  var structuredClone: <T>(value: T) => T;\n}\n\n// Export nothing - this file is used for its side effects only\nexport {};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "cf20f50a80a15ebaa02975d129b9a4a784237337"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_f1wkvrkx = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_f1wkvrkx();
cov_f1wkvrkx().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * structuredClone Polyfill
 *
 * The structuredClone() global method creates a deep clone of a given value using
 * the structured clone algorithm. This polyfill provides a simplified version
 * that works for most JSON-serializable data, which is sufficient for Supabase's needs.
 *
 * Limitations of this polyfill:
 * - Cannot clone functions, Symbols, WeakMaps, etc.
 * - Cannot handle circular references
 * - Loses prototype chain information
 * - Date objects become strings
 * - RegExp, Map, Set objects are not properly cloned
 *
 * These limitations are acceptable for Supabase usage as it primarily deals with
 * JSON-serializable data for authentication and database operations.
 */
// Only add the polyfill if it doesn't already exist
/* istanbul ignore next */
cov_f1wkvrkx().s[1]++;
if (typeof globalThis.structuredClone !== 'function') {
  /* istanbul ignore next */
  cov_f1wkvrkx().b[0][0]++;
  cov_f1wkvrkx().s[2]++;
  /**
   * Simple implementation using JSON serialization/deserialization
   * This is sufficient for most Supabase use cases which involve
   * serializable session and user data
   */
  const jsonClone = value => {
    /* istanbul ignore next */
    cov_f1wkvrkx().f[0]++;
    cov_f1wkvrkx().s[3]++;
    if (value === undefined) {
      /* istanbul ignore next */
      cov_f1wkvrkx().b[1][0]++;
      cov_f1wkvrkx().s[4]++;
      return value;
    } else
    /* istanbul ignore next */
    {
      cov_f1wkvrkx().b[1][1]++;
    }
    cov_f1wkvrkx().s[5]++;
    try {
      /* istanbul ignore next */
      cov_f1wkvrkx().s[6]++;
      return JSON.parse(JSON.stringify(value));
    } catch (error) {
      /* istanbul ignore next */
      cov_f1wkvrkx().s[7]++;
      console.warn('[structuredClone polyfill] Failed to clone value:', error instanceof Error ?
      /* istanbul ignore next */
      (cov_f1wkvrkx().b[2][0]++, error.message) :
      /* istanbul ignore next */
      (cov_f1wkvrkx().b[2][1]++, 'Unknown error'));
      // Return the original value as fallback (though it won't be a clone)
      /* istanbul ignore next */
      cov_f1wkvrkx().s[8]++;
      return value;
    }
  };
  // Add to globalThis so it's available everywhere
  /* istanbul ignore next */
  cov_f1wkvrkx().s[9]++;
  globalThis.structuredClone = jsonClone;
  // Log that the polyfill has been applied (helpful for debugging)
  /* istanbul ignore next */
  cov_f1wkvrkx().s[10]++;
  if (__DEV__) {
    /* istanbul ignore next */
    cov_f1wkvrkx().b[3][0]++;
    cov_f1wkvrkx().s[11]++;
    console.log('[Polyfill] Added structuredClone polyfill for Supabase compatibility');
  } else
  /* istanbul ignore next */
  {
    cov_f1wkvrkx().b[3][1]++;
  }
} else
/* istanbul ignore next */
{
  cov_f1wkvrkx().b[0][1]++;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,