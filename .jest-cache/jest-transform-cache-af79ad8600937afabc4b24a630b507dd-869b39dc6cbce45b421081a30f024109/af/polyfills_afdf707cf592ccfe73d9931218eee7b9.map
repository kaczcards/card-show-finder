{"version":3,"names":["cov_f1wkvrkx","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","globalThis","structuredClone","jsonClone","value","JSON","parse","stringify","error","console","warn","Error","message","__DEV__","log"],"sources":["/Users/kevin/card-show-finder/src/utils/polyfills.ts"],"sourcesContent":["/**\n * polyfills.ts\n * \n * This file contains polyfills for modern JavaScript features that might not be\n * available in all environments, particularly React Native.\n * \n * Usage:\n * Import this file at the entry point of your application (e.g., App.tsx)\n * ```\n * import './src/utils/polyfills';\n * ```\n */\n\n/**\n * structuredClone Polyfill\n * \n * The structuredClone() global method creates a deep clone of a given value using\n * the structured clone algorithm. This polyfill provides a simplified version\n * that works for most JSON-serializable data, which is sufficient for Supabase's needs.\n * \n * Limitations of this polyfill:\n * - Cannot clone functions, Symbols, WeakMaps, etc.\n * - Cannot handle circular references\n * - Loses prototype chain information\n * - Date objects become strings\n * - RegExp, Map, Set objects are not properly cloned\n * \n * These limitations are acceptable for Supabase usage as it primarily deals with\n * JSON-serializable data for authentication and database operations.\n */\n\n// Only add the polyfill if it doesn't already exist\nif (typeof globalThis.structuredClone !== 'function') {\n  // Define the type for the polyfill to match the native function\n  type StructuredCloneFunction = <T>(value: T) => T;\n\n  /**\n   * Simple implementation using JSON serialization/deserialization\n   * This is sufficient for most Supabase use cases which involve\n   * serializable session and user data\n   */\n  const jsonClone: StructuredCloneFunction = <T>(value: T): T => {\n    if (value === undefined) return value;\n    \n    try {\n      return JSON.parse(JSON.stringify(value));\n    } catch (error) {\n      console.warn(\n        '[structuredClone polyfill] Failed to clone value:',\n        error instanceof Error ? error.message : 'Unknown error'\n      );\n      // Return the original value as fallback (though it won't be a clone)\n      return value;\n    }\n  };\n\n  // Add to globalThis so it's available everywhere\n  globalThis.structuredClone = jsonClone;\n\n  // Log that the polyfill has been applied (helpful for debugging)\n  if (__DEV__) {\n    console.log('[Polyfill] Added structuredClone polyfill for Supabase compatibility');\n  }\n}\n\n/**\n * Type declaration to make TypeScript aware of our polyfill\n * This ensures no type errors when using structuredClone\n */\ndeclare global {\n  interface Window {\n    structuredClone<T>(value: T): T;\n  }\n  \n  var structuredClone: <T>(value: T) => T;\n}\n\n// Export nothing - this file is used for its side effects only\nexport {};\n"],"mappings":"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","ignoreList":[]}