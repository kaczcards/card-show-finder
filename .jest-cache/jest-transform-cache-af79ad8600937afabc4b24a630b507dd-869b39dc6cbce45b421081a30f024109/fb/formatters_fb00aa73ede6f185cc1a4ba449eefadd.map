{"version":3,"names":["formatShowDate","show","cov_1qkvcwkfak","f","s","start_date","b","startIso","split","endIso","end_date","startDate","Date","endDate","options","weekday","month","day","toDateString","toLocaleDateString","undefined","_e","formatTime","timeString","toLocaleTimeString","hour","minute","_ref","extractTimeFromDescription","description","timePattern1","match1","match","toLowerCase","timePattern2","match2","getFormattedShowHours","_ref2","_ref3","_ref4","_ref5","_ref6","start","start_time","startTime","time","end","end_time","endTime"],"sources":["formatters.ts"],"sourcesContent":["/**\n * Date and time formatting utilities for show details\n */\n\n/**\n * Formats a show's date range into a human-readable string\n * \n * @param show The show object containing start_date and optionally end_date\n * @returns Formatted date string like \"Mon, Jan 1\" or \"Mon, Jan 1 - Wed, Jan 3\"\n */\nexport const formatShowDate = (show: any): string => {\n  if (!show?.start_date) return '';\n  try {\n    const startIso = (show.start_date as string).split('T')[0];\n    const endIso = show.end_date ? (show.end_date as string).split('T')[0] : null;\n    const startDate = new Date(`${startIso}T12:00:00`);\n    const endDate = endIso ? new Date(`${endIso}T12:00:00`) : null;\n    const options: Intl.DateTimeFormatOptions = { weekday: 'short', month: 'short', day: 'numeric' };\n\n    if (endDate && startDate.toDateString() !== endDate.toDateString()) {\n      return `${startDate.toLocaleDateString(undefined, options)} - ${endDate.toLocaleDateString(undefined, options)}`;\n    }\n    return startDate.toLocaleDateString(undefined, options);\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  } catch (_e) {\n    return show.start_date || 'Date unavailable';\n  }\n};\n\n/**\n * Formats a time string into a human-readable format\n * \n * @param timeString The time string to format\n * @returns Formatted time string (e.g., \"7:00 PM\")\n */\nexport const formatTime = (timeString?: string | null): string => {\n  if (!timeString) return '';\n  try {\n    return new Date(timeString).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  } catch (_e) {\n    return timeString ?? '';\n  }\n};\n\n/**\n * Extracts time information from a description string\n * \n * @param description The description text that might contain time information\n * @returns Extracted time string or null if none found\n */\nexport const extractTimeFromDescription = (description: string): string | null => {\n  if (!description) return null;\n  \n  // Pattern for \"10:00am - 4:00pm\" or \"10am - 4pm\"\n  const timePattern1 = /(\\d{1,2})(:\\d{2})?\\s*(am|pm)\\s*[-–—to]\\s*(\\d{1,2})(:\\d{2})?\\s*(am|pm)/i;\n  const match1 = description.match(timePattern1);\n  if (match1) {\n    return `${match1[1]}${match1[2] || ''}${match1[3].toLowerCase()} - ${match1[4]}${match1[5] || ''}${match1[6].toLowerCase()}`;\n  }\n\n  // Pattern for \"10-4pm\" or \"10 - 4 pm\"\n  const timePattern2 = /\\b(\\d{1,2})\\s*[-–—to]\\s*(\\d{1,2})(\\s*[ap]m)?\\b/i;\n  const match2 = description.match(timePattern2);\n  if (match2) {\n    if (match2[3]) {\n      return `${match2[1]}${match2[3].toLowerCase()} - ${match2[2]}${match2[3].toLowerCase()}`;\n    }\n    return `${match2[1]}am - ${match2[2]}pm`;\n  }\n  \n  return null;\n};\n\n/**\n * Gets formatted show hours from various possible time fields\n * \n * @param show The show object with possible time fields\n * @returns Formatted show hours string\n */\nexport const getFormattedShowHours = (show: any): string => {\n  if (!show) return 'Time not specified';\n  \n  // Try different possible field names for start and end times\n  const start = show.start_time ?? show.startTime ?? show.time ?? null;\n  const end = show.end_time ?? show.endTime ?? null;\n\n  // Format based on available data\n  if (start && end && start !== end) return `${formatTime(start)} - ${formatTime(end)}`;\n  if (start) return formatTime(start);\n  if (end) return formatTime(end);\n\n  // Try to extract time from description as a fallback\n  if (show.description) {\n    return extractTimeFromDescription(show.description) || 'Time not specified';\n  }\n  \n  return 'Time not specified';\n};\n"],"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","ignoreList":[]}