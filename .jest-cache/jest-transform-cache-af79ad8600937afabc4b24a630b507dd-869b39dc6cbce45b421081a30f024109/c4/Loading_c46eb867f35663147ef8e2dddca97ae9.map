{"version":3,"names":["React","View","Text","ActivityIndicator","useTheme","jsx","_jsx","jsxs","_jsxs","cov_1w9iy6kbmg","s","Loading","_ref","_ref$type","type","b","message","_ref$size","size","style","f","_ref2","theme","loadingStyle","components","loadingStates","fullScreen","inline","container","children","color","indicatorColor","text"],"sources":["Loading.tsx"],"sourcesContent":["import React from 'react';\nimport { View, Text, ActivityIndicator, StyleProp, ViewStyle } from 'react-native';\nimport { useTheme } from '../../contexts/ThemeContext';\n\ninterface LoadingProps {\n  /**\n   * Display type: 'fullScreen' for entire screen loading, \n   * 'inline' for within-component loading\n   */\n  type?: 'fullScreen' | 'inline';\n  \n  /**\n   * Message to display below the loading indicator\n   */\n  message?: string;\n  \n  /**\n   * Size of the loading indicator\n   */\n  size?: 'small' | 'large';\n  \n  /**\n   * Optional custom style for the container\n   */\n  style?: StyleProp<ViewStyle>;\n}\n\n/**\n * Loading - A standardized loading component\n * \n * This component provides a consistent loading state display throughout the app,\n * with support for both full-screen and inline loading states.\n */\nconst Loading: React.FC<LoadingProps> = ({\n  type = 'fullScreen',\n  message,\n  size = 'large',\n  style,\n}) => {\n  // Get theme from context\n  const { theme } = useTheme();\n  \n  // Determine loading style based on type\n  const loadingStyle = type === 'fullScreen' \n    ? theme.components.loadingStates.fullScreen\n    : theme.components.loadingStates.inline;\n  \n  return (\n    <View style={[loadingStyle.container, style]}>\n      <ActivityIndicator \n        size={size} \n        color={loadingStyle.indicatorColor}\n      />\n      {message && (\n        <Text style={loadingStyle.text}>\n          {message}\n        </Text>\n      )}\n    </View>\n  );\n};\n\nexport default Loading;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,EAAEC,IAAI,EAAEC,iBAAiB,QAA8B,cAAc;AAClF,SAASC,QAAQ,QAAQ,6BAA6B;AAAC,SAAAC,GAAA,IAAAC,IAAA,EAAAC,IAAA,IAAAC,KAAA;AAAAC,cAAA,GAAAC,CAAA;AA+BvD,IAAMC,OAA+B,GAAG,SAAlCA,OAA+BA,CAAAC,IAAA,EAK/B;EAAA,IAAAC,SAAA,GAAAD,IAAA,CAJJE,IAAI;IAAJA,IAAI,GAAAD,SAAA,eAAAJ,cAAA,GAAAM,CAAA,UAAG,YAAY,IAAAF,SAAA;IACnBG,OAAO,GAAAJ,IAAA,CAAPI,OAAO;IAAAC,SAAA,GAAAL,IAAA,CACPM,IAAI;IAAJA,IAAI,GAAAD,SAAA,eAAAR,cAAA,GAAAM,CAAA,UAAG,OAAO,IAAAE,SAAA;IACdE,KAAK,GAAAP,IAAA,CAALO,KAAK;EAAAV,cAAA,GAAAW,CAAA;EAGL,IAAAC,KAAA,IAAAZ,cAAA,GAAAC,CAAA,OAAkBN,QAAQ,CAAC,CAAC;IAApBkB,KAAK,GAAAD,KAAA,CAALC,KAAK;EAGb,IAAMC,YAAY,IAAAd,cAAA,GAAAC,CAAA,OAAGI,IAAI,KAAK,YAAY,IAAAL,cAAA,GAAAM,CAAA,UACtCO,KAAK,CAACE,UAAU,CAACC,aAAa,CAACC,UAAU,KAAAjB,cAAA,GAAAM,CAAA,UACzCO,KAAK,CAACE,UAAU,CAACC,aAAa,CAACE,MAAM;EAAClB,cAAA,GAAAC,CAAA;EAE1C,OACEF,KAAA,CAACP,IAAI;IAACkB,KAAK,EAAE,CAACI,YAAY,CAACK,SAAS,EAAET,KAAK,CAAE;IAAAU,QAAA,GAC3CvB,IAAA,CAACH,iBAAiB;MAChBe,IAAI,EAAEA,IAAK;MACXY,KAAK,EAAEP,YAAY,CAACQ;IAAe,CACpC,CAAC,EACD,CAAAtB,cAAA,GAAAM,CAAA,UAAAC,OAAO,MAAAP,cAAA,GAAAM,CAAA,UACNT,IAAA,CAACJ,IAAI;MAACiB,KAAK,EAAEI,YAAY,CAACS,IAAK;MAAAH,QAAA,EAC5Bb;IAAO,CACJ,CAAC,CACR;EAAA,CACG,CAAC;AAEX,CAAC;AAED,eAAeL,OAAO","ignoreList":[]}