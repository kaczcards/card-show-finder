8c92cf402e4dad07dec6805feb000fa3
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
function cov_un1urhoal() {
  var path = "/Users/kevin/card-show-finder/src/debug-unclaimed-shows.ts";
  var hash = "c6f34b5415fcde68cd61af0c15bc7eea6ee35a6a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kevin/card-show-finder/src/debug-unclaimed-shows.ts",
    statementMap: {
      "0": {
        start: {
          line: 10,
          column: 2
        },
        end: {
          line: 10,
          column: 48
        }
      },
      "1": {
        start: {
          line: 12,
          column: 2
        },
        end: {
          line: 61,
          column: 3
        }
      },
      "2": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 56
        }
      },
      "3": {
        start: {
          line: 15,
          column: 28
        },
        end: {
          line: 17,
          column: 6
        }
      },
      "4": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 18,
          column: 72
        }
      },
      "5": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 22,
          column: 6
        }
      },
      "6": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 26,
          column: 6
        }
      },
      "7": {
        start: {
          line: 29,
          column: 23
        },
        end: {
          line: 29,
          column: 44
        }
      },
      "8": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 30,
          column: 78
        }
      },
      "9": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 33,
          column: 57
        }
      },
      "10": {
        start: {
          line: 34,
          column: 27
        },
        end: {
          line: 34,
          column: 70
        }
      },
      "11": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 35,
          column: 70
        }
      },
      "12": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 39,
          column: 6
        }
      },
      "13": {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 43,
          column: 6
        }
      },
      "14": {
        start: {
          line: 46,
          column: 22
        },
        end: {
          line: 46,
          column: 42
        }
      },
      "15": {
        start: {
          line: 47,
          column: 4
        },
        end: {
          line: 47,
          column: 76
        }
      },
      "16": {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 50,
          column: 53
        }
      },
      "17": {
        start: {
          line: 52,
          column: 26
        },
        end: {
          line: 55,
          column: 5
        }
      },
      "18": {
        start: {
          line: 56,
          column: 4
        },
        end: {
          line: 56,
          column: 74
        }
      },
      "19": {
        start: {
          line: 58,
          column: 4
        },
        end: {
          line: 58,
          column: 52
        }
      },
      "20": {
        start: {
          line: 60,
          column: 4
        },
        end: {
          line: 60,
          column: 56
        }
      }
    },
    fnMap: {
      "0": {
        name: "testUnclaimedShowsDataHandling",
        decl: {
          start: {
            line: 9,
            column: 15
          },
          end: {
            line: 9,
            column: 45
          }
        },
        loc: {
          start: {
            line: 9,
            column: 48
          },
          end: {
            line: 62,
            column: 1
          }
        },
        line: 9
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 21,
            column: 6
          },
          end: {
            line: 21,
            column: 71
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 21,
            column: 39
          },
          end: {
            line: 21,
            column: 46
          }
        }, {
          start: {
            line: 21,
            column: 49
          },
          end: {
            line: 21,
            column: 71
          }
        }],
        line: 21
      },
      "1": {
        loc: {
          start: {
            line: 25,
            column: 6
          },
          end: {
            line: 25,
            column: 69
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 25,
            column: 39
          },
          end: {
            line: 25,
            column: 61
          }
        }, {
          start: {
            line: 25,
            column: 64
          },
          end: {
            line: 25,
            column: 69
          }
        }],
        line: 25
      },
      "2": {
        loc: {
          start: {
            line: 29,
            column: 23
          },
          end: {
            line: 29,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 29,
            column: 23
          },
          end: {
            line: 29,
            column: 38
          }
        }, {
          start: {
            line: 29,
            column: 42
          },
          end: {
            line: 29,
            column: 44
          }
        }],
        line: 29
      },
      "3": {
        loc: {
          start: {
            line: 38,
            column: 6
          },
          end: {
            line: 38,
            column: 69
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 38,
            column: 38
          },
          end: {
            line: 38,
            column: 45
          }
        }, {
          start: {
            line: 38,
            column: 48
          },
          end: {
            line: 38,
            column: 69
          }
        }],
        line: 38
      },
      "4": {
        loc: {
          start: {
            line: 42,
            column: 6
          },
          end: {
            line: 42,
            column: 67
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 42,
            column: 38
          },
          end: {
            line: 42,
            column: 59
          }
        }, {
          start: {
            line: 42,
            column: 62
          },
          end: {
            line: 42,
            column: 67
          }
        }],
        line: 42
      },
      "5": {
        loc: {
          start: {
            line: 46,
            column: 22
          },
          end: {
            line: 46,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 46,
            column: 22
          },
          end: {
            line: 46,
            column: 36
          }
        }, {
          start: {
            line: 46,
            column: 40
          },
          end: {
            line: 46,
            column: 42
          }
        }],
        line: 46
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c6f34b5415fcde68cd61af0c15bc7eea6ee35a6a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_un1urhoal = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_un1urhoal();
import { showSeriesService } from './services/showSeriesService';
function testUnclaimedShowsDataHandling() {
  return _testUnclaimedShowsDataHandling.apply(this, arguments);
}
function _testUnclaimedShowsDataHandling() {
  _testUnclaimedShowsDataHandling = _asyncToGenerator(function* () {
    cov_un1urhoal().f[0]++;
    cov_un1urhoal().s[0]++;
    console.warn('---- STARTING DEBUG TEST ----');
    cov_un1urhoal().s[1]++;
    try {
      cov_un1urhoal().s[2]++;
      console.warn('[_TEST] Testing getAllShowSeries...');
      var unclaimedSeries = (cov_un1urhoal().s[3]++, yield showSeriesService.getAllShowSeries({
        organizerId: undefined
      }));
      cov_un1urhoal().s[4]++;
      console.warn('[_DEBUG] Value of unclaimedSeries:', unclaimedSeries);
      cov_un1urhoal().s[5]++;
      console.warn('[_DEBUG] Type of unclaimedSeries:', Array.isArray(unclaimedSeries) ? (cov_un1urhoal().b[0][0]++, 'array') : (cov_un1urhoal().b[0][1]++, typeof unclaimedSeries));
      cov_un1urhoal().s[6]++;
      console.warn('[_DEBUG] Length of unclaimedSeries:', Array.isArray(unclaimedSeries) ? (cov_un1urhoal().b[1][0]++, unclaimedSeries.length) : (cov_un1urhoal().b[1][1]++, 'N/A'));
      var safeSeries = (cov_un1urhoal().s[7]++, (cov_un1urhoal().b[2][0]++, unclaimedSeries) || (cov_un1urhoal().b[2][1]++, []));
      cov_un1urhoal().s[8]++;
      console.warn('[_DEBUG] Safe series is array:', Array.isArray(safeSeries));
      cov_un1urhoal().s[9]++;
      console.warn('[_TEST] Testing getUnclaimedShows...');
      var unclaimedShows = (cov_un1urhoal().s[10]++, yield showSeriesService.getUnclaimedShows());
      cov_un1urhoal().s[11]++;
      console.warn('[_DEBUG] Value of unclaimedShows:', unclaimedShows);
      cov_un1urhoal().s[12]++;
      console.warn('[_DEBUG] Type of unclaimedShows:', Array.isArray(unclaimedShows) ? (cov_un1urhoal().b[3][0]++, 'array') : (cov_un1urhoal().b[3][1]++, typeof unclaimedShows));
      cov_un1urhoal().s[13]++;
      console.warn('[_DEBUG] Length of unclaimedShows:', Array.isArray(unclaimedShows) ? (cov_un1urhoal().b[4][0]++, unclaimedShows.length) : (cov_un1urhoal().b[4][1]++, 'N/A'));
      var safeShows = (cov_un1urhoal().s[14]++, (cov_un1urhoal().b[5][0]++, unclaimedShows) || (cov_un1urhoal().b[5][1]++, []));
      cov_un1urhoal().s[15]++;
      console.warn('[_DEBUG] Safe shows is array:', Array.isArray(safeShows));
      cov_un1urhoal().s[16]++;
      console.warn('[_TEST] Testing combined data...');
      var combinedItems = (cov_un1urhoal().s[17]++, [].concat(_toConsumableArray(safeSeries), _toConsumableArray(safeShows)));
      cov_un1urhoal().s[18]++;
      console.warn('[_DEBUG] Combined items length:', combinedItems.length);
      cov_un1urhoal().s[19]++;
      console.warn('---- DEBUG TEST SUCCESSFUL ----');
    } catch (error) {
      cov_un1urhoal().s[20]++;
      console.error('[_ERROR] Debug test failed:', error);
    }
  });
  return _testUnclaimedShowsDataHandling.apply(this, arguments);
}
export { testUnclaimedShowsDataHandling };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzaG93U2VyaWVzU2VydmljZSIsInRlc3RVbmNsYWltZWRTaG93c0RhdGFIYW5kbGluZyIsIl90ZXN0VW5jbGFpbWVkU2hvd3NEYXRhSGFuZGxpbmciLCJhcHBseSIsImFyZ3VtZW50cyIsIl9hc3luY1RvR2VuZXJhdG9yIiwiY292X3VuMXVyaG9hbCIsImYiLCJzIiwiY29uc29sZSIsIndhcm4iLCJ1bmNsYWltZWRTZXJpZXMiLCJnZXRBbGxTaG93U2VyaWVzIiwib3JnYW5pemVySWQiLCJ1bmRlZmluZWQiLCJBcnJheSIsImlzQXJyYXkiLCJiIiwibGVuZ3RoIiwic2FmZVNlcmllcyIsInVuY2xhaW1lZFNob3dzIiwiZ2V0VW5jbGFpbWVkU2hvd3MiLCJzYWZlU2hvd3MiLCJjb21iaW5lZEl0ZW1zIiwiY29uY2F0IiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiZXJyb3IiXSwic291cmNlcyI6WyJkZWJ1Zy11bmNsYWltZWQtc2hvd3MudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGVtcG9yYXJ5IGRlYnVnIGZpbGUgdG8gdGVzdCB0aGUgdXNlVW5jbGFpbWVkU2hvd3MgaG9va1xuaW1wb3J0IHsgc2hvd1Nlcmllc1NlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL3Nob3dTZXJpZXNTZXJ2aWNlJztcblxuLyoqXG4gKiBRdWljayBkZWJ1ZyBoZWxwZXIgZm9yIHZhbGlkYXRpbmcgdGhlIGRhdGEgcmV0dXJuZWQgYnkgdGhlIHNob3dTZXJpZXNTZXJ2aWNlLlxuICogSXQgcHVycG9zZWZ1bGx5IGxvZ3Mgb3V0IHRoZSBzaGFwZSBhbmQgc2l6ZSBvZiB0aGUgcmV0dXJuZWQgYXJyYXlzIHNvIHdlIGNhblxuICogZW5zdXJlIGRvd25zdHJlYW0gaG9va3MgKGUuZy4gdXNlVW5jbGFpbWVkU2hvd3MpIHdvbuKAmXQgYnJlYWsgb24gYHVuZGVmaW5lZGAuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHRlc3RVbmNsYWltZWRTaG93c0RhdGFIYW5kbGluZygpIHtcbiAgY29uc29sZS53YXJuKCctLS0tIFNUQVJUSU5HIERFQlVHIFRFU1QgLS0tLScpO1xuICBcbiAgdHJ5IHtcbiAgICAvLyBUZXN0IGdldEFsbFNob3dTZXJpZXMgZnVuY3Rpb25cbiAgICBjb25zb2xlLndhcm4oJ1tfVEVTVF0gVGVzdGluZyBnZXRBbGxTaG93U2VyaWVzLi4uJyk7XG4gICAgY29uc3QgdW5jbGFpbWVkU2VyaWVzID0gYXdhaXQgc2hvd1Nlcmllc1NlcnZpY2UuZ2V0QWxsU2hvd1Nlcmllcyh7XG4gICAgICBvcmdhbml6ZXJJZDogdW5kZWZpbmVkXG4gICAgfSk7XG4gICAgY29uc29sZS53YXJuKCdbX0RFQlVHXSBWYWx1ZSBvZiB1bmNsYWltZWRTZXJpZXM6JywgdW5jbGFpbWVkU2VyaWVzKTtcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICAnW19ERUJVR10gVHlwZSBvZiB1bmNsYWltZWRTZXJpZXM6JyxcbiAgICAgIEFycmF5LmlzQXJyYXkodW5jbGFpbWVkU2VyaWVzKSA/ICdhcnJheScgOiB0eXBlb2YgdW5jbGFpbWVkU2VyaWVzLFxuICAgICk7XG4gICAgY29uc29sZS53YXJuKFxuICAgICAgJ1tfREVCVUddIExlbmd0aCBvZiB1bmNsYWltZWRTZXJpZXM6JyxcbiAgICAgIEFycmF5LmlzQXJyYXkodW5jbGFpbWVkU2VyaWVzKSA/IHVuY2xhaW1lZFNlcmllcy5sZW5ndGggOiAnTi9BJyxcbiAgICApO1xuICAgIFxuICAgIC8vIEVuc3VyZSBpdCdzIGFuIGFycmF5IGV2ZW4gaWYgZW1wdHlcbiAgICBjb25zdCBzYWZlU2VyaWVzID0gdW5jbGFpbWVkU2VyaWVzIHx8IFtdO1xuICAgIGNvbnNvbGUud2FybignW19ERUJVR10gU2FmZSBzZXJpZXMgaXMgYXJyYXk6JywgQXJyYXkuaXNBcnJheShzYWZlU2VyaWVzKSk7XG4gICAgXG4gICAgLy8gVGVzdCBnZXRVbmNsYWltZWRTaG93cyBmdW5jdGlvblxuICAgIGNvbnNvbGUud2FybignW19URVNUXSBUZXN0aW5nIGdldFVuY2xhaW1lZFNob3dzLi4uJyk7XG4gICAgY29uc3QgdW5jbGFpbWVkU2hvd3MgPSBhd2FpdCBzaG93U2VyaWVzU2VydmljZS5nZXRVbmNsYWltZWRTaG93cygpO1xuICAgIGNvbnNvbGUud2FybignW19ERUJVR10gVmFsdWUgb2YgdW5jbGFpbWVkU2hvd3M6JywgdW5jbGFpbWVkU2hvd3MpO1xuICAgIGNvbnNvbGUud2FybihcbiAgICAgICdbX0RFQlVHXSBUeXBlIG9mIHVuY2xhaW1lZFNob3dzOicsXG4gICAgICBBcnJheS5pc0FycmF5KHVuY2xhaW1lZFNob3dzKSA/ICdhcnJheScgOiB0eXBlb2YgdW5jbGFpbWVkU2hvd3MsXG4gICAgKTtcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICAnW19ERUJVR10gTGVuZ3RoIG9mIHVuY2xhaW1lZFNob3dzOicsXG4gICAgICBBcnJheS5pc0FycmF5KHVuY2xhaW1lZFNob3dzKSA/IHVuY2xhaW1lZFNob3dzLmxlbmd0aCA6ICdOL0EnLFxuICAgICk7XG4gICAgXG4gICAgLy8gRW5zdXJlIGl0J3MgYW4gYXJyYXkgZXZlbiBpZiBlbXB0eVxuICAgIGNvbnN0IHNhZmVTaG93cyA9IHVuY2xhaW1lZFNob3dzIHx8IFtdO1xuICAgIGNvbnNvbGUud2FybignW19ERUJVR10gU2FmZSBzaG93cyBpcyBhcnJheTonLCBBcnJheS5pc0FycmF5KHNhZmVTaG93cykpO1xuICAgIFxuICAgIC8vIFRlc3QgdGhlIGNvbWJpbmVkIGRhdGFcbiAgICBjb25zb2xlLndhcm4oJ1tfVEVTVF0gVGVzdGluZyBjb21iaW5lZCBkYXRhLi4uJyk7XG4gICAgLy8gVGhpcyB3b3VsZCBjcmFzaCBpZiBlaXRoZXIgdW5jbGFpbWVkU2VyaWVzIG9yIHVuY2xhaW1lZFNob3dzIGlzIHVuZGVmaW5lZFxuICAgIGNvbnN0IGNvbWJpbmVkSXRlbXMgPSBbXG4gICAgICAuLi5zYWZlU2VyaWVzLFxuICAgICAgLi4uc2FmZVNob3dzXG4gICAgXTtcbiAgICBjb25zb2xlLndhcm4oJ1tfREVCVUddIENvbWJpbmVkIGl0ZW1zIGxlbmd0aDonLCBjb21iaW5lZEl0ZW1zLmxlbmd0aCk7XG4gICAgXG4gICAgY29uc29sZS53YXJuKCctLS0tIERFQlVHIFRFU1QgU1VDQ0VTU0ZVTCAtLS0tJyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignW19FUlJPUl0gRGVidWcgdGVzdCBmYWlsZWQ6JywgZXJyb3IpO1xuICB9XG59XG5cbi8vIEV4cG9ydCBmb3IgdXNlIGluIG90aGVyIG1vZHVsZXMgaWYgbmVlZGVkXG5leHBvcnQgeyB0ZXN0VW5jbGFpbWVkU2hvd3NEYXRhSGFuZGxpbmcgfTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSxTQUFTQSxpQkFBaUIsUUFBUSw4QkFBOEI7QUFBQyxTQU9sREMsOEJBQThCQSxDQUFBO0VBQUEsT0FBQUMsK0JBQUEsQ0FBQUMsS0FBQSxPQUFBQyxTQUFBO0FBQUE7QUFBQSxTQUFB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