{"version":3,"names":["cov_22yuiicert","actualCoverage","exports","configureErrorService","s","handleSupabaseError","handleNetworkError","handleAuthError","createValidationError","createPermissionError","logError","getStoredErrors","clearStoredErrors","getUserFriendlyMessage","withErrorHandling","async_storage_1","__importDefault","require","ErrorSeverity","f","b","ErrorCategory","defaultConfig","enableConsoleLogging","enableRemoteLogging","enableStorageLogging","maxStoredErrors","currentConfig","config","error","context","severity","ERROR","isPostgrestError","message","code","category","determineErrorCategory","originalError","timestamp","Date","Error","UNKNOWN","appError","NETWORK","AUTHENTICATION","VALIDATION","WARNING","PERMISSION","console","toUpperCase","storeErrorInStorage","catch","e","storedErrorsJson","default","getItem","storedErrors","JSON","parse","push","length","slice","setItem","stringify","defaultMessages","DATABASE","isUserFriendlyMessage","startsWith","toLowerCase","includes","technicalTerms","lowercaseMsg","some","term","fn","errorHandler","args","functionName","name"],"sources":["/Users/kevin/card-show-finder/src/services/errorService.ts"],"sourcesContent":["import { PostgrestError } from '@supabase/supabase-js';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n/**\n * Error severity levels for logging and reporting\n */\nexport enum ErrorSeverity {\n  INFO = 'info',\n  WARNING = 'warning',\n  ERROR = 'error',\n  CRITICAL = 'critical',\n}\n\n/**\n * Error categories to classify different types of errors\n */\nexport enum ErrorCategory {\n  DATABASE = 'database',\n  AUTHENTICATION = 'authentication',\n  NETWORK = 'network',\n  VALIDATION = 'validation',\n  PERMISSION = 'permission',\n  UNKNOWN = 'unknown',\n}\n\n/**\n * Structured error object for consistent error handling\n */\nexport interface AppError {\n  message: string;\n  code?: string;\n  category: ErrorCategory;\n  severity: ErrorSeverity;\n  originalError?: any;\n  context?: Record<string, any>;\n  timestamp: Date;\n}\n\n/**\n * Configuration for error service behavior\n */\ninterface ErrorServiceConfig {\n  enableConsoleLogging: boolean;\n  enableRemoteLogging: boolean;\n  enableStorageLogging: boolean;\n  maxStoredErrors: number;\n}\n\n// Default configuration\nconst defaultConfig: ErrorServiceConfig = {\n  enableConsoleLogging: true,\n  enableRemoteLogging: false, // Disabled by default until a remote service is configured\n  enableStorageLogging: true,\n  maxStoredErrors: 100,\n};\n\n// Current configuration\nlet currentConfig: ErrorServiceConfig = { ...defaultConfig };\n\n/**\n * Configure error service behavior\n */\nexport function configureErrorService(config: Partial<ErrorServiceConfig>): void {\n  currentConfig = { ...currentConfig, ...config };\n}\n\n/**\n * Process a Supabase PostgrestError into our standard AppError format\n */\nexport function handleSupabaseError(\n  error: PostgrestError | Error | unknown,\n  context?: Record<string, any>,\n  severity: ErrorSeverity = ErrorSeverity.ERROR\n): AppError {\n  // Handle PostgrestError type from Supabase\n  if (isPostgrestError(error)) {\n    return {\n      message: error.message || 'Database operation failed',\n      code: error.code,\n      category: determineErrorCategory(error),\n      severity,\n      originalError: error,\n      context,\n      timestamp: new Date(),\n    };\n  }\n\n  // Handle generic Error objects\n  if (error instanceof Error) {\n    return {\n      message: error.message || 'An unexpected error occurred',\n      category: ErrorCategory.UNKNOWN,\n      severity,\n      originalError: error,\n      context,\n      timestamp: new Date(),\n    };\n  }\n\n  // Handle unknown error types\n  return {\n    message: 'An unknown error occurred',\n    category: ErrorCategory.UNKNOWN,\n    severity,\n    originalError: error,\n    context,\n    timestamp: new Date(),\n  };\n}\n\n/**\n * Handle network-related errors\n */\nexport function handleNetworkError(\n  error: Error | unknown,\n  context?: Record<string, any>\n): AppError {\n  const appError: AppError = {\n    message: error instanceof Error ? error.message : 'Network connection failed',\n    category: ErrorCategory.NETWORK,\n    severity: ErrorSeverity.ERROR,\n    originalError: error,\n    context,\n    timestamp: new Date(),\n  };\n\n  logError(appError);\n  return appError;\n}\n\n/**\n * Handle authentication-related errors\n */\nexport function handleAuthError(\n  error: Error | unknown,\n  context?: Record<string, any>\n): AppError {\n  const appError: AppError = {\n    message: error instanceof Error ? error.message : 'Authentication failed',\n    category: ErrorCategory.AUTHENTICATION,\n    severity: ErrorSeverity.ERROR,\n    originalError: error,\n    context,\n    timestamp: new Date(),\n  };\n\n  logError(appError);\n  return appError;\n}\n\n/**\n * Create a validation error when input validation fails\n */\nexport function createValidationError(\n  message: string,\n  context?: Record<string, any>\n): AppError {\n  const appError: AppError = {\n    message,\n    category: ErrorCategory.VALIDATION,\n    severity: ErrorSeverity.WARNING,\n    context,\n    timestamp: new Date(),\n  };\n\n  logError(appError);\n  return appError;\n}\n\n/**\n * Create a permission error when user lacks required permissions\n */\nexport function createPermissionError(\n  message: string = 'You do not have permission to perform this action',\n  context?: Record<string, any>\n): AppError {\n  const appError: AppError = {\n    message,\n    category: ErrorCategory.PERMISSION,\n    severity: ErrorSeverity.WARNING,\n    context,\n    timestamp: new Date(),\n  };\n\n  logError(appError);\n  return appError;\n}\n\n/**\n * Log an error based on current configuration\n */\nexport function logError(error: AppError): void {\n  // Console logging\n  if (currentConfig.enableConsoleLogging) {\n    console.error(\n      `[${error.severity.toUpperCase()}] [${error.category}] ${error.message}`,\n      {\n        code: error.code,\n        context: error.context,\n        timestamp: error.timestamp,\n        originalError: error.originalError,\n      }\n    );\n  }\n\n  // Store error in AsyncStorage for later retrieval\n  if (currentConfig.enableStorageLogging) {\n    storeErrorInStorage(error).catch(e => \n      console.error('Failed to store error in AsyncStorage:', e)\n    );\n  }\n\n  // Remote logging could be implemented here\n  if (currentConfig.enableRemoteLogging) {\n    // Implementation would depend on the remote logging service\n    // sendErrorToRemoteService(error);\n  }\n}\n\n/**\n * Store errors in AsyncStorage for later retrieval\n */\nasync function storeErrorInStorage(error: AppError): Promise<void> {\n  try {\n    // Get existing errors\n    const storedErrorsJson = await AsyncStorage.getItem('app_errors');\n    let storedErrors: AppError[] = storedErrorsJson ? JSON.parse(storedErrorsJson) : [];\n\n    // Add new error\n    storedErrors.push(error);\n\n    // Limit the number of stored errors\n    if (storedErrors.length > currentConfig.maxStoredErrors) {\n      storedErrors = storedErrors.slice(-currentConfig.maxStoredErrors);\n    }\n\n    // Save back to storage\n    await AsyncStorage.setItem('app_errors', JSON.stringify(storedErrors));\n  } catch (e) {\n    // Fail silently, but log to console\n    console.error('Error storing error in AsyncStorage:', e);\n  }\n}\n\n/**\n * Retrieve stored errors from AsyncStorage\n */\nexport async function getStoredErrors(): Promise<AppError[]> {\n  try {\n    const storedErrorsJson = await AsyncStorage.getItem('app_errors');\n    return storedErrorsJson ? JSON.parse(storedErrorsJson) : [];\n  } catch (e) {\n    console.error('Error retrieving errors from AsyncStorage:', e);\n    return [];\n  }\n}\n\n/**\n * Clear stored errors from AsyncStorage\n */\nexport async function clearStoredErrors(): Promise<void> {\n  try {\n    await AsyncStorage.setItem('app_errors', JSON.stringify([]));\n  } catch (e) {\n    console.error('Error clearing errors from AsyncStorage:', e);\n  }\n}\n\n/**\n * Get a user-friendly error message based on the error category and code\n */\nexport function getUserFriendlyMessage(error: AppError): string {\n  // Default messages by category\n  const defaultMessages: Record<ErrorCategory, string> = {\n    [ErrorCategory.DATABASE]: 'There was a problem accessing the database.',\n    [ErrorCategory.AUTHENTICATION]: 'There was a problem with your account authentication.',\n    [ErrorCategory.NETWORK]: 'Network connection issue. Please check your internet connection.',\n    [ErrorCategory.VALIDATION]: 'Some information you entered is not valid.',\n    [ErrorCategory.PERMISSION]: 'You do not have permission to perform this action.',\n    [ErrorCategory.UNKNOWN]: 'An unexpected error occurred. Please try again later.',\n  };\n\n  // Specific error code handling\n  if (error.code) {\n    switch (error.code) {\n      case '23505': // PostgreSQL unique violation\n        return 'This information already exists in our system.';\n      case '42P01': // PostgreSQL undefined table\n        return 'We encountered a database configuration issue. Please contact support.';\n      case '42501': // PostgreSQL insufficient privilege\n        return 'You do not have permission to perform this action.';\n      case '23503': // PostgreSQL foreign key violation\n        return 'This operation cannot be completed because it references missing data.';\n      case 'PGRST301': // Supabase RLS policy violation\n        return 'Access denied due to security policy.';\n      case '401':\n      case 'auth/invalid-email':\n      case 'auth/user-not-found':\n      case 'auth/wrong-password':\n        return 'Invalid login credentials. Please check your email and password.';\n      case '403':\n        return 'You do not have permission to access this resource.';\n      case '404':\n        return 'The requested resource was not found.';\n      case '429':\n        return 'Too many requests. Please try again later.';\n      case '500':\n        return 'Server error. Please try again later.';\n      default:\n        // Use the original error message if it's user-friendly, otherwise use default\n        return isUserFriendlyMessage(error.message)\n          ? error.message\n          : defaultMessages[error.category];\n    }\n  }\n\n  // If no specific code handling, use the message if it's user-friendly\n  return isUserFriendlyMessage(error.message)\n    ? error.message\n    : defaultMessages[error.category];\n}\n\n/**\n * Type guard to check if an object is a PostgrestError\n */\nfunction isPostgrestError(error: any): error is PostgrestError {\n  return (\n    error &&\n    typeof error === 'object' &&\n    'code' in error &&\n    'message' in error &&\n    'details' in error\n  );\n}\n\n/**\n * Determine the error category based on the error\n */\nfunction determineErrorCategory(error: PostgrestError | Error): ErrorCategory {\n  if (isPostgrestError(error)) {\n    // PostgreSQL error codes\n    if (error.code?.startsWith('23')) return ErrorCategory.VALIDATION;\n    if (error.code?.startsWith('28') || error.code?.startsWith('42501')) return ErrorCategory.PERMISSION;\n    if (error.code?.startsWith('PGRST3')) return ErrorCategory.PERMISSION;\n    \n    return ErrorCategory.DATABASE;\n  }\n\n  // Check error message for common patterns\n  const message = error.message.toLowerCase();\n  if (message.includes('network') || message.includes('connection')) return ErrorCategory.NETWORK;\n  if (message.includes('auth') || message.includes('login') || message.includes('password')) return ErrorCategory.AUTHENTICATION;\n  if (message.includes('permission') || message.includes('access') || message.includes('denied')) return ErrorCategory.PERMISSION;\n  if (message.includes('valid') || message.includes('required')) return ErrorCategory.VALIDATION;\n\n  return ErrorCategory.UNKNOWN;\n}\n\n/**\n * Check if a message is user-friendly enough to show directly\n */\nfunction isUserFriendlyMessage(message: string): boolean {\n  if (!message) return false;\n  \n  // Too technical or exposing implementation details\n  const technicalTerms = [\n    'undefined',\n    'null',\n    'NaN',\n    'exception',\n    'syntax error',\n    'unexpected token',\n    'stack',\n    'reference error',\n    'type error',\n    'cannot read property',\n    'is not a function',\n    'failed to fetch',\n    'network request failed',\n    'JSON',\n    'parse',\n    'promise',\n    'async',\n    'timeout',\n    'cors',\n    'xhr',\n    'http',\n    'ssl',\n    'certificate',\n    'localhost',\n    'port',\n    'proxy',\n    'socket',\n    'postgresql',\n    'supabase',\n    'database',\n    'query',\n    'sql',\n  ];\n\n  // Check if message contains technical terms\n  const lowercaseMsg = message.toLowerCase();\n  return !technicalTerms.some(term => lowercaseMsg.includes(term.toLowerCase()));\n}\n\n/**\n * Wrap a function with error handling\n */\nexport function withErrorHandling<T extends (...args: any[]) => Promise<any>>(\n  fn: T,\n  errorHandler?: (error: AppError) => void\n): (...args: Parameters<T>) => Promise<ReturnType<T>> {\n  return async (...args: Parameters<T>): Promise<ReturnType<T>> => {\n    try {\n      return await fn(...args);\n    } catch (error) {\n      const appError = handleSupabaseError(error, { functionName: fn.name, args });\n      \n      if (errorHandler) {\n        errorHandler(appError);\n      } else {\n        logError(appError);\n      }\n      \n      throw appError;\n    }\n  };\n}\n"],"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","ignoreList":[]}