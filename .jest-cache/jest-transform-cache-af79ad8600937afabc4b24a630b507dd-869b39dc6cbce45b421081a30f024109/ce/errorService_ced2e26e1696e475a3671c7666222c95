660ceac8470063f441135a2491392f03
"use strict";

/* istanbul ignore next */
function cov_22yuiicert() {
  var path = "/Users/kevin/card-show-finder/src/services/errorService.ts";
  var hash = "fae9101c152a1b752688896ca37364a2f68d2d5a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kevin/card-show-finder/src/services/errorService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 55
        }
      },
      "4": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 7,
          column: 54
        }
      },
      "5": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 50
        }
      },
      "6": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 48
        }
      },
      "7": {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 10,
          column: 42
        }
      },
      "8": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 54
        }
      },
      "9": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 12,
          column: 54
        }
      },
      "10": {
        start: {
          line: 13,
          column: 0
        },
        end: {
          line: 13,
          column: 28
        }
      },
      "11": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 14,
          column: 42
        }
      },
      "12": {
        start: {
          line: 15,
          column: 0
        },
        end: {
          line: 15,
          column: 46
        }
      },
      "13": {
        start: {
          line: 16,
          column: 0
        },
        end: {
          line: 16,
          column: 56
        }
      },
      "14": {
        start: {
          line: 17,
          column: 0
        },
        end: {
          line: 17,
          column: 46
        }
      },
      "15": {
        start: {
          line: 18,
          column: 24
        },
        end: {
          line: 18,
          column: 93
        }
      },
      "16": {
        start: {
          line: 23,
          column: 0
        },
        end: {
          line: 28,
          column: 66
        }
      },
      "17": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 24,
          column: 35
        }
      },
      "18": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 25,
          column: 41
        }
      },
      "19": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 26,
          column: 37
        }
      },
      "20": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 27,
          column: 43
        }
      },
      "21": {
        start: {
          line: 33,
          column: 0
        },
        end: {
          line: 40,
          column: 66
        }
      },
      "22": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 34,
          column: 43
        }
      },
      "23": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 35,
          column: 55
        }
      },
      "24": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 36,
          column: 41
        }
      },
      "25": {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 37,
          column: 47
        }
      },
      "26": {
        start: {
          line: 38,
          column: 4
        },
        end: {
          line: 38,
          column: 47
        }
      },
      "27": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 39,
          column: 41
        }
      },
      "28": {
        start: {
          line: 42,
          column: 22
        },
        end: {
          line: 47,
          column: 1
        }
      },
      "29": {
        start: {
          line: 49,
          column: 20
        },
        end: {
          line: 49,
          column: 40
        }
      },
      "30": {
        start: {
          line: 54,
          column: 4
        },
        end: {
          line: 54,
          column: 52
        }
      },
      "31": {
        start: {
          line: 61,
          column: 4
        },
        end: {
          line: 71,
          column: 5
        }
      },
      "32": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 70,
          column: 10
        }
      },
      "33": {
        start: {
          line: 73,
          column: 4
        },
        end: {
          line: 82,
          column: 5
        }
      },
      "34": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 81,
          column: 10
        }
      },
      "35": {
        start: {
          line: 84,
          column: 4
        },
        end: {
          line: 91,
          column: 6
        }
      },
      "36": {
        start: {
          line: 97,
          column: 21
        },
        end: {
          line: 104,
          column: 5
        }
      },
      "37": {
        start: {
          line: 105,
          column: 4
        },
        end: {
          line: 105,
          column: 23
        }
      },
      "38": {
        start: {
          line: 106,
          column: 4
        },
        end: {
          line: 106,
          column: 20
        }
      },
      "39": {
        start: {
          line: 112,
          column: 21
        },
        end: {
          line: 119,
          column: 5
        }
      },
      "40": {
        start: {
          line: 120,
          column: 4
        },
        end: {
          line: 120,
          column: 23
        }
      },
      "41": {
        start: {
          line: 121,
          column: 4
        },
        end: {
          line: 121,
          column: 20
        }
      },
      "42": {
        start: {
          line: 127,
          column: 21
        },
        end: {
          line: 133,
          column: 5
        }
      },
      "43": {
        start: {
          line: 134,
          column: 4
        },
        end: {
          line: 134,
          column: 23
        }
      },
      "44": {
        start: {
          line: 135,
          column: 4
        },
        end: {
          line: 135,
          column: 20
        }
      },
      "45": {
        start: {
          line: 141,
          column: 21
        },
        end: {
          line: 147,
          column: 5
        }
      },
      "46": {
        start: {
          line: 148,
          column: 4
        },
        end: {
          line: 148,
          column: 23
        }
      },
      "47": {
        start: {
          line: 149,
          column: 4
        },
        end: {
          line: 149,
          column: 20
        }
      },
      "48": {
        start: {
          line: 156,
          column: 4
        },
        end: {
          line: 163,
          column: 5
        }
      },
      "49": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 162,
          column: 11
        }
      },
      "50": {
        start: {
          line: 165,
          column: 4
        },
        end: {
          line: 167,
          column: 5
        }
      },
      "51": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 166,
          column: 106
        }
      },
      "52": {
        start: {
          line: 166,
          column: 46
        },
        end: {
          line: 166,
          column: 104
        }
      },
      "53": {
        start: {
          line: 169,
          column: 4
        },
        end: {
          line: 172,
          column: 5
        }
      },
      "54": {
        start: {
          line: 178,
          column: 4
        },
        end: {
          line: 194,
          column: 5
        }
      },
      "55": {
        start: {
          line: 180,
          column: 33
        },
        end: {
          line: 180,
          column: 84
        }
      },
      "56": {
        start: {
          line: 181,
          column: 27
        },
        end: {
          line: 181,
          column: 79
        }
      },
      "57": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 183,
          column: 33
        }
      },
      "58": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 187,
          column: 9
        }
      },
      "59": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 186,
          column: 78
        }
      },
      "60": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 189,
          column: 90
        }
      },
      "61": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 193,
          column: 65
        }
      },
      "62": {
        start: {
          line: 200,
          column: 4
        },
        end: {
          line: 207,
          column: 5
        }
      },
      "63": {
        start: {
          line: 201,
          column: 33
        },
        end: {
          line: 201,
          column: 84
        }
      },
      "64": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 202,
          column: 68
        }
      },
      "65": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 205,
          column: 71
        }
      },
      "66": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 206,
          column: 18
        }
      },
      "67": {
        start: {
          line: 213,
          column: 4
        },
        end: {
          line: 218,
          column: 5
        }
      },
      "68": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 214,
          column: 80
        }
      },
      "69": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 217,
          column: 69
        }
      },
      "70": {
        start: {
          line: 225,
          column: 28
        },
        end: {
          line: 232,
          column: 5
        }
      },
      "71": {
        start: {
          line: 234,
          column: 4
        },
        end: {
          line: 265,
          column: 5
        }
      },
      "72": {
        start: {
          line: 235,
          column: 8
        },
        end: {
          line: 264,
          column: 9
        }
      },
      "73": {
        start: {
          line: 237,
          column: 16
        },
        end: {
          line: 237,
          column: 72
        }
      },
      "74": {
        start: {
          line: 239,
          column: 16
        },
        end: {
          line: 239,
          column: 96
        }
      },
      "75": {
        start: {
          line: 241,
          column: 16
        },
        end: {
          line: 241,
          column: 76
        }
      },
      "76": {
        start: {
          line: 243,
          column: 16
        },
        end: {
          line: 243,
          column: 96
        }
      },
      "77": {
        start: {
          line: 245,
          column: 16
        },
        end: {
          line: 245,
          column: 63
        }
      },
      "78": {
        start: {
          line: 250,
          column: 16
        },
        end: {
          line: 250,
          column: 90
        }
      },
      "79": {
        start: {
          line: 252,
          column: 16
        },
        end: {
          line: 252,
          column: 77
        }
      },
      "80": {
        start: {
          line: 254,
          column: 16
        },
        end: {
          line: 254,
          column: 63
        }
      },
      "81": {
        start: {
          line: 256,
          column: 16
        },
        end: {
          line: 256,
          column: 68
        }
      },
      "82": {
        start: {
          line: 258,
          column: 16
        },
        end: {
          line: 258,
          column: 63
        }
      },
      "83": {
        start: {
          line: 261,
          column: 16
        },
        end: {
          line: 263,
          column: 54
        }
      },
      "84": {
        start: {
          line: 267,
          column: 4
        },
        end: {
          line: 269,
          column: 42
        }
      },
      "85": {
        start: {
          line: 275,
          column: 4
        },
        end: {
          line: 279,
          column: 28
        }
      },
      "86": {
        start: {
          line: 285,
          column: 4
        },
        end: {
          line: 294,
          column: 5
        }
      },
      "87": {
        start: {
          line: 287,
          column: 8
        },
        end: {
          line: 288,
          column: 44
        }
      },
      "88": {
        start: {
          line: 288,
          column: 12
        },
        end: {
          line: 288,
          column: 44
        }
      },
      "89": {
        start: {
          line: 289,
          column: 8
        },
        end: {
          line: 290,
          column: 44
        }
      },
      "90": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 290,
          column: 44
        }
      },
      "91": {
        start: {
          line: 291,
          column: 8
        },
        end: {
          line: 292,
          column: 44
        }
      },
      "92": {
        start: {
          line: 292,
          column: 12
        },
        end: {
          line: 292,
          column: 44
        }
      },
      "93": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 293,
          column: 38
        }
      },
      "94": {
        start: {
          line: 296,
          column: 20
        },
        end: {
          line: 296,
          column: 47
        }
      },
      "95": {
        start: {
          line: 297,
          column: 4
        },
        end: {
          line: 298,
          column: 37
        }
      },
      "96": {
        start: {
          line: 298,
          column: 8
        },
        end: {
          line: 298,
          column: 37
        }
      },
      "97": {
        start: {
          line: 299,
          column: 4
        },
        end: {
          line: 300,
          column: 44
        }
      },
      "98": {
        start: {
          line: 300,
          column: 8
        },
        end: {
          line: 300,
          column: 44
        }
      },
      "99": {
        start: {
          line: 301,
          column: 4
        },
        end: {
          line: 302,
          column: 40
        }
      },
      "100": {
        start: {
          line: 302,
          column: 8
        },
        end: {
          line: 302,
          column: 40
        }
      },
      "101": {
        start: {
          line: 303,
          column: 4
        },
        end: {
          line: 304,
          column: 40
        }
      },
      "102": {
        start: {
          line: 304,
          column: 8
        },
        end: {
          line: 304,
          column: 40
        }
      },
      "103": {
        start: {
          line: 305,
          column: 4
        },
        end: {
          line: 305,
          column: 33
        }
      },
      "104": {
        start: {
          line: 311,
          column: 4
        },
        end: {
          line: 312,
          column: 21
        }
      },
      "105": {
        start: {
          line: 312,
          column: 8
        },
        end: {
          line: 312,
          column: 21
        }
      },
      "106": {
        start: {
          line: 314,
          column: 27
        },
        end: {
          line: 347,
          column: 5
        }
      },
      "107": {
        start: {
          line: 349,
          column: 25
        },
        end: {
          line: 349,
          column: 46
        }
      },
      "108": {
        start: {
          line: 350,
          column: 4
        },
        end: {
          line: 350,
          column: 83
        }
      },
      "109": {
        start: {
          line: 350,
          column: 40
        },
        end: {
          line: 350,
          column: 81
        }
      },
      "110": {
        start: {
          line: 356,
          column: 4
        },
        end: {
          line: 370,
          column: 6
        }
      },
      "111": {
        start: {
          line: 357,
          column: 8
        },
        end: {
          line: 369,
          column: 9
        }
      },
      "112": {
        start: {
          line: 358,
          column: 12
        },
        end: {
          line: 358,
          column: 37
        }
      },
      "113": {
        start: {
          line: 361,
          column: 29
        },
        end: {
          line: 361,
          column: 88
        }
      },
      "114": {
        start: {
          line: 362,
          column: 12
        },
        end: {
          line: 367,
          column: 13
        }
      },
      "115": {
        start: {
          line: 363,
          column: 16
        },
        end: {
          line: 363,
          column: 39
        }
      },
      "116": {
        start: {
          line: 366,
          column: 16
        },
        end: {
          line: 366,
          column: 35
        }
      },
      "117": {
        start: {
          line: 368,
          column: 12
        },
        end: {
          line: 368,
          column: 27
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 23,
            column: 1
          },
          end: {
            line: 23,
            column: 2
          }
        },
        loc: {
          start: {
            line: 23,
            column: 26
          },
          end: {
            line: 28,
            column: 1
          }
        },
        line: 23
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 33,
            column: 1
          },
          end: {
            line: 33,
            column: 2
          }
        },
        loc: {
          start: {
            line: 33,
            column: 26
          },
          end: {
            line: 40,
            column: 1
          }
        },
        line: 33
      },
      "3": {
        name: "configureErrorService",
        decl: {
          start: {
            line: 53,
            column: 9
          },
          end: {
            line: 53,
            column: 30
          }
        },
        loc: {
          start: {
            line: 53,
            column: 39
          },
          end: {
            line: 55,
            column: 1
          }
        },
        line: 53
      },
      "4": {
        name: "handleSupabaseError",
        decl: {
          start: {
            line: 59,
            column: 9
          },
          end: {
            line: 59,
            column: 28
          }
        },
        loc: {
          start: {
            line: 59,
            column: 77
          },
          end: {
            line: 92,
            column: 1
          }
        },
        line: 59
      },
      "5": {
        name: "handleNetworkError",
        decl: {
          start: {
            line: 96,
            column: 9
          },
          end: {
            line: 96,
            column: 27
          }
        },
        loc: {
          start: {
            line: 96,
            column: 44
          },
          end: {
            line: 107,
            column: 1
          }
        },
        line: 96
      },
      "6": {
        name: "handleAuthError",
        decl: {
          start: {
            line: 111,
            column: 9
          },
          end: {
            line: 111,
            column: 24
          }
        },
        loc: {
          start: {
            line: 111,
            column: 41
          },
          end: {
            line: 122,
            column: 1
          }
        },
        line: 111
      },
      "7": {
        name: "createValidationError",
        decl: {
          start: {
            line: 126,
            column: 9
          },
          end: {
            line: 126,
            column: 30
          }
        },
        loc: {
          start: {
            line: 126,
            column: 49
          },
          end: {
            line: 136,
            column: 1
          }
        },
        line: 126
      },
      "8": {
        name: "createPermissionError",
        decl: {
          start: {
            line: 140,
            column: 9
          },
          end: {
            line: 140,
            column: 30
          }
        },
        loc: {
          start: {
            line: 140,
            column: 103
          },
          end: {
            line: 150,
            column: 1
          }
        },
        line: 140
      },
      "9": {
        name: "logError",
        decl: {
          start: {
            line: 154,
            column: 9
          },
          end: {
            line: 154,
            column: 17
          }
        },
        loc: {
          start: {
            line: 154,
            column: 25
          },
          end: {
            line: 173,
            column: 1
          }
        },
        line: 154
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 166,
            column: 41
          },
          end: {
            line: 166,
            column: 42
          }
        },
        loc: {
          start: {
            line: 166,
            column: 46
          },
          end: {
            line: 166,
            column: 104
          }
        },
        line: 166
      },
      "11": {
        name: "storeErrorInStorage",
        decl: {
          start: {
            line: 177,
            column: 15
          },
          end: {
            line: 177,
            column: 34
          }
        },
        loc: {
          start: {
            line: 177,
            column: 42
          },
          end: {
            line: 195,
            column: 1
          }
        },
        line: 177
      },
      "12": {
        name: "getStoredErrors",
        decl: {
          start: {
            line: 199,
            column: 15
          },
          end: {
            line: 199,
            column: 30
          }
        },
        loc: {
          start: {
            line: 199,
            column: 33
          },
          end: {
            line: 208,
            column: 1
          }
        },
        line: 199
      },
      "13": {
        name: "clearStoredErrors",
        decl: {
          start: {
            line: 212,
            column: 15
          },
          end: {
            line: 212,
            column: 32
          }
        },
        loc: {
          start: {
            line: 212,
            column: 35
          },
          end: {
            line: 219,
            column: 1
          }
        },
        line: 212
      },
      "14": {
        name: "getUserFriendlyMessage",
        decl: {
          start: {
            line: 223,
            column: 9
          },
          end: {
            line: 223,
            column: 31
          }
        },
        loc: {
          start: {
            line: 223,
            column: 39
          },
          end: {
            line: 270,
            column: 1
          }
        },
        line: 223
      },
      "15": {
        name: "isPostgrestError",
        decl: {
          start: {
            line: 274,
            column: 9
          },
          end: {
            line: 274,
            column: 25
          }
        },
        loc: {
          start: {
            line: 274,
            column: 33
          },
          end: {
            line: 280,
            column: 1
          }
        },
        line: 274
      },
      "16": {
        name: "determineErrorCategory",
        decl: {
          start: {
            line: 284,
            column: 9
          },
          end: {
            line: 284,
            column: 31
          }
        },
        loc: {
          start: {
            line: 284,
            column: 39
          },
          end: {
            line: 306,
            column: 1
          }
        },
        line: 284
      },
      "17": {
        name: "isUserFriendlyMessage",
        decl: {
          start: {
            line: 310,
            column: 9
          },
          end: {
            line: 310,
            column: 30
          }
        },
        loc: {
          start: {
            line: 310,
            column: 40
          },
          end: {
            line: 351,
            column: 1
          }
        },
        line: 310
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 350,
            column: 32
          },
          end: {
            line: 350,
            column: 33
          }
        },
        loc: {
          start: {
            line: 350,
            column: 40
          },
          end: {
            line: 350,
            column: 81
          }
        },
        line: 350
      },
      "19": {
        name: "withErrorHandling",
        decl: {
          start: {
            line: 355,
            column: 9
          },
          end: {
            line: 355,
            column: 26
          }
        },
        loc: {
          start: {
            line: 355,
            column: 45
          },
          end: {
            line: 371,
            column: 1
          }
        },
        line: 355
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 356,
            column: 11
          },
          end: {
            line: 356,
            column: 12
          }
        },
        loc: {
          start: {
            line: 356,
            column: 30
          },
          end: {
            line: 370,
            column: 5
          }
        },
        line: 356
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 28,
            column: 3
          },
          end: {
            line: 28,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 3
          },
          end: {
            line: 28,
            column: 16
          }
        }, {
          start: {
            line: 28,
            column: 21
          },
          end: {
            line: 28,
            column: 63
          }
        }],
        line: 28
      },
      "4": {
        loc: {
          start: {
            line: 40,
            column: 3
          },
          end: {
            line: 40,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 40,
            column: 3
          },
          end: {
            line: 40,
            column: 16
          }
        }, {
          start: {
            line: 40,
            column: 21
          },
          end: {
            line: 40,
            column: 63
          }
        }],
        line: 40
      },
      "5": {
        loc: {
          start: {
            line: 59,
            column: 45
          },
          end: {
            line: 59,
            column: 75
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 59,
            column: 56
          },
          end: {
            line: 59,
            column: 75
          }
        }],
        line: 59
      },
      "6": {
        loc: {
          start: {
            line: 61,
            column: 4
          },
          end: {
            line: 71,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 61,
            column: 4
          },
          end: {
            line: 71,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 61
      },
      "7": {
        loc: {
          start: {
            line: 63,
            column: 21
          },
          end: {
            line: 63,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 63,
            column: 21
          },
          end: {
            line: 63,
            column: 34
          }
        }, {
          start: {
            line: 63,
            column: 38
          },
          end: {
            line: 63,
            column: 65
          }
        }],
        line: 63
      },
      "8": {
        loc: {
          start: {
            line: 73,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      },
      "9": {
        loc: {
          start: {
            line: 75,
            column: 21
          },
          end: {
            line: 75,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 75,
            column: 21
          },
          end: {
            line: 75,
            column: 34
          }
        }, {
          start: {
            line: 75,
            column: 38
          },
          end: {
            line: 75,
            column: 68
          }
        }],
        line: 75
      },
      "10": {
        loc: {
          start: {
            line: 98,
            column: 17
          },
          end: {
            line: 98,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 98,
            column: 42
          },
          end: {
            line: 98,
            column: 55
          }
        }, {
          start: {
            line: 98,
            column: 58
          },
          end: {
            line: 98,
            column: 85
          }
        }],
        line: 98
      },
      "11": {
        loc: {
          start: {
            line: 113,
            column: 17
          },
          end: {
            line: 113,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 113,
            column: 42
          },
          end: {
            line: 113,
            column: 55
          }
        }, {
          start: {
            line: 113,
            column: 58
          },
          end: {
            line: 113,
            column: 81
          }
        }],
        line: 113
      },
      "12": {
        loc: {
          start: {
            line: 140,
            column: 31
          },
          end: {
            line: 140,
            column: 92
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 140,
            column: 41
          },
          end: {
            line: 140,
            column: 92
          }
        }],
        line: 140
      },
      "13": {
        loc: {
          start: {
            line: 156,
            column: 4
          },
          end: {
            line: 163,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 156,
            column: 4
          },
          end: {
            line: 163,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 156
      },
      "14": {
        loc: {
          start: {
            line: 165,
            column: 4
          },
          end: {
            line: 167,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 165,
            column: 4
          },
          end: {
            line: 167,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 165
      },
      "15": {
        loc: {
          start: {
            line: 169,
            column: 4
          },
          end: {
            line: 172,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 169,
            column: 4
          },
          end: {
            line: 172,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 169
      },
      "16": {
        loc: {
          start: {
            line: 181,
            column: 27
          },
          end: {
            line: 181,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 181,
            column: 46
          },
          end: {
            line: 181,
            column: 74
          }
        }, {
          start: {
            line: 181,
            column: 77
          },
          end: {
            line: 181,
            column: 79
          }
        }],
        line: 181
      },
      "17": {
        loc: {
          start: {
            line: 185,
            column: 8
          },
          end: {
            line: 187,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 185,
            column: 8
          },
          end: {
            line: 187,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 185
      },
      "18": {
        loc: {
          start: {
            line: 202,
            column: 15
          },
          end: {
            line: 202,
            column: 67
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 202,
            column: 34
          },
          end: {
            line: 202,
            column: 62
          }
        }, {
          start: {
            line: 202,
            column: 65
          },
          end: {
            line: 202,
            column: 67
          }
        }],
        line: 202
      },
      "19": {
        loc: {
          start: {
            line: 234,
            column: 4
          },
          end: {
            line: 265,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 234,
            column: 4
          },
          end: {
            line: 265,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 234
      },
      "20": {
        loc: {
          start: {
            line: 235,
            column: 8
          },
          end: {
            line: 264,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 236,
            column: 12
          },
          end: {
            line: 237,
            column: 72
          }
        }, {
          start: {
            line: 238,
            column: 12
          },
          end: {
            line: 239,
            column: 96
          }
        }, {
          start: {
            line: 240,
            column: 12
          },
          end: {
            line: 241,
            column: 76
          }
        }, {
          start: {
            line: 242,
            column: 12
          },
          end: {
            line: 243,
            column: 96
          }
        }, {
          start: {
            line: 244,
            column: 12
          },
          end: {
            line: 245,
            column: 63
          }
        }, {
          start: {
            line: 246,
            column: 12
          },
          end: {
            line: 246,
            column: 23
          }
        }, {
          start: {
            line: 247,
            column: 12
          },
          end: {
            line: 247,
            column: 38
          }
        }, {
          start: {
            line: 248,
            column: 12
          },
          end: {
            line: 248,
            column: 39
          }
        }, {
          start: {
            line: 249,
            column: 12
          },
          end: {
            line: 250,
            column: 90
          }
        }, {
          start: {
            line: 251,
            column: 12
          },
          end: {
            line: 252,
            column: 77
          }
        }, {
          start: {
            line: 253,
            column: 12
          },
          end: {
            line: 254,
            column: 63
          }
        }, {
          start: {
            line: 255,
            column: 12
          },
          end: {
            line: 256,
            column: 68
          }
        }, {
          start: {
            line: 257,
            column: 12
          },
          end: {
            line: 258,
            column: 63
          }
        }, {
          start: {
            line: 259,
            column: 12
          },
          end: {
            line: 263,
            column: 54
          }
        }],
        line: 235
      },
      "21": {
        loc: {
          start: {
            line: 261,
            column: 23
          },
          end: {
            line: 263,
            column: 53
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 262,
            column: 22
          },
          end: {
            line: 262,
            column: 35
          }
        }, {
          start: {
            line: 263,
            column: 22
          },
          end: {
            line: 263,
            column: 53
          }
        }],
        line: 261
      },
      "22": {
        loc: {
          start: {
            line: 267,
            column: 11
          },
          end: {
            line: 269,
            column: 41
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 268,
            column: 10
          },
          end: {
            line: 268,
            column: 23
          }
        }, {
          start: {
            line: 269,
            column: 10
          },
          end: {
            line: 269,
            column: 41
          }
        }],
        line: 267
      },
      "23": {
        loc: {
          start: {
            line: 275,
            column: 12
          },
          end: {
            line: 279,
            column: 26
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 275,
            column: 12
          },
          end: {
            line: 275,
            column: 17
          }
        }, {
          start: {
            line: 276,
            column: 8
          },
          end: {
            line: 276,
            column: 33
          }
        }, {
          start: {
            line: 277,
            column: 8
          },
          end: {
            line: 277,
            column: 23
          }
        }, {
          start: {
            line: 278,
            column: 8
          },
          end: {
            line: 278,
            column: 26
          }
        }, {
          start: {
            line: 279,
            column: 8
          },
          end: {
            line: 279,
            column: 26
          }
        }],
        line: 275
      },
      "24": {
        loc: {
          start: {
            line: 285,
            column: 4
          },
          end: {
            line: 294,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 285,
            column: 4
          },
          end: {
            line: 294,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 285
      },
      "25": {
        loc: {
          start: {
            line: 287,
            column: 8
          },
          end: {
            line: 288,
            column: 44
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 287,
            column: 8
          },
          end: {
            line: 288,
            column: 44
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 287
      },
      "26": {
        loc: {
          start: {
            line: 289,
            column: 8
          },
          end: {
            line: 290,
            column: 44
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 289,
            column: 8
          },
          end: {
            line: 290,
            column: 44
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 289
      },
      "27": {
        loc: {
          start: {
            line: 289,
            column: 12
          },
          end: {
            line: 289,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 289,
            column: 12
          },
          end: {
            line: 289,
            column: 40
          }
        }, {
          start: {
            line: 289,
            column: 44
          },
          end: {
            line: 289,
            column: 75
          }
        }],
        line: 289
      },
      "28": {
        loc: {
          start: {
            line: 291,
            column: 8
          },
          end: {
            line: 292,
            column: 44
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 291,
            column: 8
          },
          end: {
            line: 292,
            column: 44
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 291
      },
      "29": {
        loc: {
          start: {
            line: 297,
            column: 4
          },
          end: {
            line: 298,
            column: 37
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 297,
            column: 4
          },
          end: {
            line: 298,
            column: 37
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 297
      },
      "30": {
        loc: {
          start: {
            line: 297,
            column: 8
          },
          end: {
            line: 297,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 297,
            column: 8
          },
          end: {
            line: 297,
            column: 35
          }
        }, {
          start: {
            line: 297,
            column: 39
          },
          end: {
            line: 297,
            column: 69
          }
        }],
        line: 297
      },
      "31": {
        loc: {
          start: {
            line: 299,
            column: 4
          },
          end: {
            line: 300,
            column: 44
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 299,
            column: 4
          },
          end: {
            line: 300,
            column: 44
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 299
      },
      "32": {
        loc: {
          start: {
            line: 299,
            column: 8
          },
          end: {
            line: 299,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 299,
            column: 8
          },
          end: {
            line: 299,
            column: 32
          }
        }, {
          start: {
            line: 299,
            column: 36
          },
          end: {
            line: 299,
            column: 61
          }
        }, {
          start: {
            line: 299,
            column: 65
          },
          end: {
            line: 299,
            column: 93
          }
        }],
        line: 299
      },
      "33": {
        loc: {
          start: {
            line: 301,
            column: 4
          },
          end: {
            line: 302,
            column: 40
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 301,
            column: 4
          },
          end: {
            line: 302,
            column: 40
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 301
      },
      "34": {
        loc: {
          start: {
            line: 301,
            column: 8
          },
          end: {
            line: 301,
            column: 98
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 301,
            column: 8
          },
          end: {
            line: 301,
            column: 38
          }
        }, {
          start: {
            line: 301,
            column: 42
          },
          end: {
            line: 301,
            column: 68
          }
        }, {
          start: {
            line: 301,
            column: 72
          },
          end: {
            line: 301,
            column: 98
          }
        }],
        line: 301
      },
      "35": {
        loc: {
          start: {
            line: 303,
            column: 4
          },
          end: {
            line: 304,
            column: 40
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 303,
            column: 4
          },
          end: {
            line: 304,
            column: 40
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 303
      },
      "36": {
        loc: {
          start: {
            line: 303,
            column: 8
          },
          end: {
            line: 303,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 303,
            column: 8
          },
          end: {
            line: 303,
            column: 33
          }
        }, {
          start: {
            line: 303,
            column: 37
          },
          end: {
            line: 303,
            column: 65
          }
        }],
        line: 303
      },
      "37": {
        loc: {
          start: {
            line: 311,
            column: 4
          },
          end: {
            line: 312,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 311,
            column: 4
          },
          end: {
            line: 312,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 311
      },
      "38": {
        loc: {
          start: {
            line: 362,
            column: 12
          },
          end: {
            line: 367,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 362,
            column: 12
          },
          end: {
            line: 367,
            column: 13
          }
        }, {
          start: {
            line: 365,
            column: 17
          },
          end: {
            line: 367,
            column: 13
          }
        }],
        line: 362
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0, 0, 0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0, 0],
      "33": [0, 0],
      "34": [0, 0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/kevin/card-show-finder/src/services/errorService.ts",
      mappings: ";;;;;;AA8DA,sDAEC;AAKD,kDAuCC;AAKD,gDAeC;AAKD,0CAeC;AAKD,sDAcC;AAKD,sDAcC;AAKD,4BA0BC;AA8BD,0CAQC;AAKD,8CAMC;AAKD,wDAiDC;AAwFD,8CAmBC;AA1aD,8FAAqE;AAErE;;GAEG;AACH,IAAY,aAKX;AALD,WAAY,aAAa;IACvB,8BAAa,CAAA;IACb,oCAAmB,CAAA;IACnB,gCAAe,CAAA;IACf,sCAAqB,CAAA;AACvB,CAAC,EALW,aAAa,6BAAb,aAAa,QAKxB;AAED;;GAEG;AACH,IAAY,aAOX;AAPD,WAAY,aAAa;IACvB,sCAAqB,CAAA;IACrB,kDAAiC,CAAA;IACjC,oCAAmB,CAAA;IACnB,0CAAyB,CAAA;IACzB,0CAAyB,CAAA;IACzB,oCAAmB,CAAA;AACrB,CAAC,EAPW,aAAa,6BAAb,aAAa,QAOxB;AAyBD,wBAAwB;AACxB,MAAM,aAAa,GAAuB;IACxC,oBAAoB,EAAE,IAAI;IAC1B,mBAAmB,EAAE,KAAK,EAAE,2DAA2D;IACvF,oBAAoB,EAAE,IAAI;IAC1B,eAAe,EAAE,GAAG;CACrB,CAAC;AAEF,wBAAwB;AACxB,IAAI,aAAa,GAAuB,EAAE,GAAG,aAAa,EAAE,CAAC;AAE7D;;GAEG;AACH,SAAgB,qBAAqB,CAAC,MAAmC;IACvE,aAAa,GAAG,EAAE,GAAG,aAAa,EAAE,GAAG,MAAM,EAAE,CAAC;AAClD,CAAC;AAED;;GAEG;AACH,SAAgB,mBAAmB,CACjC,KAAuC,EACvC,OAA6B,EAC7B,WAA0B,aAAa,CAAC,KAAK;IAE7C,2CAA2C;IAC3C,IAAI,gBAAgB,CAAC,KAAK,CAAC,EAAE,CAAC;QAC5B,OAAO;YACL,OAAO,EAAE,KAAK,CAAC,OAAO,IAAI,2BAA2B;YACrD,IAAI,EAAE,KAAK,CAAC,IAAI;YAChB,QAAQ,EAAE,sBAAsB,CAAC,KAAK,CAAC;YACvC,QAAQ;YACR,aAAa,EAAE,KAAK;YACpB,OAAO;YACP,SAAS,EAAE,IAAI,IAAI,EAAE;SACtB,CAAC;IACJ,CAAC;IAED,+BAA+B;IAC/B,IAAI,KAAK,YAAY,KAAK,EAAE,CAAC;QAC3B,OAAO;YACL,OAAO,EAAE,KAAK,CAAC,OAAO,IAAI,8BAA8B;YACxD,QAAQ,EAAE,aAAa,CAAC,OAAO;YAC/B,QAAQ;YACR,aAAa,EAAE,KAAK;YACpB,OAAO;YACP,SAAS,EAAE,IAAI,IAAI,EAAE;SACtB,CAAC;IACJ,CAAC;IAED,6BAA6B;IAC7B,OAAO;QACL,OAAO,EAAE,2BAA2B;QACpC,QAAQ,EAAE,aAAa,CAAC,OAAO;QAC/B,QAAQ;QACR,aAAa,EAAE,KAAK;QACpB,OAAO;QACP,SAAS,EAAE,IAAI,IAAI,EAAE;KACtB,CAAC;AACJ,CAAC;AAED;;GAEG;AACH,SAAgB,kBAAkB,CAChC,KAAsB,EACtB,OAA6B;IAE7B,MAAM,QAAQ,GAAa;QACzB,OAAO,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,2BAA2B;QAC7E,QAAQ,EAAE,aAAa,CAAC,OAAO;QAC/B,QAAQ,EAAE,aAAa,CAAC,KAAK;QAC7B,aAAa,EAAE,KAAK;QACpB,OAAO;QACP,SAAS,EAAE,IAAI,IAAI,EAAE;KACtB,CAAC;IAEF,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACnB,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED;;GAEG;AACH,SAAgB,eAAe,CAC7B,KAAsB,EACtB,OAA6B;IAE7B,MAAM,QAAQ,GAAa;QACzB,OAAO,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,uBAAuB;QACzE,QAAQ,EAAE,aAAa,CAAC,cAAc;QACtC,QAAQ,EAAE,aAAa,CAAC,KAAK;QAC7B,aAAa,EAAE,KAAK;QACpB,OAAO;QACP,SAAS,EAAE,IAAI,IAAI,EAAE;KACtB,CAAC;IAEF,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACnB,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED;;GAEG;AACH,SAAgB,qBAAqB,CACnC,OAAe,EACf,OAA6B;IAE7B,MAAM,QAAQ,GAAa;QACzB,OAAO;QACP,QAAQ,EAAE,aAAa,CAAC,UAAU;QAClC,QAAQ,EAAE,aAAa,CAAC,OAAO;QAC/B,OAAO;QACP,SAAS,EAAE,IAAI,IAAI,EAAE;KACtB,CAAC;IAEF,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACnB,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED;;GAEG;AACH,SAAgB,qBAAqB,CACnC,UAAkB,mDAAmD,EACrE,OAA6B;IAE7B,MAAM,QAAQ,GAAa;QACzB,OAAO;QACP,QAAQ,EAAE,aAAa,CAAC,UAAU;QAClC,QAAQ,EAAE,aAAa,CAAC,OAAO;QAC/B,OAAO;QACP,SAAS,EAAE,IAAI,IAAI,EAAE;KACtB,CAAC;IAEF,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACnB,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED;;GAEG;AACH,SAAgB,QAAQ,CAAC,KAAe;IACtC,kBAAkB;IAClB,IAAI,aAAa,CAAC,oBAAoB,EAAE,CAAC;QACvC,OAAO,CAAC,KAAK,CACX,IAAI,KAAK,CAAC,QAAQ,CAAC,WAAW,EAAE,MAAM,KAAK,CAAC,QAAQ,KAAK,KAAK,CAAC,OAAO,EAAE,EACxE;YACE,IAAI,EAAE,KAAK,CAAC,IAAI;YAChB,OAAO,EAAE,KAAK,CAAC,OAAO;YACtB,SAAS,EAAE,KAAK,CAAC,SAAS;YAC1B,aAAa,EAAE,KAAK,CAAC,aAAa;SACnC,CACF,CAAC;IACJ,CAAC;IAED,kDAAkD;IAClD,IAAI,aAAa,CAAC,oBAAoB,EAAE,CAAC;QACvC,mBAAmB,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CACnC,OAAO,CAAC,KAAK,CAAC,wCAAwC,EAAE,CAAC,CAAC,CAC3D,CAAC;IACJ,CAAC;IAED,2CAA2C;IAC3C,IAAI,aAAa,CAAC,mBAAmB,EAAE,CAAC;QACtC,4DAA4D;QAC5D,mCAAmC;IACrC,CAAC;AACH,CAAC;AAED;;GAEG;AACH,KAAK,UAAU,mBAAmB,CAAC,KAAe;IAChD,IAAI,CAAC;QACH,sBAAsB;QACtB,MAAM,gBAAgB,GAAG,MAAM,uBAAY,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QAClE,IAAI,YAAY,GAAe,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAEpF,gBAAgB;QAChB,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAEzB,oCAAoC;QACpC,IAAI,YAAY,CAAC,MAAM,GAAG,aAAa,CAAC,eAAe,EAAE,CAAC;YACxD,YAAY,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC;QACpE,CAAC;QAED,uBAAuB;QACvB,MAAM,uBAAY,CAAC,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC;IACzE,CAAC;IAAC,OAAO,CAAC,EAAE,CAAC;QACX,oCAAoC;QACpC,OAAO,CAAC,KAAK,CAAC,sCAAsC,EAAE,CAAC,CAAC,CAAC;IAC3D,CAAC;AACH,CAAC;AAED;;GAEG;AACI,KAAK,UAAU,eAAe;IACnC,IAAI,CAAC;QACH,MAAM,gBAAgB,GAAG,MAAM,uBAAY,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QAClE,OAAO,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IAC9D,CAAC;IAAC,OAAO,CAAC,EAAE,CAAC;QACX,OAAO,CAAC,KAAK,CAAC,4CAA4C,EAAE,CAAC,CAAC,CAAC;QAC/D,OAAO,EAAE,CAAC;IACZ,CAAC;AACH,CAAC;AAED;;GAEG;AACI,KAAK,UAAU,iBAAiB;IACrC,IAAI,CAAC;QACH,MAAM,uBAAY,CAAC,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;IAC/D,CAAC;IAAC,OAAO,CAAC,EAAE,CAAC;QACX,OAAO,CAAC,KAAK,CAAC,0CAA0C,EAAE,CAAC,CAAC,CAAC;IAC/D,CAAC;AACH,CAAC;AAED;;GAEG;AACH,SAAgB,sBAAsB,CAAC,KAAe;IACpD,+BAA+B;IAC/B,MAAM,eAAe,GAAkC;QACrD,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE,6CAA6C;QACvE,CAAC,aAAa,CAAC,cAAc,CAAC,EAAE,uDAAuD;QACvF,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE,kEAAkE;QAC3F,CAAC,aAAa,CAAC,UAAU,CAAC,EAAE,4CAA4C;QACxE,CAAC,aAAa,CAAC,UAAU,CAAC,EAAE,oDAAoD;QAChF,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE,uDAAuD;KACjF,CAAC;IAEF,+BAA+B;IAC/B,IAAI,KAAK,CAAC,IAAI,EAAE,CAAC;QACf,QAAQ,KAAK,CAAC,IAAI,EAAE,CAAC;YACnB,KAAK,OAAO,EAAE,8BAA8B;gBAC1C,OAAO,gDAAgD,CAAC;YAC1D,KAAK,OAAO,EAAE,6BAA6B;gBACzC,OAAO,wEAAwE,CAAC;YAClF,KAAK,OAAO,EAAE,oCAAoC;gBAChD,OAAO,oDAAoD,CAAC;YAC9D,KAAK,OAAO,EAAE,mCAAmC;gBAC/C,OAAO,wEAAwE,CAAC;YAClF,KAAK,UAAU,EAAE,gCAAgC;gBAC/C,OAAO,uCAAuC,CAAC;YACjD,KAAK,KAAK,CAAC;YACX,KAAK,oBAAoB,CAAC;YAC1B,KAAK,qBAAqB,CAAC;YAC3B,KAAK,qBAAqB;gBACxB,OAAO,kEAAkE,CAAC;YAC5E,KAAK,KAAK;gBACR,OAAO,qDAAqD,CAAC;YAC/D,KAAK,KAAK;gBACR,OAAO,uCAAuC,CAAC;YACjD,KAAK,KAAK;gBACR,OAAO,4CAA4C,CAAC;YACtD,KAAK,KAAK;gBACR,OAAO,uCAAuC,CAAC;YACjD;gBACE,8EAA8E;gBAC9E,OAAO,qBAAqB,CAAC,KAAK,CAAC,OAAO,CAAC;oBACzC,CAAC,CAAC,KAAK,CAAC,OAAO;oBACf,CAAC,CAAC,eAAe,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QACxC,CAAC;IACH,CAAC;IAED,sEAAsE;IACtE,OAAO,qBAAqB,CAAC,KAAK,CAAC,OAAO,CAAC;QACzC,CAAC,CAAC,KAAK,CAAC,OAAO;QACf,CAAC,CAAC,eAAe,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;AACtC,CAAC;AAED;;GAEG;AACH,SAAS,gBAAgB,CAAC,KAAU;IAClC,OAAO,CACL,KAAK;QACL,OAAO,KAAK,KAAK,QAAQ;QACzB,MAAM,IAAI,KAAK;QACf,SAAS,IAAI,KAAK;QAClB,SAAS,IAAI,KAAK,CACnB,CAAC;AACJ,CAAC;AAED;;GAEG;AACH,SAAS,sBAAsB,CAAC,KAA6B;IAC3D,IAAI,gBAAgB,CAAC,KAAK,CAAC,EAAE,CAAC;QAC5B,yBAAyB;QACzB,IAAI,KAAK,CAAC,IAAI,EAAE,UAAU,CAAC,IAAI,CAAC;YAAE,OAAO,aAAa,CAAC,UAAU,CAAC;QAClE,IAAI,KAAK,CAAC,IAAI,EAAE,UAAU,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,EAAE,UAAU,CAAC,OAAO,CAAC;YAAE,OAAO,aAAa,CAAC,UAAU,CAAC;QACrG,IAAI,KAAK,CAAC,IAAI,EAAE,UAAU,CAAC,QAAQ,CAAC;YAAE,OAAO,aAAa,CAAC,UAAU,CAAC;QAEtE,OAAO,aAAa,CAAC,QAAQ,CAAC;IAChC,CAAC;IAED,0CAA0C;IAC1C,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;IAC5C,IAAI,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC;QAAE,OAAO,aAAa,CAAC,OAAO,CAAC;IAChG,IAAI,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC;QAAE,OAAO,aAAa,CAAC,cAAc,CAAC;IAC/H,IAAI,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC;QAAE,OAAO,aAAa,CAAC,UAAU,CAAC;IAChI,IAAI,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC;QAAE,OAAO,aAAa,CAAC,UAAU,CAAC;IAE/F,OAAO,aAAa,CAAC,OAAO,CAAC;AAC/B,CAAC;AAED;;GAEG;AACH,SAAS,qBAAqB,CAAC,OAAe;IAC5C,IAAI,CAAC,OAAO;QAAE,OAAO,KAAK,CAAC;IAE3B,mDAAmD;IACnD,MAAM,cAAc,GAAG;QACrB,WAAW;QACX,MAAM;QACN,KAAK;QACL,WAAW;QACX,cAAc;QACd,kBAAkB;QAClB,OAAO;QACP,iBAAiB;QACjB,YAAY;QACZ,sBAAsB;QACtB,mBAAmB;QACnB,iBAAiB;QACjB,wBAAwB;QACxB,MAAM;QACN,OAAO;QACP,SAAS;QACT,OAAO;QACP,SAAS;QACT,MAAM;QACN,KAAK;QACL,MAAM;QACN,KAAK;QACL,aAAa;QACb,WAAW;QACX,MAAM;QACN,OAAO;QACP,QAAQ;QACR,YAAY;QACZ,UAAU;QACV,UAAU;QACV,OAAO;QACP,KAAK;KACN,CAAC;IAEF,4CAA4C;IAC5C,MAAM,YAAY,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;IAC3C,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;AACjF,CAAC;AAED;;GAEG;AACH,SAAgB,iBAAiB,CAC/B,EAAK,EACL,YAAwC;IAExC,OAAO,KAAK,EAAE,GAAG,IAAmB,EAA0B,EAAE;QAC9D,IAAI,CAAC;YACH,OAAO,MAAM,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC;QAC3B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,QAAQ,GAAG,mBAAmB,CAAC,KAAK,EAAE,EAAE,YAAY,EAAE,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;YAE7E,IAAI,YAAY,EAAE,CAAC;gBACjB,YAAY,CAAC,QAAQ,CAAC,CAAC;YACzB,CAAC;iBAAM,CAAC;gBACN,QAAQ,CAAC,QAAQ,CAAC,CAAC;YACrB,CAAC;YAED,MAAM,QAAQ,CAAC;QACjB,CAAC;IACH,CAAC,CAAC;AACJ,CAAC",
      names: [],
      sources: ["/Users/kevin/card-show-finder/src/services/errorService.ts"],
      sourcesContent: ["import { PostgrestError } from '@supabase/supabase-js';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n/**\n * Error severity levels for logging and reporting\n */\nexport enum ErrorSeverity {\n  INFO = 'info',\n  WARNING = 'warning',\n  ERROR = 'error',\n  CRITICAL = 'critical',\n}\n\n/**\n * Error categories to classify different types of errors\n */\nexport enum ErrorCategory {\n  DATABASE = 'database',\n  AUTHENTICATION = 'authentication',\n  NETWORK = 'network',\n  VALIDATION = 'validation',\n  PERMISSION = 'permission',\n  UNKNOWN = 'unknown',\n}\n\n/**\n * Structured error object for consistent error handling\n */\nexport interface AppError {\n  message: string;\n  code?: string;\n  category: ErrorCategory;\n  severity: ErrorSeverity;\n  originalError?: any;\n  context?: Record<string, any>;\n  timestamp: Date;\n}\n\n/**\n * Configuration for error service behavior\n */\ninterface ErrorServiceConfig {\n  enableConsoleLogging: boolean;\n  enableRemoteLogging: boolean;\n  enableStorageLogging: boolean;\n  maxStoredErrors: number;\n}\n\n// Default configuration\nconst defaultConfig: ErrorServiceConfig = {\n  enableConsoleLogging: true,\n  enableRemoteLogging: false, // Disabled by default until a remote service is configured\n  enableStorageLogging: true,\n  maxStoredErrors: 100,\n};\n\n// Current configuration\nlet currentConfig: ErrorServiceConfig = { ...defaultConfig };\n\n/**\n * Configure error service behavior\n */\nexport function configureErrorService(config: Partial<ErrorServiceConfig>): void {\n  currentConfig = { ...currentConfig, ...config };\n}\n\n/**\n * Process a Supabase PostgrestError into our standard AppError format\n */\nexport function handleSupabaseError(\n  error: PostgrestError | Error | unknown,\n  context?: Record<string, any>,\n  severity: ErrorSeverity = ErrorSeverity.ERROR\n): AppError {\n  // Handle PostgrestError type from Supabase\n  if (isPostgrestError(error)) {\n    return {\n      message: error.message || 'Database operation failed',\n      code: error.code,\n      category: determineErrorCategory(error),\n      severity,\n      originalError: error,\n      context,\n      timestamp: new Date(),\n    };\n  }\n\n  // Handle generic Error objects\n  if (error instanceof Error) {\n    return {\n      message: error.message || 'An unexpected error occurred',\n      category: ErrorCategory.UNKNOWN,\n      severity,\n      originalError: error,\n      context,\n      timestamp: new Date(),\n    };\n  }\n\n  // Handle unknown error types\n  return {\n    message: 'An unknown error occurred',\n    category: ErrorCategory.UNKNOWN,\n    severity,\n    originalError: error,\n    context,\n    timestamp: new Date(),\n  };\n}\n\n/**\n * Handle network-related errors\n */\nexport function handleNetworkError(\n  error: Error | unknown,\n  context?: Record<string, any>\n): AppError {\n  const appError: AppError = {\n    message: error instanceof Error ? error.message : 'Network connection failed',\n    category: ErrorCategory.NETWORK,\n    severity: ErrorSeverity.ERROR,\n    originalError: error,\n    context,\n    timestamp: new Date(),\n  };\n\n  logError(appError);\n  return appError;\n}\n\n/**\n * Handle authentication-related errors\n */\nexport function handleAuthError(\n  error: Error | unknown,\n  context?: Record<string, any>\n): AppError {\n  const appError: AppError = {\n    message: error instanceof Error ? error.message : 'Authentication failed',\n    category: ErrorCategory.AUTHENTICATION,\n    severity: ErrorSeverity.ERROR,\n    originalError: error,\n    context,\n    timestamp: new Date(),\n  };\n\n  logError(appError);\n  return appError;\n}\n\n/**\n * Create a validation error when input validation fails\n */\nexport function createValidationError(\n  message: string,\n  context?: Record<string, any>\n): AppError {\n  const appError: AppError = {\n    message,\n    category: ErrorCategory.VALIDATION,\n    severity: ErrorSeverity.WARNING,\n    context,\n    timestamp: new Date(),\n  };\n\n  logError(appError);\n  return appError;\n}\n\n/**\n * Create a permission error when user lacks required permissions\n */\nexport function createPermissionError(\n  message: string = 'You do not have permission to perform this action',\n  context?: Record<string, any>\n): AppError {\n  const appError: AppError = {\n    message,\n    category: ErrorCategory.PERMISSION,\n    severity: ErrorSeverity.WARNING,\n    context,\n    timestamp: new Date(),\n  };\n\n  logError(appError);\n  return appError;\n}\n\n/**\n * Log an error based on current configuration\n */\nexport function logError(error: AppError): void {\n  // Console logging\n  if (currentConfig.enableConsoleLogging) {\n    console.error(\n      `[${error.severity.toUpperCase()}] [${error.category}] ${error.message}`,\n      {\n        code: error.code,\n        context: error.context,\n        timestamp: error.timestamp,\n        originalError: error.originalError,\n      }\n    );\n  }\n\n  // Store error in AsyncStorage for later retrieval\n  if (currentConfig.enableStorageLogging) {\n    storeErrorInStorage(error).catch(e => \n      console.error('Failed to store error in AsyncStorage:', e)\n    );\n  }\n\n  // Remote logging could be implemented here\n  if (currentConfig.enableRemoteLogging) {\n    // Implementation would depend on the remote logging service\n    // sendErrorToRemoteService(error);\n  }\n}\n\n/**\n * Store errors in AsyncStorage for later retrieval\n */\nasync function storeErrorInStorage(error: AppError): Promise<void> {\n  try {\n    // Get existing errors\n    const storedErrorsJson = await AsyncStorage.getItem('app_errors');\n    let storedErrors: AppError[] = storedErrorsJson ? JSON.parse(storedErrorsJson) : [];\n\n    // Add new error\n    storedErrors.push(error);\n\n    // Limit the number of stored errors\n    if (storedErrors.length > currentConfig.maxStoredErrors) {\n      storedErrors = storedErrors.slice(-currentConfig.maxStoredErrors);\n    }\n\n    // Save back to storage\n    await AsyncStorage.setItem('app_errors', JSON.stringify(storedErrors));\n  } catch (e) {\n    // Fail silently, but log to console\n    console.error('Error storing error in AsyncStorage:', e);\n  }\n}\n\n/**\n * Retrieve stored errors from AsyncStorage\n */\nexport async function getStoredErrors(): Promise<AppError[]> {\n  try {\n    const storedErrorsJson = await AsyncStorage.getItem('app_errors');\n    return storedErrorsJson ? JSON.parse(storedErrorsJson) : [];\n  } catch (e) {\n    console.error('Error retrieving errors from AsyncStorage:', e);\n    return [];\n  }\n}\n\n/**\n * Clear stored errors from AsyncStorage\n */\nexport async function clearStoredErrors(): Promise<void> {\n  try {\n    await AsyncStorage.setItem('app_errors', JSON.stringify([]));\n  } catch (e) {\n    console.error('Error clearing errors from AsyncStorage:', e);\n  }\n}\n\n/**\n * Get a user-friendly error message based on the error category and code\n */\nexport function getUserFriendlyMessage(error: AppError): string {\n  // Default messages by category\n  const defaultMessages: Record<ErrorCategory, string> = {\n    [ErrorCategory.DATABASE]: 'There was a problem accessing the database.',\n    [ErrorCategory.AUTHENTICATION]: 'There was a problem with your account authentication.',\n    [ErrorCategory.NETWORK]: 'Network connection issue. Please check your internet connection.',\n    [ErrorCategory.VALIDATION]: 'Some information you entered is not valid.',\n    [ErrorCategory.PERMISSION]: 'You do not have permission to perform this action.',\n    [ErrorCategory.UNKNOWN]: 'An unexpected error occurred. Please try again later.',\n  };\n\n  // Specific error code handling\n  if (error.code) {\n    switch (error.code) {\n      case '23505': // PostgreSQL unique violation\n        return 'This information already exists in our system.';\n      case '42P01': // PostgreSQL undefined table\n        return 'We encountered a database configuration issue. Please contact support.';\n      case '42501': // PostgreSQL insufficient privilege\n        return 'You do not have permission to perform this action.';\n      case '23503': // PostgreSQL foreign key violation\n        return 'This operation cannot be completed because it references missing data.';\n      case 'PGRST301': // Supabase RLS policy violation\n        return 'Access denied due to security policy.';\n      case '401':\n      case 'auth/invalid-email':\n      case 'auth/user-not-found':\n      case 'auth/wrong-password':\n        return 'Invalid login credentials. Please check your email and password.';\n      case '403':\n        return 'You do not have permission to access this resource.';\n      case '404':\n        return 'The requested resource was not found.';\n      case '429':\n        return 'Too many requests. Please try again later.';\n      case '500':\n        return 'Server error. Please try again later.';\n      default:\n        // Use the original error message if it's user-friendly, otherwise use default\n        return isUserFriendlyMessage(error.message)\n          ? error.message\n          : defaultMessages[error.category];\n    }\n  }\n\n  // If no specific code handling, use the message if it's user-friendly\n  return isUserFriendlyMessage(error.message)\n    ? error.message\n    : defaultMessages[error.category];\n}\n\n/**\n * Type guard to check if an object is a PostgrestError\n */\nfunction isPostgrestError(error: any): error is PostgrestError {\n  return (\n    error &&\n    typeof error === 'object' &&\n    'code' in error &&\n    'message' in error &&\n    'details' in error\n  );\n}\n\n/**\n * Determine the error category based on the error\n */\nfunction determineErrorCategory(error: PostgrestError | Error): ErrorCategory {\n  if (isPostgrestError(error)) {\n    // PostgreSQL error codes\n    if (error.code?.startsWith('23')) return ErrorCategory.VALIDATION;\n    if (error.code?.startsWith('28') || error.code?.startsWith('42501')) return ErrorCategory.PERMISSION;\n    if (error.code?.startsWith('PGRST3')) return ErrorCategory.PERMISSION;\n    \n    return ErrorCategory.DATABASE;\n  }\n\n  // Check error message for common patterns\n  const message = error.message.toLowerCase();\n  if (message.includes('network') || message.includes('connection')) return ErrorCategory.NETWORK;\n  if (message.includes('auth') || message.includes('login') || message.includes('password')) return ErrorCategory.AUTHENTICATION;\n  if (message.includes('permission') || message.includes('access') || message.includes('denied')) return ErrorCategory.PERMISSION;\n  if (message.includes('valid') || message.includes('required')) return ErrorCategory.VALIDATION;\n\n  return ErrorCategory.UNKNOWN;\n}\n\n/**\n * Check if a message is user-friendly enough to show directly\n */\nfunction isUserFriendlyMessage(message: string): boolean {\n  if (!message) return false;\n  \n  // Too technical or exposing implementation details\n  const technicalTerms = [\n    'undefined',\n    'null',\n    'NaN',\n    'exception',\n    'syntax error',\n    'unexpected token',\n    'stack',\n    'reference error',\n    'type error',\n    'cannot read property',\n    'is not a function',\n    'failed to fetch',\n    'network request failed',\n    'JSON',\n    'parse',\n    'promise',\n    'async',\n    'timeout',\n    'cors',\n    'xhr',\n    'http',\n    'ssl',\n    'certificate',\n    'localhost',\n    'port',\n    'proxy',\n    'socket',\n    'postgresql',\n    'supabase',\n    'database',\n    'query',\n    'sql',\n  ];\n\n  // Check if message contains technical terms\n  const lowercaseMsg = message.toLowerCase();\n  return !technicalTerms.some(term => lowercaseMsg.includes(term.toLowerCase()));\n}\n\n/**\n * Wrap a function with error handling\n */\nexport function withErrorHandling<T extends (...args: any[]) => Promise<any>>(\n  fn: T,\n  errorHandler?: (error: AppError) => void\n): (...args: Parameters<T>) => Promise<ReturnType<T>> {\n  return async (...args: Parameters<T>): Promise<ReturnType<T>> => {\n    try {\n      return await fn(...args);\n    } catch (error) {\n      const appError = handleSupabaseError(error, { functionName: fn.name, args });\n      \n      if (errorHandler) {\n        errorHandler(appError);\n      } else {\n        logError(appError);\n      }\n      \n      throw appError;\n    }\n  };\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "fae9101c152a1b752688896ca37364a2f68d2d5a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_22yuiicert = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_22yuiicert();
var __importDefault =
/* istanbul ignore next */
(cov_22yuiicert().s[0]++,
/* istanbul ignore next */
(cov_22yuiicert().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_22yuiicert().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_22yuiicert().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_22yuiicert().f[0]++;
  cov_22yuiicert().s[1]++;
  return /* istanbul ignore next */(cov_22yuiicert().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_22yuiicert().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_22yuiicert().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_22yuiicert().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_22yuiicert().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_22yuiicert().s[3]++;
exports.ErrorCategory = exports.ErrorSeverity = void 0;
/* istanbul ignore next */
cov_22yuiicert().s[4]++;
exports.configureErrorService = configureErrorService;
/* istanbul ignore next */
cov_22yuiicert().s[5]++;
exports.handleSupabaseError = handleSupabaseError;
/* istanbul ignore next */
cov_22yuiicert().s[6]++;
exports.handleNetworkError = handleNetworkError;
/* istanbul ignore next */
cov_22yuiicert().s[7]++;
exports.handleAuthError = handleAuthError;
/* istanbul ignore next */
cov_22yuiicert().s[8]++;
exports.createValidationError = createValidationError;
/* istanbul ignore next */
cov_22yuiicert().s[9]++;
exports.createPermissionError = createPermissionError;
/* istanbul ignore next */
cov_22yuiicert().s[10]++;
exports.logError = logError;
/* istanbul ignore next */
cov_22yuiicert().s[11]++;
exports.getStoredErrors = getStoredErrors;
/* istanbul ignore next */
cov_22yuiicert().s[12]++;
exports.clearStoredErrors = clearStoredErrors;
/* istanbul ignore next */
cov_22yuiicert().s[13]++;
exports.getUserFriendlyMessage = getUserFriendlyMessage;
/* istanbul ignore next */
cov_22yuiicert().s[14]++;
exports.withErrorHandling = withErrorHandling;
const async_storage_1 =
/* istanbul ignore next */
(cov_22yuiicert().s[15]++, __importDefault(require("@react-native-async-storage/async-storage")));
/**
 * Error severity levels for logging and reporting
 */
var ErrorSeverity;
/* istanbul ignore next */
cov_22yuiicert().s[16]++;
(function (ErrorSeverity) {
  /* istanbul ignore next */
  cov_22yuiicert().f[1]++;
  cov_22yuiicert().s[17]++;
  ErrorSeverity["INFO"] = "info";
  /* istanbul ignore next */
  cov_22yuiicert().s[18]++;
  ErrorSeverity["WARNING"] = "warning";
  /* istanbul ignore next */
  cov_22yuiicert().s[19]++;
  ErrorSeverity["ERROR"] = "error";
  /* istanbul ignore next */
  cov_22yuiicert().s[20]++;
  ErrorSeverity["CRITICAL"] = "critical";
})(
/* istanbul ignore next */
(cov_22yuiicert().b[3][0]++, ErrorSeverity) ||
/* istanbul ignore next */
(cov_22yuiicert().b[3][1]++, exports.ErrorSeverity = ErrorSeverity = {}));
/**
 * Error categories to classify different types of errors
 */
var ErrorCategory;
/* istanbul ignore next */
cov_22yuiicert().s[21]++;
(function (ErrorCategory) {
  /* istanbul ignore next */
  cov_22yuiicert().f[2]++;
  cov_22yuiicert().s[22]++;
  ErrorCategory["DATABASE"] = "database";
  /* istanbul ignore next */
  cov_22yuiicert().s[23]++;
  ErrorCategory["AUTHENTICATION"] = "authentication";
  /* istanbul ignore next */
  cov_22yuiicert().s[24]++;
  ErrorCategory["NETWORK"] = "network";
  /* istanbul ignore next */
  cov_22yuiicert().s[25]++;
  ErrorCategory["VALIDATION"] = "validation";
  /* istanbul ignore next */
  cov_22yuiicert().s[26]++;
  ErrorCategory["PERMISSION"] = "permission";
  /* istanbul ignore next */
  cov_22yuiicert().s[27]++;
  ErrorCategory["UNKNOWN"] = "unknown";
})(
/* istanbul ignore next */
(cov_22yuiicert().b[4][0]++, ErrorCategory) ||
/* istanbul ignore next */
(cov_22yuiicert().b[4][1]++, exports.ErrorCategory = ErrorCategory = {}));
// Default configuration
const defaultConfig =
/* istanbul ignore next */
(cov_22yuiicert().s[28]++, {
  enableConsoleLogging: true,
  enableRemoteLogging: false,
  // Disabled by default until a remote service is configured
  enableStorageLogging: true,
  maxStoredErrors: 100
});
// Current configuration
let currentConfig =
/* istanbul ignore next */
(cov_22yuiicert().s[29]++, {
  ...defaultConfig
});
/**
 * Configure error service behavior
 */
function configureErrorService(config) {
  /* istanbul ignore next */
  cov_22yuiicert().f[3]++;
  cov_22yuiicert().s[30]++;
  currentConfig = {
    ...currentConfig,
    ...config
  };
}
/**
 * Process a Supabase PostgrestError into our standard AppError format
 */
function handleSupabaseError(error, context, severity =
/* istanbul ignore next */
(cov_22yuiicert().b[5][0]++, ErrorSeverity.ERROR)) {
  /* istanbul ignore next */
  cov_22yuiicert().f[4]++;
  cov_22yuiicert().s[31]++;
  // Handle PostgrestError type from Supabase
  if (isPostgrestError(error)) {
    /* istanbul ignore next */
    cov_22yuiicert().b[6][0]++;
    cov_22yuiicert().s[32]++;
    return {
      message:
      /* istanbul ignore next */
      (cov_22yuiicert().b[7][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_22yuiicert().b[7][1]++, 'Database operation failed'),
      code: error.code,
      category: determineErrorCategory(error),
      severity,
      originalError: error,
      context,
      timestamp: new Date()
    };
  } else
  /* istanbul ignore next */
  {
    cov_22yuiicert().b[6][1]++;
  }
  // Handle generic Error objects
  cov_22yuiicert().s[33]++;
  if (error instanceof Error) {
    /* istanbul ignore next */
    cov_22yuiicert().b[8][0]++;
    cov_22yuiicert().s[34]++;
    return {
      message:
      /* istanbul ignore next */
      (cov_22yuiicert().b[9][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_22yuiicert().b[9][1]++, 'An unexpected error occurred'),
      category: ErrorCategory.UNKNOWN,
      severity,
      originalError: error,
      context,
      timestamp: new Date()
    };
  } else
  /* istanbul ignore next */
  {
    cov_22yuiicert().b[8][1]++;
  }
  // Handle unknown error types
  cov_22yuiicert().s[35]++;
  return {
    message: 'An unknown error occurred',
    category: ErrorCategory.UNKNOWN,
    severity,
    originalError: error,
    context,
    timestamp: new Date()
  };
}
/**
 * Handle network-related errors
 */
function handleNetworkError(error, context) {
  /* istanbul ignore next */
  cov_22yuiicert().f[5]++;
  const appError =
  /* istanbul ignore next */
  (cov_22yuiicert().s[36]++, {
    message: error instanceof Error ?
    /* istanbul ignore next */
    (cov_22yuiicert().b[10][0]++, error.message) :
    /* istanbul ignore next */
    (cov_22yuiicert().b[10][1]++, 'Network connection failed'),
    category: ErrorCategory.NETWORK,
    severity: ErrorSeverity.ERROR,
    originalError: error,
    context,
    timestamp: new Date()
  });
  /* istanbul ignore next */
  cov_22yuiicert().s[37]++;
  logError(appError);
  /* istanbul ignore next */
  cov_22yuiicert().s[38]++;
  return appError;
}
/**
 * Handle authentication-related errors
 */
function handleAuthError(error, context) {
  /* istanbul ignore next */
  cov_22yuiicert().f[6]++;
  const appError =
  /* istanbul ignore next */
  (cov_22yuiicert().s[39]++, {
    message: error instanceof Error ?
    /* istanbul ignore next */
    (cov_22yuiicert().b[11][0]++, error.message) :
    /* istanbul ignore next */
    (cov_22yuiicert().b[11][1]++, 'Authentication failed'),
    category: ErrorCategory.AUTHENTICATION,
    severity: ErrorSeverity.ERROR,
    originalError: error,
    context,
    timestamp: new Date()
  });
  /* istanbul ignore next */
  cov_22yuiicert().s[40]++;
  logError(appError);
  /* istanbul ignore next */
  cov_22yuiicert().s[41]++;
  return appError;
}
/**
 * Create a validation error when input validation fails
 */
function createValidationError(message, context) {
  /* istanbul ignore next */
  cov_22yuiicert().f[7]++;
  const appError =
  /* istanbul ignore next */
  (cov_22yuiicert().s[42]++, {
    message,
    category: ErrorCategory.VALIDATION,
    severity: ErrorSeverity.WARNING,
    context,
    timestamp: new Date()
  });
  /* istanbul ignore next */
  cov_22yuiicert().s[43]++;
  logError(appError);
  /* istanbul ignore next */
  cov_22yuiicert().s[44]++;
  return appError;
}
/**
 * Create a permission error when user lacks required permissions
 */
function createPermissionError(message =
/* istanbul ignore next */
(cov_22yuiicert().b[12][0]++, 'You do not have permission to perform this action'), context) {
  /* istanbul ignore next */
  cov_22yuiicert().f[8]++;
  const appError =
  /* istanbul ignore next */
  (cov_22yuiicert().s[45]++, {
    message,
    category: ErrorCategory.PERMISSION,
    severity: ErrorSeverity.WARNING,
    context,
    timestamp: new Date()
  });
  /* istanbul ignore next */
  cov_22yuiicert().s[46]++;
  logError(appError);
  /* istanbul ignore next */
  cov_22yuiicert().s[47]++;
  return appError;
}
/**
 * Log an error based on current configuration
 */
function logError(error) {
  /* istanbul ignore next */
  cov_22yuiicert().f[9]++;
  cov_22yuiicert().s[48]++;
  // Console logging
  if (currentConfig.enableConsoleLogging) {
    /* istanbul ignore next */
    cov_22yuiicert().b[13][0]++;
    cov_22yuiicert().s[49]++;
    console.error(`[${error.severity.toUpperCase()}] [${error.category}] ${error.message}`, {
      code: error.code,
      context: error.context,
      timestamp: error.timestamp,
      originalError: error.originalError
    });
  } else
  /* istanbul ignore next */
  {
    cov_22yuiicert().b[13][1]++;
  }
  // Store error in AsyncStorage for later retrieval
  cov_22yuiicert().s[50]++;
  if (currentConfig.enableStorageLogging) {
    /* istanbul ignore next */
    cov_22yuiicert().b[14][0]++;
    cov_22yuiicert().s[51]++;
    storeErrorInStorage(error).catch(e => {
      /* istanbul ignore next */
      cov_22yuiicert().f[10]++;
      cov_22yuiicert().s[52]++;
      return console.error('Failed to store error in AsyncStorage:', e);
    });
  } else
  /* istanbul ignore next */
  {
    cov_22yuiicert().b[14][1]++;
  }
  // Remote logging could be implemented here
  cov_22yuiicert().s[53]++;
  if (currentConfig.enableRemoteLogging) {
    /* istanbul ignore next */
    cov_22yuiicert().b[15][0]++;
  } // Implementation would depend on the remote logging service
  // sendErrorToRemoteService(error);
  else
  /* istanbul ignore next */
  {
    cov_22yuiicert().b[15][1]++;
  }
}
/**
 * Store errors in AsyncStorage for later retrieval
 */
async function storeErrorInStorage(error) {
  /* istanbul ignore next */
  cov_22yuiicert().f[11]++;
  cov_22yuiicert().s[54]++;
  try {
    // Get existing errors
    const storedErrorsJson =
    /* istanbul ignore next */
    (cov_22yuiicert().s[55]++, await async_storage_1.default.getItem('app_errors'));
    let storedErrors =
    /* istanbul ignore next */
    (cov_22yuiicert().s[56]++, storedErrorsJson ?
    /* istanbul ignore next */
    (cov_22yuiicert().b[16][0]++, JSON.parse(storedErrorsJson)) :
    /* istanbul ignore next */
    (cov_22yuiicert().b[16][1]++, []));
    // Add new error
    /* istanbul ignore next */
    cov_22yuiicert().s[57]++;
    storedErrors.push(error);
    // Limit the number of stored errors
    /* istanbul ignore next */
    cov_22yuiicert().s[58]++;
    if (storedErrors.length > currentConfig.maxStoredErrors) {
      /* istanbul ignore next */
      cov_22yuiicert().b[17][0]++;
      cov_22yuiicert().s[59]++;
      storedErrors = storedErrors.slice(-currentConfig.maxStoredErrors);
    } else
    /* istanbul ignore next */
    {
      cov_22yuiicert().b[17][1]++;
    }
    // Save back to storage
    cov_22yuiicert().s[60]++;
    await async_storage_1.default.setItem('app_errors', JSON.stringify(storedErrors));
  } catch (e) {
    /* istanbul ignore next */
    cov_22yuiicert().s[61]++;
    // Fail silently, but log to console
    console.error('Error storing error in AsyncStorage:', e);
  }
}
/**
 * Retrieve stored errors from AsyncStorage
 */
async function getStoredErrors() {
  /* istanbul ignore next */
  cov_22yuiicert().f[12]++;
  cov_22yuiicert().s[62]++;
  try {
    const storedErrorsJson =
    /* istanbul ignore next */
    (cov_22yuiicert().s[63]++, await async_storage_1.default.getItem('app_errors'));
    /* istanbul ignore next */
    cov_22yuiicert().s[64]++;
    return storedErrorsJson ?
    /* istanbul ignore next */
    (cov_22yuiicert().b[18][0]++, JSON.parse(storedErrorsJson)) :
    /* istanbul ignore next */
    (cov_22yuiicert().b[18][1]++, []);
  } catch (e) {
    /* istanbul ignore next */
    cov_22yuiicert().s[65]++;
    console.error('Error retrieving errors from AsyncStorage:', e);
    /* istanbul ignore next */
    cov_22yuiicert().s[66]++;
    return [];
  }
}
/**
 * Clear stored errors from AsyncStorage
 */
async function clearStoredErrors() {
  /* istanbul ignore next */
  cov_22yuiicert().f[13]++;
  cov_22yuiicert().s[67]++;
  try {
    /* istanbul ignore next */
    cov_22yuiicert().s[68]++;
    await async_storage_1.default.setItem('app_errors', JSON.stringify([]));
  } catch (e) {
    /* istanbul ignore next */
    cov_22yuiicert().s[69]++;
    console.error('Error clearing errors from AsyncStorage:', e);
  }
}
/**
 * Get a user-friendly error message based on the error category and code
 */
function getUserFriendlyMessage(error) {
  /* istanbul ignore next */
  cov_22yuiicert().f[14]++;
  // Default messages by category
  const defaultMessages =
  /* istanbul ignore next */
  (cov_22yuiicert().s[70]++, {
    [ErrorCategory.DATABASE]: 'There was a problem accessing the database.',
    [ErrorCategory.AUTHENTICATION]: 'There was a problem with your account authentication.',
    [ErrorCategory.NETWORK]: 'Network connection issue. Please check your internet connection.',
    [ErrorCategory.VALIDATION]: 'Some information you entered is not valid.',
    [ErrorCategory.PERMISSION]: 'You do not have permission to perform this action.',
    [ErrorCategory.UNKNOWN]: 'An unexpected error occurred. Please try again later.'
  });
  // Specific error code handling
  /* istanbul ignore next */
  cov_22yuiicert().s[71]++;
  if (error.code) {
    /* istanbul ignore next */
    cov_22yuiicert().b[19][0]++;
    cov_22yuiicert().s[72]++;
    switch (error.code) {
      case '23505':
        /* istanbul ignore next */
        cov_22yuiicert().b[20][0]++;
        cov_22yuiicert().s[73]++;
        // PostgreSQL unique violation
        return 'This information already exists in our system.';
      case '42P01':
        /* istanbul ignore next */
        cov_22yuiicert().b[20][1]++;
        cov_22yuiicert().s[74]++;
        // PostgreSQL undefined table
        return 'We encountered a database configuration issue. Please contact support.';
      case '42501':
        /* istanbul ignore next */
        cov_22yuiicert().b[20][2]++;
        cov_22yuiicert().s[75]++;
        // PostgreSQL insufficient privilege
        return 'You do not have permission to perform this action.';
      case '23503':
        /* istanbul ignore next */
        cov_22yuiicert().b[20][3]++;
        cov_22yuiicert().s[76]++;
        // PostgreSQL foreign key violation
        return 'This operation cannot be completed because it references missing data.';
      case 'PGRST301':
        /* istanbul ignore next */
        cov_22yuiicert().b[20][4]++;
        cov_22yuiicert().s[77]++;
        // Supabase RLS policy violation
        return 'Access denied due to security policy.';
      case '401':
        /* istanbul ignore next */
        cov_22yuiicert().b[20][5]++;
      case 'auth/invalid-email':
        /* istanbul ignore next */
        cov_22yuiicert().b[20][6]++;
      case 'auth/user-not-found':
        /* istanbul ignore next */
        cov_22yuiicert().b[20][7]++;
      case 'auth/wrong-password':
        /* istanbul ignore next */
        cov_22yuiicert().b[20][8]++;
        cov_22yuiicert().s[78]++;
        return 'Invalid login credentials. Please check your email and password.';
      case '403':
        /* istanbul ignore next */
        cov_22yuiicert().b[20][9]++;
        cov_22yuiicert().s[79]++;
        return 'You do not have permission to access this resource.';
      case '404':
        /* istanbul ignore next */
        cov_22yuiicert().b[20][10]++;
        cov_22yuiicert().s[80]++;
        return 'The requested resource was not found.';
      case '429':
        /* istanbul ignore next */
        cov_22yuiicert().b[20][11]++;
        cov_22yuiicert().s[81]++;
        return 'Too many requests. Please try again later.';
      case '500':
        /* istanbul ignore next */
        cov_22yuiicert().b[20][12]++;
        cov_22yuiicert().s[82]++;
        return 'Server error. Please try again later.';
      default:
        /* istanbul ignore next */
        cov_22yuiicert().b[20][13]++;
        cov_22yuiicert().s[83]++;
        // Use the original error message if it's user-friendly, otherwise use default
        return isUserFriendlyMessage(error.message) ?
        /* istanbul ignore next */
        (cov_22yuiicert().b[21][0]++, error.message) :
        /* istanbul ignore next */
        (cov_22yuiicert().b[21][1]++, defaultMessages[error.category]);
    }
  } else
  /* istanbul ignore next */
  {
    cov_22yuiicert().b[19][1]++;
  }
  // If no specific code handling, use the message if it's user-friendly
  cov_22yuiicert().s[84]++;
  return isUserFriendlyMessage(error.message) ?
  /* istanbul ignore next */
  (cov_22yuiicert().b[22][0]++, error.message) :
  /* istanbul ignore next */
  (cov_22yuiicert().b[22][1]++, defaultMessages[error.category]);
}
/**
 * Type guard to check if an object is a PostgrestError
 */
function isPostgrestError(error) {
  /* istanbul ignore next */
  cov_22yuiicert().f[15]++;
  cov_22yuiicert().s[85]++;
  return /* istanbul ignore next */(cov_22yuiicert().b[23][0]++, error) &&
  /* istanbul ignore next */
  (cov_22yuiicert().b[23][1]++, typeof error === 'object') &&
  /* istanbul ignore next */
  (cov_22yuiicert().b[23][2]++, 'code' in error) &&
  /* istanbul ignore next */
  (cov_22yuiicert().b[23][3]++, 'message' in error) &&
  /* istanbul ignore next */
  (cov_22yuiicert().b[23][4]++, 'details' in error);
}
/**
 * Determine the error category based on the error
 */
function determineErrorCategory(error) {
  /* istanbul ignore next */
  cov_22yuiicert().f[16]++;
  cov_22yuiicert().s[86]++;
  if (isPostgrestError(error)) {
    /* istanbul ignore next */
    cov_22yuiicert().b[24][0]++;
    cov_22yuiicert().s[87]++;
    // PostgreSQL error codes
    if (error.code?.startsWith('23')) {
      /* istanbul ignore next */
      cov_22yuiicert().b[25][0]++;
      cov_22yuiicert().s[88]++;
      return ErrorCategory.VALIDATION;
    } else
    /* istanbul ignore next */
    {
      cov_22yuiicert().b[25][1]++;
    }
    cov_22yuiicert().s[89]++;
    if (
    /* istanbul ignore next */
    (cov_22yuiicert().b[27][0]++, error.code?.startsWith('28')) ||
    /* istanbul ignore next */
    (cov_22yuiicert().b[27][1]++, error.code?.startsWith('42501'))) {
      /* istanbul ignore next */
      cov_22yuiicert().b[26][0]++;
      cov_22yuiicert().s[90]++;
      return ErrorCategory.PERMISSION;
    } else
    /* istanbul ignore next */
    {
      cov_22yuiicert().b[26][1]++;
    }
    cov_22yuiicert().s[91]++;
    if (error.code?.startsWith('PGRST3')) {
      /* istanbul ignore next */
      cov_22yuiicert().b[28][0]++;
      cov_22yuiicert().s[92]++;
      return ErrorCategory.PERMISSION;
    } else
    /* istanbul ignore next */
    {
      cov_22yuiicert().b[28][1]++;
    }
    cov_22yuiicert().s[93]++;
    return ErrorCategory.DATABASE;
  } else
  /* istanbul ignore next */
  {
    cov_22yuiicert().b[24][1]++;
  }
  // Check error message for common patterns
  const message =
  /* istanbul ignore next */
  (cov_22yuiicert().s[94]++, error.message.toLowerCase());
  /* istanbul ignore next */
  cov_22yuiicert().s[95]++;
  if (
  /* istanbul ignore next */
  (cov_22yuiicert().b[30][0]++, message.includes('network')) ||
  /* istanbul ignore next */
  (cov_22yuiicert().b[30][1]++, message.includes('connection'))) {
    /* istanbul ignore next */
    cov_22yuiicert().b[29][0]++;
    cov_22yuiicert().s[96]++;
    return ErrorCategory.NETWORK;
  } else
  /* istanbul ignore next */
  {
    cov_22yuiicert().b[29][1]++;
  }
  cov_22yuiicert().s[97]++;
  if (
  /* istanbul ignore next */
  (cov_22yuiicert().b[32][0]++, message.includes('auth')) ||
  /* istanbul ignore next */
  (cov_22yuiicert().b[32][1]++, message.includes('login')) ||
  /* istanbul ignore next */
  (cov_22yuiicert().b[32][2]++, message.includes('password'))) {
    /* istanbul ignore next */
    cov_22yuiicert().b[31][0]++;
    cov_22yuiicert().s[98]++;
    return ErrorCategory.AUTHENTICATION;
  } else
  /* istanbul ignore next */
  {
    cov_22yuiicert().b[31][1]++;
  }
  cov_22yuiicert().s[99]++;
  if (
  /* istanbul ignore next */
  (cov_22yuiicert().b[34][0]++, message.includes('permission')) ||
  /* istanbul ignore next */
  (cov_22yuiicert().b[34][1]++, message.includes('access')) ||
  /* istanbul ignore next */
  (cov_22yuiicert().b[34][2]++, message.includes('denied'))) {
    /* istanbul ignore next */
    cov_22yuiicert().b[33][0]++;
    cov_22yuiicert().s[100]++;
    return ErrorCategory.PERMISSION;
  } else
  /* istanbul ignore next */
  {
    cov_22yuiicert().b[33][1]++;
  }
  cov_22yuiicert().s[101]++;
  if (
  /* istanbul ignore next */
  (cov_22yuiicert().b[36][0]++, message.includes('valid')) ||
  /* istanbul ignore next */
  (cov_22yuiicert().b[36][1]++, message.includes('required'))) {
    /* istanbul ignore next */
    cov_22yuiicert().b[35][0]++;
    cov_22yuiicert().s[102]++;
    return ErrorCategory.VALIDATION;
  } else
  /* istanbul ignore next */
  {
    cov_22yuiicert().b[35][1]++;
  }
  cov_22yuiicert().s[103]++;
  return ErrorCategory.UNKNOWN;
}
/**
 * Check if a message is user-friendly enough to show directly
 */
function isUserFriendlyMessage(message) {
  /* istanbul ignore next */
  cov_22yuiicert().f[17]++;
  cov_22yuiicert().s[104]++;
  if (!message) {
    /* istanbul ignore next */
    cov_22yuiicert().b[37][0]++;
    cov_22yuiicert().s[105]++;
    return false;
  } else
  /* istanbul ignore next */
  {
    cov_22yuiicert().b[37][1]++;
  }
  // Too technical or exposing implementation details
  const technicalTerms =
  /* istanbul ignore next */
  (cov_22yuiicert().s[106]++, ['undefined', 'null', 'NaN', 'exception', 'syntax error', 'unexpected token', 'stack', 'reference error', 'type error', 'cannot read property', 'is not a function', 'failed to fetch', 'network request failed', 'JSON', 'parse', 'promise', 'async', 'timeout', 'cors', 'xhr', 'http', 'ssl', 'certificate', 'localhost', 'port', 'proxy', 'socket', 'postgresql', 'supabase', 'database', 'query', 'sql']);
  // Check if message contains technical terms
  const lowercaseMsg =
  /* istanbul ignore next */
  (cov_22yuiicert().s[107]++, message.toLowerCase());
  /* istanbul ignore next */
  cov_22yuiicert().s[108]++;
  return !technicalTerms.some(term => {
    /* istanbul ignore next */
    cov_22yuiicert().f[18]++;
    cov_22yuiicert().s[109]++;
    return lowercaseMsg.includes(term.toLowerCase());
  });
}
/**
 * Wrap a function with error handling
 */
function withErrorHandling(fn, errorHandler) {
  /* istanbul ignore next */
  cov_22yuiicert().f[19]++;
  cov_22yuiicert().s[110]++;
  return async (...args) => {
    /* istanbul ignore next */
    cov_22yuiicert().f[20]++;
    cov_22yuiicert().s[111]++;
    try {
      /* istanbul ignore next */
      cov_22yuiicert().s[112]++;
      return await fn(...args);
    } catch (error) {
      const appError =
      /* istanbul ignore next */
      (cov_22yuiicert().s[113]++, handleSupabaseError(error, {
        functionName: fn.name,
        args
      }));
      /* istanbul ignore next */
      cov_22yuiicert().s[114]++;
      if (errorHandler) {
        /* istanbul ignore next */
        cov_22yuiicert().b[38][0]++;
        cov_22yuiicert().s[115]++;
        errorHandler(appError);
      } else {
        /* istanbul ignore next */
        cov_22yuiicert().b[38][1]++;
        cov_22yuiicert().s[116]++;
        logError(appError);
      }
      /* istanbul ignore next */
      cov_22yuiicert().s[117]++;
      throw appError;
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,