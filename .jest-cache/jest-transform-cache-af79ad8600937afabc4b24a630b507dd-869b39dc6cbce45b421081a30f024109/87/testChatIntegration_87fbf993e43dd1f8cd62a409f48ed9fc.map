{"version":3,"names":["supabase","messagingService","cov_jmqb9atm","s","testConversationsIntegration","_ref","_asyncToGenerator","userId","f","console","group","time","_ref2","rpc","input_user_id","rpcData","data","rpcError","error","timeEnd","b","message","Array","isArray","log","length","groupEnd","serviceData","getConversations","rpcIds","Set","map","c","id","serviceIds","missingInRpc","_toConsumableArray","filter","has","missingInService","warn","rpcSample","serviceSample","Object","keys","rpcFields","serviceFields","missingInRpcFields","field","missingInServiceFields","serviceError","_x","apply","arguments","testMessagesIntegration","_ref3","conversationId","_ref4","input_convo_id","firstMessage","message_id","conversation_id","sender_profile","getMessages","message_text","_x2","runAllIntegrationTests","_ref5","_ref6","_x3","_x4"],"sources":["testChatIntegration.ts"],"sourcesContent":["/**\n * Test Utility for Chat Integration\n * \n * This file provides functions to test the integration between React Query hooks\n * and PostgreSQL RPC functions for the chat functionality.\n * \n * FOR DEVELOPMENT/TESTING ONLY - Not for production use\n */\n\nimport { supabase } from '../supabase';\nimport * as messagingService from '../services/messagingService';\n\n/**\n * Test the get_user_conversations RPC function and compare with service method\n * @param userId The user ID to fetch conversations for\n */\nexport const testConversationsIntegration = async (userId: string) => {\n  console.group('🧪 TESTING CONVERSATIONS INTEGRATION');\n  console.time('Total test time');\n  \n  try {\n    // Test RPC function\n    console.group('1. Testing get_user_conversations RPC function');\n    console.time('RPC execution time');\n    \n    const { data: rpcData, error: rpcError } = await supabase\n      .rpc('get_user_conversations', { \n        input_user_id: userId \n      });\n      \n    console.timeEnd('RPC execution time');\n    \n    if (rpcError) {\n      console.error('❌ RPC ERROR:', rpcError.message);\n      console.error('Details:', rpcError);\n    } else if (!rpcData || !Array.isArray(rpcData)) {\n      console.error('❌ RPC returned invalid data format:', rpcData);\n    } else {\n      console.log('✅ RPC SUCCESS - Returned', rpcData.length, 'conversations');\n      console.log('First conversation sample:', rpcData[0] || 'No conversations');\n    }\n    console.groupEnd();\n    \n    // Test service method for comparison\n    console.group('2. Testing messagingService.getConversations');\n    console.time('Service execution time');\n    \n    try {\n      const serviceData = await messagingService.getConversations(userId);\n      console.timeEnd('Service execution time');\n      console.log('✅ SERVICE SUCCESS - Returned', serviceData.length, 'conversations');\n      console.log('First conversation sample:', serviceData[0] || 'No conversations');\n      \n      // Compare results\n      if (rpcData && serviceData) {\n        console.group('3. Comparing results');\n        console.log('RPC count:', rpcData.length, '| Service count:', serviceData.length);\n        \n        if (rpcData.length > 0 && serviceData.length > 0) {\n          // Check if IDs match\n          const rpcIds = new Set(rpcData.map(c => c.id));\n          const serviceIds = new Set(serviceData.map(c => c.id));\n          \n          const missingInRpc = [...serviceIds].filter(id => !rpcIds.has(id));\n          const missingInService = [...rpcIds].filter(id => !serviceIds.has(id));\n          \n          if (missingInRpc.length > 0) {\n            console.warn('⚠️ IDs in service but missing in RPC:', missingInRpc);\n          }\n          \n          if (missingInService.length > 0) {\n            console.warn('⚠️ IDs in RPC but missing in service:', missingInService);\n          }\n          \n          if (missingInRpc.length === 0 && missingInService.length === 0) {\n            console.log('✅ ID sets match between RPC and service');\n          }\n          \n          // Compare structure of first item\n          const rpcSample = rpcData[0];\n          const serviceSample = serviceData[0];\n          \n          console.log('RPC first item keys:', Object.keys(rpcSample));\n          console.log('Service first item keys:', Object.keys(serviceSample));\n          \n          // Check for missing fields\n          const rpcFields = new Set(Object.keys(rpcSample));\n          const serviceFields = new Set(Object.keys(serviceSample));\n          \n          const missingInRpcFields = [...serviceFields].filter(field => !rpcFields.has(field));\n          const missingInServiceFields = [...rpcFields].filter(field => !serviceFields.has(field));\n          \n          if (missingInRpcFields.length > 0) {\n            console.warn('⚠️ Fields in service but missing in RPC:', missingInRpcFields);\n          }\n          \n          if (missingInServiceFields.length > 0) {\n            console.warn('⚠️ Fields in RPC but missing in service:', missingInServiceFields);\n          }\n        }\n        console.groupEnd();\n      }\n    } catch (serviceError) {\n      console.timeEnd('Service execution time');\n      console.error('❌ SERVICE ERROR:', serviceError);\n    }\n    console.groupEnd();\n    \n  } catch (error) {\n    console.error('❌ TEST FAILED:', error);\n  }\n  \n  console.timeEnd('Total test time');\n  console.groupEnd();\n};\n\n/**\n * Test the get_conversation_messages RPC function and compare with service method\n * @param conversationId The conversation ID to fetch messages for\n */\nexport const testMessagesIntegration = async (conversationId: string) => {\n  console.group('🧪 TESTING MESSAGES INTEGRATION');\n  console.time('Total test time');\n  \n  try {\n    // Test RPC function\n    console.group('1. Testing get_conversation_messages RPC function');\n    console.time('RPC execution time');\n    \n    const { data: rpcData, error: rpcError } = await supabase\n      .rpc('get_conversation_messages', { \n        input_convo_id: conversationId \n      });\n      \n    console.timeEnd('RPC execution time');\n    \n    if (rpcError) {\n      console.error('❌ RPC ERROR:', rpcError.message);\n      console.error('Details:', rpcError);\n    } else if (!rpcData || !Array.isArray(rpcData)) {\n      console.error('❌ RPC returned invalid data format:', rpcData);\n    } else {\n      console.log('✅ RPC SUCCESS - Returned', rpcData.length, 'messages');\n      console.log('First message sample:', rpcData[0] || 'No messages');\n      \n      // Verify field mapping\n      if (rpcData.length > 0) {\n        const firstMessage = rpcData[0];\n        console.log('Field mapping check:');\n        console.log('- message_id:', firstMessage.message_id);\n        console.log('- conversation_id:', firstMessage.conversation_id);\n        console.log('- sender_profile:', firstMessage.sender_profile);\n      }\n    }\n    console.groupEnd();\n    \n    // Test service method for comparison\n    console.group('2. Testing messagingService.getMessages');\n    console.time('Service execution time');\n    \n    try {\n      const serviceData = await messagingService.getMessages(conversationId);\n      console.timeEnd('Service execution time');\n      console.log('✅ SERVICE SUCCESS - Returned', serviceData.length, 'messages');\n      console.log('First message sample:', serviceData[0] || 'No messages');\n      \n      // Compare results\n      if (rpcData && serviceData) {\n        console.group('3. Comparing results');\n        console.log('RPC count:', rpcData.length, '| Service count:', serviceData.length);\n        \n        if (rpcData.length > 0 && serviceData.length > 0) {\n          // Check structure differences\n          const rpcSample = rpcData[0];\n          const serviceSample = serviceData[0];\n          \n          console.log('RPC first item fields:', Object.keys(rpcSample));\n          console.log('Service first item fields:', Object.keys(serviceSample));\n          \n          // Check field mapping needed\n          console.log('Field mapping needed:');\n          console.log('- RPC message_id → Service id');\n          console.log('- RPC conversation_id → Service conversation_id');\n          \n          // Verify content matches (after mapping)\n          if (rpcSample.message_id !== serviceSample.id) {\n            console.warn('⚠️ ID mismatch between RPC and service');\n          } else {\n            console.log('✅ IDs match after mapping');\n          }\n          \n          if (rpcSample.message_text !== serviceSample.message_text) {\n            console.warn('⚠️ Content mismatch between RPC and service');\n          } else {\n            console.log('✅ Message content matches');\n          }\n        }\n        console.groupEnd();\n      }\n    } catch (serviceError) {\n      console.timeEnd('Service execution time');\n      console.error('❌ SERVICE ERROR:', serviceError);\n    }\n    console.groupEnd();\n    \n  } catch (error) {\n    console.error('❌ TEST FAILED:', error);\n  }\n  \n  console.timeEnd('Total test time');\n  console.groupEnd();\n};\n\n/**\n * Run all integration tests\n * @param userId The user ID to test with\n * @param conversationId Optional conversation ID to test with (if not provided, will use the first conversation found)\n */\nexport const runAllIntegrationTests = async (userId: string, conversationId?: string) => {\n  console.group('🧪🧪 RUNNING ALL CHAT INTEGRATION TESTS 🧪🧪');\n  console.log('Testing with user ID:', userId);\n  \n  // First test conversations\n  await testConversationsIntegration(userId);\n  \n  // If conversationId not provided, try to get one from the conversations test\n  if (!conversationId) {\n    try {\n      const { data } = await supabase\n        .rpc('get_user_conversations', { input_user_id: userId });\n      \n      if (data && Array.isArray(data) && data.length > 0) {\n        conversationId = data[0].id;\n        console.log('Using first conversation ID for messages test:', conversationId);\n      } else {\n        console.warn('No conversations found, skipping messages test');\n      }\n    } catch (error) {\n      console.error('Failed to get conversation ID:', error);\n    }\n  }\n  \n  // Then test messages if we have a conversation ID\n  if (conversationId) {\n    await testMessagesIntegration(conversationId);\n  }\n  \n  console.groupEnd();\n  console.log('🏁 All tests completed');\n};\n\n/**\n * How to use this test utility:\n * \n * 1. Import this file in a component or development screen\n * 2. Call one of the test functions with appropriate parameters\n * 3. Check the console for results\n * \n * Example:\n * ```\n * import { runAllIntegrationTests } from '../utils/testChatIntegration';\n * \n * // In a component or effect\n * runAllIntegrationTests('your-user-id-here');\n * ```\n */\n"],"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","ignoreList":[]}