{"version":3,"names":["formatDate","dateValue","cov_qbmpgoks8","f","s","b","date","Date","isNaN","getTime","toLocaleDateString","month","day","err","console","error","formatEntryFee","fee","undefined","feeNumber","parseFloat","toFixed","formatTime","timeString","time","includes","_ref","split","_ref2","_slicedToArray","hours","minutes","setHours","parseInt","setMinutes","toLocaleTimeString","hour","minute","hour12","formatPrice","price","priceNumber"],"sources":["formatters.ts"],"sourcesContent":["/**\n * formatters.ts\n * Utility functions for formatting various data types for display\n */\n\n/**\n * Format a date for display in map callouts (short format)\n * @param dateValue Date object or ISO string\n * @returns Formatted date string (e.g., \"Jul 16\")\n */\nexport const formatDate = (dateValue: Date | string | null | undefined): string => {\n  if (!dateValue) {\n    return 'TBD';\n  }\n\n  try {\n    const date = new Date(dateValue);\n    \n    // Check if date is valid\n    if (isNaN(date.getTime())) {\n      return 'Invalid date';\n    }\n\n    // Format as short month + day (e.g., \"Jul 16\")\n    return date.toLocaleDateString('en-US', { \n      month: 'short', \n      day: 'numeric' \n    });\n  } catch (err) {\n    console.error('Error formatting date:', err);\n    return 'Error';\n  }\n};\n\n/**\n * Format entry fee with proper currency display\n * @param fee Entry fee amount (number or string)\n * @returns Formatted fee string (e.g., \"Free Entry\" or \"Entry: $5\")\n */\nexport const formatEntryFee = (fee: number | string | null | undefined): string => {\n  // Handle null, undefined, empty string, or NaN\n  if (\n    fee === null || \n    fee === undefined || \n    fee === '' || \n    (typeof fee === 'number' && isNaN(fee))\n  ) {\n    return 'Free Entry';\n  }\n\n  // Convert string to number if needed\n  const feeNumber = typeof fee === 'string' ? parseFloat(fee) : fee;\n\n  // If conversion failed or fee is zero/negative, show as free\n  if (isNaN(feeNumber) || feeNumber <= 0) {\n    return 'Free Entry';\n  }\n\n  // Format with dollar sign and no decimal places for whole numbers\n  return `Entry: $${feeNumber % 1 === 0 ? feeNumber : feeNumber.toFixed(2)}`;\n};\n\n/**\n * Format a time string for display\n * @param timeString Time string (e.g., \"14:30:00\")\n * @returns Formatted time string (e.g., \"2:30 PM\")\n */\nexport const formatTime = (timeString: string | null | undefined): string => {\n  if (!timeString) {\n    return '';\n  }\n\n  try {\n    // Handle various time formats\n    let time: Date;\n    \n    // If it's just a time string like \"14:30:00\"\n    if (timeString.includes(':') && !timeString.includes('T')) {\n      // Create a dummy date with the time\n      const [hours, minutes] = timeString.split(':');\n      time = new Date();\n      time.setHours(parseInt(hours, 10));\n      time.setMinutes(parseInt(minutes, 10));\n    } else {\n      // Full datetime string\n      time = new Date(timeString);\n    }\n\n    // Check if time is valid\n    if (isNaN(time.getTime())) {\n      return '';\n    }\n\n    // Format as hours:minutes AM/PM\n    return time.toLocaleTimeString('en-US', { \n      hour: 'numeric', \n      minute: '2-digit',\n      hour12: true \n    });\n  } catch (err) {\n    console.error('Error formatting time:', err);\n    return '';\n  }\n};\n\n/**\n * Format a price for display\n * @param price Price amount\n * @returns Formatted price string (e.g., \"$10\" or \"Free\")\n */\nexport const formatPrice = (price: number | string | null | undefined): string => {\n  // Handle null, undefined, empty string, or NaN\n  if (\n    price === null || \n    price === undefined || \n    price === '' || \n    (typeof price === 'number' && isNaN(price))\n  ) {\n    return 'Free';\n  }\n\n  // Convert string to number if needed\n  const priceNumber = typeof price === 'string' ? parseFloat(price) : price;\n\n  // If conversion failed or price is zero/negative, show as free\n  if (isNaN(priceNumber) || priceNumber <= 0) {\n    return 'Free';\n  }\n\n  // Format with dollar sign and no decimal places for whole numbers\n  return `$${priceNumber % 1 === 0 ? priceNumber : priceNumber.toFixed(2)}`;\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}