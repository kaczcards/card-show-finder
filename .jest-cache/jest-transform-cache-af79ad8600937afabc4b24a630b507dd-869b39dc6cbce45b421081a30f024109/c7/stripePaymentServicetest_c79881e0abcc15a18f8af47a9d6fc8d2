4a78da0fc72947e07d05259202a5e3a6
_getJestObj().mock('../../src/supabase', function () {
  return {
    supabase: {
      auth: {
        getSession: jest.fn()
      },
      from: jest.fn().mockReturnThis(),
      update: jest.fn().mockReturnThis(),
      insert: jest.fn().mockReturnThis(),
      eq: jest.fn().mockReturnThis(),
      select: jest.fn().mockReturnThis(),
      single: jest.fn()
    }
  };
});
_getJestObj().mock('../../src/services/subscriptionTypes', function () {
  var original = jest.requireActual('../../src/services/subscriptionTypes');
  return Object.assign({}, original, {
    SUBSCRIPTION_PLANS: [{
      id: 'dealer-monthly',
      name: 'MVP Dealer Monthly',
      description: 'Monthly subscription for MVP Dealers',
      price: 9.99,
      type: 'dealer',
      duration: 'monthly',
      features: ['Feature 1', 'Feature 2']
    }, {
      id: 'dealer-annual',
      name: 'MVP Dealer Annual',
      description: 'Annual subscription for MVP Dealers',
      price: 99.99,
      type: 'dealer',
      duration: 'annual',
      features: ['Feature 1', 'Feature 2', 'Feature 3']
    }, {
      id: 'organizer-monthly',
      name: 'Show Organizer Monthly',
      description: 'Monthly subscription for Show Organizers',
      price: 19.99,
      type: 'organizer',
      duration: 'monthly',
      features: ['Feature A', 'Feature B']
    }],
    SubscriptionPlanType: {
      DEALER: 'dealer',
      ORGANIZER: 'organizer'
    },
    SubscriptionDuration: {
      MONTHLY: 'monthly',
      ANNUAL: 'annual'
    },
    _calculateExpiryDate: jest.fn().mockImplementation(function () {
      var date = new Date();
      date.setDate(date.getDate() + 30);
      return date;
    })
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _subscriptionTypes = require("../../src/services/subscriptionTypes");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var initializeStripe;
var createPaymentSheetForSubscription;
var processSubscriptionUpdate;
var originalEnv = process.env;
beforeEach(function () {
  jest.resetModules();
  process.env = Object.assign({}, originalEnv);
  process.env.EXPO_PUBLIC_STRIPE_PUBLISHABLE_KEY = 'pk_test_mock_key';
  process.env.EXPO_PUBLIC_SUPABASE_URL = 'https://mock-supabase-url.com';
  jest.clearAllMocks();
  var supabaseMock = require('../../src/supabase').supabase;
  supabaseMock.auth.getSession.mockResolvedValue({
    data: {
      session: {
        access_token: 'mock-access-token'
      }
    },
    error: null
  });
  jest.spyOn(console, 'error').mockImplementation(function () {});
  jest.spyOn(console, 'warn').mockImplementation(function () {});
  jest.isolateModules(function () {
    var stripeService = require('../../src/services/stripePaymentService');
    initializeStripe = stripeService.initializeStripe;
    createPaymentSheetForSubscription = stripeService.createPaymentSheetForSubscription;
    processSubscriptionUpdate = stripeService.processSubscriptionUpdate;
  });
});
afterEach(function () {
  process.env = originalEnv;
  jest.restoreAllMocks();
});
global.fetch = jest.fn();
describe('stripePaymentService', function () {
  var mockUserId = 'user-123';
  var mockPlanId = 'dealer-monthly';
  var mockInvalidPlanId = 'invalid-plan';
  var mockPaymentIntent = 'pi_mock_payment_intent';
  var mockEphemeralKey = 'ek_mock_ephemeral_key';
  var mockCustomer = 'cus_mock_customer';
  var mockPublishableKey = 'pk_test_mock_key';
  var mockPlan = {
    id: 'dealer-monthly',
    name: 'MVP Dealer Monthly',
    description: 'Monthly subscription for MVP Dealers',
    price: 9.99,
    type: _subscriptionTypes.SubscriptionPlanType.DEALER,
    duration: _subscriptionTypes.SubscriptionDuration.MONTHLY,
    features: ['Feature 1', 'Feature 2']
  };
  var mockInitPaymentSheet = jest.fn();
  var mockPresentPaymentSheet = jest.fn();
  var mockSupabase = require('../../src/supabase').supabase;
  describe('initializeStripe', function () {
    test('should return true when publishable key is set', function () {
      process.env.EXPO_PUBLIC_STRIPE_PUBLISHABLE_KEY = 'pk_test_valid_key';
      var result = initializeStripe();
      expect(result).toBe(true);
    });
    test('should return false when publishable key is empty', function () {
      process.env.EXPO_PUBLIC_STRIPE_PUBLISHABLE_KEY = '';
      var testInitializeStripe;
      jest.isolateModules(function () {
        var stripeService = require('../../src/services/stripePaymentService');
        testInitializeStripe = stripeService.initializeStripe;
      });
      var result = testInitializeStripe();
      expect(result).toBe(false);
      expect(console.error).toHaveBeenCalledWith('Stripe publishable key is not set. Please check your environment variables.');
    });
  });
  describe('createPaymentSheetForSubscription', function () {
    beforeEach(function () {
      mockSupabase.auth.getSession.mockResolvedValue({
        data: {
          session: {
            access_token: 'mock-access-token'
          }
        },
        error: null
      });
      global.fetch.mockResolvedValue({
        ok: true,
        json: jest.fn().mockResolvedValue({
          paymentIntent: mockPaymentIntent,
          ephemeralKey: mockEphemeralKey,
          customer: mockCustomer,
          publishableKey: mockPublishableKey
        })
      });
      mockInitPaymentSheet.mockResolvedValue({
        error: null
      });
      mockPresentPaymentSheet.mockResolvedValue({
        error: null
      });
    });
    test('should return error for invalid plan ID', (0, _asyncToGenerator2.default)(function* () {
      var result = yield createPaymentSheetForSubscription(mockUserId, mockInvalidPlanId, mockInitPaymentSheet, mockPresentPaymentSheet);
      expect(result).toEqual({
        success: false,
        error: 'Subscription plan not found.'
      });
      expect(global.fetch).not.toHaveBeenCalled();
    }));
    test('should handle network failure during payment intent creation', (0, _asyncToGenerator2.default)(function* () {
      global.fetch.mockRejectedValue(new Error('Network error'));
      var result = yield createPaymentSheetForSubscription(mockUserId, mockPlanId, mockInitPaymentSheet, mockPresentPaymentSheet);
      expect(result.success).toBe(false);
      expect(result.error).toBe('Network error');
      expect(console.error).toHaveBeenCalled();
    }));
    test('should handle payment intent creation error (400)', (0, _asyncToGenerator2.default)(function* () {
      global.fetch.mockResolvedValue({
        ok: false,
        status: 400,
        json: jest.fn().mockResolvedValue({
          error: 'Invalid request parameters'
        })
      });
      var result = yield createPaymentSheetForSubscription(mockUserId, mockPlanId, mockInitPaymentSheet, mockPresentPaymentSheet);
      expect(result.success).toBe(false);
      expect(result.error).toBe('Invalid request parameters');
    }));
    test('should handle payment intent creation error (401)', (0, _asyncToGenerator2.default)(function* () {
      global.fetch.mockResolvedValue({
        ok: false,
        status: 401,
        json: jest.fn().mockResolvedValue({
          error: 'Unauthorized access'
        })
      });
      var result = yield createPaymentSheetForSubscription(mockUserId, mockPlanId, mockInitPaymentSheet, mockPresentPaymentSheet);
      expect(result.success).toBe(false);
      expect(result.error).toBe('Unauthorized access');
    }));
    test('should handle payment intent creation error (500)', (0, _asyncToGenerator2.default)(function* () {
      global.fetch.mockResolvedValue({
        ok: false,
        status: 500,
        json: jest.fn().mockResolvedValue({
          error: 'Server error'
        })
      });
      var result = yield createPaymentSheetForSubscription(mockUserId, mockPlanId, mockInitPaymentSheet, mockPresentPaymentSheet);
      expect(result.success).toBe(false);
      expect(result.error).toBe('Server error');
    }));
    test('should handle Stripe initPaymentSheet error', (0, _asyncToGenerator2.default)(function* () {
      mockInitPaymentSheet.mockResolvedValue({
        error: {
          code: 'initialization_error',
          message: 'Failed to initialize payment sheet'
        }
      });
      var result = yield createPaymentSheetForSubscription(mockUserId, mockPlanId, mockInitPaymentSheet, mockPresentPaymentSheet);
      expect(result.success).toBe(false);
      expect(result.error).toBe('Initialization failed: Failed to initialize payment sheet');
      expect(console.error).toHaveBeenCalled();
    }));
    test('should handle Stripe presentPaymentSheet canceled error', (0, _asyncToGenerator2.default)(function* () {
      mockPresentPaymentSheet.mockResolvedValue({
        error: {
          code: 'Canceled',
          message: 'The payment was canceled'
        }
      });
      var result = yield createPaymentSheetForSubscription(mockUserId, mockPlanId, mockInitPaymentSheet, mockPresentPaymentSheet);
      expect(result.success).toBe(false);
      expect(result.error).toBe('Payment was canceled.');
    }));
    test('should handle Stripe presentPaymentSheet payment failure', (0, _asyncToGenerator2.default)(function* () {
      mockPresentPaymentSheet.mockResolvedValue({
        error: {
          code: 'payment_failed',
          message: 'The payment failed'
        }
      });
      var result = yield createPaymentSheetForSubscription(mockUserId, mockPlanId, mockInitPaymentSheet, mockPresentPaymentSheet);
      expect(result.success).toBe(false);
      expect(result.error).toBe('Payment failed: The payment failed');
      expect(console.error).toHaveBeenCalled();
    }));
    test('should handle timeout during payment intent creation', (0, _asyncToGenerator2.default)(function* () {
      jest.useFakeTimers();
      var mockFetchPromise = new Promise(function (_, reject) {
        setTimeout(function () {
          reject(new Error('Request timed out'));
        }, 30000);
      });
      global.fetch.mockReturnValue(mockFetchPromise);
      var resultPromise = createPaymentSheetForSubscription(mockUserId, mockPlanId, mockInitPaymentSheet, mockPresentPaymentSheet);
      jest.advanceTimersByTime(31000);
      var result = yield resultPromise;
      expect(result.success).toBe(false);
      expect(result.error).toBe('Request timed out');
      jest.useRealTimers();
    }));
    test('should handle invalid user ID', (0, _asyncToGenerator2.default)(function* () {
      global.fetch.mockResolvedValue({
        ok: false,
        status: 400,
        json: jest.fn().mockResolvedValue({
          error: 'Invalid user ID'
        })
      });
      var result = yield createPaymentSheetForSubscription('invalid-user-id', mockPlanId, mockInitPaymentSheet, mockPresentPaymentSheet);
      expect(result.success).toBe(false);
      expect(result.error).toBe('Invalid user ID');
    }));
    test('should handle successful payment flow', (0, _asyncToGenerator2.default)(function* () {
      var result = yield createPaymentSheetForSubscription(mockUserId, mockPlanId, mockInitPaymentSheet, mockPresentPaymentSheet);
      expect(result.success).toBe(true);
      expect(result.transactionId).toBe(mockPaymentIntent);
      expect(global.fetch).toHaveBeenCalledWith(expect.stringContaining('/functions/v1/create-payment-intent'), expect.objectContaining({
        method: 'POST',
        headers: expect.objectContaining({
          'Content-Type': 'application/json',
          'Authorization': 'Bearer mock-access-token'
        }),
        body: expect.any(String)
      }));
    }));
  });
  describe('Edge cases', function () {
    test('should handle concurrent payment attempts', (0, _asyncToGenerator2.default)(function* () {
      var callCount = 0;
      global.fetch.mockImplementation(function () {
        callCount++;
        if (callCount === 1) {
          return Promise.resolve({
            ok: true,
            json: function json() {
              return Promise.resolve({
                paymentIntent: mockPaymentIntent,
                ephemeralKey: mockEphemeralKey,
                customer: mockCustomer,
                publishableKey: mockPublishableKey
              });
            }
          });
        } else {
          return Promise.resolve({
            ok: false,
            json: function json() {
              return Promise.resolve({
                error: 'Payment already in progress'
              });
            }
          });
        }
      });
      var results = yield Promise.all([createPaymentSheetForSubscription(mockUserId, mockPlanId, mockInitPaymentSheet, mockPresentPaymentSheet), createPaymentSheetForSubscription(mockUserId, mockPlanId, mockInitPaymentSheet, mockPresentPaymentSheet)]);
      expect(results[0].success).toBe(true);
      expect(results[1].success).toBe(false);
      expect(results[1].error).toBe('Payment already in progress');
    }));
    test('should handle JSON parse errors in API response', (0, _asyncToGenerator2.default)(function* () {
      global.fetch.mockResolvedValue({
        ok: true,
        json: jest.fn().mockRejectedValue(new SyntaxError('Unexpected token < in JSON'))
      });
      var result = yield createPaymentSheetForSubscription(mockUserId, mockPlanId, mockInitPaymentSheet, mockPresentPaymentSheet);
      expect(result.success).toBe(false);
      expect(result.error).toContain('Unexpected token < in JSON');
    }));
    test('should handle empty response from payment intent creation', (0, _asyncToGenerator2.default)(function* () {
      global.fetch.mockResolvedValue({
        ok: true,
        json: jest.fn().mockResolvedValue(null)
      });
      var result = yield createPaymentSheetForSubscription(mockUserId, mockPlanId, mockInitPaymentSheet, mockPresentPaymentSheet);
      expect(result.success).toBe(false);
      expect(result.error).toContain('Cannot read properties of null');
    }));
    test('should handle rate limiting from Stripe API', (0, _asyncToGenerator2.default)(function* () {
      global.fetch.mockResolvedValue({
        ok: false,
        status: 429,
        json: jest.fn().mockResolvedValue({
          error: 'Too many requests. Please try again later.'
        })
      });
      var result = yield createPaymentSheetForSubscription(mockUserId, mockPlanId, mockInitPaymentSheet, mockPresentPaymentSheet);
      expect(result.success).toBe(false);
      expect(result.error).toBe('Too many requests. Please try again later.');
    }));
    test('should handle Stripe API service outage', (0, _asyncToGenerator2.default)(function* () {
      global.fetch.mockResolvedValue({
        ok: false,
        status: 503,
        json: jest.fn().mockResolvedValue({
          error: 'Stripe API is currently unavailable'
        })
      });
      var result = yield createPaymentSheetForSubscription(mockUserId, mockPlanId, mockInitPaymentSheet, mockPresentPaymentSheet);
      expect(result.success).toBe(false);
      expect(result.error).toBe('Stripe API is currently unavailable');
    }));
    test('should handle invalid currency code', (0, _asyncToGenerator2.default)(function* () {
      global.fetch.mockResolvedValue({
        ok: false,
        status: 400,
        json: jest.fn().mockResolvedValue({
          error: 'Invalid currency code'
        })
      });
      var result = yield createPaymentSheetForSubscription(mockUserId, mockPlanId, mockInitPaymentSheet, mockPresentPaymentSheet);
      expect(result.success).toBe(false);
      expect(result.error).toBe('Invalid currency code');
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,