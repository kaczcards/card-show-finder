{"version":3,"names":["globalThis","structuredClone","cov_f1wkvrkx","b","s","jsonClone","value","f","undefined","JSON","parse","stringify","error","console","warn","Error","message","__DEV__","log"],"sources":["polyfills.ts"],"sourcesContent":["/**\n * polyfills.ts\n * \n * This file contains polyfills for modern JavaScript features that might not be\n * available in all environments, particularly React Native.\n * \n * Usage:\n * Import this file at the entry point of your application (e.g., App.tsx)\n * ```\n * import './src/utils/polyfills';\n * ```\n */\n\n/**\n * structuredClone Polyfill\n * \n * The structuredClone() global method creates a deep clone of a given value using\n * the structured clone algorithm. This polyfill provides a simplified version\n * that works for most JSON-serializable data, which is sufficient for Supabase's needs.\n * \n * Limitations of this polyfill:\n * - Cannot clone functions, Symbols, WeakMaps, etc.\n * - Cannot handle circular references\n * - Loses prototype chain information\n * - Date objects become strings\n * - RegExp, Map, Set objects are not properly cloned\n * \n * These limitations are acceptable for Supabase usage as it primarily deals with\n * JSON-serializable data for authentication and database operations.\n */\n\n// Only add the polyfill if it doesn't already exist\nif (typeof globalThis.structuredClone !== 'function') {\n  // Define the type for the polyfill to match the native function\n  type StructuredCloneFunction = <T>(value: T) => T;\n\n  /**\n   * Simple implementation using JSON serialization/deserialization\n   * This is sufficient for most Supabase use cases which involve\n   * serializable session and user data\n   */\n  const jsonClone: StructuredCloneFunction = <T>(value: T): T => {\n    if (value === undefined) return value;\n    \n    try {\n      return JSON.parse(JSON.stringify(value));\n    } catch (error) {\n      console.warn(\n        '[structuredClone polyfill] Failed to clone value:',\n        error instanceof Error ? error.message : 'Unknown error'\n      );\n      // Return the original value as fallback (though it won't be a clone)\n      return value;\n    }\n  };\n\n  // Add to globalThis so it's available everywhere\n  globalThis.structuredClone = jsonClone;\n\n  // Log that the polyfill has been applied (helpful for debugging)\n  if (__DEV__) {\n    console.log('[Polyfill] Added structuredClone polyfill for Supabase compatibility');\n  }\n}\n\n/**\n * Type declaration to make TypeScript aware of our polyfill\n * This ensures no type errors when using structuredClone\n */\ndeclare global {\n  interface Window {\n    structuredClone<T>(value: T): T;\n  }\n  \n  var structuredClone: <T>(value: T) => T;\n}\n\n// Export nothing - this file is used for its side effects only\nexport {};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,IAAI,OAAOA,UAAU,CAACC,eAAe,KAAK,UAAU,EAAE;EAAAC,YAAA,GAAAC,CAAA;EAAAD,YAAA,GAAAE,CAAA;EASpD,IAAMC,SAAkC,GAAG,SAArCA,SAAkCA,CAAOC,KAAQ,EAAQ;IAAAJ,YAAA,GAAAK,CAAA;IAAAL,YAAA,GAAAE,CAAA;IAC7D,IAAIE,KAAK,KAAKE,SAAS,EAAE;MAAAN,YAAA,GAAAC,CAAA;MAAAD,YAAA,GAAAE,CAAA;MAAA,OAAOE,KAAK;IAAA,CAAC;MAAAJ,YAAA,GAAAC,CAAA;IAAA;IAAAD,YAAA,GAAAE,CAAA;IAEtC,IAAI;MAAAF,YAAA,GAAAE,CAAA;MACF,OAAOK,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACL,KAAK,CAAC,CAAC;IAC1C,CAAC,CAAC,OAAOM,KAAK,EAAE;MAAAV,YAAA,GAAAE,CAAA;MACdS,OAAO,CAACC,IAAI,CACV,mDAAmD,EACnDF,KAAK,YAAYG,KAAK,IAAAb,YAAA,GAAAC,CAAA,UAAGS,KAAK,CAACI,OAAO,KAAAd,YAAA,GAAAC,CAAA,UAAG,eAAe,CAC1D,CAAC;MAACD,YAAA,GAAAE,CAAA;MAEF,OAAOE,KAAK;IACd;EACF,CAAC;EAACJ,YAAA,GAAAE,CAAA;EAGFJ,UAAU,CAACC,eAAe,GAAGI,SAAS;EAACH,YAAA,GAAAE,CAAA;EAGvC,IAAIa,OAAO,EAAE;IAAAf,YAAA,GAAAC,CAAA;IAAAD,YAAA,GAAAE,CAAA;IACXS,OAAO,CAACK,GAAG,CAAC,sEAAsE,CAAC;EACrF,CAAC;IAAAhB,YAAA,GAAAC,CAAA;EAAA;AACH,CAAC;EAAAD,YAAA,GAAAC,CAAA;AAAA;AAeD","ignoreList":[]}