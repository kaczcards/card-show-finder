{"version":3,"names":["react_query_1","cov_c751kqvb4","s","require","react_1","supabase_1","messagingService","__importStar","useConversationMessagesQuery","conversationId","userId","f","queryClient","useQueryClient","isSubscribed","setIsSubscribed","useState","hasMarkedAsReadRef","useRef","data","messages","isLoading","error","rawError","refetch","useQuery","queryKey","queryFn","b","supabase","rpc","input_convo_id","console","warn","message","Array","isArray","Error","rows","map","row","message_id","conversation_id","id","sender_id","message_text","created_at","read_by_user_ids","sender_profile","err","getMessages","enabled","staleTime","cacheTime","retry","retryDelay","attempt","Math","min","onError","onSuccess","current","length","markConversationAsRead","then","invalidateQueries","catch","formattedError","useEffect","channel","subscribeToMessages","newMessage","setQueryData","oldData","some","msg","markMessageAsRead","unsubscribe","sendMessageMutation","useMutation","mutationFn","messageText","conversation","getQueryData","recipientId","participants","user_id","type","sendMessage","sendGroupMessage","onMutate","cancelQueries","optimisticMessage","Date","now","toISOString","_","context","__","filter","allMessagesRead","every","includes","mutate","isSending","isPending","exports"],"sources":["/Users/kevin/card-show-finder/src/hooks/useConversationMessagesQuery.ts"],"sourcesContent":["import { useQuery, useQueryClient, useMutation } from '@tanstack/react-query';\nimport { useEffect, useState, useRef } from 'react';\nimport { supabase } from '../supabase';\nimport * as messagingService from '../services/messagingService';\nimport { Message } from '../services/messagingService';\n\n/**\n * Custom hook for fetching and managing messages for a specific conversation with React Query\n * Includes real-time updates and optimized data fetching\n * \n * Integration with PostgreSQL RPC functions:\n * - Uses 'get_conversation_messages' RPC function with 'input_convo_id' parameter\n * - Defined in migration: 20250711120000_create_message_rpc.sql\n * - Maps returned fields (message_id, etc.) to Message interface properties\n * - Falls back to messagingService.getMessages() if RPC fails\n */\nexport const useConversationMessagesQuery = (\n  conversationId: string | null,\n  userId: string | null\n) => {\n  const queryClient = useQueryClient();\n  const [isSubscribed, setIsSubscribed] = useState(false);\n  /**\n   * Track whether we've already called `markConversationAsRead`\n   * for the current conversation to avoid an infinite render loop.\n   */\n  const hasMarkedAsReadRef = useRef<string | null>(null);\n\n  // Main query to fetch messages for the conversation\n  const {\n    data: messages,\n    isLoading,\n    error: rawError,\n    refetch\n  } = useQuery<Message[], Error>({\n    queryKey: ['messages', conversationId],\n    queryFn: async () => {\n      if (!conversationId) return [];\n      \n      try {\n        // Use the RPC function for optimized fetching\n        // This calls the PostgreSQL function 'get_conversation_messages' defined in\n        // migration 20250711120000_create_message_rpc.sql\n        const { data, error } = await supabase\n          .rpc('get_conversation_messages', { \n            // Parameter name must match the SQL function parameter\n            input_convo_id: conversationId \n          });\n          \n        if (error) {\n          console.warn('[useConversationMessagesQuery] RPC error:', error.message);\n          throw error;\n        }\n\n        // Validate returned data structure\n        if (!data || !Array.isArray(data)) {\n          console.warn('[useConversationMessagesQuery] RPC returned no data or invalid format');\n          throw new Error('Invalid data returned from RPC');\n        }\n\n        // Map SQL result fields to match our Message interface\n        // The field names from the RPC function (message_id, etc.) need to be mapped to our interface\n        const rows = data as any[];\n        return rows.map((row) => {\n          // Verify required fields exist\n          if (!row.message_id || !row.conversation_id) {\n            console.warn('[useConversationMessagesQuery] Missing required fields in message:', row);\n          }\n          \n          // Transform the data to match the Message interface\n          return {\n            id: row.message_id,\n            conversation_id: row.conversation_id,\n            sender_id: row.sender_id,\n            message_text: row.message_text,\n            created_at: row.created_at,\n            read_by_user_ids: row.read_by_user_ids,\n            sender_profile: row.sender_profile\n          } as Message;\n        });\n      } catch (err) {\n        console.error('Error fetching messages with RPC, falling back to service:', err);\n        // Fallback to the service method if RPC fails\n        return await messagingService.getMessages(conversationId);\n      }\n    },\n    enabled: !!conversationId,\n    staleTime: 1000 * 60, // Consider data fresh for 1 minute\n    cacheTime: 1000 * 60 * 10, // Keep in cache for 10 minutes\n    // Retry a few times with exponential back-off\n    retry: 3,\n    retryDelay: attempt => Math.min(1000 * 2 ** attempt, 30_000),\n    // Log errors for easier debugging / observability\n    onError: (err) => {\n      /* eslint-disable no-console */\n      console.error('[useConversationMessagesQuery] fetch error:', err);\n      /* eslint-enable no-console */\n    },\n    // Mark conversation as read when messages are successfully fetched\n    onSuccess: (data) => {\n      // Reset the ref whenever the user switches conversations\n      if (hasMarkedAsReadRef.current !== conversationId) {\n        hasMarkedAsReadRef.current = null;\n      }\n\n      // Preconditions\n      if (\n        !conversationId ||\n        !userId ||\n        !data ||\n        data.length === 0 ||\n        hasMarkedAsReadRef.current === conversationId // already marked\n      ) {\n        return;\n      }\n\n      messagingService\n        .markConversationAsRead(conversationId, userId)\n        .then(() => {\n          // Remember that we've marked this conversation\n          hasMarkedAsReadRef.current = conversationId;\n\n          // Update the conversations list to reflect read status\n          queryClient.invalidateQueries({\n            queryKey: ['conversations', userId],\n          });\n        })\n        .catch(err =>\n          console.error('Error marking conversation as read:', err)\n        );\n    }\n  });\n\n  // Structured error exposed to consumers\n  const formattedError = rawError\n    ? {\n        message: rawError.message,\n        retry: () => refetch(),\n      }\n    : null;\n\n  // Setup real-time subscription for new messages in this conversation\n  useEffect(() => {\n    if (!conversationId || isSubscribed) return;\n\n    // Subscribe to messages table for real-time updates for this conversation\n    const channel = messagingService.subscribeToMessages(\n      conversationId,\n      (newMessage) => {\n        // Update the messages cache when a new message arrives\n        queryClient.setQueryData(['messages', conversationId], (oldData: Message[] | undefined) => {\n          if (!oldData) return [newMessage];\n          \n          // Check if message already exists to prevent duplicates\n          if (oldData.some(msg => msg.id === newMessage.id)) {\n            return oldData;\n          }\n          \n          return [...oldData, newMessage];\n        });\n        \n        // If the message is from someone else, mark it as read\n        if (userId && newMessage.sender_id !== userId) {\n          messagingService.markMessageAsRead(newMessage.id, userId);\n        }\n      }\n    );\n\n    setIsSubscribed(true);\n\n    // Cleanup subscription on unmount\n    return () => {\n      channel.unsubscribe();\n      setIsSubscribed(false);\n    };\n  }, [conversationId, queryClient, userId, isSubscribed]);\n\n  // Mutation for sending a new message\n  const sendMessageMutation = useMutation({\n    mutationFn: async ({ messageText }: { messageText: string }) => {\n      if (!userId || !conversationId) throw new Error('Missing required parameters');\n      \n      // Get the conversation to find the recipient\n      const conversation = queryClient.getQueryData<any>(['conversation', conversationId]);\n      const recipientId = conversation?.participants?.[0]?.user_id || '';\n      \n      if (conversation?.type === 'direct' || !conversation?.type) {\n        return await messagingService.sendMessage(userId, recipientId, messageText, conversationId);\n      } else {\n        return await messagingService.sendGroupMessage(userId, conversationId, messageText);\n      }\n    },\n    onMutate: async ({ messageText }) => {\n      if (!userId || !conversationId) return;\n      \n      // Cancel any outgoing refetches\n      await queryClient.cancelQueries({ queryKey: ['messages', conversationId] });\n      \n      // Create optimistic message\n      const optimisticMessage: Partial<Message> = {\n        id: `temp-${Date.now()}`,\n        conversation_id: conversationId,\n        sender_id: userId,\n        message_text: messageText,\n        created_at: new Date().toISOString(),\n        read_by_user_ids: [userId],\n        sender_profile: {\n          id: userId\n        }\n      };\n      \n      // Add optimistic message to the messages list\n      queryClient.setQueryData(['messages', conversationId], (oldData: Message[] | undefined) => {\n        if (!oldData) return [optimisticMessage as Message];\n        return [...oldData, optimisticMessage as Message];\n      });\n      \n      return { optimisticMessage };\n    },\n    onSuccess: (newMessage, _, context) => {\n      if (!conversationId) return;\n      \n      // Replace optimistic message with the real one\n      queryClient.setQueryData(['messages', conversationId], (oldData: Message[] | undefined) => {\n        if (!oldData) return [newMessage];\n        \n        return oldData.map(message => \n          message.id === (context?.optimisticMessage as Message)?.id ? newMessage : message\n        );\n      });\n      \n      // Update the conversations list with the new message\n      queryClient.invalidateQueries({\n        queryKey: ['conversations', userId],\n      });\n    },\n    onError: (_, __, context) => {\n      if (!conversationId) return;\n      \n      // Remove the optimistic message on error\n      queryClient.setQueryData(['messages', conversationId], (oldData: Message[] | undefined) => {\n        if (!oldData) return [];\n        \n        return oldData.filter(message => \n          message.id !== (context?.optimisticMessage as Message)?.id\n        );\n      });\n    }\n  });\n\n  // Check if all messages have been read\n  const allMessagesRead = messages?.every(message => \n    message.read_by_user_ids?.includes(userId || '')\n  ) || false;\n\n  return {\n    messages: messages || [],\n    isLoading,\n    error: formattedError,\n    refetch,\n    allMessagesRead,\n    sendMessage: (messageText: string) => sendMessageMutation.mutate({ messageText }),\n    isSending: sendMessageMutation.isPending\n  };\n};\n"],"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","ignoreList":[]}