{"version":3,"names":["Sentry","cov_4ffdu3iar","s","__importStar","require","expo_constants_1","__importDefault","react_native_1","SENTRY_DSN","default","expoConfig","extra","sentryDsn","Environment","f","b","exports","initSentry","options","userId","userData","environment","__DEV__","DEVELOPMENT","PRODUCTION","debug","enableTracing","console","warn","init","dsn","enableInExpoDevelopment","tracesSampleRate","beforeSend","event","setUserContext","Native","setContext","platform","Platform","OS","version","Version","model","appVersion","log","setUser","id","clearUserContext","captureException","error","context","captureMessage","message","level","startTransaction","name","operation","startTime","Date","now","finish","setStatus","setTag","setData","op","getSentryErrorBoundary","ErrorBoundary","addBreadcrumb","breadcrumb","SentryRaw"],"sources":["/Users/kevin/card-show-finder/src/services/sentryConfig.ts"],"sourcesContent":["import * as Sentry from 'sentry-expo';\nimport Constants from 'expo-constants';\nimport { Platform } from 'react-native';\n\n/**\n * Sentry configuration and utility functions for error tracking and monitoring.\n * \n * This module provides a centralized way to interact with Sentry throughout the application.\n * It handles initialization, error capturing, and user context management.\n */\n\n// Get the Sentry DSN from Expo constants (configured in app.config.js)\nconst SENTRY_DSN = Constants.expoConfig?.extra?.sentryDsn;\n\n/**\n * Environment names for different build types\n */\nexport enum Environment {\n  DEVELOPMENT = 'development',\n  STAGING = 'staging',\n  PRODUCTION = 'production',\n}\n\n/**\n * Configuration options for Sentry initialization\n */\ninterface SentryConfigOptions {\n  /** Optional user ID to associate with errors */\n  userId?: string;\n  /** Optional additional user data */\n  userData?: Record<string, any>;\n  /** Environment name (defaults to 'development' in dev mode) */\n  environment?: Environment;\n  /** Whether to enable debug mode for Sentry */\n  debug?: boolean;\n  /** Whether to enable performance monitoring */\n  enableTracing?: boolean;\n}\n\n/**\n * Initialize Sentry with the provided configuration.\n * This should be called as early as possible in your application.\n * \n * @example\n * // In App.tsx or similar entry point:\n * import { initSentry } from './services/sentryConfig';\n * \n * // Basic initialization\n * initSentry();\n * \n * // With user context\n * initSentry({ \n *   userId: 'user-123', \n *   userData: { email: 'user@example.com' },\n *   environment: Environment.PRODUCTION\n * });\n */\nexport const initSentry = (options: SentryConfigOptions = {}): void => {\n  const {\n    userId,\n    userData,\n    environment = __DEV__ ? Environment.DEVELOPMENT : Environment.PRODUCTION,\n    debug = __DEV__,\n    enableTracing = !__DEV__,\n  } = options;\n\n  // Only initialize if we have a DSN\n  if (!SENTRY_DSN) {\n    console.warn(\n      'Sentry initialization skipped: No DSN provided. ' +\n      'Add EXPO_PUBLIC_SENTRY_DSN to your .env file to enable error reporting.'\n    );\n    return;\n  }\n\n  // Initialize Sentry\n  Sentry.init({\n    dsn: SENTRY_DSN,\n    enableInExpoDevelopment: true,\n    debug,\n    environment,\n    tracesSampleRate: enableTracing ? 0.2 : 0, // Sample 20% of transactions in non-dev\n    beforeSend(event) {\n      // You can modify or filter events before they are sent to Sentry\n      // For example, remove sensitive data\n      return event;\n    },\n  });\n\n  // Set user context if provided\n  if (userId) {\n    setUserContext(userId, userData);\n  }\n\n  // Add device context\n  Sentry.Native.setContext('device', {\n    platform: Platform.OS,\n    version: Platform.Version,\n    model: Platform.OS === 'ios' ? 'iOS Device' : 'Android Device',\n    appVersion: Constants.expoConfig?.version || 'unknown',\n  });\n\n  console.log(`Sentry initialized in ${environment} environment`);\n};\n\n/**\n * Set user context information for better error tracking.\n * Call this when a user logs in or when user data changes.\n * \n * @param userId The unique identifier for the user\n * @param userData Optional additional user data\n * \n * @example\n * // After user login:\n * setUserContext('user-123', { email: 'user@example.com', subscription: 'premium' });\n */\nexport const setUserContext = (userId: string, userData?: Record<string, any>): void => {\n  if (!SENTRY_DSN) return;\n\n  Sentry.Native.setUser({\n    id: userId,\n    ...userData,\n  });\n};\n\n/**\n * Clear user context information.\n * Call this when a user logs out.\n * \n * @example\n * // After user logout:\n * clearUserContext();\n */\nexport const clearUserContext = (): void => {\n  if (!SENTRY_DSN) return;\n  \n  Sentry.Native.setUser(null);\n};\n\n/**\n * Capture an exception and send it to Sentry.\n * \n * @param error The error object to capture\n * @param context Optional additional context data\n * \n * @example\n * try {\n *   // Some code that might throw\n *   throw new Error('Something went wrong');\n * } catch (error) {\n *   captureException(error, { extra: { action: 'saving_data' } });\n * }\n */\nexport const captureException = (error: Error, context?: Sentry.ScopeContext): void => {\n  if (!SENTRY_DSN) {\n    console.error('Error captured but Sentry is not initialized:', error);\n    return;\n  }\n\n  Sentry.Native.captureException(error, context);\n};\n\n/**\n * Capture a custom message and send it to Sentry.\n * \n * @param message The message to capture\n * @param level The severity level of the message\n * @param context Optional additional context data\n * \n * @example\n * // Log an info message\n * captureMessage('User completed onboarding', 'info');\n * \n * // Log a warning with extra context\n * captureMessage('API rate limit approaching', 'warning', { \n *   extra: { remainingCalls: 10, resetTime: '2023-07-19T15:00:00Z' } \n * });\n */\nexport const captureMessage = (\n  message: string, \n  level: Sentry.SeverityLevel = 'info',\n  context?: Sentry.ScopeContext\n): void => {\n  if (!SENTRY_DSN) {\n    console.log(`[${level}] ${message}`);\n    return;\n  }\n\n  Sentry.Native.captureMessage(message, {\n    level,\n    ...context,\n  });\n};\n\n/**\n * Start a new transaction for performance monitoring.\n * \n * @param name The name of the transaction\n * @param operation The operation being performed\n * @returns A transaction object that should be finished when the operation completes\n * \n * @example\n * // Measure the time it takes to load data\n * const transaction = startTransaction('loadUserData', 'data-loading');\n * try {\n *   await fetchUserData();\n *   transaction.setStatus('ok');\n * } catch (error) {\n *   transaction.setStatus('error');\n *   captureException(error);\n * } finally {\n *   transaction.finish();\n * }\n */\nexport const startTransaction = (\n  name: string,\n  operation: string\n): Sentry.Transaction => {\n  if (!SENTRY_DSN) {\n    // Return a dummy transaction if Sentry is not initialized\n    const startTime = Date.now();\n    return {\n      finish: () => {\n        console.log(`Transaction \"${name}\" (${operation}) finished in ${Date.now() - startTime}ms`);\n      },\n      setStatus: () => {},\n      setTag: () => {},\n      setData: () => {},\n    } as unknown as Sentry.Transaction;\n  }\n\n  return Sentry.Native.startTransaction({\n    name,\n    op: operation,\n  });\n};\n\n/**\n * Create an error boundary component using Sentry's error boundary.\n * This is a convenience wrapper around Sentry.ErrorBoundary.\n * \n * @returns A React error boundary component\n * \n * @example\n * // In a component file:\n * import { getSentryErrorBoundary } from './services/sentryConfig';\n * \n * const ErrorBoundary = getSentryErrorBoundary();\n * \n * export default function App() {\n *   return (\n *     <ErrorBoundary fallback={<Text>Something went wrong</Text>}>\n *       <YourApp />\n *     </ErrorBoundary>\n *   );\n * }\n */\nexport const getSentryErrorBoundary = () => {\n  return Sentry.Native.ErrorBoundary;\n};\n\n/**\n * Add breadcrumb to track user actions or application events.\n * \n * @param breadcrumb The breadcrumb to add\n * \n * @example\n * // Track user navigation\n * addBreadcrumb({\n *   category: 'navigation',\n *   message: 'Navigated to Profile screen',\n *   level: 'info'\n * });\n * \n * // Track API call\n * addBreadcrumb({\n *   category: 'api',\n *   message: 'GET /api/users',\n *   data: { userId: 123 },\n *   level: 'debug'\n * });\n */\nexport const addBreadcrumb = (breadcrumb: Sentry.Breadcrumb): void => {\n  if (!SENTRY_DSN) return;\n  \n  Sentry.Native.addBreadcrumb(breadcrumb);\n};\n\n// Export the raw Sentry object for advanced use cases\nexport const SentryRaw = Sentry;\n"],"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","ignoreList":[]}