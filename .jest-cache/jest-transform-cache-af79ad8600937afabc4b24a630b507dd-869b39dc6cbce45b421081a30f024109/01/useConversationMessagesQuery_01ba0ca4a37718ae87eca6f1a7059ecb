e6837bff1b8d6f83b55f9ace2c7702a5
"use strict";

/* istanbul ignore next */
function cov_c751kqvb4() {
  var path = "/Users/kevin/card-show-finder/src/hooks/useConversationMessagesQuery.ts";
  var hash = "1ecadf518a8e736a5c34cc65fa444127a60633b4";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kevin/card-show-finder/src/hooks/useConversationMessagesQuery.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 12,
          column: 3
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "2": {
        start: {
          line: 3,
          column: 26
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "3": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 52
        }
      },
      "4": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 7,
          column: 5
        }
      },
      "5": {
        start: {
          line: 6,
          column: 6
        },
        end: {
          line: 6,
          column: 68
        }
      },
      "6": {
        start: {
          line: 6,
          column: 51
        },
        end: {
          line: 6,
          column: 63
        }
      },
      "7": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 39
        }
      },
      "8": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "9": {
        start: {
          line: 10,
          column: 26
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "10": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 17
        }
      },
      "11": {
        start: {
          line: 13,
          column: 25
        },
        end: {
          line: 17,
          column: 2
        }
      },
      "12": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 72
        }
      },
      "13": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 21
        }
      },
      "14": {
        start: {
          line: 18,
          column: 19
        },
        end: {
          line: 34,
          column: 4
        }
      },
      "15": {
        start: {
          line: 19,
          column: 18
        },
        end: {
          line: 26,
          column: 5
        }
      },
      "16": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 24,
          column: 10
        }
      },
      "17": {
        start: {
          line: 21,
          column: 21
        },
        end: {
          line: 21,
          column: 23
        }
      },
      "18": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "19": {
        start: {
          line: 22,
          column: 29
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "20": {
        start: {
          line: 22,
          column: 77
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "21": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 22
        }
      },
      "22": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 26
        }
      },
      "23": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 33,
          column: 6
        }
      },
      "24": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "25": {
        start: {
          line: 28,
          column: 35
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "26": {
        start: {
          line: 29,
          column: 21
        },
        end: {
          line: 29,
          column: 23
        }
      },
      "27": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "28": {
        start: {
          line: 30,
          column: 25
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "29": {
        start: {
          line: 30,
          column: 38
        },
        end: {
          line: 30,
          column: 50
        }
      },
      "30": {
        start: {
          line: 30,
          column: 56
        },
        end: {
          line: 30,
          column: 57
        }
      },
      "31": {
        start: {
          line: 30,
          column: 78
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "32": {
        start: {
          line: 30,
          column: 102
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "33": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 40
        }
      },
      "34": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 22
        }
      },
      "35": {
        start: {
          line: 35,
          column: 0
        },
        end: {
          line: 35,
          column: 62
        }
      },
      "36": {
        start: {
          line: 36,
          column: 0
        },
        end: {
          line: 36,
          column: 46
        }
      },
      "37": {
        start: {
          line: 37,
          column: 22
        },
        end: {
          line: 37,
          column: 54
        }
      },
      "38": {
        start: {
          line: 38,
          column: 16
        },
        end: {
          line: 38,
          column: 32
        }
      },
      "39": {
        start: {
          line: 39,
          column: 19
        },
        end: {
          line: 39,
          column: 41
        }
      },
      "40": {
        start: {
          line: 40,
          column: 25
        },
        end: {
          line: 40,
          column: 78
        }
      },
      "41": {
        start: {
          line: 51,
          column: 37
        },
        end: {
          line: 260,
          column: 1
        }
      },
      "42": {
        start: {
          line: 52,
          column: 24
        },
        end: {
          line: 52,
          column: 59
        }
      },
      "43": {
        start: {
          line: 53,
          column: 44
        },
        end: {
          line: 53,
          column: 72
        }
      },
      "44": {
        start: {
          line: 58,
          column: 31
        },
        end: {
          line: 58,
          column: 56
        }
      },
      "45": {
        start: {
          line: 60,
          column: 68
        },
        end: {
          line: 148,
          column: 6
        }
      },
      "46": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 64,
          column: 26
        }
      },
      "47": {
        start: {
          line: 64,
          column: 16
        },
        end: {
          line: 64,
          column: 26
        }
      },
      "48": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 107,
          column: 13
        }
      },
      "49": {
        start: {
          line: 69,
          column: 40
        },
        end: {
          line: 73,
          column: 18
        }
      },
      "50": {
        start: {
          line: 74,
          column: 16
        },
        end: {
          line: 77,
          column: 17
        }
      },
      "51": {
        start: {
          line: 75,
          column: 20
        },
        end: {
          line: 75,
          column: 93
        }
      },
      "52": {
        start: {
          line: 76,
          column: 20
        },
        end: {
          line: 76,
          column: 32
        }
      },
      "53": {
        start: {
          line: 79,
          column: 16
        },
        end: {
          line: 82,
          column: 17
        }
      },
      "54": {
        start: {
          line: 80,
          column: 20
        },
        end: {
          line: 80,
          column: 106
        }
      },
      "55": {
        start: {
          line: 81,
          column: 20
        },
        end: {
          line: 81,
          column: 70
        }
      },
      "56": {
        start: {
          line: 85,
          column: 29
        },
        end: {
          line: 85,
          column: 33
        }
      },
      "57": {
        start: {
          line: 86,
          column: 16
        },
        end: {
          line: 101,
          column: 19
        }
      },
      "58": {
        start: {
          line: 88,
          column: 20
        },
        end: {
          line: 90,
          column: 21
        }
      },
      "59": {
        start: {
          line: 89,
          column: 24
        },
        end: {
          line: 89,
          column: 112
        }
      },
      "60": {
        start: {
          line: 92,
          column: 20
        },
        end: {
          line: 100,
          column: 22
        }
      },
      "61": {
        start: {
          line: 104,
          column: 16
        },
        end: {
          line: 104,
          column: 97
        }
      },
      "62": {
        start: {
          line: 106,
          column: 16
        },
        end: {
          line: 106,
          column: 74
        }
      },
      "63": {
        start: {
          line: 114,
          column: 31
        },
        end: {
          line: 114,
          column: 68
        }
      },
      "64": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 78
        }
      },
      "65": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 126,
          column: 13
        }
      },
      "66": {
        start: {
          line: 125,
          column: 16
        },
        end: {
          line: 125,
          column: 50
        }
      },
      "67": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 135,
          column: 13
        }
      },
      "68": {
        start: {
          line: 134,
          column: 16
        },
        end: {
          line: 134,
          column: 23
        }
      },
      "69": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 146,
          column: 89
        }
      },
      "70": {
        start: {
          line: 140,
          column: 16
        },
        end: {
          line: 140,
          column: 60
        }
      },
      "71": {
        start: {
          line: 142,
          column: 16
        },
        end: {
          line: 144,
          column: 19
        }
      },
      "72": {
        start: {
          line: 146,
          column: 30
        },
        end: {
          line: 146,
          column: 87
        }
      },
      "73": {
        start: {
          line: 150,
          column: 27
        },
        end: {
          line: 155,
          column: 14
        }
      },
      "74": {
        start: {
          line: 153,
          column: 25
        },
        end: {
          line: 153,
          column: 34
        }
      },
      "75": {
        start: {
          line: 157,
          column: 4
        },
        end: {
          line: 183,
          column: 60
        }
      },
      "76": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 159,
          column: 19
        }
      },
      "77": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 159,
          column: 19
        }
      },
      "78": {
        start: {
          line: 161,
          column: 24
        },
        end: {
          line: 176,
          column: 10
        }
      },
      "79": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 171,
          column: 15
        }
      },
      "80": {
        start: {
          line: 164,
          column: 16
        },
        end: {
          line: 165,
          column: 40
        }
      },
      "81": {
        start: {
          line: 165,
          column: 20
        },
        end: {
          line: 165,
          column: 40
        }
      },
      "82": {
        start: {
          line: 167,
          column: 16
        },
        end: {
          line: 169,
          column: 17
        }
      },
      "83": {
        start: {
          line: 167,
          column: 40
        },
        end: {
          line: 167,
          column: 64
        }
      },
      "84": {
        start: {
          line: 168,
          column: 20
        },
        end: {
          line: 168,
          column: 35
        }
      },
      "85": {
        start: {
          line: 170,
          column: 16
        },
        end: {
          line: 170,
          column: 48
        }
      },
      "86": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 175,
          column: 13
        }
      },
      "87": {
        start: {
          line: 174,
          column: 16
        },
        end: {
          line: 174,
          column: 74
        }
      },
      "88": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 177,
          column: 30
        }
      },
      "89": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 182,
          column: 10
        }
      },
      "90": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 180,
          column: 34
        }
      },
      "91": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 181,
          column: 35
        }
      },
      "92": {
        start: {
          line: 185,
          column: 32
        },
        end: {
          line: 248,
          column: 6
        }
      },
      "93": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 188,
          column: 63
        }
      },
      "94": {
        start: {
          line: 188,
          column: 16
        },
        end: {
          line: 188,
          column: 63
        }
      },
      "95": {
        start: {
          line: 190,
          column: 33
        },
        end: {
          line: 190,
          column: 91
        }
      },
      "96": {
        start: {
          line: 191,
          column: 32
        },
        end: {
          line: 191,
          column: 78
        }
      },
      "97": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 197,
          column: 13
        }
      },
      "98": {
        start: {
          line: 193,
          column: 16
        },
        end: {
          line: 193,
          column: 108
        }
      },
      "99": {
        start: {
          line: 196,
          column: 16
        },
        end: {
          line: 196,
          column: 100
        }
      },
      "100": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 201,
          column: 23
        }
      },
      "101": {
        start: {
          line: 201,
          column: 16
        },
        end: {
          line: 201,
          column: 23
        }
      },
      "102": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 88
        }
      },
      "103": {
        start: {
          line: 205,
          column: 38
        },
        end: {
          line: 215,
          column: 13
        }
      },
      "104": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 221,
          column: 15
        }
      },
      "105": {
        start: {
          line: 218,
          column: 16
        },
        end: {
          line: 219,
          column: 47
        }
      },
      "106": {
        start: {
          line: 219,
          column: 20
        },
        end: {
          line: 219,
          column: 47
        }
      },
      "107": {
        start: {
          line: 220,
          column: 16
        },
        end: {
          line: 220,
          column: 55
        }
      },
      "108": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 41
        }
      },
      "109": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 226,
          column: 23
        }
      },
      "110": {
        start: {
          line: 226,
          column: 16
        },
        end: {
          line: 226,
          column: 23
        }
      },
      "111": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 232,
          column: 15
        }
      },
      "112": {
        start: {
          line: 229,
          column: 16
        },
        end: {
          line: 230,
          column: 40
        }
      },
      "113": {
        start: {
          line: 230,
          column: 20
        },
        end: {
          line: 230,
          column: 40
        }
      },
      "114": {
        start: {
          line: 231,
          column: 16
        },
        end: {
          line: 231,
          column: 116
        }
      },
      "115": {
        start: {
          line: 231,
          column: 46
        },
        end: {
          line: 231,
          column: 114
        }
      },
      "116": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 236,
          column: 15
        }
      },
      "117": {
        start: {
          line: 239,
          column: 12
        },
        end: {
          line: 240,
          column: 23
        }
      },
      "118": {
        start: {
          line: 240,
          column: 16
        },
        end: {
          line: 240,
          column: 23
        }
      },
      "119": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 246,
          column: 15
        }
      },
      "120": {
        start: {
          line: 243,
          column: 16
        },
        end: {
          line: 244,
          column: 30
        }
      },
      "121": {
        start: {
          line: 244,
          column: 20
        },
        end: {
          line: 244,
          column: 30
        }
      },
      "122": {
        start: {
          line: 245,
          column: 16
        },
        end: {
          line: 245,
          column: 96
        }
      },
      "123": {
        start: {
          line: 245,
          column: 49
        },
        end: {
          line: 245,
          column: 94
        }
      },
      "124": {
        start: {
          line: 250,
          column: 28
        },
        end: {
          line: 250,
          column: 113
        }
      },
      "125": {
        start: {
          line: 250,
          column: 55
        },
        end: {
          line: 250,
          column: 103
        }
      },
      "126": {
        start: {
          line: 251,
          column: 4
        },
        end: {
          line: 259,
          column: 6
        }
      },
      "127": {
        start: {
          line: 257,
          column: 38
        },
        end: {
          line: 257,
          column: 81
        }
      },
      "128": {
        start: {
          line: 261,
          column: 0
        },
        end: {
          line: 261,
          column: 68
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 2,
            column: 75
          }
        },
        loc: {
          start: {
            line: 2,
            column: 96
          },
          end: {
            line: 9,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 6,
            column: 38
          },
          end: {
            line: 6,
            column: 39
          }
        },
        loc: {
          start: {
            line: 6,
            column: 49
          },
          end: {
            line: 6,
            column: 65
          }
        },
        line: 6
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 9,
            column: 7
          }
        },
        loc: {
          start: {
            line: 9,
            column: 28
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 9
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 13,
            column: 81
          }
        },
        loc: {
          start: {
            line: 13,
            column: 95
          },
          end: {
            line: 15,
            column: 1
          }
        },
        line: 13
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 15,
            column: 6
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 15
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 18,
            column: 51
          },
          end: {
            line: 18,
            column: 52
          }
        },
        loc: {
          start: {
            line: 18,
            column: 63
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 18
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 19,
            column: 18
          },
          end: {
            line: 19,
            column: 19
          }
        },
        loc: {
          start: {
            line: 19,
            column: 30
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 19
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 20,
            column: 49
          }
        },
        loc: {
          start: {
            line: 20,
            column: 61
          },
          end: {
            line: 24,
            column: 9
          }
        },
        line: 20
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 27,
            column: 12
          }
        },
        loc: {
          start: {
            line: 27,
            column: 26
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 27
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 51,
            column: 37
          },
          end: {
            line: 51,
            column: 38
          }
        },
        loc: {
          start: {
            line: 51,
            column: 65
          },
          end: {
            line: 260,
            column: 1
          }
        },
        line: 51
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 62,
            column: 17
          },
          end: {
            line: 62,
            column: 18
          }
        },
        loc: {
          start: {
            line: 62,
            column: 29
          },
          end: {
            line: 108,
            column: 9
          }
        },
        line: 62
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 86,
            column: 32
          },
          end: {
            line: 86,
            column: 33
          }
        },
        loc: {
          start: {
            line: 86,
            column: 41
          },
          end: {
            line: 101,
            column: 17
          }
        },
        line: 86
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 114,
            column: 20
          },
          end: {
            line: 114,
            column: 21
          }
        },
        loc: {
          start: {
            line: 114,
            column: 31
          },
          end: {
            line: 114,
            column: 68
          }
        },
        line: 114
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 116,
            column: 17
          },
          end: {
            line: 116,
            column: 18
          }
        },
        loc: {
          start: {
            line: 116,
            column: 26
          },
          end: {
            line: 120,
            column: 9
          }
        },
        line: 116
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 122,
            column: 19
          },
          end: {
            line: 122,
            column: 20
          }
        },
        loc: {
          start: {
            line: 122,
            column: 29
          },
          end: {
            line: 147,
            column: 9
          }
        },
        line: 122
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 138,
            column: 22
          },
          end: {
            line: 138,
            column: 23
          }
        },
        loc: {
          start: {
            line: 138,
            column: 28
          },
          end: {
            line: 145,
            column: 13
          }
        },
        line: 138
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 146,
            column: 23
          },
          end: {
            line: 146,
            column: 24
          }
        },
        loc: {
          start: {
            line: 146,
            column: 30
          },
          end: {
            line: 146,
            column: 87
          }
        },
        line: 146
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 153,
            column: 19
          },
          end: {
            line: 153,
            column: 20
          }
        },
        loc: {
          start: {
            line: 153,
            column: 25
          },
          end: {
            line: 153,
            column: 34
          }
        },
        line: 153
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 157,
            column: 27
          },
          end: {
            line: 157,
            column: 28
          }
        },
        loc: {
          start: {
            line: 157,
            column: 33
          },
          end: {
            line: 183,
            column: 5
          }
        },
        line: 157
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 161,
            column: 77
          },
          end: {
            line: 161,
            column: 78
          }
        },
        loc: {
          start: {
            line: 161,
            column: 93
          },
          end: {
            line: 176,
            column: 9
          }
        },
        line: 161
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 163,
            column: 67
          },
          end: {
            line: 163,
            column: 68
          }
        },
        loc: {
          start: {
            line: 163,
            column: 80
          },
          end: {
            line: 171,
            column: 13
          }
        },
        line: 163
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 167,
            column: 33
          },
          end: {
            line: 167,
            column: 34
          }
        },
        loc: {
          start: {
            line: 167,
            column: 40
          },
          end: {
            line: 167,
            column: 64
          }
        },
        line: 167
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 179,
            column: 15
          },
          end: {
            line: 179,
            column: 16
          }
        },
        loc: {
          start: {
            line: 179,
            column: 21
          },
          end: {
            line: 182,
            column: 9
          }
        },
        line: 179
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 186,
            column: 20
          },
          end: {
            line: 186,
            column: 21
          }
        },
        loc: {
          start: {
            line: 186,
            column: 47
          },
          end: {
            line: 198,
            column: 9
          }
        },
        line: 186
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 199,
            column: 18
          },
          end: {
            line: 199,
            column: 19
          }
        },
        loc: {
          start: {
            line: 199,
            column: 45
          },
          end: {
            line: 223,
            column: 9
          }
        },
        line: 199
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 217,
            column: 67
          },
          end: {
            line: 217,
            column: 68
          }
        },
        loc: {
          start: {
            line: 217,
            column: 80
          },
          end: {
            line: 221,
            column: 13
          }
        },
        line: 217
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 224,
            column: 19
          },
          end: {
            line: 224,
            column: 20
          }
        },
        loc: {
          start: {
            line: 224,
            column: 47
          },
          end: {
            line: 237,
            column: 9
          }
        },
        line: 224
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 228,
            column: 67
          },
          end: {
            line: 228,
            column: 68
          }
        },
        loc: {
          start: {
            line: 228,
            column: 80
          },
          end: {
            line: 232,
            column: 13
          }
        },
        line: 228
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 231,
            column: 35
          },
          end: {
            line: 231,
            column: 36
          }
        },
        loc: {
          start: {
            line: 231,
            column: 46
          },
          end: {
            line: 231,
            column: 114
          }
        },
        line: 231
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 238,
            column: 17
          },
          end: {
            line: 238,
            column: 18
          }
        },
        loc: {
          start: {
            line: 238,
            column: 37
          },
          end: {
            line: 247,
            column: 9
          }
        },
        line: 238
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 242,
            column: 67
          },
          end: {
            line: 242,
            column: 68
          }
        },
        loc: {
          start: {
            line: 242,
            column: 80
          },
          end: {
            line: 246,
            column: 13
          }
        },
        line: 242
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 245,
            column: 38
          },
          end: {
            line: 245,
            column: 39
          }
        },
        loc: {
          start: {
            line: 245,
            column: 49
          },
          end: {
            line: 245,
            column: 94
          }
        },
        line: 245
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 250,
            column: 44
          },
          end: {
            line: 250,
            column: 45
          }
        },
        loc: {
          start: {
            line: 250,
            column: 55
          },
          end: {
            line: 250,
            column: 103
          }
        },
        line: 250
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 257,
            column: 21
          },
          end: {
            line: 257,
            column: 22
          }
        },
        loc: {
          start: {
            line: 257,
            column: 38
          },
          end: {
            line: 257,
            column: 81
          }
        },
        line: 257
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 12,
            column: 3
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 9,
            column: 1
          }
        }, {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 12,
            column: 1
          }
        }],
        line: 2
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 5
      },
      "4": {
        loc: {
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 13
          }
        }, {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "5": {
        loc: {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 34
          },
          end: {
            line: 5,
            column: 47
          }
        }, {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "6": {
        loc: {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 63
          }
        }, {
          start: {
            line: 5,
            column: 67
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "7": {
        loc: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 10
      },
      "8": {
        loc: {
          start: {
            line: 13,
            column: 25
          },
          end: {
            line: 17,
            column: 2
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 26
          },
          end: {
            line: 13,
            column: 30
          }
        }, {
          start: {
            line: 13,
            column: 34
          },
          end: {
            line: 13,
            column: 57
          }
        }, {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "9": {
        loc: {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 15,
            column: 1
          }
        }, {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "10": {
        loc: {
          start: {
            line: 18,
            column: 19
          },
          end: {
            line: 34,
            column: 4
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 18,
            column: 24
          }
        }, {
          start: {
            line: 18,
            column: 28
          },
          end: {
            line: 18,
            column: 45
          }
        }, {
          start: {
            line: 18,
            column: 50
          },
          end: {
            line: 34,
            column: 4
          }
        }],
        line: 18
      },
      "11": {
        loc: {
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 20,
            column: 44
          }
        }, {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 24,
            column: 9
          }
        }],
        line: 20
      },
      "12": {
        loc: {
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "13": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "14": {
        loc: {
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 15
          }
        }, {
          start: {
            line: 28,
            column: 19
          },
          end: {
            line: 28,
            column: 33
          }
        }],
        line: 28
      },
      "15": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "16": {
        loc: {
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "17": {
        loc: {
          start: {
            line: 63,
            column: 12
          },
          end: {
            line: 64,
            column: 26
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 63,
            column: 12
          },
          end: {
            line: 64,
            column: 26
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 63
      },
      "18": {
        loc: {
          start: {
            line: 74,
            column: 16
          },
          end: {
            line: 77,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 16
          },
          end: {
            line: 77,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      },
      "19": {
        loc: {
          start: {
            line: 79,
            column: 16
          },
          end: {
            line: 82,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 16
          },
          end: {
            line: 82,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "20": {
        loc: {
          start: {
            line: 79,
            column: 20
          },
          end: {
            line: 79,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 79,
            column: 20
          },
          end: {
            line: 79,
            column: 25
          }
        }, {
          start: {
            line: 79,
            column: 29
          },
          end: {
            line: 79,
            column: 49
          }
        }],
        line: 79
      },
      "21": {
        loc: {
          start: {
            line: 88,
            column: 20
          },
          end: {
            line: 90,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 88,
            column: 20
          },
          end: {
            line: 90,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 88
      },
      "22": {
        loc: {
          start: {
            line: 88,
            column: 24
          },
          end: {
            line: 88,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 88,
            column: 24
          },
          end: {
            line: 88,
            column: 39
          }
        }, {
          start: {
            line: 88,
            column: 43
          },
          end: {
            line: 88,
            column: 63
          }
        }],
        line: 88
      },
      "23": {
        loc: {
          start: {
            line: 124,
            column: 12
          },
          end: {
            line: 126,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 12
          },
          end: {
            line: 126,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 124
      },
      "24": {
        loc: {
          start: {
            line: 128,
            column: 12
          },
          end: {
            line: 135,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 128,
            column: 12
          },
          end: {
            line: 135,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 128
      },
      "25": {
        loc: {
          start: {
            line: 128,
            column: 16
          },
          end: {
            line: 132,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 128,
            column: 16
          },
          end: {
            line: 128,
            column: 31
          }
        }, {
          start: {
            line: 129,
            column: 16
          },
          end: {
            line: 129,
            column: 23
          }
        }, {
          start: {
            line: 130,
            column: 16
          },
          end: {
            line: 130,
            column: 21
          }
        }, {
          start: {
            line: 131,
            column: 16
          },
          end: {
            line: 131,
            column: 33
          }
        }, {
          start: {
            line: 132,
            column: 16
          },
          end: {
            line: 132,
            column: 61
          }
        }],
        line: 128
      },
      "26": {
        loc: {
          start: {
            line: 150,
            column: 27
          },
          end: {
            line: 155,
            column: 14
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 151,
            column: 10
          },
          end: {
            line: 154,
            column: 9
          }
        }, {
          start: {
            line: 155,
            column: 10
          },
          end: {
            line: 155,
            column: 14
          }
        }],
        line: 150
      },
      "27": {
        loc: {
          start: {
            line: 158,
            column: 8
          },
          end: {
            line: 159,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 158,
            column: 8
          },
          end: {
            line: 159,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 158
      },
      "28": {
        loc: {
          start: {
            line: 158,
            column: 12
          },
          end: {
            line: 158,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 158,
            column: 12
          },
          end: {
            line: 158,
            column: 27
          }
        }, {
          start: {
            line: 158,
            column: 31
          },
          end: {
            line: 158,
            column: 43
          }
        }],
        line: 158
      },
      "29": {
        loc: {
          start: {
            line: 164,
            column: 16
          },
          end: {
            line: 165,
            column: 40
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 164,
            column: 16
          },
          end: {
            line: 165,
            column: 40
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 164
      },
      "30": {
        loc: {
          start: {
            line: 167,
            column: 16
          },
          end: {
            line: 169,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 167,
            column: 16
          },
          end: {
            line: 169,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 167
      },
      "31": {
        loc: {
          start: {
            line: 173,
            column: 12
          },
          end: {
            line: 175,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 173,
            column: 12
          },
          end: {
            line: 175,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 173
      },
      "32": {
        loc: {
          start: {
            line: 173,
            column: 16
          },
          end: {
            line: 173,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 173,
            column: 16
          },
          end: {
            line: 173,
            column: 22
          }
        }, {
          start: {
            line: 173,
            column: 26
          },
          end: {
            line: 173,
            column: 57
          }
        }],
        line: 173
      },
      "33": {
        loc: {
          start: {
            line: 187,
            column: 12
          },
          end: {
            line: 188,
            column: 63
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 187,
            column: 12
          },
          end: {
            line: 188,
            column: 63
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 187
      },
      "34": {
        loc: {
          start: {
            line: 187,
            column: 16
          },
          end: {
            line: 187,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 187,
            column: 16
          },
          end: {
            line: 187,
            column: 23
          }
        }, {
          start: {
            line: 187,
            column: 27
          },
          end: {
            line: 187,
            column: 42
          }
        }],
        line: 187
      },
      "35": {
        loc: {
          start: {
            line: 191,
            column: 32
          },
          end: {
            line: 191,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 191,
            column: 32
          },
          end: {
            line: 191,
            column: 72
          }
        }, {
          start: {
            line: 191,
            column: 76
          },
          end: {
            line: 191,
            column: 78
          }
        }],
        line: 191
      },
      "36": {
        loc: {
          start: {
            line: 192,
            column: 12
          },
          end: {
            line: 197,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 192,
            column: 12
          },
          end: {
            line: 197,
            column: 13
          }
        }, {
          start: {
            line: 195,
            column: 17
          },
          end: {
            line: 197,
            column: 13
          }
        }],
        line: 192
      },
      "37": {
        loc: {
          start: {
            line: 192,
            column: 16
          },
          end: {
            line: 192,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 192,
            column: 16
          },
          end: {
            line: 192,
            column: 47
          }
        }, {
          start: {
            line: 192,
            column: 51
          },
          end: {
            line: 192,
            column: 70
          }
        }],
        line: 192
      },
      "38": {
        loc: {
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 201,
            column: 23
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 201,
            column: 23
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 200
      },
      "39": {
        loc: {
          start: {
            line: 200,
            column: 16
          },
          end: {
            line: 200,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 200,
            column: 16
          },
          end: {
            line: 200,
            column: 23
          }
        }, {
          start: {
            line: 200,
            column: 27
          },
          end: {
            line: 200,
            column: 42
          }
        }],
        line: 200
      },
      "40": {
        loc: {
          start: {
            line: 218,
            column: 16
          },
          end: {
            line: 219,
            column: 47
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 218,
            column: 16
          },
          end: {
            line: 219,
            column: 47
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 218
      },
      "41": {
        loc: {
          start: {
            line: 225,
            column: 12
          },
          end: {
            line: 226,
            column: 23
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 225,
            column: 12
          },
          end: {
            line: 226,
            column: 23
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 225
      },
      "42": {
        loc: {
          start: {
            line: 229,
            column: 16
          },
          end: {
            line: 230,
            column: 40
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 229,
            column: 16
          },
          end: {
            line: 230,
            column: 40
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 229
      },
      "43": {
        loc: {
          start: {
            line: 231,
            column: 46
          },
          end: {
            line: 231,
            column: 114
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 231,
            column: 94
          },
          end: {
            line: 231,
            column: 104
          }
        }, {
          start: {
            line: 231,
            column: 107
          },
          end: {
            line: 231,
            column: 114
          }
        }],
        line: 231
      },
      "44": {
        loc: {
          start: {
            line: 239,
            column: 12
          },
          end: {
            line: 240,
            column: 23
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 239,
            column: 12
          },
          end: {
            line: 240,
            column: 23
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 239
      },
      "45": {
        loc: {
          start: {
            line: 243,
            column: 16
          },
          end: {
            line: 244,
            column: 30
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 243,
            column: 16
          },
          end: {
            line: 244,
            column: 30
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 243
      },
      "46": {
        loc: {
          start: {
            line: 250,
            column: 28
          },
          end: {
            line: 250,
            column: 113
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 250,
            column: 28
          },
          end: {
            line: 250,
            column: 104
          }
        }, {
          start: {
            line: 250,
            column: 108
          },
          end: {
            line: 250,
            column: 113
          }
        }],
        line: 250
      },
      "47": {
        loc: {
          start: {
            line: 250,
            column: 90
          },
          end: {
            line: 250,
            column: 102
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 250,
            column: 90
          },
          end: {
            line: 250,
            column: 96
          }
        }, {
          start: {
            line: 250,
            column: 100
          },
          end: {
            line: 250,
            column: 102
          }
        }],
        line: 250
      },
      "48": {
        loc: {
          start: {
            line: 252,
            column: 18
          },
          end: {
            line: 252,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 252,
            column: 18
          },
          end: {
            line: 252,
            column: 26
          }
        }, {
          start: {
            line: 252,
            column: 30
          },
          end: {
            line: 252,
            column: 32
          }
        }],
        line: 252
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0, 0, 0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/kevin/card-show-finder/src/hooks/useConversationMessagesQuery.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/kevin/card-show-finder/src/hooks/useConversationMessagesQuery.ts"],
      sourcesContent: ["import { useQuery, useQueryClient, useMutation } from '@tanstack/react-query';\nimport { useEffect, useState, useRef } from 'react';\nimport { supabase } from '../supabase';\nimport * as messagingService from '../services/messagingService';\nimport { Message } from '../services/messagingService';\n\n/**\n * Custom hook for fetching and managing messages for a specific conversation with React Query\n * Includes real-time updates and optimized data fetching\n * \n * Integration with PostgreSQL RPC functions:\n * - Uses 'get_conversation_messages' RPC function with 'input_convo_id' parameter\n * - Defined in migration: 20250711120000_create_message_rpc.sql\n * - Maps returned fields (message_id, etc.) to Message interface properties\n * - Falls back to messagingService.getMessages() if RPC fails\n */\nexport const useConversationMessagesQuery = (\n  conversationId: string | null,\n  userId: string | null\n) => {\n  const queryClient = useQueryClient();\n  const [isSubscribed, setIsSubscribed] = useState(false);\n  /**\n   * Track whether we've already called `markConversationAsRead`\n   * for the current conversation to avoid an infinite render loop.\n   */\n  const hasMarkedAsReadRef = useRef<string | null>(null);\n\n  // Main query to fetch messages for the conversation\n  const {\n    data: messages,\n    isLoading,\n    error: rawError,\n    refetch\n  } = useQuery<Message[], Error>({\n    queryKey: ['messages', conversationId],\n    queryFn: async () => {\n      if (!conversationId) return [];\n      \n      try {\n        // Use the RPC function for optimized fetching\n        // This calls the PostgreSQL function 'get_conversation_messages' defined in\n        // migration 20250711120000_create_message_rpc.sql\n        const { data, error } = await supabase\n          .rpc('get_conversation_messages', { \n            // Parameter name must match the SQL function parameter\n            input_convo_id: conversationId \n          });\n          \n        if (error) {\n          console.warn('[useConversationMessagesQuery] RPC error:', error.message);\n          throw error;\n        }\n\n        // Validate returned data structure\n        if (!data || !Array.isArray(data)) {\n          console.warn('[useConversationMessagesQuery] RPC returned no data or invalid format');\n          throw new Error('Invalid data returned from RPC');\n        }\n\n        // Map SQL result fields to match our Message interface\n        // The field names from the RPC function (message_id, etc.) need to be mapped to our interface\n        const rows = data as any[];\n        return rows.map((row) => {\n          // Verify required fields exist\n          if (!row.message_id || !row.conversation_id) {\n            console.warn('[useConversationMessagesQuery] Missing required fields in message:', row);\n          }\n          \n          // Transform the data to match the Message interface\n          return {\n            id: row.message_id,\n            conversation_id: row.conversation_id,\n            sender_id: row.sender_id,\n            message_text: row.message_text,\n            created_at: row.created_at,\n            read_by_user_ids: row.read_by_user_ids,\n            sender_profile: row.sender_profile\n          } as Message;\n        });\n      } catch (err) {\n        console.error('Error fetching messages with RPC, falling back to service:', err);\n        // Fallback to the service method if RPC fails\n        return await messagingService.getMessages(conversationId);\n      }\n    },\n    enabled: !!conversationId,\n    staleTime: 1000 * 60, // Consider data fresh for 1 minute\n    cacheTime: 1000 * 60 * 10, // Keep in cache for 10 minutes\n    // Retry a few times with exponential back-off\n    retry: 3,\n    retryDelay: attempt => Math.min(1000 * 2 ** attempt, 30_000),\n    // Log errors for easier debugging / observability\n    onError: (err) => {\n      /* eslint-disable no-console */\n      console.error('[useConversationMessagesQuery] fetch error:', err);\n      /* eslint-enable no-console */\n    },\n    // Mark conversation as read when messages are successfully fetched\n    onSuccess: (data) => {\n      // Reset the ref whenever the user switches conversations\n      if (hasMarkedAsReadRef.current !== conversationId) {\n        hasMarkedAsReadRef.current = null;\n      }\n\n      // Preconditions\n      if (\n        !conversationId ||\n        !userId ||\n        !data ||\n        data.length === 0 ||\n        hasMarkedAsReadRef.current === conversationId // already marked\n      ) {\n        return;\n      }\n\n      messagingService\n        .markConversationAsRead(conversationId, userId)\n        .then(() => {\n          // Remember that we've marked this conversation\n          hasMarkedAsReadRef.current = conversationId;\n\n          // Update the conversations list to reflect read status\n          queryClient.invalidateQueries({\n            queryKey: ['conversations', userId],\n          });\n        })\n        .catch(err =>\n          console.error('Error marking conversation as read:', err)\n        );\n    }\n  });\n\n  // Structured error exposed to consumers\n  const formattedError = rawError\n    ? {\n        message: rawError.message,\n        retry: () => refetch(),\n      }\n    : null;\n\n  // Setup real-time subscription for new messages in this conversation\n  useEffect(() => {\n    if (!conversationId || isSubscribed) return;\n\n    // Subscribe to messages table for real-time updates for this conversation\n    const channel = messagingService.subscribeToMessages(\n      conversationId,\n      (newMessage) => {\n        // Update the messages cache when a new message arrives\n        queryClient.setQueryData(['messages', conversationId], (oldData: Message[] | undefined) => {\n          if (!oldData) return [newMessage];\n          \n          // Check if message already exists to prevent duplicates\n          if (oldData.some(msg => msg.id === newMessage.id)) {\n            return oldData;\n          }\n          \n          return [...oldData, newMessage];\n        });\n        \n        // If the message is from someone else, mark it as read\n        if (userId && newMessage.sender_id !== userId) {\n          messagingService.markMessageAsRead(newMessage.id, userId);\n        }\n      }\n    );\n\n    setIsSubscribed(true);\n\n    // Cleanup subscription on unmount\n    return () => {\n      channel.unsubscribe();\n      setIsSubscribed(false);\n    };\n  }, [conversationId, queryClient, userId, isSubscribed]);\n\n  // Mutation for sending a new message\n  const sendMessageMutation = useMutation({\n    mutationFn: async ({ messageText }: { messageText: string }) => {\n      if (!userId || !conversationId) throw new Error('Missing required parameters');\n      \n      // Get the conversation to find the recipient\n      const conversation = queryClient.getQueryData<any>(['conversation', conversationId]);\n      const recipientId = conversation?.participants?.[0]?.user_id || '';\n      \n      if (conversation?.type === 'direct' || !conversation?.type) {\n        return await messagingService.sendMessage(userId, recipientId, messageText, conversationId);\n      } else {\n        return await messagingService.sendGroupMessage(userId, conversationId, messageText);\n      }\n    },\n    onMutate: async ({ messageText }) => {\n      if (!userId || !conversationId) return;\n      \n      // Cancel any outgoing refetches\n      await queryClient.cancelQueries({ queryKey: ['messages', conversationId] });\n      \n      // Create optimistic message\n      const optimisticMessage: Partial<Message> = {\n        id: `temp-${Date.now()}`,\n        conversation_id: conversationId,\n        sender_id: userId,\n        message_text: messageText,\n        created_at: new Date().toISOString(),\n        read_by_user_ids: [userId],\n        sender_profile: {\n          id: userId\n        }\n      };\n      \n      // Add optimistic message to the messages list\n      queryClient.setQueryData(['messages', conversationId], (oldData: Message[] | undefined) => {\n        if (!oldData) return [optimisticMessage as Message];\n        return [...oldData, optimisticMessage as Message];\n      });\n      \n      return { optimisticMessage };\n    },\n    onSuccess: (newMessage, _, context) => {\n      if (!conversationId) return;\n      \n      // Replace optimistic message with the real one\n      queryClient.setQueryData(['messages', conversationId], (oldData: Message[] | undefined) => {\n        if (!oldData) return [newMessage];\n        \n        return oldData.map(message => \n          message.id === (context?.optimisticMessage as Message)?.id ? newMessage : message\n        );\n      });\n      \n      // Update the conversations list with the new message\n      queryClient.invalidateQueries({\n        queryKey: ['conversations', userId],\n      });\n    },\n    onError: (_, __, context) => {\n      if (!conversationId) return;\n      \n      // Remove the optimistic message on error\n      queryClient.setQueryData(['messages', conversationId], (oldData: Message[] | undefined) => {\n        if (!oldData) return [];\n        \n        return oldData.filter(message => \n          message.id !== (context?.optimisticMessage as Message)?.id\n        );\n      });\n    }\n  });\n\n  // Check if all messages have been read\n  const allMessagesRead = messages?.every(message => \n    message.read_by_user_ids?.includes(userId || '')\n  ) || false;\n\n  return {\n    messages: messages || [],\n    isLoading,\n    error: formattedError,\n    refetch,\n    allMessagesRead,\n    sendMessage: (messageText: string) => sendMessageMutation.mutate({ messageText }),\n    isSending: sendMessageMutation.isPending\n  };\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "1ecadf518a8e736a5c34cc65fa444127a60633b4"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_c751kqvb4 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_c751kqvb4();
var __createBinding =
/* istanbul ignore next */
(cov_c751kqvb4().s[0]++,
/* istanbul ignore next */
(cov_c751kqvb4().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_c751kqvb4().b[0][1]++, this.__createBinding) ||
/* istanbul ignore next */
(cov_c751kqvb4().b[0][2]++, Object.create ?
/* istanbul ignore next */
(cov_c751kqvb4().b[1][0]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_c751kqvb4().f[0]++;
  cov_c751kqvb4().s[1]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_c751kqvb4().b[2][0]++;
    cov_c751kqvb4().s[2]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_c751kqvb4().b[2][1]++;
  }
  var desc =
  /* istanbul ignore next */
  (cov_c751kqvb4().s[3]++, Object.getOwnPropertyDescriptor(m, k));
  /* istanbul ignore next */
  cov_c751kqvb4().s[4]++;
  if (
  /* istanbul ignore next */
  (cov_c751kqvb4().b[4][0]++, !desc) ||
  /* istanbul ignore next */
  (cov_c751kqvb4().b[4][1]++, "get" in desc ?
  /* istanbul ignore next */
  (cov_c751kqvb4().b[5][0]++, !m.__esModule) :
  /* istanbul ignore next */
  (cov_c751kqvb4().b[5][1]++,
  /* istanbul ignore next */
  (cov_c751kqvb4().b[6][0]++, desc.writable) ||
  /* istanbul ignore next */
  (cov_c751kqvb4().b[6][1]++, desc.configurable)))) {
    /* istanbul ignore next */
    cov_c751kqvb4().b[3][0]++;
    cov_c751kqvb4().s[5]++;
    desc = {
      enumerable: true,
      get: function () {
        /* istanbul ignore next */
        cov_c751kqvb4().f[1]++;
        cov_c751kqvb4().s[6]++;
        return m[k];
      }
    };
  } else
  /* istanbul ignore next */
  {
    cov_c751kqvb4().b[3][1]++;
  }
  cov_c751kqvb4().s[7]++;
  Object.defineProperty(o, k2, desc);
}) :
/* istanbul ignore next */
(cov_c751kqvb4().b[1][1]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_c751kqvb4().f[2]++;
  cov_c751kqvb4().s[8]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_c751kqvb4().b[7][0]++;
    cov_c751kqvb4().s[9]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_c751kqvb4().b[7][1]++;
  }
  cov_c751kqvb4().s[10]++;
  o[k2] = m[k];
})));
var __setModuleDefault =
/* istanbul ignore next */
(cov_c751kqvb4().s[11]++,
/* istanbul ignore next */
(cov_c751kqvb4().b[8][0]++, this) &&
/* istanbul ignore next */
(cov_c751kqvb4().b[8][1]++, this.__setModuleDefault) ||
/* istanbul ignore next */
(cov_c751kqvb4().b[8][2]++, Object.create ?
/* istanbul ignore next */
(cov_c751kqvb4().b[9][0]++, function (o, v) {
  /* istanbul ignore next */
  cov_c751kqvb4().f[3]++;
  cov_c751kqvb4().s[12]++;
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
}) :
/* istanbul ignore next */
(cov_c751kqvb4().b[9][1]++, function (o, v) {
  /* istanbul ignore next */
  cov_c751kqvb4().f[4]++;
  cov_c751kqvb4().s[13]++;
  o["default"] = v;
})));
var __importStar =
/* istanbul ignore next */
(cov_c751kqvb4().s[14]++,
/* istanbul ignore next */
(cov_c751kqvb4().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_c751kqvb4().b[10][1]++, this.__importStar) ||
/* istanbul ignore next */
(cov_c751kqvb4().b[10][2]++, function () {
  /* istanbul ignore next */
  cov_c751kqvb4().f[5]++;
  cov_c751kqvb4().s[15]++;
  var ownKeys = function (o) {
    /* istanbul ignore next */
    cov_c751kqvb4().f[6]++;
    cov_c751kqvb4().s[16]++;
    ownKeys =
    /* istanbul ignore next */
    (cov_c751kqvb4().b[11][0]++, Object.getOwnPropertyNames) ||
    /* istanbul ignore next */
    (cov_c751kqvb4().b[11][1]++, function (o) {
      /* istanbul ignore next */
      cov_c751kqvb4().f[7]++;
      var ar =
      /* istanbul ignore next */
      (cov_c751kqvb4().s[17]++, []);
      /* istanbul ignore next */
      cov_c751kqvb4().s[18]++;
      for (var k in o) {
        /* istanbul ignore next */
        cov_c751kqvb4().s[19]++;
        if (Object.prototype.hasOwnProperty.call(o, k)) {
          /* istanbul ignore next */
          cov_c751kqvb4().b[12][0]++;
          cov_c751kqvb4().s[20]++;
          ar[ar.length] = k;
        } else
        /* istanbul ignore next */
        {
          cov_c751kqvb4().b[12][1]++;
        }
      }
      /* istanbul ignore next */
      cov_c751kqvb4().s[21]++;
      return ar;
    });
    /* istanbul ignore next */
    cov_c751kqvb4().s[22]++;
    return ownKeys(o);
  };
  /* istanbul ignore next */
  cov_c751kqvb4().s[23]++;
  return function (mod) {
    /* istanbul ignore next */
    cov_c751kqvb4().f[8]++;
    cov_c751kqvb4().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_c751kqvb4().b[14][0]++, mod) &&
    /* istanbul ignore next */
    (cov_c751kqvb4().b[14][1]++, mod.__esModule)) {
      /* istanbul ignore next */
      cov_c751kqvb4().b[13][0]++;
      cov_c751kqvb4().s[25]++;
      return mod;
    } else
    /* istanbul ignore next */
    {
      cov_c751kqvb4().b[13][1]++;
    }
    var result =
    /* istanbul ignore next */
    (cov_c751kqvb4().s[26]++, {});
    /* istanbul ignore next */
    cov_c751kqvb4().s[27]++;
    if (mod != null) {
      /* istanbul ignore next */
      cov_c751kqvb4().b[15][0]++;
      cov_c751kqvb4().s[28]++;
      for (var k =
        /* istanbul ignore next */
        (cov_c751kqvb4().s[29]++, ownKeys(mod)), i =
        /* istanbul ignore next */
        (cov_c751kqvb4().s[30]++, 0); i < k.length; i++) {
        /* istanbul ignore next */
        cov_c751kqvb4().s[31]++;
        if (k[i] !== "default") {
          /* istanbul ignore next */
          cov_c751kqvb4().b[16][0]++;
          cov_c751kqvb4().s[32]++;
          __createBinding(result, mod, k[i]);
        } else
        /* istanbul ignore next */
        {
          cov_c751kqvb4().b[16][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_c751kqvb4().b[15][1]++;
    }
    cov_c751kqvb4().s[33]++;
    __setModuleDefault(result, mod);
    /* istanbul ignore next */
    cov_c751kqvb4().s[34]++;
    return result;
  };
}()));
/* istanbul ignore next */
cov_c751kqvb4().s[35]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_c751kqvb4().s[36]++;
exports.useConversationMessagesQuery = void 0;
const react_query_1 =
/* istanbul ignore next */
(cov_c751kqvb4().s[37]++, require("@tanstack/react-query"));
const react_1 =
/* istanbul ignore next */
(cov_c751kqvb4().s[38]++, require("react"));
const supabase_1 =
/* istanbul ignore next */
(cov_c751kqvb4().s[39]++, require("../supabase"));
const messagingService =
/* istanbul ignore next */
(cov_c751kqvb4().s[40]++, __importStar(require("../services/messagingService")));
/**
 * Custom hook for fetching and managing messages for a specific conversation with React Query
 * Includes real-time updates and optimized data fetching
 *
 * Integration with PostgreSQL RPC functions:
 * - Uses 'get_conversation_messages' RPC function with 'input_convo_id' parameter
 * - Defined in migration: 20250711120000_create_message_rpc.sql
 * - Maps returned fields (message_id, etc.) to Message interface properties
 * - Falls back to messagingService.getMessages() if RPC fails
 */
/* istanbul ignore next */
cov_c751kqvb4().s[41]++;
const useConversationMessagesQuery = (conversationId, userId) => {
  /* istanbul ignore next */
  cov_c751kqvb4().f[9]++;
  const queryClient =
  /* istanbul ignore next */
  (cov_c751kqvb4().s[42]++, (0, react_query_1.useQueryClient)());
  const [isSubscribed, setIsSubscribed] =
  /* istanbul ignore next */
  (cov_c751kqvb4().s[43]++, (0, react_1.useState)(false));
  /**
   * Track whether we've already called `markConversationAsRead`
   * for the current conversation to avoid an infinite render loop.
   */
  const hasMarkedAsReadRef =
  /* istanbul ignore next */
  (cov_c751kqvb4().s[44]++, (0, react_1.useRef)(null));
  // Main query to fetch messages for the conversation
  const {
    data: messages,
    isLoading,
    error: rawError,
    refetch
  } =
  /* istanbul ignore next */
  (cov_c751kqvb4().s[45]++, (0, react_query_1.useQuery)({
    queryKey: ['messages', conversationId],
    queryFn: async () => {
      /* istanbul ignore next */
      cov_c751kqvb4().f[10]++;
      cov_c751kqvb4().s[46]++;
      if (!conversationId) {
        /* istanbul ignore next */
        cov_c751kqvb4().b[17][0]++;
        cov_c751kqvb4().s[47]++;
        return [];
      } else
      /* istanbul ignore next */
      {
        cov_c751kqvb4().b[17][1]++;
      }
      cov_c751kqvb4().s[48]++;
      try {
        // Use the RPC function for optimized fetching
        // This calls the PostgreSQL function 'get_conversation_messages' defined in
        // migration 20250711120000_create_message_rpc.sql
        const {
          data,
          error
        } =
        /* istanbul ignore next */
        (cov_c751kqvb4().s[49]++, await supabase_1.supabase.rpc('get_conversation_messages', {
          // Parameter name must match the SQL function parameter
          input_convo_id: conversationId
        }));
        /* istanbul ignore next */
        cov_c751kqvb4().s[50]++;
        if (error) {
          /* istanbul ignore next */
          cov_c751kqvb4().b[18][0]++;
          cov_c751kqvb4().s[51]++;
          console.warn('[useConversationMessagesQuery] RPC error:', error.message);
          /* istanbul ignore next */
          cov_c751kqvb4().s[52]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_c751kqvb4().b[18][1]++;
        }
        // Validate returned data structure
        cov_c751kqvb4().s[53]++;
        if (
        /* istanbul ignore next */
        (cov_c751kqvb4().b[20][0]++, !data) ||
        /* istanbul ignore next */
        (cov_c751kqvb4().b[20][1]++, !Array.isArray(data))) {
          /* istanbul ignore next */
          cov_c751kqvb4().b[19][0]++;
          cov_c751kqvb4().s[54]++;
          console.warn('[useConversationMessagesQuery] RPC returned no data or invalid format');
          /* istanbul ignore next */
          cov_c751kqvb4().s[55]++;
          throw new Error('Invalid data returned from RPC');
        } else
        /* istanbul ignore next */
        {
          cov_c751kqvb4().b[19][1]++;
        }
        // Map SQL result fields to match our Message interface
        // The field names from the RPC function (message_id, etc.) need to be mapped to our interface
        const rows =
        /* istanbul ignore next */
        (cov_c751kqvb4().s[56]++, data);
        /* istanbul ignore next */
        cov_c751kqvb4().s[57]++;
        return rows.map(row => {
          /* istanbul ignore next */
          cov_c751kqvb4().f[11]++;
          cov_c751kqvb4().s[58]++;
          // Verify required fields exist
          if (
          /* istanbul ignore next */
          (cov_c751kqvb4().b[22][0]++, !row.message_id) ||
          /* istanbul ignore next */
          (cov_c751kqvb4().b[22][1]++, !row.conversation_id)) {
            /* istanbul ignore next */
            cov_c751kqvb4().b[21][0]++;
            cov_c751kqvb4().s[59]++;
            console.warn('[useConversationMessagesQuery] Missing required fields in message:', row);
          } else
          /* istanbul ignore next */
          {
            cov_c751kqvb4().b[21][1]++;
          }
          // Transform the data to match the Message interface
          cov_c751kqvb4().s[60]++;
          return {
            id: row.message_id,
            conversation_id: row.conversation_id,
            sender_id: row.sender_id,
            message_text: row.message_text,
            created_at: row.created_at,
            read_by_user_ids: row.read_by_user_ids,
            sender_profile: row.sender_profile
          };
        });
      } catch (err) {
        /* istanbul ignore next */
        cov_c751kqvb4().s[61]++;
        console.error('Error fetching messages with RPC, falling back to service:', err);
        // Fallback to the service method if RPC fails
        /* istanbul ignore next */
        cov_c751kqvb4().s[62]++;
        return await messagingService.getMessages(conversationId);
      }
    },
    enabled: !!conversationId,
    staleTime: 1000 * 60,
    // Consider data fresh for 1 minute
    cacheTime: 1000 * 60 * 10,
    // Keep in cache for 10 minutes
    // Retry a few times with exponential back-off
    retry: 3,
    retryDelay: attempt => {
      /* istanbul ignore next */
      cov_c751kqvb4().f[12]++;
      cov_c751kqvb4().s[63]++;
      return Math.min(1000 * 2 ** attempt, 30_000);
    },
    // Log errors for easier debugging / observability
    onError: err => {
      /* istanbul ignore next */
      cov_c751kqvb4().f[13]++;
      cov_c751kqvb4().s[64]++;
      /* eslint-disable no-console */
      console.error('[useConversationMessagesQuery] fetch error:', err);
      /* eslint-enable no-console */
    },
    // Mark conversation as read when messages are successfully fetched
    onSuccess: data => {
      /* istanbul ignore next */
      cov_c751kqvb4().f[14]++;
      cov_c751kqvb4().s[65]++;
      // Reset the ref whenever the user switches conversations
      if (hasMarkedAsReadRef.current !== conversationId) {
        /* istanbul ignore next */
        cov_c751kqvb4().b[23][0]++;
        cov_c751kqvb4().s[66]++;
        hasMarkedAsReadRef.current = null;
      } else
      /* istanbul ignore next */
      {
        cov_c751kqvb4().b[23][1]++;
      }
      // Preconditions
      cov_c751kqvb4().s[67]++;
      if (
      /* istanbul ignore next */
      (cov_c751kqvb4().b[25][0]++, !conversationId) ||
      /* istanbul ignore next */
      (cov_c751kqvb4().b[25][1]++, !userId) ||
      /* istanbul ignore next */
      (cov_c751kqvb4().b[25][2]++, !data) ||
      /* istanbul ignore next */
      (cov_c751kqvb4().b[25][3]++, data.length === 0) ||
      /* istanbul ignore next */
      (cov_c751kqvb4().b[25][4]++, hasMarkedAsReadRef.current === conversationId) // already marked
      ) {
        /* istanbul ignore next */
        cov_c751kqvb4().b[24][0]++;
        cov_c751kqvb4().s[68]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_c751kqvb4().b[24][1]++;
      }
      cov_c751kqvb4().s[69]++;
      messagingService.markConversationAsRead(conversationId, userId).then(() => {
        /* istanbul ignore next */
        cov_c751kqvb4().f[15]++;
        cov_c751kqvb4().s[70]++;
        // Remember that we've marked this conversation
        hasMarkedAsReadRef.current = conversationId;
        // Update the conversations list to reflect read status
        /* istanbul ignore next */
        cov_c751kqvb4().s[71]++;
        queryClient.invalidateQueries({
          queryKey: ['conversations', userId]
        });
      }).catch(err => {
        /* istanbul ignore next */
        cov_c751kqvb4().f[16]++;
        cov_c751kqvb4().s[72]++;
        return console.error('Error marking conversation as read:', err);
      });
    }
  }));
  // Structured error exposed to consumers
  const formattedError =
  /* istanbul ignore next */
  (cov_c751kqvb4().s[73]++, rawError ?
  /* istanbul ignore next */
  (cov_c751kqvb4().b[26][0]++, {
    message: rawError.message,
    retry: () => {
      /* istanbul ignore next */
      cov_c751kqvb4().f[17]++;
      cov_c751kqvb4().s[74]++;
      return refetch();
    }
  }) :
  /* istanbul ignore next */
  (cov_c751kqvb4().b[26][1]++, null));
  // Setup real-time subscription for new messages in this conversation
  /* istanbul ignore next */
  cov_c751kqvb4().s[75]++;
  (0, react_1.useEffect)(() => {
    /* istanbul ignore next */
    cov_c751kqvb4().f[18]++;
    cov_c751kqvb4().s[76]++;
    if (
    /* istanbul ignore next */
    (cov_c751kqvb4().b[28][0]++, !conversationId) ||
    /* istanbul ignore next */
    (cov_c751kqvb4().b[28][1]++, isSubscribed)) {
      /* istanbul ignore next */
      cov_c751kqvb4().b[27][0]++;
      cov_c751kqvb4().s[77]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_c751kqvb4().b[27][1]++;
    }
    // Subscribe to messages table for real-time updates for this conversation
    const channel =
    /* istanbul ignore next */
    (cov_c751kqvb4().s[78]++, messagingService.subscribeToMessages(conversationId, newMessage => {
      /* istanbul ignore next */
      cov_c751kqvb4().f[19]++;
      cov_c751kqvb4().s[79]++;
      // Update the messages cache when a new message arrives
      queryClient.setQueryData(['messages', conversationId], oldData => {
        /* istanbul ignore next */
        cov_c751kqvb4().f[20]++;
        cov_c751kqvb4().s[80]++;
        if (!oldData) {
          /* istanbul ignore next */
          cov_c751kqvb4().b[29][0]++;
          cov_c751kqvb4().s[81]++;
          return [newMessage];
        } else
        /* istanbul ignore next */
        {
          cov_c751kqvb4().b[29][1]++;
        }
        // Check if message already exists to prevent duplicates
        cov_c751kqvb4().s[82]++;
        if (oldData.some(msg => {
          /* istanbul ignore next */
          cov_c751kqvb4().f[21]++;
          cov_c751kqvb4().s[83]++;
          return msg.id === newMessage.id;
        })) {
          /* istanbul ignore next */
          cov_c751kqvb4().b[30][0]++;
          cov_c751kqvb4().s[84]++;
          return oldData;
        } else
        /* istanbul ignore next */
        {
          cov_c751kqvb4().b[30][1]++;
        }
        cov_c751kqvb4().s[85]++;
        return [...oldData, newMessage];
      });
      // If the message is from someone else, mark it as read
      /* istanbul ignore next */
      cov_c751kqvb4().s[86]++;
      if (
      /* istanbul ignore next */
      (cov_c751kqvb4().b[32][0]++, userId) &&
      /* istanbul ignore next */
      (cov_c751kqvb4().b[32][1]++, newMessage.sender_id !== userId)) {
        /* istanbul ignore next */
        cov_c751kqvb4().b[31][0]++;
        cov_c751kqvb4().s[87]++;
        messagingService.markMessageAsRead(newMessage.id, userId);
      } else
      /* istanbul ignore next */
      {
        cov_c751kqvb4().b[31][1]++;
      }
    }));
    /* istanbul ignore next */
    cov_c751kqvb4().s[88]++;
    setIsSubscribed(true);
    // Cleanup subscription on unmount
    /* istanbul ignore next */
    cov_c751kqvb4().s[89]++;
    return () => {
      /* istanbul ignore next */
      cov_c751kqvb4().f[22]++;
      cov_c751kqvb4().s[90]++;
      channel.unsubscribe();
      /* istanbul ignore next */
      cov_c751kqvb4().s[91]++;
      setIsSubscribed(false);
    };
  }, [conversationId, queryClient, userId, isSubscribed]);
  // Mutation for sending a new message
  const sendMessageMutation =
  /* istanbul ignore next */
  (cov_c751kqvb4().s[92]++, (0, react_query_1.useMutation)({
    mutationFn: async ({
      messageText
    }) => {
      /* istanbul ignore next */
      cov_c751kqvb4().f[23]++;
      cov_c751kqvb4().s[93]++;
      if (
      /* istanbul ignore next */
      (cov_c751kqvb4().b[34][0]++, !userId) ||
      /* istanbul ignore next */
      (cov_c751kqvb4().b[34][1]++, !conversationId)) {
        /* istanbul ignore next */
        cov_c751kqvb4().b[33][0]++;
        cov_c751kqvb4().s[94]++;
        throw new Error('Missing required parameters');
      } else
      /* istanbul ignore next */
      {
        cov_c751kqvb4().b[33][1]++;
      }
      // Get the conversation to find the recipient
      const conversation =
      /* istanbul ignore next */
      (cov_c751kqvb4().s[95]++, queryClient.getQueryData(['conversation', conversationId]));
      const recipientId =
      /* istanbul ignore next */
      (cov_c751kqvb4().s[96]++,
      /* istanbul ignore next */
      (cov_c751kqvb4().b[35][0]++, conversation?.participants?.[0]?.user_id) ||
      /* istanbul ignore next */
      (cov_c751kqvb4().b[35][1]++, ''));
      /* istanbul ignore next */
      cov_c751kqvb4().s[97]++;
      if (
      /* istanbul ignore next */
      (cov_c751kqvb4().b[37][0]++, conversation?.type === 'direct') ||
      /* istanbul ignore next */
      (cov_c751kqvb4().b[37][1]++, !conversation?.type)) {
        /* istanbul ignore next */
        cov_c751kqvb4().b[36][0]++;
        cov_c751kqvb4().s[98]++;
        return await messagingService.sendMessage(userId, recipientId, messageText, conversationId);
      } else {
        /* istanbul ignore next */
        cov_c751kqvb4().b[36][1]++;
        cov_c751kqvb4().s[99]++;
        return await messagingService.sendGroupMessage(userId, conversationId, messageText);
      }
    },
    onMutate: async ({
      messageText
    }) => {
      /* istanbul ignore next */
      cov_c751kqvb4().f[24]++;
      cov_c751kqvb4().s[100]++;
      if (
      /* istanbul ignore next */
      (cov_c751kqvb4().b[39][0]++, !userId) ||
      /* istanbul ignore next */
      (cov_c751kqvb4().b[39][1]++, !conversationId)) {
        /* istanbul ignore next */
        cov_c751kqvb4().b[38][0]++;
        cov_c751kqvb4().s[101]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_c751kqvb4().b[38][1]++;
      }
      // Cancel any outgoing refetches
      cov_c751kqvb4().s[102]++;
      await queryClient.cancelQueries({
        queryKey: ['messages', conversationId]
      });
      // Create optimistic message
      const optimisticMessage =
      /* istanbul ignore next */
      (cov_c751kqvb4().s[103]++, {
        id: `temp-${Date.now()}`,
        conversation_id: conversationId,
        sender_id: userId,
        message_text: messageText,
        created_at: new Date().toISOString(),
        read_by_user_ids: [userId],
        sender_profile: {
          id: userId
        }
      });
      // Add optimistic message to the messages list
      /* istanbul ignore next */
      cov_c751kqvb4().s[104]++;
      queryClient.setQueryData(['messages', conversationId], oldData => {
        /* istanbul ignore next */
        cov_c751kqvb4().f[25]++;
        cov_c751kqvb4().s[105]++;
        if (!oldData) {
          /* istanbul ignore next */
          cov_c751kqvb4().b[40][0]++;
          cov_c751kqvb4().s[106]++;
          return [optimisticMessage];
        } else
        /* istanbul ignore next */
        {
          cov_c751kqvb4().b[40][1]++;
        }
        cov_c751kqvb4().s[107]++;
        return [...oldData, optimisticMessage];
      });
      /* istanbul ignore next */
      cov_c751kqvb4().s[108]++;
      return {
        optimisticMessage
      };
    },
    onSuccess: (newMessage, _, context) => {
      /* istanbul ignore next */
      cov_c751kqvb4().f[26]++;
      cov_c751kqvb4().s[109]++;
      if (!conversationId) {
        /* istanbul ignore next */
        cov_c751kqvb4().b[41][0]++;
        cov_c751kqvb4().s[110]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_c751kqvb4().b[41][1]++;
      }
      // Replace optimistic message with the real one
      cov_c751kqvb4().s[111]++;
      queryClient.setQueryData(['messages', conversationId], oldData => {
        /* istanbul ignore next */
        cov_c751kqvb4().f[27]++;
        cov_c751kqvb4().s[112]++;
        if (!oldData) {
          /* istanbul ignore next */
          cov_c751kqvb4().b[42][0]++;
          cov_c751kqvb4().s[113]++;
          return [newMessage];
        } else
        /* istanbul ignore next */
        {
          cov_c751kqvb4().b[42][1]++;
        }
        cov_c751kqvb4().s[114]++;
        return oldData.map(message => {
          /* istanbul ignore next */
          cov_c751kqvb4().f[28]++;
          cov_c751kqvb4().s[115]++;
          return message.id === context?.optimisticMessage?.id ?
          /* istanbul ignore next */
          (cov_c751kqvb4().b[43][0]++, newMessage) :
          /* istanbul ignore next */
          (cov_c751kqvb4().b[43][1]++, message);
        });
      });
      // Update the conversations list with the new message
      /* istanbul ignore next */
      cov_c751kqvb4().s[116]++;
      queryClient.invalidateQueries({
        queryKey: ['conversations', userId]
      });
    },
    onError: (_, __, context) => {
      /* istanbul ignore next */
      cov_c751kqvb4().f[29]++;
      cov_c751kqvb4().s[117]++;
      if (!conversationId) {
        /* istanbul ignore next */
        cov_c751kqvb4().b[44][0]++;
        cov_c751kqvb4().s[118]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_c751kqvb4().b[44][1]++;
      }
      // Remove the optimistic message on error
      cov_c751kqvb4().s[119]++;
      queryClient.setQueryData(['messages', conversationId], oldData => {
        /* istanbul ignore next */
        cov_c751kqvb4().f[30]++;
        cov_c751kqvb4().s[120]++;
        if (!oldData) {
          /* istanbul ignore next */
          cov_c751kqvb4().b[45][0]++;
          cov_c751kqvb4().s[121]++;
          return [];
        } else
        /* istanbul ignore next */
        {
          cov_c751kqvb4().b[45][1]++;
        }
        cov_c751kqvb4().s[122]++;
        return oldData.filter(message => {
          /* istanbul ignore next */
          cov_c751kqvb4().f[31]++;
          cov_c751kqvb4().s[123]++;
          return message.id !== context?.optimisticMessage?.id;
        });
      });
    }
  }));
  // Check if all messages have been read
  const allMessagesRead =
  /* istanbul ignore next */
  (cov_c751kqvb4().s[124]++,
  /* istanbul ignore next */
  (cov_c751kqvb4().b[46][0]++, messages?.every(message => {
    /* istanbul ignore next */
    cov_c751kqvb4().f[32]++;
    cov_c751kqvb4().s[125]++;
    return message.read_by_user_ids?.includes(
    /* istanbul ignore next */
    (cov_c751kqvb4().b[47][0]++, userId) ||
    /* istanbul ignore next */
    (cov_c751kqvb4().b[47][1]++, ''));
  })) ||
  /* istanbul ignore next */
  (cov_c751kqvb4().b[46][1]++, false));
  /* istanbul ignore next */
  cov_c751kqvb4().s[126]++;
  return {
    messages:
    /* istanbul ignore next */
    (cov_c751kqvb4().b[48][0]++, messages) ||
    /* istanbul ignore next */
    (cov_c751kqvb4().b[48][1]++, []),
    isLoading,
    error: formattedError,
    refetch,
    allMessagesRead,
    sendMessage: messageText => {
      /* istanbul ignore next */
      cov_c751kqvb4().f[33]++;
      cov_c751kqvb4().s[127]++;
      return sendMessageMutation.mutate({
        messageText
      });
    },
    isSending: sendMessageMutation.isPending
  };
};
/* istanbul ignore next */
cov_c751kqvb4().s[128]++;
exports.useConversationMessagesQuery = useConversationMessagesQuery;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,