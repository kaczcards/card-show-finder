b378b4a8f68e6edd279a3fed0ea0dcbb
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var mockStorage = {
  _data: new Map(),
  setItem: jest.fn(function (key, value) {
    return new Promise(function (resolve, reject) {
      if (Math.random() < 0.1) {
        reject(new Error('Storage error'));
        return;
      }
      setTimeout(function () {
        mockStorage._data.set(key, value);
        resolve();
      }, Math.random() * 10);
    });
  }),
  getItem: jest.fn(function (key) {
    return new Promise(function (resolve) {
      setTimeout(function () {
        resolve(mockStorage._data.get(key) || null);
      }, Math.random() * 10);
    });
  }),
  removeItem: jest.fn(function (key) {
    return new Promise(function (resolve) {
      setTimeout(function () {
        mockStorage._data.delete(key);
        resolve();
      }, Math.random() * 10);
    });
  }),
  clear: jest.fn(function () {
    return new Promise(function (resolve) {
      mockStorage._data.clear();
      resolve();
    });
  }),
  getAllKeys: jest.fn(function () {
    return new Promise(function (resolve) {
      resolve(Array.from(mockStorage._data.keys()));
    });
  })
};
var MockEventEmitter = function () {
  function MockEventEmitter() {
    (0, _classCallCheck2.default)(this, MockEventEmitter);
    this.listeners = new Map();
  }
  return (0, _createClass2.default)(MockEventEmitter, [{
    key: "addListener",
    value: function addListener(event, listener) {
      var _this = this;
      if (!this.listeners.has(event)) {
        this.listeners.set(event, []);
      }
      this.listeners.get(event).push(listener);
      return {
        remove: function remove() {
          return _this.removeListener(event, listener);
        }
      };
    }
  }, {
    key: "removeListener",
    value: function removeListener(event, listener) {
      if (!this.listeners.has(event)) return;
      var eventListeners = this.listeners.get(event);
      var index = eventListeners.indexOf(listener);
      if (index !== -1) {
        eventListeners.splice(index, 1);
      }
    }
  }, {
    key: "removeAllListeners",
    value: function removeAllListeners(event) {
      if (event) {
        this.listeners.delete(event);
      } else {
        this.listeners.clear();
      }
    }
  }, {
    key: "emit",
    value: function emit(event) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      if (!this.listeners.has(event)) return false;
      var eventListeners = this.listeners.get(event);
      eventListeners.forEach(function (listener) {
        try {
          listener.apply(void 0, args);
        } catch (e) {
          console.error('Error in event listener:', e);
        }
      });
      return true;
    }
  }]);
}();
describe('Edge Cases and Async Operations', function () {
  var consoleErrorSpy;
  var consoleWarnSpy;
  var setTimeoutSpy;
  var clearTimeoutSpy;
  beforeEach(function () {
    jest.clearAllMocks();
    jest.useFakeTimers();
    consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation(function () {});
    consoleWarnSpy = jest.spyOn(console, 'warn').mockImplementation(function () {});
    setTimeoutSpy = jest.spyOn(global, 'setTimeout');
    clearTimeoutSpy = jest.spyOn(global, 'clearTimeout');
    mockStorage._data.clear();
  });
  afterEach(function () {
    jest.clearAllTimers();
    jest.useRealTimers();
    consoleErrorSpy.mockRestore();
    consoleWarnSpy.mockRestore();
    setTimeoutSpy.mockRestore();
    clearTimeoutSpy.mockRestore();
  });
  describe('Race Conditions', function () {
    test('should handle multiple concurrent storage operations on the same key', (0, _asyncToGenerator2.default)(function* () {
      var key = 'user_preferences';
      var initialData = JSON.stringify({
        theme: 'light',
        notifications: true
      });
      yield mockStorage.setItem(key, initialData);
      var update1 = function () {
        var _ref2 = (0, _asyncToGenerator2.default)(function* () {
          var data = JSON.parse((yield mockStorage.getItem(key)) || '{}');
          data.theme = 'dark';
          yield mockStorage.setItem(key, JSON.stringify(data));
          return data;
        });
        return function update1() {
          return _ref2.apply(this, arguments);
        };
      }();
      var update2 = function () {
        var _ref3 = (0, _asyncToGenerator2.default)(function* () {
          var data = JSON.parse((yield mockStorage.getItem(key)) || '{}');
          data.notifications = false;
          yield mockStorage.setItem(key, JSON.stringify(data));
          return data;
        });
        return function update2() {
          return _ref3.apply(this, arguments);
        };
      }();
      var _yield$Promise$all = yield Promise.all([update1(), update2()]),
        _yield$Promise$all2 = (0, _slicedToArray2.default)(_yield$Promise$all, 2),
        result1 = _yield$Promise$all2[0],
        result2 = _yield$Promise$all2[1];
      expect(result1).not.toEqual(result2);
      var finalValue = JSON.parse((yield mockStorage.getItem(key)) || '{}');
      expect(finalValue).toEqual(expect.objectContaining({
        theme: expect.any(String),
        notifications: expect.any(Boolean)
      }));
      expect(result1.theme).toBe('dark');
      expect(result2.notifications).toBe(false);
    }), 60000);
    test('should implement optimistic locking to prevent race conditions', (0, _asyncToGenerator2.default)(function* () {
      var key = 'counter';
      var currentVersion = 1;
      var currentValue = 0;
      var getWithVersion = jest.fn((0, _asyncToGenerator2.default)(function* () {
        return JSON.stringify({
          value: currentValue,
          version: currentVersion
        });
      }));
      var setWithVersion = jest.fn(function () {
        var _ref6 = (0, _asyncToGenerator2.default)(function* (k, valueStr) {
          var data = JSON.parse(valueStr);
          if (data.version === currentVersion) {
            currentValue = data.value;
            currentVersion++;
            return;
          } else {
            throw new Error('Version mismatch - data was modified by another process');
          }
        });
        return function (_x, _x2) {
          return _ref6.apply(this, arguments);
        };
      }());
      var incrementWithRetry = function () {
        var _ref7 = (0, _asyncToGenerator2.default)(function* () {
          var maxRetries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;
          var retries = 0;
          while (retries < maxRetries) {
            try {
              var dataStr = yield getWithVersion(key);
              var data = JSON.parse(dataStr || '{"value":0,"version":1}');
              var newData = {
                value: data.value + 1,
                version: data.version
              };
              yield setWithVersion(key, JSON.stringify(newData));
              return newData.value;
            } catch (error) {
              retries++;
              if (retries >= maxRetries) {
                throw error;
              }
              yield new Promise(function (r) {
                return setTimeout(r, 10 * Math.pow(2, retries));
              });
              jest.advanceTimersByTime(10 * Math.pow(2, retries));
            }
          }
          throw new Error('Failed after max retries');
        });
        return function incrementWithRetry() {
          return _ref7.apply(this, arguments);
        };
      }();
      var results = yield Promise.allSettled([incrementWithRetry(), incrementWithRetry(), incrementWithRetry()]);
      expect(results.every(function (r) {
        return r.status === 'fulfilled';
      })).toBe(true);
      expect(currentValue).toBe(3);
      expect(currentVersion).toBe(4);
    }), 60000);
  });
  describe('Memory Management', function () {
    test('should properly cleanup event listeners when component unmounts', function () {
      var eventEmitter = new MockEventEmitter();
      var mockCallback = jest.fn();
      var subscription = eventEmitter.addListener('dataChange', mockCallback);
      eventEmitter.emit('dataChange', {
        value: 'test'
      });
      expect(mockCallback).toHaveBeenCalledWith({
        value: 'test'
      });
      subscription.remove();
      mockCallback.mockClear();
      eventEmitter.emit('dataChange', {
        value: 'test2'
      });
      expect(mockCallback).not.toHaveBeenCalled();
    });
    test('should cancel timers to prevent memory leaks', function () {
      var mockCallback = jest.fn();
      var timerId = setTimeout(mockCallback, 500);
      clearTimeout(timerId);
      jest.advanceTimersByTime(1000);
      expect(mockCallback).not.toHaveBeenCalled();
      expect(clearTimeoutSpy).toHaveBeenCalledWith(timerId);
    });
    test('should handle abandoned promises that could cause memory leaks', (0, _asyncToGenerator2.default)(function* () {
      var abortController = new AbortController();
      var signal = abortController.signal;
      var longRunningOperation = function longRunningOperation() {
        return new Promise(function (resolve, reject) {
          var checkAbort = function checkAbort() {
            if (signal.aborted) {
              reject(new Error('Operation aborted'));
              return true;
            }
            return false;
          };
          if (checkAbort()) return;
          var intervalId = setInterval(function () {
            if (checkAbort()) {
              clearInterval(intervalId);
            }
          }, 100);
          setTimeout(function () {
            clearInterval(intervalId);
            resolve('Operation completed');
          }, 500);
        });
      };
      var operationPromise = longRunningOperation();
      abortController.abort();
      jest.advanceTimersByTime(100);
      yield expect(operationPromise).rejects.toThrow('Operation aborted');
    }), 60000);
  });
  describe('Promise Chain Failures', function () {
    test('should handle errors in the middle of promise chains', (0, _asyncToGenerator2.default)(function* () {
      var processData = function () {
        var _ref0 = (0, _asyncToGenerator2.default)(function* (data) {
          var _validatedData = yield Promise.resolve(data);
          var _transformedData = yield Promise.reject(new Error('Transform failed'));
          var _savedData = yield Promise.resolve(Object.assign({}, _transformedData, {
            saved: true
          }));
          return _savedData;
        });
        return function processData(_x3) {
          return _ref0.apply(this, arguments);
        };
      }();
      yield expect(processData({
        test: true
      })).rejects.toThrow('Transform failed');
    }));
    test('should handle errors in nested promise chains', (0, _asyncToGenerator2.default)(function* () {
      var innerOperation = function () {
        var _ref10 = (0, _asyncToGenerator2.default)(function* () {
          throw new Error('Inner operation failed');
        });
        return function innerOperation() {
          return _ref10.apply(this, arguments);
        };
      }();
      var middleOperation = function () {
        var _ref11 = (0, _asyncToGenerator2.default)(function* () {
          try {
            return yield innerOperation();
          } catch (error) {
            throw new Error(`Middle operation caught: ${error.message}`);
          }
        });
        return function middleOperation() {
          return _ref11.apply(this, arguments);
        };
      }();
      var outerOperation = function () {
        var _ref12 = (0, _asyncToGenerator2.default)(function* () {
          try {
            return yield middleOperation();
          } catch (error) {
            throw new Error(`Outer operation caught: ${error.message}`);
          }
        });
        return function outerOperation() {
          return _ref12.apply(this, arguments);
        };
      }();
      yield expect(outerOperation()).rejects.toThrow('Outer operation caught: Middle operation caught: Inner operation failed');
    }));
    test('should recover from promise chain failures with fallback values', (0, _asyncToGenerator2.default)(function* () {
      var fetchWithFallback = function () {
        var _ref14 = (0, _asyncToGenerator2.default)(function* (url, fallback) {
          try {
            throw new Error('Network error');
          } catch (error) {
            console.error('Error fetching data:', error);
            return fallback;
          }
        });
        return function fetchWithFallback(_x4, _x5) {
          return _ref14.apply(this, arguments);
        };
      }();
      var result = yield fetchWithFallback('https://api.example.com/data', {
        fallback: true
      });
      expect(result).toEqual({
        fallback: true
      });
      expect(consoleErrorSpy).toHaveBeenCalled();
    }));
  });
  describe('Timeout Handling', function () {
    test('should handle promise timeout with race pattern', (0, _asyncToGenerator2.default)(function* () {
      var timeoutPromise = function timeoutPromise(ms) {
        return new Promise(function (_, reject) {
          setTimeout(function () {
            return reject(new Error(`Operation timed out after ${ms}ms`));
          }, ms);
        });
      };
      var slowOperation = function slowOperation() {
        return new Promise(function (resolve) {
          setTimeout(function () {
            return resolve('Success');
          }, 200);
        });
      };
      var racePromise = Promise.race([slowOperation(), timeoutPromise(100)]);
      jest.advanceTimersByTime(100);
      yield expect(racePromise).rejects.toThrow('Operation timed out after 100ms');
    }));
    test('should implement custom timeout for async operations', (0, _asyncToGenerator2.default)(function* () {
      var operationWithTimeout = function () {
        var _ref17 = (0, _asyncToGenerator2.default)(function* (operation, timeoutMs) {
          var timeoutError = new Error(`Operation timed out after ${timeoutMs}ms`);
          var timeoutId;
          var timeoutPromise = new Promise(function (_, reject) {
            timeoutId = setTimeout(function () {
              return reject(timeoutError);
            }, timeoutMs);
          });
          return Promise.race([operation(), timeoutPromise]).finally(function () {
            clearTimeout(timeoutId);
          });
        });
        return function operationWithTimeout(_x6, _x7) {
          return _ref17.apply(this, arguments);
        };
      }();
      var slowOperation = function slowOperation() {
        return new Promise(function (resolve) {
          setTimeout(function () {
            return resolve('Success');
          }, 200);
        });
      };
      var operationPromise = operationWithTimeout(function () {
        return slowOperation();
      }, 100);
      jest.advanceTimersByTime(100);
      yield expect(operationPromise).rejects.toThrow('Operation timed out after 100ms');
    }));
    test('should handle timeouts in parallel operations', (0, _asyncToGenerator2.default)(function* () {
      var operationWithTimeout = function () {
        var _ref19 = (0, _asyncToGenerator2.default)(function* (id, duration, timeout) {
          return new Promise(function (resolve, reject) {
            var timeoutId = setTimeout(function () {
              reject(new Error(`Operation ${id} timed out after ${timeout}ms`));
            }, timeout);
            setTimeout(function () {
              clearTimeout(timeoutId);
              resolve(`Operation ${id} completed in ${duration}ms`);
            }, duration);
          });
        });
        return function operationWithTimeout(_x8, _x9, _x0) {
          return _ref19.apply(this, arguments);
        };
      }();
      var results = yield Promise.allSettled([operationWithTimeout(1, 50, 100), operationWithTimeout(2, 150, 100), operationWithTimeout(3, 80, 100)]);
      jest.advanceTimersByTime(50);
      jest.advanceTimersByTime(30);
      jest.advanceTimersByTime(20);
      expect(results[0].status).toBe('fulfilled');
      expect(results[1].status).toBe('rejected');
      expect(results[2].status).toBe('fulfilled');
      if (results[1].status === 'rejected') {
        expect(results[1].reason.message).toContain('Operation 2 timed out');
      }
    }));
  });
  describe('Concurrent Operations', function () {
    test('should limit concurrency of parallel operations', (0, _asyncToGenerator2.default)(function* () {
      var concurrencyLimit = 3;
      var activeOperations = 0;
      var maxConcurrentOperations = 0;
      var operation = function () {
        var _ref21 = (0, _asyncToGenerator2.default)(function* (id) {
          activeOperations++;
          maxConcurrentOperations = Math.max(maxConcurrentOperations, activeOperations);
          yield new Promise(function (resolve) {
            return setTimeout(resolve, 10);
          });
          jest.advanceTimersByTime(10);
          activeOperations--;
          return `Operation ${id} completed`;
        });
        return function operation(_x1) {
          return _ref21.apply(this, arguments);
        };
      }();
      var runWithConcurrencyLimit = function () {
        var _ref22 = (0, _asyncToGenerator2.default)(function* (operations, limit) {
          var results = [];
          var executing = [];
          var _loop = function* _loop(_operation) {
            var p = Promise.resolve().then(function () {
              return _operation();
            });
            results.push(p);
            if (limit <= operations.length) {
              var e = p.then(function () {
                executing.splice(executing.indexOf(e), 1);
              });
              executing.push(e);
              if (executing.length >= limit) {
                yield Promise.race(executing);
              }
            }
          };
          for (var _operation of operations) {
            yield* _loop(_operation);
          }
          return Promise.all(results);
        });
        return function runWithConcurrencyLimit(_x10, _x11) {
          return _ref22.apply(this, arguments);
        };
      }();
      var operations = Array(10).fill(null).map(function (_, i) {
        return function () {
          return operation(i + 1);
        };
      });
      yield runWithConcurrencyLimit(operations, concurrencyLimit);
      expect(maxConcurrentOperations).toBeLessThanOrEqual(concurrencyLimit);
    }), 60000);
    test('should handle errors in concurrent operations without stopping others', (0, _asyncToGenerator2.default)(function* () {
      var operations = [function () {
        return Promise.resolve('Operation 1 success');
      }, function () {
        return Promise.reject(new Error('Operation 2 failed'));
      }, function () {
        return Promise.resolve('Operation 3 success');
      }, function () {
        return Promise.reject(new Error('Operation 4 failed'));
      }, function () {
        return Promise.resolve('Operation 5 success');
      }];
      var results = yield Promise.allSettled(operations.map(function (op) {
        return op();
      }));
      expect(results[0].status).toBe('fulfilled');
      expect(results[1].status).toBe('rejected');
      expect(results[2].status).toBe('fulfilled');
      expect(results[3].status).toBe('rejected');
      expect(results[4].status).toBe('fulfilled');
      var successResults = results.filter(function (r) {
        return r.status === 'fulfilled';
      });
      expect(successResults.length).toBe(3);
    }));
    test('should prioritize operations in concurrent queue', (0, _asyncToGenerator2.default)(function* () {
      var priorityQueue = [{
        id: 1,
        priority: 2,
        operation: function operation() {
          return Promise.resolve('Operation 1 (Medium)');
        }
      }, {
        id: 2,
        priority: 1,
        operation: function operation() {
          return Promise.resolve('Operation 2 (High)');
        }
      }, {
        id: 3,
        priority: 3,
        operation: function operation() {
          return Promise.resolve('Operation 3 (Low)');
        }
      }, {
        id: 4,
        priority: 1,
        operation: function operation() {
          return Promise.resolve('Operation 4 (High)');
        }
      }, {
        id: 5,
        priority: 2,
        operation: function operation() {
          return Promise.resolve('Operation 5 (Medium)');
        }
      }];
      priorityQueue.sort(function (a, b) {
        return a.priority - b.priority;
      });
      var executionOrder = [];
      var _results = yield Promise.all(priorityQueue.map(function (item) {
        return item.operation().then(function (result) {
          executionOrder.push(item.id);
          return result;
        });
      }));
      expect(executionOrder[0]).toBe(2);
      expect(executionOrder[1]).toBe(4);
      expect(executionOrder[executionOrder.length - 1]).toBe(3);
    }));
  });
  describe('Data Structure Edge Cases', function () {
    test('should handle deeply nested objects', (0, _asyncToGenerator2.default)(function* () {
      var deeplyNested = {
        level1: {
          level2: {
            level3: {
              level4: {
                level5: {
                  value: 'Deep value'
                }
              }
            }
          }
        }
      };
      yield mockStorage.setItem('deeplyNested', JSON.stringify(deeplyNested));
      var retrieved = JSON.parse((yield mockStorage.getItem('deeplyNested')) || '{}');
      expect(retrieved.level1.level2.level3.level4.level5.value).toBe('Deep value');
    }), 60000);
    test('should handle circular references', (0, _asyncToGenerator2.default)(function* () {
      var circular = {
        name: 'Circular Object',
        value: 42
      };
      circular.self = circular;
      circular.child = {
        parent: circular,
        name: 'Child Object'
      };
      expect(function () {
        return JSON.stringify(circular);
      }).toThrow();
      var seen = new WeakSet();
      var serialized = JSON.stringify(circular, function (key, value) {
        if (key && typeof value === 'object' && value !== null) {
          if (seen.has(value)) {
            return '[Circular Reference]';
          }
          seen.add(value);
        }
        return value;
      });
      expect(serialized).toContain('[Circular Reference]');
      var deserialized = JSON.parse(serialized);
      expect(deserialized.name).toBe('Circular Object');
      expect(deserialized.value).toBe(42);
      expect(deserialized.child.name).toBe('Child Object');
      expect(deserialized.child.parent).toBe('[Circular Reference]');
    }));
    test('should handle Unicode and special characters', (0, _asyncToGenerator2.default)(function* () {
      var specialCharsObject = {
        emoji: '😀🚀🌟🔥🎉',
        arabic: 'مرحبا بالعالم',
        chinese: '你好世界',
        russian: 'Привет, мир',
        japanese: 'こんにちは世界',
        korean: '안녕하세요 세계',
        thai: 'สวัสดีชาวโลก',
        specialChars: '©®™§¶†‡♠♣♥♦¿¡«»',
        escapeChars: '\n\t\r\b\f\\\'\\"'
      };
      yield mockStorage.setItem('specialChars', JSON.stringify(specialCharsObject));
      var retrieved = JSON.parse((yield mockStorage.getItem('specialChars')) || '{}');
      expect(retrieved.emoji).toBe(specialCharsObject.emoji);
      expect(retrieved.arabic).toBe(specialCharsObject.arabic);
      expect(retrieved.chinese).toBe(specialCharsObject.chinese);
      expect(retrieved.russian).toBe(specialCharsObject.russian);
      expect(retrieved.japanese).toBe(specialCharsObject.japanese);
      expect(retrieved.korean).toBe(specialCharsObject.korean);
      expect(retrieved.thai).toBe(specialCharsObject.thai);
      expect(retrieved.specialChars).toBe(specialCharsObject.specialChars);
      expect(retrieved.escapeChars).toBe(specialCharsObject.escapeChars);
    }), 60000);
    test('should handle malformed data', (0, _asyncToGenerator2.default)(function* () {
      var malformedJSON = '{"name": "Test", "value": 42, missing: quotes, unclosed: {';
      expect(function () {
        return JSON.parse(malformedJSON);
      }).toThrow(SyntaxError);
      var safeParse = function safeParse(json) {
        var fallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        try {
          return JSON.parse(json);
        } catch (error) {
          console.error('Error parsing JSON:', error);
          return fallback;
        }
      };
      var result = safeParse(malformedJSON, {
        error: true
      });
      expect(result).toEqual({
        error: true
      });
      expect(consoleErrorSpy).toHaveBeenCalled();
    }));
  });
  describe('Error Propagation', function () {
    test('should propagate errors through async chains', (0, _asyncToGenerator2.default)(function* () {
      var step1 = function () {
        var _ref30 = (0, _asyncToGenerator2.default)(function* () {
          throw new Error('Error in step 1');
        });
        return function step1() {
          return _ref30.apply(this, arguments);
        };
      }();
      var step2 = function () {
        var _ref31 = (0, _asyncToGenerator2.default)(function* () {
          yield step1();
          return 'Step 2 completed';
        });
        return function step2() {
          return _ref31.apply(this, arguments);
        };
      }();
      var step3 = function () {
        var _ref32 = (0, _asyncToGenerator2.default)(function* () {
          var result = yield step2();
          return `Step 3 completed with ${result}`;
        });
        return function step3() {
          return _ref32.apply(this, arguments);
        };
      }();
      yield expect(step3()).rejects.toThrow('Error in step 1');
    }));
    test('should transform errors through async chains', (0, _asyncToGenerator2.default)(function* () {
      var step1 = function () {
        var _ref34 = (0, _asyncToGenerator2.default)(function* () {
          throw new Error('Database connection failed');
        });
        return function step1() {
          return _ref34.apply(this, arguments);
        };
      }();
      var step2 = function () {
        var _ref35 = (0, _asyncToGenerator2.default)(function* () {
          try {
            yield step1();
            return 'Step 2 completed';
          } catch (error) {
            throw new Error(`Data retrieval error: ${error.message}`);
          }
        });
        return function step2() {
          return _ref35.apply(this, arguments);
        };
      }();
      var step3 = function () {
        var _ref36 = (0, _asyncToGenerator2.default)(function* () {
          try {
            var result = yield step2();
            return `Step 3 completed with ${result}`;
          } catch (error) {
            throw new Error(`Processing error: ${error.message}`);
          }
        });
        return function step3() {
          return _ref36.apply(this, arguments);
        };
      }();
      yield expect(step3()).rejects.toThrow('Processing error: Data retrieval error: Database connection failed');
    }));
    test('should handle errors with context information', (0, _asyncToGenerator2.default)(function* () {
      var createAppError = function createAppError(message, code, context) {
        var error = new Error(message);
        if (code) error.code = code;
        if (context) error.context = context;
        return error;
      };
      var executeOperation = function () {
        var _ref38 = (0, _asyncToGenerator2.default)(function* (context) {
          try {
            throw new Error('Operation failed');
          } catch (error) {
            var appError = createAppError(error.message, 'OPERATION_ERROR', {
              context: context
            });
            throw appError;
          }
        });
        return function executeOperation(_x12) {
          return _ref38.apply(this, arguments);
        };
      }();
      try {
        yield executeOperation('test-context');
        fail('Should have thrown an error');
      } catch (error) {
        expect(error.message).toBe('Operation failed');
        expect(error.code).toBe('OPERATION_ERROR');
        expect(error.context).toEqual({
          context: 'test-context'
        });
      }
    }));
    test('should aggregate errors from multiple operations', (0, _asyncToGenerator2.default)(function* () {
      var operations = [function () {
        return Promise.resolve('Operation 1 success');
      }, function () {
        return Promise.reject(new Error('Operation 2 failed'));
      }, function () {
        return Promise.resolve('Operation 3 success');
      }, function () {
        return Promise.reject(new Error('Operation 4 failed'));
      }];
      var executeAll = function () {
        var _ref40 = (0, _asyncToGenerator2.default)(function* (ops) {
          var results = yield Promise.allSettled(ops.map(function (op) {
            return op();
          }));
          var successes = results.filter(function (r) {
            return r.status === 'fulfilled';
          }).map(function (r) {
            return r.value;
          });
          var failures = results.filter(function (r) {
            return r.status === 'rejected';
          }).map(function (r) {
            return r.reason;
          });
          if (failures.length > 0) {
            var error = new Error(`${failures.length} operations failed`);
            error.failures = failures;
            error.successes = successes;
            throw error;
          }
          return successes;
        });
        return function executeAll(_x13) {
          return _ref40.apply(this, arguments);
        };
      }();
      try {
        yield executeAll(operations);
        fail('Should have thrown an error');
      } catch (error) {
        expect(error.message).toBe('2 operations failed');
        expect(error.failures.length).toBe(2);
        expect(error.failures[0].message).toBe('Operation 2 failed');
        expect(error.failures[1].message).toBe('Operation 4 failed');
        expect(error.successes.length).toBe(2);
        expect(error.successes).toEqual(['Operation 1 success', 'Operation 3 success']);
      }
    }));
  });
  describe('Retry Mechanisms', function () {
    test('should implement retry with exponential backoff', (0, _asyncToGenerator2.default)(function* () {
      var attempts = 0;
      var maxAttempts = 3;
      var unreliableOperation = jest.fn().mockImplementation(function () {
        attempts++;
        if (attempts < 3) {
          return Promise.reject(new Error(`Attempt ${attempts} failed`));
        }
        return Promise.resolve(`Success on attempt ${attempts}`);
      });
      var withRetry = function () {
        var _ref42 = (0, _asyncToGenerator2.default)(function* (operation, maxRetries) {
          var _lastError;
          var baseDelay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;
          var factor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2;
          var lastError = null;
          var _loop2 = function* _loop2() {
              try {
                return {
                  v: yield operation()
                };
              } catch (error) {
                lastError = error;
                console.warn(`Attempt ${attempt} failed: ${lastError.message}`);
                if (attempt < maxRetries) {
                  var delay = baseDelay * Math.pow(factor, attempt - 1);
                  yield new Promise(function (resolve) {
                    return setTimeout(resolve, delay);
                  });
                  jest.advanceTimersByTime(delay);
                }
              }
            },
            _ret;
          for (var attempt = 1; attempt <= maxRetries; attempt++) {
            _ret = yield* _loop2();
            if (_ret) return _ret.v;
          }
          throw new Error(`All ${maxRetries} attempts failed. Last error: ${(_lastError = lastError) == null ? void 0 : _lastError.message}`);
        });
        return function withRetry(_x14, _x15) {
          return _ref42.apply(this, arguments);
        };
      }();
      var result = yield withRetry(unreliableOperation, maxAttempts);
      expect(result).toBe('Success on attempt 3');
      expect(unreliableOperation).toHaveBeenCalledTimes(3);
      expect(consoleWarnSpy).toHaveBeenCalledTimes(2);
    }), 60000);
    test('should implement retry with jitter to prevent thundering herd', (0, _asyncToGenerator2.default)(function* () {
      var attempts = 0;
      var maxAttempts = 3;
      var unreliableOperation = jest.fn().mockImplementation(function () {
        attempts++;
        if (attempts < 3) {
          return Promise.reject(new Error(`Attempt ${attempts} failed`));
        }
        return Promise.resolve(`Success on attempt ${attempts}`);
      });
      var withRetryAndJitter = function () {
        var _ref44 = (0, _asyncToGenerator2.default)(function* (operation, maxRetries) {
          var _lastError2;
          var baseDelay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;
          var factor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2;
          var jitter = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0.5;
          var lastError = null;
          var _loop3 = function* _loop3() {
              try {
                return {
                  v: yield operation()
                };
              } catch (error) {
                lastError = error;
                if (attempt < maxRetries) {
                  var expDelay = baseDelay * Math.pow(factor, attempt - 1);
                  var jitterAmount = expDelay * jitter;
                  var delay = expDelay + Math.random() * jitterAmount * 2 - jitterAmount;
                  yield new Promise(function (resolve) {
                    return setTimeout(resolve, delay);
                  });
                  jest.advanceTimersByTime(Math.ceil(delay));
                }
              }
            },
            _ret2;
          for (var attempt = 1; attempt <= maxRetries; attempt++) {
            _ret2 = yield* _loop3();
            if (_ret2) return _ret2.v;
          }
          throw new Error(`All ${maxRetries} attempts failed. Last error: ${(_lastError2 = lastError) == null ? void 0 : _lastError2.message}`);
        });
        return function withRetryAndJitter(_x16, _x17) {
          return _ref44.apply(this, arguments);
        };
      }();
      var result = yield withRetryAndJitter(unreliableOperation, maxAttempts);
      expect(result).toBe('Success on attempt 3');
      expect(unreliableOperation).toHaveBeenCalledTimes(3);
      var delays = setTimeoutSpy.mock.calls.map(function (call) {
        return call[1];
      });
      expect(new Set(delays).size).toBe(delays.length);
    }), 60000);
    test('should implement conditional retry based on error type', (0, _asyncToGenerator2.default)(function* () {
      var networkError = new Error('Network error');
      networkError.code = 'NETWORK_ERROR';
      var validationError = new Error('Validation error');
      validationError.code = 'VALIDATION_ERROR';
      var callCount = 0;
      var operation = jest.fn().mockImplementation(function () {
        callCount++;
        if (callCount === 1) {
          return Promise.reject(networkError);
        } else if (callCount === 2) {
          return Promise.reject(validationError);
        }
        return Promise.resolve('Success');
      });
      var withConditionalRetry = function () {
        var _ref46 = (0, _asyncToGenerator2.default)(function* (operation, maxRetries, shouldRetry) {
          var attempts = 0;
          var lastError = null;
          while (attempts < maxRetries) {
            try {
              return yield operation();
            } catch (error) {
              lastError = error;
              attempts++;
              if (attempts >= maxRetries || !shouldRetry(lastError)) {
                throw lastError;
              }
              yield new Promise(function (resolve) {
                return setTimeout(resolve, 10);
              });
              jest.advanceTimersByTime(10);
            }
          }
          throw lastError;
        });
        return function withConditionalRetry(_x18, _x19, _x20) {
          return _ref46.apply(this, arguments);
        };
      }();
      var shouldRetry = function shouldRetry(error) {
        return error.code === 'NETWORK_ERROR';
      };
      yield expect(withConditionalRetry(operation, 3, shouldRetry)).rejects.toThrow('Validation error');
      expect(operation).toHaveBeenCalledTimes(2);
    }), 60000);
  });
  describe('Performance Optimization', function () {
    test('should efficiently process large arrays with chunking', (0, _asyncToGenerator2.default)(function* () {
      var largeArray = Array(100).fill(null).map(function (_, i) {
        return {
          id: i,
          value: `Item ${i}`
        };
      });
      var processInChunks = function () {
        var _ref48 = (0, _asyncToGenerator2.default)(function* (items, chunkSize, processor) {
          var results = [];
          for (var i = 0; i < items.length; i += chunkSize) {
            var chunk = items.slice(i, i + chunkSize);
            var chunkResults = yield processor(chunk);
            results.push.apply(results, (0, _toConsumableArray2.default)(chunkResults));
            yield new Promise(function (resolve) {
              return setTimeout(resolve, 0);
            });
            jest.advanceTimersByTime(0);
          }
          return results;
        });
        return function processInChunks(_x21, _x22, _x23) {
          return _ref48.apply(this, arguments);
        };
      }();
      var processItems = jest.fn().mockImplementation(function () {
        var _ref49 = (0, _asyncToGenerator2.default)(function* (items) {
          return items.map(function (item) {
            return Object.assign({}, item, {
              processed: true
            });
          });
        });
        return function (_x24) {
          return _ref49.apply(this, arguments);
        };
      }());
      var startTime = performance.now();
      var results = yield processInChunks(largeArray, 10, processItems);
      var endTime = performance.now();
      expect(results.length).toBe(100);
      expect(results[0].processed).toBe(true);
      expect(results[99].processed).toBe(true);
      expect(processItems).toHaveBeenCalledTimes(10);
      var duration = endTime - startTime;
      expect(duration).toBeLessThan(1000);
    }), 60000);
    test('should implement memoization for expensive calculations', function () {
      var expensiveCalculation = jest.fn(function (a, b) {
        var result = 0;
        for (var i = 0; i < 100; i++) {
          result += Math.sqrt(a * i + b);
        }
        return result;
      });
      var memoize = function memoize(fn) {
        var cache = new Map();
        return function () {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          var key = JSON.stringify(args);
          if (cache.has(key)) {
            return cache.get(key);
          }
          var result = fn.apply(void 0, args);
          cache.set(key, result);
          return result;
        };
      };
      var memoizedCalculation = memoize(expensiveCalculation);
      var result1 = memoizedCalculation(10, 20);
      var result2 = memoizedCalculation(5, 10);
      var _result3 = memoizedCalculation(10, 20);
      var _result4 = memoizedCalculation(5, 10);
      expect(result1).toBe(memoizedCalculation(10, 20));
      expect(result2).toBe(memoizedCalculation(5, 10));
      expect(expensiveCalculation).toHaveBeenCalledTimes(2);
    });
    test('should handle rapid concurrent operations', (0, _asyncToGenerator2.default)(function* () {
      var concurrentOperations = 20;
      var completedOperations = 0;
      var failedOperations = 0;
      jest.spyOn(mockStorage, 'setItem').mockImplementation(function () {
        if (Math.random() < 0.1) {
          return Promise.reject(new Error('Random failure'));
        }
        return Promise.resolve();
      });
      var startTime = performance.now();
      var promises = Array(concurrentOperations).fill(null).map(function (_, i) {
        return mockStorage.setItem(`key-${i}`, `value-${i}`).then(function () {
          completedOperations += 1;
        }).catch(function () {
          failedOperations += 1;
        });
      });
      yield Promise.all(promises);
      expect(completedOperations + failedOperations).toBe(concurrentOperations);
      expect(completedOperations).toBeGreaterThan(0);
      var duration = performance.now() - startTime;
      expect(duration).toBeLessThan(1000);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,