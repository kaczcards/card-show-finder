{"file":"/Users/kevin/card-show-finder/__tests__/screens/Messages/DirectMessagesScreen.test.tsx","mappings":"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","names":[],"sources":["/Users/kevin/card-show-finder/__tests__/screens/Messages/DirectMessagesScreen.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, fireEvent, waitFor } from '@testing-library/react-native';\nimport DirectMessagesScreen from '../../../src/screens/Messages/DirectMessagesScreen';\nimport { useAuth } from '../../../src/contexts/AuthContext';\nimport { ChatList } from '../../../src/components/Chat';\n\n// Mock the dependencies\njest.mock('../../../src/contexts/AuthContext', () => ({\n  useAuth: jest.fn(),\n}));\n\njest.mock('../../../src/components/Chat', () => ({\n  ChatList: jest.fn(() => null),\n}));\n\njest.mock('../../../src/supabase', () => ({\n  supabase: {\n    from: jest.fn(() => ({\n      select: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          single: jest.fn(() => Promise.resolve({ data: { id: 'user-1', username: 'testuser', role: 'attendee' }, error: null })),\n        })),\n      })),\n    })),\n  },\n}));\n\n// Navigation mock\nconst mockNavigation = {\n  navigate: jest.fn(),\n  setOptions: jest.fn(),\n};\n\n// Route params mock\nconst mockRoute = {\n  params: {},\n};\n\ndescribe('DirectMessagesScreen', () => {\n  // Reset mocks before each test\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Default auth mock implementation\n    (useAuth as jest.Mock).mockReturnValue({\n      authState: {\n        user: { id: 'user-1', email: 'test@example.com' },\n      },\n    });\n    \n    // Reset route params\n    mockRoute.params = {};\n  });\n\n  test('renders correctly when user is logged in', () => {\n    const { getByText } = render(\n      <DirectMessagesScreen navigation={mockNavigation} route={mockRoute} />\n    );\n    \n    expect(getByText('Messages')).toBeTruthy();\n  });\n\n  test('renders sign in message when user is not logged in', () => {\n    (useAuth as jest.Mock).mockReturnValue({\n      authState: { user: null },\n    });\n    \n    const { getByText } = render(\n      <DirectMessagesScreen navigation={mockNavigation} route={mockRoute} />\n    );\n    \n    expect(getByText('Please sign in to use messages')).toBeTruthy();\n    expect(getByText('Sign In')).toBeTruthy();\n  });\n\n  test('navigates to Profile when Sign In button is pressed', () => {\n    (useAuth as jest.Mock).mockReturnValue({\n      authState: { user: null },\n    });\n    \n    const { getByText } = render(\n      <DirectMessagesScreen navigation={mockNavigation} route={mockRoute} />\n    );\n    \n    fireEvent.press(getByText('Sign In'));\n    expect(mockNavigation.navigate).toHaveBeenCalledWith('Profile');\n  });\n\n  test('renders new conversation UI when showNewConversation is true', async () => {\n    const { getByText } = render(\n      <DirectMessagesScreen navigation={mockNavigation} route={{ params: { isNewConversation: true } }} />\n    );\n    \n    await waitFor(() => {\n      expect(getByText('New Message')).toBeTruthy();\n      expect(getByText('Back to Messages')).toBeTruthy();\n    });\n  });\n\n  test('passes stable function props to ChatList (wrapped in useCallback)', () => {\n    // First render\n    const { rerender } = render(\n      <DirectMessagesScreen navigation={mockNavigation} route={mockRoute} />\n    );\n    \n    // Get the props passed to ChatList on first render\n    const firstRenderProps = (ChatList as jest.Mock).mock.calls[0][0];\n    const firstHandleSelectConversation = firstRenderProps.onSelectConversation;\n    const firstHandleCreateNewConversation = firstRenderProps.onCreateNewConversation;\n    \n    // Force a re-render\n    rerender(\n      <DirectMessagesScreen navigation={mockNavigation} route={mockRoute} />\n    );\n    \n    // Get the props passed to ChatList on second render\n    const secondRenderProps = (ChatList as jest.Mock).mock.calls[1][0];\n    const secondHandleSelectConversation = secondRenderProps.onSelectConversation;\n    const secondHandleCreateNewConversation = secondRenderProps.onCreateNewConversation;\n    \n    // If the functions are wrapped in useCallback, they should maintain referential equality\n    expect(secondHandleSelectConversation).toBe(firstHandleSelectConversation);\n    expect(secondHandleCreateNewConversation).toBe(firstHandleCreateNewConversation);\n  });\n\n  test('handleSelectConversation updates navigation title correctly', () => {\n    // Render the component\n    render(\n      <DirectMessagesScreen navigation={mockNavigation} route={mockRoute} />\n    );\n    \n    // Get the onSelectConversation function passed to ChatList\n    const chatListProps = (ChatList as jest.Mock).mock.calls[0][0];\n    const handleSelectConversation = chatListProps.onSelectConversation;\n    \n    // Call the function with a mock conversation\n    const mockConversation = {\n      id: 'convo-1',\n      participants: [\n        {\n          user_id: 'user-2',\n          display_name: 'John Doe',\n        },\n      ],\n    };\n    handleSelectConversation(mockConversation);\n    \n    // Check if navigation.setOptions was called with the correct title\n    expect(mockNavigation.setOptions).toHaveBeenCalledWith({\n      title: 'John Doe',\n    });\n  });\n\n  test('handleSelectConversation uses fallback title when display_name is missing', () => {\n    // Render the component\n    render(\n      <DirectMessagesScreen navigation={mockNavigation} route={mockRoute} />\n    );\n    \n    // Get the onSelectConversation function passed to ChatList\n    const chatListProps = (ChatList as jest.Mock).mock.calls[0][0];\n    const handleSelectConversation = chatListProps.onSelectConversation;\n    \n    // Call the function with a mock conversation that has no display_name\n    const mockConversation = {\n      id: 'convo-1',\n      participants: [\n        {\n          user_id: 'user-2',\n          // No display_name\n        },\n      ],\n    };\n    handleSelectConversation(mockConversation);\n    \n    // Check if navigation.setOptions was called with the fallback title\n    expect(mockNavigation.setOptions).toHaveBeenCalledWith({\n      title: 'Conversation',\n    });\n  });\n\n  test('handleCreateNewConversation sets showNewConversation to true', () => {\n    // Render the component\n    const { queryByText } = render(\n      <DirectMessagesScreen navigation={mockNavigation} route={mockRoute} />\n    );\n    \n    // Initially, the new message UI should not be visible\n    expect(queryByText('New Message')).toBeFalsy();\n    \n    // Get the onCreateNewConversation function passed to ChatList\n    const chatListProps = (ChatList as jest.Mock).mock.calls[0][0];\n    const handleCreateNewConversation = chatListProps.onCreateNewConversation;\n    \n    // Call the function\n    handleCreateNewConversation();\n    \n    // Now the new message UI should be visible\n    expect(queryByText('New Message')).toBeTruthy();\n  });\n\n  test('functions remain stable even when props change', () => {\n    // First render with initial route\n    const { rerender } = render(\n      <DirectMessagesScreen \n        navigation={mockNavigation} \n        route={mockRoute} \n      />\n    );\n    \n    // Get the props passed to ChatList on first render\n    const firstRenderProps = (ChatList as jest.Mock).mock.calls[0][0];\n    const firstHandleSelectConversation = firstRenderProps.onSelectConversation;\n    \n    // Change the navigation prop\n    const updatedNavigation = {\n      ...mockNavigation,\n      addListener: jest.fn(),\n    };\n    \n    // Re-render with different navigation prop\n    rerender(\n      <DirectMessagesScreen \n        navigation={updatedNavigation} \n        route={mockRoute} \n      />\n    );\n    \n    // Get the props passed to ChatList on second render\n    const secondRenderProps = (ChatList as jest.Mock).mock.calls[1][0];\n    const secondHandleSelectConversation = secondRenderProps.onSelectConversation;\n    \n    // The onCreateNewConversation function should remain stable (no dependencies)\n    expect(secondRenderProps.onCreateNewConversation).toBe(firstRenderProps.onCreateNewConversation);\n    \n    // The onSelectConversation function might change because it depends on navigation\n    // But this test verifies our implementation is correct either way\n    if (updatedNavigation === mockNavigation) {\n      // If navigation reference is the same, function should be the same\n      expect(secondHandleSelectConversation).toBe(firstHandleSelectConversation);\n    } else {\n      // If navigation reference changed, function might change too (due to dependency)\n      // This is expected behavior with useCallback when dependencies change\n      expect(secondHandleSelectConversation).not.toBe(firstHandleSelectConversation);\n    }\n  });\n\n  test('initialConversationId is passed correctly to ChatList', () => {\n    // Set up route with initialConversationId\n    const conversationId = 'test-conversation-id';\n    mockRoute.params = { conversationId };\n    \n    // Render the component\n    render(\n      <DirectMessagesScreen navigation={mockNavigation} route={mockRoute} />\n    );\n    \n    // Check if initialConversationId was passed to ChatList\n    const chatListProps = (ChatList as jest.Mock).mock.calls[0][0];\n    expect(chatListProps.initialConversationId).toBe(conversationId);\n  });\n\n  test('debug panel toggles when debug button is pressed', () => {\n    // Render the component\n    const { getByText, queryByText } = render(\n      <DirectMessagesScreen navigation={mockNavigation} route={mockRoute} />\n    );\n    \n    // Debug panel should not be visible initially\n    expect(queryByText('Debug Info')).toBeFalsy();\n    \n    // Find and press the debug button (it has an icon, so we'll need to find it by its role)\n    const debugButton = getByText('Messages').parentElement?.querySelector('TouchableOpacity');\n    fireEvent.press(debugButton);\n    \n    // Debug panel should now be visible\n    expect(queryByText('Debug Info')).toBeTruthy();\n    \n    // Press the debug button again\n    fireEvent.press(debugButton);\n    \n    // Debug panel should be hidden again\n    expect(queryByText('Debug Info')).toBeFalsy();\n  });\n});\n"],"version":3}