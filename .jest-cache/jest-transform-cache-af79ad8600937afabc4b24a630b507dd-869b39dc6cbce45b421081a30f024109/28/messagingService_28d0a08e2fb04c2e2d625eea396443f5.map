{"version":3,"names":["supabase","userRoleService","cov_sa5xt6wt7","s","findDirectConversation","_ref","_asyncToGenerator","userA","userB","f","_ref2","rpc","user_a","user_b","rpcData","data","rpcError","error","b","console","warn","message","rpcEx","_ref3","from","select","eq","in","convoData","convoError","conversationMatches","filter","convo","conversation_participants","length","userIds","map","p","user_id","includes","id","_ref4","or","order","ascending","limit","legacyData","legacyError","conversation_id","_x","_x2","apply","arguments","createConversation","_ref5","params","_ref6","userId","participantIds","_ref6$isGroup","isGroup","showId","createDirectConversation","createGroupConversation","Error","_x3","_ref7","existingConversationId","_ref8","insert","type","created_at","Date","toISOString","single","conversationData","conversationError","conversationId","participants","_ref9","profiles","forEach","i","profile","find","prof","Object","assign","display_name","full_name","photo_url","avatar_url","_ref0","participantsError","_x4","_x5","_ref1","creatorId","_ref10","show_id","allParticipantIds","_toConsumableArray","Set","concat","_ref11","participantRecords","unread_count","_ref12","_x6","_x7","_x8","startConversationFromProfile","_ref13","currentUserId","profileUserId","initialMessage","recipientRole","getUserRole","IS_TEST_MODE","canUserReceiveMessage","sendMessage","_x9","_x0","_x1","getConversationParticipants","_ref14","_x10","getConversations","_ref15","_ref16","conversationsData","conversationsError","_ref17","participationsData","participationsError","conversationIds","_ref18","neq","allParticipantsData","allParticipantsError","participantsByConversation","participant","push","conversations","_participantsByConver","participant_count","last_message_text","last_message_timestamp","sort","a","timeA","getTime","timeB","_x11","getMessages","_ref19","_ref20","_x12","_ref21","senderId","recipientId","messageText","_ref22","Promise","all","_ref23","_slicedToArray","senderRole","canReplyToMessage","canSendDirectMessage","finalConversationId","_ref24","sender_id","message_text","read_by_user_ids","newMessage","messageError","update","updateError","_x13","_x14","_x15","_x16","sendGroupMessage","_ref25","_ref26","participantCheck","participantCheckError","_ref27","_x17","_x18","_x19","sendBroadcastMessage","_ref28","_ref29","recipientRoles","_ref30","functions","invoke","body","recipient_roles","is_pre_show","isPreShow","_x20","moderateMessage","_ref31","moderatorId","messageId","reason","undefined","_ref32","p_message_id","p_moderator_id","p_reason","err","_x21","_x22","reportMessage","_ref33","reporterId","_ref34","p_reporter_id","_x23","_x24","_x25","markMessageAsRead","_ref35","_ref36","_ref37","_ref38","msgData","decrementUnreadCount","_x26","_x27","markConversationAsRead","_ref39","_ref40","not","messages","updatedCount","_ref41","_x28","_x29","_ref42","_x30","_x31","subscribeToMessages","onNewMessage","channel","on","event","schema","table","payload","new","subscribe","getTotalUnreadCount","_ref43","_ref44","reduce","total","item","_x32"],"sources":["messagingService.ts"],"sourcesContent":["import { supabase } from '../supabase';\nimport * as userRoleService from './userRoleService';\nimport { UserRole } from './userRoleService';\n\n// TypeScript interfaces for Messages and Conversations\nexport interface Message {\n  id: string;\n  conversation_id: string;\n  sender_id: string;\n  message_text: string;\n  created_at: string;\n  read_by_user_ids: string[];\n  sender_profile?: {\n    id: string;\n    username?: string;\n    full_name?: string;\n    avatar_url?: string;\n  };\n}\n\nexport interface Conversation {\n  id: string;\n  type: 'direct' | 'group' | 'show';\n  show_id?: string;\n  participant_count: number;\n  last_message_text?: string;\n  last_message_timestamp?: string;\n  unread_count: number;\n  participants: {\n    user_id: string;\n    display_name?: string;\n    photo_url?: string;\n  }[];\n}\n\n// Broadcast message parameters\nexport interface BroadcastMessageParams {\n  senderId: string;\n  message: string;\n  recipientRoles: UserRole[];\n  showId?: string;\n  /**\n   * Optional override to explicitly mark the broadcast\n   * as pre-show (TRUE) or post-show (FALSE).  When omitted\n   * the edge-function infers this from current date vs show date.\n   */\n  isPreShow?: boolean;\n}\n\n// ---------------------------------------------------------------------------\n//  Conversation functions\n// ---------------------------------------------------------------------------\n\n/**\n * Try to find an existing one-to-one (direct) conversation between two users.\n * @param userA First user id\n * @param userB Second user id\n * @returns conversation id or null if none exists\n */\nexport const findDirectConversation = async (\n  userA: string,\n  userB: string\n): Promise<string | null> => {\n  try {\n    /* ------------------------------------------------------------------\n     * 1️⃣  Preferred path – use the PostgreSQL RPC function\n     * ------------------------------------------------------------------\n     * The `find_direct_conversation` function executes server-side,\n     * returning the conversation id (or `null`).  This is significantly\n     * faster than multiple round-trips & client-side filtering.\n     * If the RPC is missing (older DB) or fails, we silently fall back\n     * to the legacy client-side approach further below.\n     * ------------------------------------------------------------------ */\n    try {\n      const { data: rpcData, error: rpcError } = await supabase.rpc(\n        'find_direct_conversation',\n        { user_a: userA, user_b: userB },\n      );\n\n      if (!rpcError) {\n        // RPC executed – it either returned an id or null\n        if (rpcData) return rpcData as string;\n      } else {\n        // Log in verbose mode but do not throw – we will use fallback logic\n        console.warn(\n          '[messagingService/findDirectConversation] RPC error, falling back:',\n          rpcError.message,\n        );\n      }\n    } catch (rpcEx) {\n      // Network / function not found … fall back gracefully\n      console.warn(\n        '[messagingService/findDirectConversation] RPC exception, falling back:',\n        rpcEx,\n      );\n    }\n\n    // Try to find in conversation_participants table (preferred approach)\n    const { data: convoData, error: convoError } = await supabase\n      .from('conversations')\n      .select(`\n        id,\n        type,\n        conversation_participants!inner(user_id)\n      `)\n      .eq('type', 'direct')\n      .in('conversation_participants.user_id', [userA, userB]);\n\n    if (convoError) {\n      console.error('[messagingService/findDirectConversation] advanced lookup error', convoError);\n      // Fall back to legacy approach\n    } else {\n      // Group results by conversation_id and count participants\n      const conversationMatches = convoData\n        .filter(convo => convo.conversation_participants.length === 2)\n        .filter(convo => {\n          // Check if both users are in this conversation\n          const userIds = convo.conversation_participants.map((p: any) => p.user_id);\n          return userIds.includes(userA) && userIds.includes(userB);\n        });\n      \n      if (conversationMatches.length > 0) {\n        return conversationMatches[0].id;\n      }\n    }\n\n    // Legacy fallback: Look in messages table\n    const { data: legacyData, error: legacyError } = await supabase\n      .from('messages')\n      .select('conversation_id')\n      .or(`and(sender_id.eq.${userA},recipient_id.eq.${userB}),and(sender_id.eq.${userB},recipient_id.eq.${userA})`)\n      .order('created_at', { ascending: false })\n      .limit(1);\n\n    if (legacyError) {\n      console.error('[messagingService/findDirectConversation] legacy error', legacyError);\n      return null;\n    }\n\n    if (legacyData && legacyData.length > 0) {\n      return legacyData[0].conversation_id;\n    }\n\n    return null;\n  } catch (error) {\n    console.error('[messagingService/findDirectConversation] exception', error);\n    return null;\n  }\n};\n\n/**\n * Create a direct conversation between two users.\n * This function creates the conversation record, adds participants,\n * but does NOT send any messages.\n * @param userA First user id\n * @param userB Second user id\n * @returns The conversation ID\n */\n\n/**\n * Generic conversation creation function that handles both direct and group conversations.\n * @param {Object} params - The conversation parameters\n * @param {string} params.userId - The ID of the user creating the conversation\n * @param {string[]} params.participantIds - Array of user IDs to include (for direct conversations, should contain one ID)\n * @param {boolean} params.isGroup - Whether this is a group conversation\n * @param {string} [params.showId] - Optional show ID for show-specific groups\n * @returns {Promise<string>} The conversation ID\n */\nexport const createConversation = async (params: { \n  userId: string;\n  participantIds: string[];\n  isGroup?: boolean;\n  showId?: string;\n}): Promise<string> => {\n  try {\n    const { userId, participantIds, isGroup = false, showId } = params;\n    \n    // Direct conversation (between two users)\n    if (!isGroup && participantIds.length === 1) {\n      return await createDirectConversation(userId, participantIds[0]);\n    }\n    \n    // Group conversation\n    if (isGroup || participantIds.length > 1) {\n      return await createGroupConversation(userId, participantIds, showId);\n    }\n    \n    throw new Error('Invalid conversation parameters');\n  } catch (error) {\n    console.error('[messagingService/createConversation] exception', error);\n    throw error;\n  }\n};\n\nexport const createDirectConversation = async (\n  userA: string,\n  userB: string\n): Promise<string> => {\n  try {\n    // First check if conversation already exists\n    const existingConversationId = await findDirectConversation(userA, userB);\n    if (existingConversationId) {\n      return existingConversationId;\n    }\n    \n    // Create a new conversation\n    const { data: conversationData, error: conversationError } = await supabase\n      .from('conversations')\n      .insert({\n        type: 'direct',\n        created_at: new Date().toISOString()\n      })\n      .select()\n      .single();\n    \n    if (conversationError || !conversationData) {\n      console.error('[messagingService/createDirectConversation] conversation error', conversationError);\n      throw new Error('Failed to create conversation');\n    }\n    \n    const conversationId = conversationData.id;\n    \n    // Add participants\n    const participants = [\n      { conversation_id: conversationId, user_id: userA },\n      { conversation_id: conversationId, user_id: userB }\n    ];\n    \n    // Fetch user profiles to get display names and photos\n    const { data: profiles } = await supabase\n      .from('profiles')\n      .select('id, full_name, avatar_url')\n      .in('id', [userA, userB]);\n      \n    if (profiles) {\n      participants.forEach((p, i) => {\n        const profile = profiles.find(prof => prof.id === p.user_id);\n        if (profile) {\n          participants[i] = {\n            ...p,\n            display_name: profile.full_name,\n            photo_url: profile.avatar_url\n          };\n        }\n      });\n    }\n    \n    const { error: participantsError } = await supabase\n      .from('conversation_participants')\n      .insert(participants);\n      \n    if (participantsError) {\n      console.error('[messagingService/createDirectConversation] participants error', participantsError);\n      // We created the conversation but failed to add participants\n      // This is a partial failure, but we still return the conversation ID\n      // A cleanup job could remove orphaned conversations\n    }\n    \n    return conversationId;\n  } catch (error) {\n    console.error('[messagingService/createDirectConversation] exception', error);\n    throw error;\n  }\n};\n\n/**\n * Creates a group conversation for broadcasting messages.\n * @param creatorId The ID of the user creating the group\n * @param participants Array of user IDs to include in the group \n * @param showId Optional Show ID if this is a show-specific group\n * @returns The conversation ID\n */\nexport const createGroupConversation = async (\n  creatorId: string,\n  participants: string[],\n  showId?: string\n): Promise<string> => {\n  try {\n    // Create a new group conversation\n    const { data: conversationData, error: conversationError } = await supabase\n      .from('conversations')\n      .insert({\n        type: showId ? 'show' : 'group',\n        show_id: showId || null,\n        created_at: new Date().toISOString()\n      })\n      .select()\n      .single();\n    \n    if (conversationError || !conversationData) {\n      console.error('[messagingService/createGroupConversation] conversation error', conversationError);\n      throw new Error('Failed to create group conversation');\n    }\n    \n    const conversationId = conversationData.id;\n    \n    // Always include the creator in the participants list\n    const allParticipantIds = [...new Set([creatorId, ...participants])];\n    \n    // Fetch user profiles for all participants\n    const { data: profiles } = await supabase\n      .from('profiles')\n      .select('id, full_name, avatar_url')\n      .in('id', allParticipantIds);\n    \n    // Create participant records\n    const participantRecords = allParticipantIds.map(userId => {\n      const profile = profiles?.find(p => p.id === userId);\n      return {\n        conversation_id: conversationId,\n        user_id: userId,\n        display_name: profile?.full_name,\n        photo_url: profile?.avatar_url,\n        // Only the creator has read all messages initially\n        unread_count: userId === creatorId ? 0 : 1\n      };\n    });\n    \n    // Insert all participants\n    const { error: participantsError } = await supabase\n      .from('conversation_participants')\n      .insert(participantRecords);\n    \n    if (participantsError) {\n      console.error('[messagingService/createGroupConversation] participants error', participantsError);\n      // Continue despite partial failure\n    }\n    \n    return conversationId;\n  } catch (error) {\n    console.error('[messagingService/createGroupConversation] exception', error);\n    throw error;\n  }\n};\n\n/**\n * Start a new conversation from a profile view.\n * Creates the conversation if needed, sends the initial message,\n * and returns the conversation ID for navigation.\n * \n * @param currentUserId The ID of the current user initiating the conversation\n * @param profileUserId The ID of the user whose profile is being viewed\n * @param initialMessage The first message to send\n * @returns Conversation ID for navigation\n */\nexport const startConversationFromProfile = async (\n  currentUserId: string,\n  profileUserId: string,\n  initialMessage: string\n): Promise<string> => {\n  try {\n    // Check if the recipient can receive messages\n    const recipientRole = await userRoleService.getUserRole(profileUserId);\n    if (!recipientRole) {\n      throw new Error('User not found');\n    }\n    \n    if (!userRoleService.IS_TEST_MODE && !userRoleService.canUserReceiveMessage(recipientRole)) {\n      throw new Error('This user cannot receive messages due to their role');\n    }\n    \n    // Create or find conversation\n    const conversationId = await createDirectConversation(currentUserId, profileUserId);\n    \n    // Send initial message\n    await sendMessage(currentUserId, profileUserId, initialMessage, conversationId);\n    \n    return conversationId;\n  } catch (error) {\n    console.error('[messagingService/startConversationFromProfile]', error);\n    throw error;\n  }\n};\n\n/**\n * Get participants (excluding optional filters) of a conversation.\n * Returned data structure mirrors Supabase `.from().select()` call so\n * callers can destructure `{ data, error }` just like a direct query.\n *\n * NOTE: We intentionally keep this lightweight – any additional profile\n * fields should be added by callers via `select()` if/when needed.\n *\n * @param conversationId The conversation to fetch participants for\n */\nexport const getConversationParticipants = async (\n  conversationId: string\n) => {\n  return supabase\n    .from('conversation_participants')\n    .select('user_id, display_name, photo_url')\n    .eq('conversation_id', conversationId);\n};\n\n/**\n * Get all conversations for the current user\n * @param userId The ID of the current user\n * @returns Array of conversations with last message and unread count\n */\nexport const getConversations = async (userId: string): Promise<Conversation[]> => {\n  try {\n    // Try to use the RPC function first (most efficient)\n    const { data: conversationsData, error: conversationsError } = await supabase\n      .rpc('get_user_conversations', { user_id: userId });\n      \n    if (!conversationsError && conversationsData) {\n      // console.log('Got conversations from RPC:', conversationsData);\n      return conversationsData;\n    }\n    \n    console.error('Error fetching conversations with RPC, falling back to query:', conversationsError);\n    \n    // Fallback to querying directly\n    const { data: participationsData, error: participationsError } = await supabase\n      .from('conversation_participants')\n      .select(`\n        conversation_id,\n        unread_count,\n        conversations!inner(\n          id, \n          type, \n          show_id, \n          last_message_text, \n          last_message_timestamp\n        )\n      `)\n      .eq('user_id', userId);\n      \n    if (participationsError) {\n      console.error('Error fetching conversations', participationsError);\n      throw new Error('Failed to fetch conversations');\n    }\n    \n    if (!participationsData || participationsData.length === 0) {\n      return [];\n    }\n    \n    // Get all conversation IDs\n    const conversationIds = participationsData.map(p => p.conversation_id);\n    \n    // Get all participants for these conversations\n    const { data: allParticipantsData, error: allParticipantsError } = await supabase\n      .from('conversation_participants')\n      .select(`\n        conversation_id,\n        user_id,\n        display_name,\n        photo_url\n      `)\n      .in('conversation_id', conversationIds)\n      .neq('user_id', userId);\n      \n    if (allParticipantsError) {\n      console.error('Error fetching participants', allParticipantsError);\n      // Continue with partial data\n    }\n    \n    // Group participants by conversation\n    const participantsByConversation: Record<string, any[]> = {};\n    \n    if (allParticipantsData) {\n      allParticipantsData.forEach(participant => {\n        if (!participantsByConversation[participant.conversation_id]) {\n          participantsByConversation[participant.conversation_id] = [];\n        }\n        participantsByConversation[participant.conversation_id].push({\n          user_id: participant.user_id,\n          display_name: participant.display_name,\n          photo_url: participant.photo_url\n        });\n      });\n    }\n    \n    // Build conversations data structure\n    const conversations: Conversation[] = participationsData.map(p => {\n      const convo = p.conversations;\n      return {\n        id: convo.id,\n        type: convo.type,\n        show_id: convo.show_id,\n        participant_count: (participantsByConversation[convo.id]?.length || 0) + 1, // +1 for self\n        last_message_text: convo.last_message_text,\n        last_message_timestamp: convo.last_message_timestamp,\n        unread_count: p.unread_count || 0,\n        participants: participantsByConversation[convo.id] || []\n      };\n    });\n    \n    // Sort by most recent message\n    return conversations.sort((a, b) => {\n      const timeA = a.last_message_timestamp ? new Date(a.last_message_timestamp).getTime() : 0;\n      const timeB = b.last_message_timestamp ? new Date(b.last_message_timestamp).getTime() : 0;\n      return timeB - timeA;\n    });\n  } catch (error) {\n    console.error('Error in getConversations:', error);\n    throw error;\n  }\n};\n\n// ---------------------------------------------------------------------------\n//  Message functions\n// ---------------------------------------------------------------------------\n\n/**\n * Get messages for a specific conversation\n * @param conversationId The ID of the conversation\n * @returns Array of messages in the conversation\n */\nexport const getMessages = async (conversationId: string): Promise<Message[]> => {\n  try {\n    // Get messages with joined profiles\n    const { data, error } = await supabase\n      .from('messages')\n      .select(`\n        id,\n        conversation_id,\n        sender_id,\n        message_text,\n        created_at,\n        read_by_user_ids,\n        profiles!sender_profile:sender_id(\n          id,\n          username,\n          full_name,\n          avatar_url\n        )\n      `)\n      .eq('conversation_id', conversationId)\n      .order('created_at', { ascending: true });\n      \n    if (error) {\n      console.error('Error fetching messages:', error);\n      throw new Error('Failed to fetch messages');\n    }\n    \n    return data || [];\n  } catch (error) {\n    console.error('Error in getMessages:', error);\n    throw error;\n  }\n};\n\n/**\n * Send a new message in a conversation\n * @param senderId The ID of the sender\n * @param recipientId The ID of the recipient (for direct messages)\n * @param messageText The message content\n * @param conversationId The existing conversation ID (optional)\n * @returns The newly created message\n */\nexport const sendMessage = async (\n  senderId: string,\n  recipientId: string,\n  messageText: string,\n  conversationId?: string\n): Promise<Message> => {\n  try {\n    /* ------------------------------------------------------------------\n     * Role-based permission checks\n     * ------------------------------------------------------------------ */\n    if (!userRoleService.IS_TEST_MODE) {\n      const [senderRole, recipientRole] = await Promise.all([\n        userRoleService.getUserRole(senderId),\n        userRoleService.getUserRole(recipientId),\n      ]);\n\n      if (!senderRole || !recipientRole) {\n        throw new Error('Unable to determine user roles');\n      }\n\n      // If conversation already exists the sender might just be replying\n      // – apply `canReply` check in that case.\n      if (conversationId) {\n        if (!userRoleService.canReplyToMessage(senderRole)) {\n          throw new Error('Your role does not allow replying to messages');\n        }\n      } else {\n        // New DM – validate sender→recipient rule\n        if (\n          !userRoleService.canSendDirectMessage(\n            senderRole,\n            recipientRole,\n          )\n        ) {\n          throw new Error('You are not allowed to start a conversation with this user');\n        }\n      }\n    }\n\n    // Ensure we have a conversation ID\n    const finalConversationId = conversationId || await createDirectConversation(senderId, recipientId);\n    \n    // Insert the message\n    const { data: newMessage, error: messageError } = await supabase\n      .from('messages')\n      .insert({\n        conversation_id: finalConversationId,\n        sender_id: senderId,\n        message_text: messageText,\n        read_by_user_ids: [senderId] // Sender has automatically read their own message\n      })\n      .select()\n      .single();\n      \n    if (messageError) {\n      console.error('Error sending message:', messageError);\n      throw new Error('Failed to send message');\n    }\n    \n    // The conversation last message update and participant unread count\n    // update should happen via database triggers, but we'll update manually\n    // as a fallback in case the trigger fails\n    try {\n      // Update the conversation's last message info\n      await supabase\n        .from('conversations')\n        .update({\n          last_message_text: messageText,\n          last_message_timestamp: new Date().toISOString()\n        })\n        .eq('id', finalConversationId);\n        \n      // Increment unread count for recipients\n      await supabase\n        .from('conversation_participants')\n        .update({ unread_count: supabase.rpc('increment_unread') })\n        .eq('conversation_id', finalConversationId)\n        .neq('user_id', senderId);\n    } catch (updateError) {\n      console.error('Failed to update conversation metadata:', updateError);\n      // Continue since the message was sent successfully\n    }\n    \n    return newMessage;\n  } catch (error) {\n    console.error('Error in sendMessage:', error);\n    throw error;\n  }\n};\n\n/**\n * Send a message to a group conversation\n * @param senderId The ID of the sender\n * @param conversationId The ID of the group conversation\n * @param messageText The message content\n * @returns The newly created message\n */\nexport const sendGroupMessage = async (\n  senderId: string,\n  conversationId: string,\n  messageText: string\n): Promise<Message> => {\n  try {\n    // Check if the user is part of this conversation\n    const { data: participantCheck, error: participantCheckError } = await supabase\n      .from('conversation_participants')\n      .select('user_id')\n      .eq('conversation_id', conversationId)\n      .eq('user_id', senderId)\n      .single();\n    \n    if (participantCheckError || !participantCheck) {\n      throw new Error('You are not a participant in this conversation');\n    }\n    \n    // Insert the message\n    const { data: newMessage, error: messageError } = await supabase\n      .from('messages')\n      .insert({\n        conversation_id: conversationId,\n        sender_id: senderId,\n        message_text: messageText,\n        read_by_user_ids: [senderId] // Sender has automatically read their own message\n      })\n      .select()\n      .single();\n      \n    if (messageError) {\n      console.error('Error sending group message:', messageError);\n      throw new Error('Failed to send message');\n    }\n    \n    // Update the conversation's last message info\n    await supabase\n      .from('conversations')\n      .update({\n        last_message_text: messageText,\n        last_message_timestamp: new Date().toISOString()\n      })\n      .eq('id', conversationId);\n      \n    // Increment unread count for all other participants\n    await supabase\n      .from('conversation_participants')\n      .update({ unread_count: supabase.rpc('increment_unread') })\n      .eq('conversation_id', conversationId)\n      .neq('user_id', senderId);\n    \n    return newMessage;\n  } catch (error) {\n    console.error('Error in sendGroupMessage:', error);\n    throw error;\n  }\n};\n\n/**\n * Send a broadcast message to multiple recipients based on their roles.\n * This creates a group conversation and sends the initial message.\n * \n * @param params Object containing senderId, message, recipientRoles, and optional showId\n * @returns The conversation ID of the newly created group\n */\nexport const sendBroadcastMessage = async (\n  params: BroadcastMessageParams\n): Promise<string> => {\n  const { senderId, message, recipientRoles, showId } = params;\n  \n  try {\n    // ------------------------------------------------------------------\n    // 1. Call the edge function which performs all permission / quota work\n    // ------------------------------------------------------------------\n\n    const { data, error } = await supabase.functions.invoke(\n      'send-broadcast',\n      {\n        body: {\n          sender_id: senderId,\n          message,\n          recipient_roles: recipientRoles,\n          show_id: showId,\n          is_pre_show: params.isPreShow,\n        },\n      },\n    );\n\n    if (error) {\n      console.error('[messagingService/sendBroadcastMessage] edge-function error', error);\n      throw new Error(error.message || 'Failed to send broadcast message');\n    }\n\n    if (!data?.conversation_id) {\n      throw new Error('Unexpected response from broadcast service');\n    }\n\n    return data.conversation_id as string;\n  } catch (error) {\n    console.error('Error in sendBroadcastMessage:', error);\n    throw error;\n  }\n};\n\n// ---------------------------------------------------------------------------\n//  Moderation helpers\n// ---------------------------------------------------------------------------\n\n/**\n * Soft delete / moderate a message.  Only show organisers (their shows)\n * or admins can perform this action (enforced server-side).\n */\nexport const moderateMessage = async (\n  moderatorId: string,\n  messageId: string,\n  reason = 'Content violation',\n): Promise<boolean> => {\n  try {\n    const { data, error } = await supabase.rpc(\n      'moderate_delete_message',\n      {\n        p_message_id: messageId,\n        p_moderator_id: moderatorId,\n        p_reason: reason,\n      },\n    );\n    if (error) throw error;\n    return data as boolean;\n  } catch (err) {\n    console.error('[messagingService/moderateMessage]', err);\n    return false;\n  }\n};\n\n/**\n * Report a message as inappropriate.  Anyone in the conversation can report.\n */\nexport const reportMessage = async (\n  reporterId: string,\n  messageId: string,\n  reason: string,\n): Promise<boolean> => {\n  try {\n    const { data, error } = await supabase.rpc(\n      'report_message',\n      {\n        p_message_id: messageId,\n        p_reporter_id: reporterId,\n        p_reason: reason,\n      },\n    );\n    if (error) throw error;\n    return data as boolean;\n  } catch (err) {\n    console.error('[messagingService/reportMessage]', err);\n    return false;\n  }\n};\n\n/**\n * Mark a single message as read\n * @param messageId The ID of the message\n * @param userId The ID of the current user\n * @returns Boolean indicating success\n */\nexport const markMessageAsRead = async (\n  messageId: string,\n  userId: string\n): Promise<boolean> => {\n  try {\n    // Check if the user is already in read_by_user_ids\n    const { data: message } = await supabase\n      .from('messages')\n      .select('read_by_user_ids')\n      .eq('id', messageId)\n      .single();\n      \n    if (!message) {\n      return false;\n    }\n    \n    if (message.read_by_user_ids && message.read_by_user_ids.includes(userId)) {\n      // Already marked as read\n      return true;\n    }\n    \n    // Update read_by_user_ids\n    const { error } = await supabase\n      .from('messages')\n      .update({\n        read_by_user_ids: [...(message.read_by_user_ids || []), userId]\n      })\n      .eq('id', messageId);\n      \n    if (error) {\n      console.error('Error marking message as read:', error);\n      return false;\n    }\n    \n    // Try to update unread count in conversation_participants\n    try {\n      const { data: msgData } = await supabase\n        .from('messages')\n        .select('conversation_id')\n        .eq('id', messageId)\n        .single();\n        \n      if (msgData) {\n        await decrementUnreadCount(msgData.conversation_id, userId);\n      }\n    } catch (error) {\n      console.error('Error updating unread count:', error);\n      // Continue since the message was marked as read\n    }\n    \n    return true;\n  } catch (error) {\n    console.error('Error in markMessageAsRead:', error);\n    return false;\n  }\n};\n\n/**\n * Mark all messages in a conversation as read\n * @param conversationId The ID of the conversation\n * @param userId The ID of the current user\n * @returns Number of messages marked as read\n */\nexport const markConversationAsRead = async (\n  conversationId: string,\n  userId: string\n): Promise<number> => {\n  try {\n    // First get all unread messages in the conversation\n    const { data: messages } = await supabase\n      .from('messages')\n      .select('id, read_by_user_ids')\n      .eq('conversation_id', conversationId)\n      .not('read_by_user_ids', 'cs', `{${userId}}`);\n      \n    if (!messages || messages.length === 0) {\n      return 0;\n    }\n    \n    // Update each message\n    let updatedCount = 0;\n    \n    for (const message of messages) {\n      const { error } = await supabase\n        .from('messages')\n        .update({\n          read_by_user_ids: [...(message.read_by_user_ids || []), userId]\n        })\n        .eq('id', message.id);\n        \n      if (!error) {\n        updatedCount++;\n      }\n    }\n    \n    // Reset unread count in conversation_participants\n    if (updatedCount > 0) {\n      await supabase\n        .from('conversation_participants')\n        .update({ unread_count: 0 })\n        .eq('conversation_id', conversationId)\n        .eq('user_id', userId);\n    }\n    \n    return updatedCount;\n  } catch (error) {\n    console.error('Error in markConversationAsRead:', error);\n    throw error;\n  }\n};\n\n/**\n * Helper function to decrement unread count for a user in a conversation\n */\nconst decrementUnreadCount = async (conversationId: string, userId: string): Promise<void> => {\n  try {\n    await supabase\n      .from('conversation_participants')\n      .update({ \n        unread_count: supabase.rpc('decrement_unread') \n      })\n      .eq('conversation_id', conversationId)\n      .eq('user_id', userId);\n  } catch (error) {\n    console.error('Error decrementing unread count:', error);\n  }\n};\n\n/**\n * Subscribe to realtime messages for a conversation\n * @param conversationId The conversation to monitor\n * @param onNewMessage Callback function when new messages arrive\n * @returns Supabase channel subscription that caller should unsubscribe from\n */\nexport const subscribeToMessages = (\n  conversationId: string,\n  onNewMessage: (message: Message) => void\n) => {\n  const channel = supabase\n    .channel(`messages:${conversationId}`)\n    .on('postgres_changes', {\n      event: 'INSERT',\n      schema: 'public',\n      table: 'messages',\n      filter: `conversation_id=eq.${conversationId}`\n    }, (payload) => {\n      onNewMessage(payload.new as unknown as Message);\n    })\n    .subscribe();\n    \n  return channel;\n};\n\n/**\n * Get total unread message count across all conversations\n * @param userId User ID to check for\n * @returns Total number of unread messages\n */\nexport const getTotalUnreadCount = async (userId: string): Promise<number> => {\n  try {\n    const { data, error } = await supabase\n      .from('conversation_participants')\n      .select('unread_count')\n      .eq('user_id', userId);\n      \n    if (error) {\n      console.error('Error fetching unread count:', error);\n      return 0;\n    }\n    \n    return data.reduce((total, item) => total + (item.unread_count || 0), 0);\n  } catch (error) {\n    console.error('Error in getTotalUnreadCount:', error);\n    return 0;\n  }\n};\n"],"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","ignoreList":[]}