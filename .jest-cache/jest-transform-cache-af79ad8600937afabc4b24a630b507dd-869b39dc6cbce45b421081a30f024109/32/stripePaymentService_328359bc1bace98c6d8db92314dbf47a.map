{"version":3,"names":["supabase","SUBSCRIPTION_PLANS","calculateExpiryDate","UserRole","STRIPE_PUBLISHABLE_KEY","cov_2672s7zqdg","s","_env","EXPO_PUBLIC_STRIPE_PUBLISHABLE_KEY","SUPABASE_EDGE_FUNCTION_URL","EXPO_PUBLIC_SUPABASE_URL","initializeStripe","f","b","console","error","createPaymentSheetForSubscription","_ref","_asyncToGenerator","userId","planId","initPaymentSheet","presentPaymentSheet","plan","find","p","id","success","_supabase$auth$getSes","response","fetch","method","headers","auth","getSession","data","session","access_token","body","JSON","stringify","amount","price","currency","ok","errorBody","json","Error","_ref2","paymentIntent","ephemeralKey","customer","_ref3","merchantDisplayName","customerId","customerEphemeralKeySecret","paymentIntentClientSecret","allowsDelayedPaymentMethods","returnURL","initError","logPayment","user_id","plan_id","status","transaction_id","error_message","message","_ref4","presentError","code","processSubscriptionUpdate","transactionId","_x","_x2","_x3","_x4","apply","arguments","_ref5","expiryDate","newRole","type","MVP_DEALER","SHOW_ORGANIZER","updateUserProfileWithSubscription","toISOString","_x5","_x6","_x7","_ref6","expiryDateISO","_ref7","from","update","role","subscription_status","payment_status","subscription_expiry","updated_at","Date","eq","_x8","_x9","_x0","_ref8","paymentData","_ref9","insert","_x1"],"sources":["stripePaymentService.ts"],"sourcesContent":["import { StripeProvider, useStripe } from '@stripe/stripe-react-native';\nimport { supabase } from '../supabase';\nimport { SubscriptionPlan, SUBSCRIPTION_PLANS, calculateExpiryDate } from './subscriptionTypes';\nimport { UserRole } from './userRoleService';\n\n// --- Type Definitions ---\n\n/**\n * Represents the outcome of a payment operation.\n */\nexport interface StripePaymentResult {\n  success: boolean;\n  error?: string;\n  transactionId?: string;\n}\n\n/**\n * Defines the expected JSON response from the backend (Supabase Edge Function)\n * when creating a payment intent.\n */\ninterface PaymentIntentResponse {\n  paymentIntent: string; // The Payment Intent client secret\n  ephemeralKey: string;  // The Ephemeral Key secret for the customer\n  customer: string;      // The Stripe Customer ID\n  publishableKey: string; // The Stripe publishable key\n}\n\n/**\n * Defines the structure for logging a payment transaction in Supabase.\n */\ninterface PaymentLog {\n  id?: string;\n  user_id: string;\n  plan_id: string;\n  amount: number;\n  currency: string;\n  status: 'succeeded' | 'failed' | 'pending';\n  transaction_id: string; // Stripe Payment Intent ID\n  error_message?: string;\n  created_at?: string;\n}\n\n// --- Constants ---\n\n// It's crucial to load this from environment variables and not hardcode it.\nconst STRIPE_PUBLISHABLE_KEY = process.env.EXPO_PUBLIC_STRIPE_PUBLISHABLE_KEY;\nconst SUPABASE_EDGE_FUNCTION_URL = `${process.env.EXPO_PUBLIC_SUPABASE_URL}/functions/v1/create-payment-intent`;\n\n// --- Service Implementation ---\n\n/**\n * Initializes the Stripe SDK.\n * This should be called once at the root of your application.\n * @returns {boolean} True if initialization was successful, false otherwise.\n */\nexport const initializeStripe = (): boolean => {\n  if (!STRIPE_PUBLISHABLE_KEY) {\n    console.error('Stripe publishable key is not set. Please check your environment variables.');\n    return false;\n  }\n  // The StripeProvider component handles initialization. This function is for validation.\n  return true;\n};\n\n/**\n * Creates and presents the Stripe Payment Sheet for a given subscription plan.\n * This function orchestrates the entire client-side payment flow.\n *\n * @param userId - The ID of the user purchasing the subscription.\n * @param planId - The ID of the subscription plan being purchased.\n * @param initPaymentSheet - The `initPaymentSheet` function from the `useStripe` hook.\n * @param presentPaymentSheet - The `presentPaymentSheet` function from the `useStripe` hook.\n * @returns {Promise<StripePaymentResult>} The result of the payment operation.\n */\nexport const createPaymentSheetForSubscription = async (\n  userId: string,\n  planId: string,\n  initPaymentSheet: (params: any) => Promise<any>,\n  presentPaymentSheet: () => Promise<any>\n): Promise<StripePaymentResult> => {\n  const plan = SUBSCRIPTION_PLANS.find(p => p.id === planId);\n  if (!plan) {\n    return { success: false, error: 'Subscription plan not found.' };\n  }\n\n  try {\n    // 1. Create a payment intent on the server (via Supabase Edge Function)\n    const response = await fetch(SUPABASE_EDGE_FUNCTION_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${supabase.auth.getSession()?.data.session?.access_token}`,\n      },\n      body: JSON.stringify({\n        amount: plan.price * 100, // Stripe expects amount in cents\n        currency: 'usd',\n        userId: userId,\n        planId: plan.id,\n      }),\n    });\n\n    if (!response.ok) {\n      const errorBody = await response.json();\n      throw new Error(errorBody.error || 'Failed to create payment intent.');\n    }\n\n    const { paymentIntent, ephemeralKey, customer }: PaymentIntentResponse = await response.json();\n\n    // 2. Initialize the Payment Sheet\n    const { error: initError } = await initPaymentSheet({\n      merchantDisplayName: 'Card Show Finder, LLC.',\n      customerId: customer,\n      customerEphemeralKeySecret: ephemeralKey,\n      paymentIntentClientSecret: paymentIntent,\n      allowsDelayedPaymentMethods: true,\n      returnURL: 'cardshowfinder://stripe-redirect', // Custom URL scheme\n    });\n\n    if (initError) {\n      console.error('Stripe initPaymentSheet error:', initError);\n      await logPayment({\n        user_id: userId,\n        plan_id: plan.id,\n        amount: plan.price,\n        currency: 'usd',\n        status: 'failed',\n        transaction_id: paymentIntent,\n        error_message: `Init Error: ${initError.message}`,\n      });\n      return { success: false, error: `Initialization failed: ${initError.message}` };\n    }\n\n    // 3. Present the Payment Sheet\n    const { error: presentError } = await presentPaymentSheet();\n\n    if (presentError) {\n      // User cancelled or payment failed\n      if (presentError.code === 'Canceled') {\n        return { success: false, error: 'Payment was canceled.' };\n      }\n      console.error('Stripe presentPaymentSheet error:', presentError);\n      await logPayment({\n        user_id: userId,\n        plan_id: plan.id,\n        amount: plan.price,\n        currency: 'usd',\n        status: 'failed',\n        transaction_id: paymentIntent,\n        error_message: `Present Error: ${presentError.message}`,\n      });\n      return { success: false, error: `Payment failed: ${presentError.message}` };\n    }\n\n    // 4. Payment succeeded, process the subscription\n    await processSubscriptionUpdate(userId, plan, paymentIntent);\n\n    return { success: true, transactionId: paymentIntent };\n\n  } catch (error: any) {\n    console.error('An unexpected error occurred during payment:', error);\n    return { success: false, error: error.message || 'An unknown error occurred.' };\n  }\n};\n\n/**\n * Handles the logic after a successful payment: calculates expiry, updates the user's profile,\n * and logs the transaction.\n *\n * @param userId - The ID of the user.\n * @param plan - The subscription plan that was purchased.\n * @param transactionId - The Stripe Payment Intent ID for logging.\n */\nexport const processSubscriptionUpdate = async (\n  userId: string,\n  plan: SubscriptionPlan,\n  transactionId: string\n): Promise<void> => {\n  try {\n    /**\n     * Calculate the expiry date for the **paid** subscription.\n     * We intentionally ignore any free-trial data here because an upgrade\n     * should terminate the trial and start the paid period immediately.\n     * The helper in `subscriptionTypes` already encodes:\n     *   • Annual  → +365 days\n     *   • Monthly → +30  days\n     */\n    const expiryDate = calculateExpiryDate(plan);\n\n    // Determine the new role based on the subscription type\n    const newRole = plan.type === 'dealer' ? UserRole.MVP_DEALER : UserRole.SHOW_ORGANIZER;\n\n    // Update user profile in Supabase\n    await updateUserProfileWithSubscription(userId, newRole, expiryDate.toISOString());\n\n    // Log the successful payment\n    await logPayment({\n      user_id: userId,\n      plan_id: plan.id,\n      amount: plan.price,\n      currency: 'usd',\n      status: 'succeeded',\n      transaction_id: transactionId,\n    });\n\n  } catch (error) {\n    console.error('Failed to process subscription update after payment:', error);\n    // Even if post-payment processing fails, the payment was successful.\n    // This should be handled with a reconciliation process or monitoring.\n    // For now, we log the error.\n    await logPayment({\n      user_id: userId,\n      plan_id: plan.id,\n      amount: plan.price,\n      currency: 'usd',\n      status: 'failed', // Log as 'failed' to indicate a processing failure post-payment\n      transaction_id: transactionId,\n      error_message: 'Post-payment profile update failed.',\n    });\n  }\n};\n\n/**\n * Updates the user's profile in the Supabase 'profiles' table with new subscription details.\n *\n * @param userId - The user's ID.\n * @param newRole - The new role to assign to the user.\n * @param expiryDateISO - The ISO string of the subscription expiry date.\n */\nconst updateUserProfileWithSubscription = async (\n  userId: string,\n  newRole: UserRole,\n  expiryDateISO: string\n): Promise<void> => {\n  const { error } = await supabase\n    .from('profiles')\n    .update({\n      role: newRole,\n      subscription_status: 'active',\n      // Mark the user as having completed payment so UI does not show “Trial” banners\n      payment_status: 'paid',\n      subscription_expiry: expiryDateISO,\n      updated_at: new Date().toISOString(),\n    })\n    .eq('id', userId);\n\n  if (error) {\n    console.error('Error updating user profile with subscription:', error);\n    throw new Error('Failed to update user profile after payment.');\n  }\n};\n\n/**\n * Logs a payment transaction to the 'payments' table in Supabase.\n *\n * @param paymentData - The payment details to log.\n */\nconst logPayment = async (paymentData: PaymentLog): Promise<void> => {\n  const { error } = await supabase.from('payments').insert(paymentData);\n\n  if (error) {\n    console.error('Error logging payment transaction:', error);\n    // This is a non-critical error for the user flow, but important for analytics/debugging.\n  }\n};\n"],"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","ignoreList":[]}