{"version":3,"names":["_asyncStorage","_interopRequireDefault","require","ErrorSeverity","exports","ErrorCategory","defaultConfig","enableConsoleLogging","enableRemoteLogging","enableStorageLogging","maxStoredErrors","currentConfig","Object","assign","configureErrorService","config","handleSupabaseError","error","context","severity","arguments","length","undefined","ERROR","isPostgrestError","message","code","category","determineErrorCategory","originalError","timestamp","Date","Error","UNKNOWN","handleNetworkError","appError","NETWORK","logError","handleAuthError","AUTHENTICATION","createValidationError","VALIDATION","WARNING","createPermissionError","PERMISSION","console","toUpperCase","storeErrorInStorage","catch","e","_x","_storeErrorInStorage","apply","_asyncToGenerator2","default","storedErrorsJson","AsyncStorage","getItem","storedErrors","JSON","parse","push","slice","setItem","stringify","_e","getStoredErrors","_getStoredErrors","clearStoredErrors","_clearStoredErrors","getUserFriendlyMessage","defaultMessages","_defineProperty2","DATABASE","isUserFriendlyMessage","_error$code","_error$code2","_error$code3","_error$code4","startsWith","msg","toLowerCase","includes","technicalTerms","lowercaseMsg","some","term","withErrorHandling","fn","errorHandler","_len","args","Array","_key","functionName","name"],"sources":["errorService.ts"],"sourcesContent":["import { PostgrestError } from '@supabase/supabase-js';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n/**\n * Error severity levels for logging and reporting\n */\nexport enum ErrorSeverity {\n  INFO = 'info',\n  WARNING = 'warning',\n  ERROR = 'error',\n  CRITICAL = 'critical',\n}\n\n/**\n * Error categories to classify different types of errors\n */\nexport enum ErrorCategory {\n  DATABASE = 'database',\n  AUTHENTICATION = 'authentication',\n  NETWORK = 'network',\n  VALIDATION = 'validation',\n  PERMISSION = 'permission',\n  UNKNOWN = 'unknown',\n}\n\n/**\n * Structured error object for consistent error handling\n */\nexport interface AppError {\n  message: string;\n  code?: string;\n  category: ErrorCategory;\n  severity: ErrorSeverity;\n  originalError?: any;\n  context?: Record<string, any>;\n  timestamp: Date;\n}\n\n/**\n * Configuration for error service behavior\n */\ninterface ErrorServiceConfig {\n  enableConsoleLogging: boolean;\n  enableRemoteLogging: boolean;\n  enableStorageLogging: boolean;\n  maxStoredErrors: number;\n}\n\n// Default configuration\nconst defaultConfig: ErrorServiceConfig = {\n  enableConsoleLogging: true,\n  enableRemoteLogging: false, // Disabled by default until a remote service is configured\n  enableStorageLogging: true,\n  maxStoredErrors: 100,\n};\n\n// Current configuration\nlet currentConfig: ErrorServiceConfig = { ...defaultConfig };\n\n/**\n * Configure error service behavior\n */\nexport function configureErrorService(config: Partial<ErrorServiceConfig>): void {\n  currentConfig = { ...currentConfig, ...config };\n}\n\n/**\n * Process a Supabase PostgrestError into our standard AppError format\n */\nexport function handleSupabaseError(\n  error: PostgrestError | Error | unknown,\n  context?: Record<string, any>,\n  severity: ErrorSeverity = ErrorSeverity.ERROR\n): AppError {\n  // Handle PostgrestError type from Supabase\n  if (isPostgrestError(error)) {\n    return {\n      message: error.message || 'Database operation failed',\n      code: error.code,\n      category: determineErrorCategory(error),\n      severity,\n      originalError: error,\n      context,\n      timestamp: new Date(),\n    };\n  }\n\n  // Handle generic Error objects\n  if (error instanceof Error) {\n    return {\n      message: error.message || 'An unexpected error occurred',\n      category: ErrorCategory.UNKNOWN,\n      severity,\n      originalError: error,\n      context,\n      timestamp: new Date(),\n    };\n  }\n\n  // Handle unknown error types\n  return {\n    message: 'An unknown error occurred',\n    category: ErrorCategory.UNKNOWN,\n    severity,\n    originalError: error,\n    context,\n    timestamp: new Date(),\n  };\n}\n\n/**\n * Handle network-related errors\n */\nexport function handleNetworkError(\n  error: Error | unknown,\n  context?: Record<string, any>\n): AppError {\n  const appError: AppError = {\n    message: error instanceof Error ? error.message : 'Network connection failed',\n    category: ErrorCategory.NETWORK,\n    severity: ErrorSeverity.ERROR,\n    originalError: error,\n    context,\n    timestamp: new Date(),\n  };\n\n  logError(appError);\n  return appError;\n}\n\n/**\n * Handle authentication-related errors\n */\nexport function handleAuthError(\n  error: Error | unknown,\n  context?: Record<string, any>\n): AppError {\n  const appError: AppError = {\n    message: error instanceof Error ? error.message : 'Authentication failed',\n    category: ErrorCategory.AUTHENTICATION,\n    severity: ErrorSeverity.ERROR,\n    originalError: error,\n    context,\n    timestamp: new Date(),\n  };\n\n  logError(appError);\n  return appError;\n}\n\n/**\n * Create a validation error when input validation fails\n */\nexport function createValidationError(\n  message: string,\n  context?: Record<string, any>\n): AppError {\n  const appError: AppError = {\n    message,\n    category: ErrorCategory.VALIDATION,\n    severity: ErrorSeverity.WARNING,\n    context,\n    timestamp: new Date(),\n  };\n\n  logError(appError);\n  return appError;\n}\n\n/**\n * Create a permission error when user lacks required permissions\n */\nexport function createPermissionError(\n  message: string = 'You do not have permission to perform this action',\n  context?: Record<string, any>\n): AppError {\n  const appError: AppError = {\n    message,\n    category: ErrorCategory.PERMISSION,\n    severity: ErrorSeverity.WARNING,\n    context,\n    timestamp: new Date(),\n  };\n\n  logError(appError);\n  return appError;\n}\n\n/**\n * Log an error based on current configuration\n */\nexport function logError(error: AppError): void {\n  // Console logging\n  if (currentConfig.enableConsoleLogging) {\n    console.error(\n      `[${error.severity.toUpperCase()}] [${error.category}] ${error.message}`,\n      {\n        code: error.code,\n        context: error.context,\n        timestamp: error.timestamp,\n        originalError: error.originalError,\n      }\n    );\n  }\n\n  // Store error in AsyncStorage for later retrieval\n  if (currentConfig.enableStorageLogging) {\n    storeErrorInStorage(error).catch(e => \n      console.error('Failed to store error in AsyncStorage:', e)\n    );\n  }\n\n  // Remote logging could be implemented here\n  if (currentConfig.enableRemoteLogging) {\n    // Implementation would depend on the remote logging service\n    // sendErrorToRemoteService(_error);\n  }\n}\n\n/**\n * Store errors in AsyncStorage for later retrieval\n */\nasync function storeErrorInStorage(error: AppError): Promise<void> {\n  try {\n    // Get existing errors\n    const storedErrorsJson = await AsyncStorage.getItem('app_errors');\n    let storedErrors: AppError[] = storedErrorsJson ? JSON.parse(storedErrorsJson) : [];\n\n    // Add new error\n    storedErrors.push(error);\n\n    // Limit the number of stored errors\n    if (storedErrors.length > currentConfig.maxStoredErrors) {\n      storedErrors = storedErrors.slice(-currentConfig.maxStoredErrors);\n    }\n\n    // Save back to storage\n    await AsyncStorage.setItem('app_errors', JSON.stringify(storedErrors));\n  } catch (_e) {\n    // Fail silently, but log to console\n    console.error('Error storing error in AsyncStorage:', _e);\n  }\n}\n\n/**\n * Retrieve stored errors from AsyncStorage\n */\nexport async function getStoredErrors(): Promise<AppError[]> {\n  try {\n    const storedErrorsJson = await AsyncStorage.getItem('app_errors');\n    return storedErrorsJson ? JSON.parse(storedErrorsJson) : [];\n  } catch (_e) {\n    console.error('Error retrieving errors from AsyncStorage:', _e);\n    return [];\n  }\n}\n\n/**\n * Clear stored errors from AsyncStorage\n */\nexport async function clearStoredErrors(): Promise<void> {\n  try {\n    await AsyncStorage.setItem('app_errors', JSON.stringify([]));\n  } catch (_e) {\n    console.error('Error clearing errors from AsyncStorage:', _e);\n  }\n}\n\n/**\n * Get a user-friendly error message based on the error category and code\n */\nexport function getUserFriendlyMessage(error: AppError): string {\n  // Default messages by category\n  const defaultMessages: Record<ErrorCategory, string> = {\n    [ErrorCategory.DATABASE]: 'There was a problem accessing the database.',\n    [ErrorCategory.AUTHENTICATION]: 'There was a problem with your account authentication.',\n    [ErrorCategory.NETWORK]: 'Network connection issue. Please check your internet connection.',\n    [ErrorCategory.VALIDATION]: 'Some information you entered is not valid.',\n    [ErrorCategory.PERMISSION]: 'You do not have permission to perform this action.',\n    [ErrorCategory.UNKNOWN]: 'An unexpected error occurred. Please try again later.',\n  };\n\n  // Specific error code handling\n  if (error.code) {\n    switch (error.code) {\n      case '23505': // PostgreSQL unique violation\n        return 'This information already exists in our system.';\n      case '42P01': // PostgreSQL undefined table\n        return 'We encountered a database configuration issue. Please contact support.';\n      case '42501': // PostgreSQL insufficient privilege\n        return 'You do not have permission to perform this action.';\n      case '23503': // PostgreSQL foreign key violation\n        return 'This operation cannot be completed because it references missing data.';\n      case 'PGRST301': // Supabase RLS policy violation\n        return 'Access denied due to security policy.';\n      case '401':\n      case 'auth/invalid-email':\n      case 'auth/user-not-found':\n      case 'auth/wrong-password':\n        return 'Invalid login credentials. Please check your email and password.';\n      case '403':\n        return 'You do not have permission to access this resource.';\n      case '404':\n        return 'The requested resource was not found.';\n      case '429':\n        return 'Too many requests. Please try again later.';\n      case '500':\n        return 'Server error. Please try again later.';\n      default:\n        // Use the original error message if it's user-friendly, otherwise use default\n        return isUserFriendlyMessage(error.message)\n          ? error.message\n          : defaultMessages[error.category];\n    }\n  }\n\n  // If no specific code handling, use the message if it's user-friendly\n  return isUserFriendlyMessage(error.message)\n    ? error.message\n    : defaultMessages[error.category];\n}\n\n/**\n * Type guard to check if an object is a PostgrestError\n */\nfunction isPostgrestError(error: any): error is PostgrestError {\n  return (\n    error &&\n    typeof error === 'object' &&\n    'code' in error &&\n    'message' in error &&\n    'details' in error\n  );\n}\n\n/**\n * Determine the error category based on the error\n */\nfunction determineErrorCategory(error: PostgrestError | Error): ErrorCategory {\n  if (isPostgrestError(error)) {\n    // PostgreSQL error codes\n    if (error.code?.startsWith('23')) return ErrorCategory.VALIDATION;\n    if (error.code?.startsWith('28') || error.code?.startsWith('42501')) return ErrorCategory.PERMISSION;\n    if (error.code?.startsWith('PGRST3')) return ErrorCategory.PERMISSION;\n    \n    return ErrorCategory.DATABASE;\n  }\n\n  // Check error message for common patterns\n  const msg = error.message.toLowerCase();\n  if (msg.includes('network') || msg.includes('connection')) return ErrorCategory.NETWORK;\n  if (msg.includes('auth') || msg.includes('login') || msg.includes('password')) return ErrorCategory.AUTHENTICATION;\n  if (msg.includes('permission') || msg.includes('access') || msg.includes('denied')) return ErrorCategory.PERMISSION;\n  if (msg.includes('valid') || msg.includes('required')) return ErrorCategory.VALIDATION;\n\n  return ErrorCategory.UNKNOWN;\n}\n\n/**\n * Check if a message is user-friendly enough to show directly\n */\nfunction isUserFriendlyMessage(message: string): boolean {\n  if (!message) return false;\n  \n  // Too technical or exposing implementation details\n  const technicalTerms = [\n    'undefined',\n    'null',\n    'NaN',\n    'exception',\n    'syntax error',\n    'unexpected token',\n    'stack',\n    'reference error',\n    'type error',\n    'cannot read property',\n    'is not a function',\n    'failed to fetch',\n    'network request failed',\n    'JSON',\n    'parse',\n    'promise',\n    'async',\n    'timeout',\n    'cors',\n    'xhr',\n    'http',\n    'ssl',\n    'certificate',\n    'localhost',\n    'port',\n    'proxy',\n    'socket',\n    'postgresql',\n    'supabase',\n    'database',\n    'query',\n    'sql',\n  ];\n\n  // Check if message contains technical terms\n  const lowercaseMsg = message.toLowerCase();\n  return !technicalTerms.some(term => lowercaseMsg.includes(term.toLowerCase()));\n}\n\n/**\n * Wrap a function with error handling\n */\nexport function withErrorHandling<T extends (...args: any[]) => Promise<any>>(\n  fn: T,\n  errorHandler?: (error: AppError) => void\n): (...args: Parameters<T>) => Promise<ReturnType<T>> {\n  return async (...args: Parameters<T>): Promise<ReturnType<T>> => {\n    try {\n      return await fn(...args);\n    } catch (error) {\n      const appError = handleSupabaseError(error, { functionName: fn.name, args });\n      \n      if (errorHandler) {\n        errorHandler(appError);\n      } else {\n        logError(appError);\n      }\n      \n      throw appError;\n    }\n  };\n}\n"],"mappings":"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","ignoreList":[]}