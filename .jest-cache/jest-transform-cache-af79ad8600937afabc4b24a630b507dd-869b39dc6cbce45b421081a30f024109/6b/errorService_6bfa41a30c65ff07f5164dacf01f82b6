61496f0a254615b58cda476adef6f6db
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ErrorSeverity = exports.ErrorCategory = void 0;
exports.clearStoredErrors = clearStoredErrors;
exports.configureErrorService = configureErrorService;
exports.createPermissionError = createPermissionError;
exports.createValidationError = createValidationError;
exports.getStoredErrors = getStoredErrors;
exports.getUserFriendlyMessage = getUserFriendlyMessage;
exports.handleAuthError = handleAuthError;
exports.handleNetworkError = handleNetworkError;
exports.handleSupabaseError = handleSupabaseError;
exports.logError = logError;
exports.withErrorHandling = withErrorHandling;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var ErrorSeverity = exports.ErrorSeverity = function (ErrorSeverity) {
  ErrorSeverity["INFO"] = "info";
  ErrorSeverity["WARNING"] = "warning";
  ErrorSeverity["ERROR"] = "error";
  ErrorSeverity["CRITICAL"] = "critical";
  return ErrorSeverity;
}({});
var ErrorCategory = exports.ErrorCategory = function (ErrorCategory) {
  ErrorCategory["DATABASE"] = "database";
  ErrorCategory["AUTHENTICATION"] = "authentication";
  ErrorCategory["NETWORK"] = "network";
  ErrorCategory["VALIDATION"] = "validation";
  ErrorCategory["PERMISSION"] = "permission";
  ErrorCategory["UNKNOWN"] = "unknown";
  return ErrorCategory;
}({});
var defaultConfig = {
  enableConsoleLogging: true,
  enableRemoteLogging: false,
  enableStorageLogging: true,
  maxStoredErrors: 100
};
var currentConfig = Object.assign({}, defaultConfig);
function configureErrorService(config) {
  currentConfig = Object.assign({}, currentConfig, config);
}
function handleSupabaseError(error, context) {
  var severity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ErrorSeverity.ERROR;
  if (isPostgrestError(error)) {
    return {
      message: error.message || 'Database operation failed',
      code: error.code,
      category: determineErrorCategory(error),
      severity: severity,
      originalError: error,
      context: context,
      timestamp: new Date()
    };
  }
  if (error instanceof Error) {
    return {
      message: error.message || 'An unexpected error occurred',
      category: ErrorCategory.UNKNOWN,
      severity: severity,
      originalError: error,
      context: context,
      timestamp: new Date()
    };
  }
  return {
    message: 'An unknown error occurred',
    category: ErrorCategory.UNKNOWN,
    severity: severity,
    originalError: error,
    context: context,
    timestamp: new Date()
  };
}
function handleNetworkError(error, context) {
  var appError = {
    message: error instanceof Error ? error.message : 'Network connection failed',
    category: ErrorCategory.NETWORK,
    severity: ErrorSeverity.ERROR,
    originalError: error,
    context: context,
    timestamp: new Date()
  };
  logError(appError);
  return appError;
}
function handleAuthError(error, context) {
  var appError = {
    message: error instanceof Error ? error.message : 'Authentication failed',
    category: ErrorCategory.AUTHENTICATION,
    severity: ErrorSeverity.ERROR,
    originalError: error,
    context: context,
    timestamp: new Date()
  };
  logError(appError);
  return appError;
}
function createValidationError(message, context) {
  var appError = {
    message: message,
    category: ErrorCategory.VALIDATION,
    severity: ErrorSeverity.WARNING,
    context: context,
    timestamp: new Date()
  };
  logError(appError);
  return appError;
}
function createPermissionError() {
  var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'You do not have permission to perform this action';
  var context = arguments.length > 1 ? arguments[1] : undefined;
  var appError = {
    message: message,
    category: ErrorCategory.PERMISSION,
    severity: ErrorSeverity.WARNING,
    context: context,
    timestamp: new Date()
  };
  logError(appError);
  return appError;
}
function logError(error) {
  if (currentConfig.enableConsoleLogging) {
    console.error(`[${error.severity.toUpperCase()}] [${error.category}] ${error.message}`, {
      code: error.code,
      context: error.context,
      timestamp: error.timestamp,
      originalError: error.originalError
    });
  }
  if (currentConfig.enableStorageLogging) {
    storeErrorInStorage(error).catch(function (e) {
      return console.error('Failed to store error in AsyncStorage:', e);
    });
  }
  if (currentConfig.enableRemoteLogging) {}
}
function storeErrorInStorage(_x) {
  return _storeErrorInStorage.apply(this, arguments);
}
function _storeErrorInStorage() {
  _storeErrorInStorage = (0, _asyncToGenerator2.default)(function* (error) {
    try {
      var storedErrorsJson = yield _asyncStorage.default.getItem('app_errors');
      var storedErrors = storedErrorsJson ? JSON.parse(storedErrorsJson) : [];
      storedErrors.push(error);
      if (storedErrors.length > currentConfig.maxStoredErrors) {
        storedErrors = storedErrors.slice(-currentConfig.maxStoredErrors);
      }
      yield _asyncStorage.default.setItem('app_errors', JSON.stringify(storedErrors));
    } catch (_e) {
      console.error('Error storing error in AsyncStorage:', _e);
    }
  });
  return _storeErrorInStorage.apply(this, arguments);
}
function getStoredErrors() {
  return _getStoredErrors.apply(this, arguments);
}
function _getStoredErrors() {
  _getStoredErrors = (0, _asyncToGenerator2.default)(function* () {
    try {
      var storedErrorsJson = yield _asyncStorage.default.getItem('app_errors');
      return storedErrorsJson ? JSON.parse(storedErrorsJson) : [];
    } catch (_e) {
      console.error('Error retrieving errors from AsyncStorage:', _e);
      return [];
    }
  });
  return _getStoredErrors.apply(this, arguments);
}
function clearStoredErrors() {
  return _clearStoredErrors.apply(this, arguments);
}
function _clearStoredErrors() {
  _clearStoredErrors = (0, _asyncToGenerator2.default)(function* () {
    try {
      yield _asyncStorage.default.setItem('app_errors', JSON.stringify([]));
    } catch (_e) {
      console.error('Error clearing errors from AsyncStorage:', _e);
    }
  });
  return _clearStoredErrors.apply(this, arguments);
}
function getUserFriendlyMessage(error) {
  var defaultMessages = (0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)((0, _defineProperty2.default)({}, ErrorCategory.DATABASE, 'There was a problem accessing the database.'), ErrorCategory.AUTHENTICATION, 'There was a problem with your account authentication.'), ErrorCategory.NETWORK, 'Network connection issue. Please check your internet connection.'), ErrorCategory.VALIDATION, 'Some information you entered is not valid.'), ErrorCategory.PERMISSION, 'You do not have permission to perform this action.'), ErrorCategory.UNKNOWN, 'An unexpected error occurred. Please try again later.');
  if (error.code) {
    switch (error.code) {
      case '23505':
        return 'This information already exists in our system.';
      case '42P01':
        return 'We encountered a database configuration issue. Please contact support.';
      case '42501':
        return 'You do not have permission to perform this action.';
      case '23503':
        return 'This operation cannot be completed because it references missing data.';
      case 'PGRST301':
        return 'Access denied due to security policy.';
      case '401':
      case 'auth/invalid-email':
      case 'auth/user-not-found':
      case 'auth/wrong-password':
        return 'Invalid login credentials. Please check your email and password.';
      case '403':
        return 'You do not have permission to access this resource.';
      case '404':
        return 'The requested resource was not found.';
      case '429':
        return 'Too many requests. Please try again later.';
      case '500':
        return 'Server error. Please try again later.';
      default:
        return isUserFriendlyMessage(error.message) ? error.message : defaultMessages[error.category];
    }
  }
  return isUserFriendlyMessage(error.message) ? error.message : defaultMessages[error.category];
}
function isPostgrestError(error) {
  return error && typeof error === 'object' && 'code' in error && 'message' in error && 'details' in error;
}
function determineErrorCategory(error) {
  if (isPostgrestError(error)) {
    var _error$code, _error$code2, _error$code3, _error$code4;
    if ((_error$code = error.code) != null && _error$code.startsWith('23')) return ErrorCategory.VALIDATION;
    if ((_error$code2 = error.code) != null && _error$code2.startsWith('28') || (_error$code3 = error.code) != null && _error$code3.startsWith('42501')) return ErrorCategory.PERMISSION;
    if ((_error$code4 = error.code) != null && _error$code4.startsWith('PGRST3')) return ErrorCategory.PERMISSION;
    return ErrorCategory.DATABASE;
  }
  var msg = error.message.toLowerCase();
  if (msg.includes('network') || msg.includes('connection')) return ErrorCategory.NETWORK;
  if (msg.includes('auth') || msg.includes('login') || msg.includes('password')) return ErrorCategory.AUTHENTICATION;
  if (msg.includes('permission') || msg.includes('access') || msg.includes('denied')) return ErrorCategory.PERMISSION;
  if (msg.includes('valid') || msg.includes('required')) return ErrorCategory.VALIDATION;
  return ErrorCategory.UNKNOWN;
}
function isUserFriendlyMessage(message) {
  if (!message) return false;
  var technicalTerms = ['undefined', 'null', 'NaN', 'exception', 'syntax error', 'unexpected token', 'stack', 'reference error', 'type error', 'cannot read property', 'is not a function', 'failed to fetch', 'network request failed', 'JSON', 'parse', 'promise', 'async', 'timeout', 'cors', 'xhr', 'http', 'ssl', 'certificate', 'localhost', 'port', 'proxy', 'socket', 'postgresql', 'supabase', 'database', 'query', 'sql'];
  var lowercaseMsg = message.toLowerCase();
  return !technicalTerms.some(function (term) {
    return lowercaseMsg.includes(term.toLowerCase());
  });
}
function withErrorHandling(fn, errorHandler) {
  return (0, _asyncToGenerator2.default)(function* () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    try {
      return yield fn.apply(void 0, args);
    } catch (error) {
      var appError = handleSupabaseError(error, {
        functionName: fn.name,
        args: args
      });
      if (errorHandler) {
        errorHandler(appError);
      } else {
        logError(appError);
      }
      throw appError;
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,