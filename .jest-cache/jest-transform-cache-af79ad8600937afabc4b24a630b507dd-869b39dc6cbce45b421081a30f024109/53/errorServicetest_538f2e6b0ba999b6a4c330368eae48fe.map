{"version":3,"names":["_getJestObj","mock","getItem","jest","fn","setItem","removeItem","_interopRequireDefault","require","_asyncToGenerator2","_asyncStorage","_errorService","_require","describe","consoleErrorSpy","consoleWarnSpy","consoleInfoSpy","beforeEach","clearAllMocks","spyOn","console","mockImplementation","configureErrorService","enableConsoleLogging","enableRemoteLogging","enableStorageLogging","maxStoredErrors","AsyncStorage","mockResolvedValue","undefined","afterEach","mockRestore","test","error","createValidationError","logError","expect","not","toHaveBeenCalled","default","maxErrors","existingErrors","Array","fill","map","_","i","message","category","ErrorCategory","UNKNOWN","severity","ErrorSeverity","ERROR","timestamp","Date","JSON","stringify","newError","storedErrorsJson","calls","storedErrors","parse","length","toBe","postgrestError","details","hint","code","appError","handleSupabaseError","toEqual","objectContaining","VALIDATION","originalError","PERMISSION","standardError","Error","unknownError","CRITICAL","context","userId","action","networkError","handleNetworkError","NETWORK","nonErrorFailure","status","statusText","authError","handleAuthError","AUTHENTICATION","field","value","WARNING","resource","createPermissionError","toHaveBeenCalledWith","any","String","storedData","isArray","toISOString","mockRejectedValue","now","mockErrors","DATABASE","retrievedErrors","getStoredErrors","clearStoredErrors","friendlyMessage","getUserFriendlyMessage","error404","error500","friendlyMessage404","friendlyMessage500","successFn","wrappedFn","withErrorHandling","result","errorFn","rejects","toMatchObject","customErrorHandler","namedFunction","Promise","reject","functionName","args","circularObj","name","self","cause","largeData","join","largeError","unicodeError","unusualError","domNode","document","createElement","function","errorCount","errors","startTime","performance","endTime","duration","toBeLessThan","currentErrors","j","mockResolvedValueOnce","toHaveBeenCalledTimes"],"sources":["errorService.test.ts"],"sourcesContent":["/**\n * Test suite for errorService.ts\n * \n * This test suite focuses on failure paths and edge cases to ensure\n * robust error handling throughout the application.\n */\n\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { PostgrestError } from '@supabase/supabase-js';\nimport {\n  AppError,\n  ErrorCategory,\n  ErrorSeverity,\n  configureErrorService,\n  handleSupabaseError,\n  handleNetworkError,\n  handleAuthError,\n  createValidationError,\n  createPermissionError,\n  logError,\n  getStoredErrors,\n  clearStoredErrors,\n  getUserFriendlyMessage,\n  withErrorHandling,\n} from '../../src/services/errorService';\n\n// Mock AsyncStorage\njest.mock('@react-native-async-storage/async-storage', () => ({\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  removeItem: jest.fn(),\n}));\n\ndescribe('errorService', () => {\n  // Spy on console methods to prevent noise in test output and verify logging\n  let consoleErrorSpy: jest.SpyInstance;\n  let consoleWarnSpy: jest.SpyInstance;\n  let consoleInfoSpy: jest.SpyInstance;\n\n  beforeEach(() => {\n    // Reset all mocks before each test\n    jest.clearAllMocks();\n    \n    // Spy on console methods\n    consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation(() => {});\n    consoleWarnSpy = jest.spyOn(console, 'warn').mockImplementation(() => {});\n    consoleInfoSpy = jest.spyOn(console, 'info').mockImplementation(() => {});\n    \n    // Reset configuration to default before each test\n    configureErrorService({\n      enableConsoleLogging: true,\n      enableRemoteLogging: false,\n      enableStorageLogging: true,\n      maxStoredErrors: 100,\n    });\n    \n    // Default AsyncStorage mock implementations\n    (AsyncStorage.getItem as jest.Mock).mockResolvedValue(null);\n    (AsyncStorage.setItem as jest.Mock).mockResolvedValue(undefined);\n  });\n\n  afterEach(() => {\n    // Restore console methods after each test\n    consoleErrorSpy.mockRestore();\n    consoleWarnSpy.mockRestore();\n    consoleInfoSpy.mockRestore();\n  });\n\n  describe('Error Configuration', () => {\n    test('should apply partial configuration changes', () => {\n      // Arrange & Act\n      configureErrorService({\n        enableConsoleLogging: false,\n        maxStoredErrors: 50,\n      });\n      \n      // Create an error to test configuration\n      const error = createValidationError('Test validation error');\n      logError(error);\n      \n      // Assert\n      expect(consoleErrorSpy).not.toHaveBeenCalled(); // Console logging disabled\n      expect(AsyncStorage.setItem).toHaveBeenCalled(); // Storage logging still enabled\n    });\n\n    test('should disable all logging when configured', () => {\n      // Arrange & Act\n      configureErrorService({\n        enableConsoleLogging: false,\n        enableRemoteLogging: false,\n        enableStorageLogging: false,\n      });\n      \n      // Create an error to test configuration\n      const error = createValidationError('Test validation error');\n      logError(error);\n      \n      // Assert\n      expect(consoleErrorSpy).not.toHaveBeenCalled();\n      expect(AsyncStorage.setItem).not.toHaveBeenCalled();\n    });\n\n    test('should apply maximum stored errors limit', async () => {\n      // Arrange\n      const maxErrors = 5;\n      configureErrorService({\n        maxStoredErrors: maxErrors,\n      });\n      \n      // Mock existing errors (more than the new limit)\n      const existingErrors = Array(10).fill(null).map((_, i) => ({\n        message: `Existing error ${i}`,\n        category: ErrorCategory.UNKNOWN,\n        severity: ErrorSeverity.ERROR,\n        timestamp: new Date(),\n      }));\n      \n      (AsyncStorage.getItem as jest.Mock).mockResolvedValue(JSON.stringify(existingErrors));\n      \n      // Act\n      const newError = createValidationError('New validation error');\n      await logError(newError);\n      \n      // Assert\n      expect(AsyncStorage.setItem).toHaveBeenCalled();\n      \n      // Extract the stored errors from the mock call\n      const storedErrorsJson = (AsyncStorage.setItem as jest.Mock).mock.calls[0][1];\n      const storedErrors = JSON.parse(storedErrorsJson);\n      \n      // Verify we only kept the maximum number of errors\n      expect(storedErrors.length).toBe(maxErrors);\n      \n      // Verify we kept the most recent errors (the last ones from the original array plus the new one)\n      expect(storedErrors[maxErrors - 1].message).toBe('New validation error');\n      expect(storedErrors[0].message).toBe(`Existing error ${10 - maxErrors + 1}`);\n    });\n  });\n\n  describe('Error Handling Functions', () => {\n    describe('handleSupabaseError', () => {\n      test('should handle PostgrestError correctly', () => {\n        // Arrange\n        const postgrestError: PostgrestError = {\n          message: 'Database error',\n          details: 'Constraint violation',\n          hint: 'Check your input',\n          code: '23505', // Unique violation\n        };\n        \n        // Act\n        const appError = handleSupabaseError(postgrestError);\n        \n        // Assert\n        expect(appError).toEqual(expect.objectContaining({\n          message: 'Database error',\n          code: '23505',\n          category: ErrorCategory.VALIDATION, // Based on the error code\n          severity: ErrorSeverity.ERROR,\n          originalError: postgrestError,\n        }));\n      });\n\n      test('should handle PostgrestError with permission code', () => {\n        // Arrange\n        const postgrestError: PostgrestError = {\n          message: 'Permission denied',\n          details: 'Insufficient privileges',\n          hint: 'Check your permissions',\n          code: '42501', // Permission denied\n        };\n        \n        // Act\n        const appError = handleSupabaseError(postgrestError);\n        \n        // Assert\n        expect(appError).toEqual(expect.objectContaining({\n          message: 'Permission denied',\n          code: '42501',\n          category: ErrorCategory.PERMISSION,\n          severity: ErrorSeverity.ERROR,\n        }));\n      });\n\n      test('should handle PostgrestError with RLS policy violation', () => {\n        // Arrange\n        const postgrestError: PostgrestError = {\n          message: 'RLS policy violation',\n          details: 'Access denied',\n          hint: 'Check your permissions',\n          code: 'PGRST301', // RLS policy violation\n        };\n        \n        // Act\n        const appError = handleSupabaseError(postgrestError);\n        \n        // Assert\n        expect(appError).toEqual(expect.objectContaining({\n          message: 'RLS policy violation',\n          code: 'PGRST301',\n          category: ErrorCategory.PERMISSION,\n          severity: ErrorSeverity.ERROR,\n        }));\n      });\n\n      test('should handle standard Error objects', () => {\n        // Arrange\n        const standardError = new Error('Standard error');\n        \n        // Act\n        const appError = handleSupabaseError(standardError);\n        \n        // Assert\n        expect(appError).toEqual(expect.objectContaining({\n          message: 'Standard error',\n          category: ErrorCategory.UNKNOWN,\n          severity: ErrorSeverity.ERROR,\n          originalError: standardError,\n        }));\n      });\n\n      test('should handle unknown error types', () => {\n        // Arrange\n        const unknownError = 'Just a string error';\n        \n        // Act\n        const appError = handleSupabaseError(unknownError);\n        \n        // Assert\n        expect(appError).toEqual(expect.objectContaining({\n          message: 'An unknown error occurred',\n          category: ErrorCategory.UNKNOWN,\n          severity: ErrorSeverity.ERROR,\n          originalError: unknownError,\n        }));\n      });\n\n      test('should handle null/undefined errors', () => {\n        // Act & Assert\n        expect(handleSupabaseError(null)).toEqual(expect.objectContaining({\n          message: 'An unknown error occurred',\n          category: ErrorCategory.UNKNOWN,\n        }));\n        \n        expect(handleSupabaseError(undefined)).toEqual(expect.objectContaining({\n          message: 'An unknown error occurred',\n          category: ErrorCategory.UNKNOWN,\n        }));\n      });\n\n      test('should handle custom severity level', () => {\n        // Arrange\n        const error = new Error('Critical error');\n        \n        // Act\n        const appError = handleSupabaseError(error, {}, ErrorSeverity.CRITICAL);\n        \n        // Assert\n        expect(appError.severity).toBe(ErrorSeverity.CRITICAL);\n      });\n\n      test('should include context data', () => {\n        // Arrange\n        const error = new Error('Error with context');\n        const context = { userId: '123', action: 'update' };\n        \n        // Act\n        const appError = handleSupabaseError(error, context);\n        \n        // Assert\n        expect(appError.context).toEqual(context);\n      });\n    });\n\n    describe('handleNetworkError', () => {\n      test('should process network errors correctly', () => {\n        // Arrange\n        const networkError = new Error('Network connection failed');\n        \n        // Act\n        const appError = handleNetworkError(networkError);\n        \n        // Assert\n        expect(appError).toEqual(expect.objectContaining({\n          message: 'Network connection failed',\n          category: ErrorCategory.NETWORK,\n          severity: ErrorSeverity.ERROR,\n          originalError: networkError,\n        }));\n        \n        // Verify it was logged\n        expect(consoleErrorSpy).toHaveBeenCalled();\n      });\n\n      test('should handle non-Error network failures', () => {\n        // Arrange\n        const nonErrorFailure = { status: 0, statusText: 'Network error' };\n        \n        // Act\n        const appError = handleNetworkError(nonErrorFailure);\n        \n        // Assert\n        expect(appError).toEqual(expect.objectContaining({\n          message: 'Network connection failed',\n          category: ErrorCategory.NETWORK,\n          originalError: nonErrorFailure,\n        }));\n      });\n    });\n\n    describe('handleAuthError', () => {\n      test('should process authentication errors correctly', () => {\n        // Arrange\n        const authError = new Error('Invalid credentials');\n        \n        // Act\n        const appError = handleAuthError(authError);\n        \n        // Assert\n        expect(appError).toEqual(expect.objectContaining({\n          message: 'Invalid credentials',\n          category: ErrorCategory.AUTHENTICATION,\n          severity: ErrorSeverity.ERROR,\n          originalError: authError,\n        }));\n        \n        // Verify it was logged\n        expect(consoleErrorSpy).toHaveBeenCalled();\n      });\n\n      test('should handle non-Error auth failures', () => {\n        // Arrange\n        const nonErrorFailure = { code: 'auth/invalid-email' };\n        \n        // Act\n        const appError = handleAuthError(nonErrorFailure);\n        \n        // Assert\n        expect(appError).toEqual(expect.objectContaining({\n          message: 'Authentication failed',\n          category: ErrorCategory.AUTHENTICATION,\n          originalError: nonErrorFailure,\n        }));\n      });\n    });\n\n    describe('createValidationError', () => {\n      test('should create validation errors correctly', () => {\n        // Arrange\n        const message = 'Invalid input data';\n        const context = { field: 'email', value: 'invalid' };\n        \n        // Act\n        const appError = createValidationError(message, context);\n        \n        // Assert\n        expect(appError).toEqual(expect.objectContaining({\n          message,\n          category: ErrorCategory.VALIDATION,\n          severity: ErrorSeverity.WARNING,\n          context,\n        }));\n        \n        // Verify it was logged\n        expect(consoleErrorSpy).toHaveBeenCalled();\n      });\n    });\n\n    describe('createPermissionError', () => {\n      test('should create permission errors correctly', () => {\n        // Arrange\n        const message = 'Access denied to this resource';\n        const context = { resource: 'payments', action: 'create' };\n        \n        // Act\n        const appError = createPermissionError(message, context);\n        \n        // Assert\n        expect(appError).toEqual(expect.objectContaining({\n          message,\n          category: ErrorCategory.PERMISSION,\n          severity: ErrorSeverity.WARNING,\n          context,\n        }));\n        \n        // Verify it was logged\n        expect(consoleErrorSpy).toHaveBeenCalled();\n      });\n\n      test('should use default message when none provided', () => {\n        // Act\n        const appError = createPermissionError();\n        \n        // Assert\n        expect(appError.message).toBe('You do not have permission to perform this action');\n      });\n    });\n  });\n\n  describe('Error Storage', () => {\n    test('should store errors in AsyncStorage', async () => {\n      // Arrange\n      const error = createValidationError('Test error');\n      \n      // Act\n      await logError(error);\n      \n      // Assert\n      expect(AsyncStorage.getItem).toHaveBeenCalledWith('app_errors');\n      expect(AsyncStorage.setItem).toHaveBeenCalledWith(\n        'app_errors',\n        expect.any(String)\n      );\n      \n      // Verify the stored data\n      const storedData = JSON.parse((AsyncStorage.setItem as jest.Mock).mock.calls[0][1]);\n      expect(Array.isArray(storedData)).toBe(true);\n      expect(storedData[0]).toEqual(expect.objectContaining({\n        message: 'Test error',\n        category: ErrorCategory.VALIDATION,\n      }));\n    });\n\n    test('should append new errors to existing ones', async () => {\n      // Arrange\n      const existingErrors = [\n        {\n          message: 'Existing error',\n          category: ErrorCategory.UNKNOWN,\n          severity: ErrorSeverity.ERROR,\n          timestamp: new Date().toISOString(),\n        },\n      ];\n      \n      (AsyncStorage.getItem as jest.Mock).mockResolvedValue(JSON.stringify(existingErrors));\n      \n      // Act\n      const newError = createValidationError('New error');\n      await logError(newError);\n      \n      // Assert\n      expect(AsyncStorage.setItem).toHaveBeenCalled();\n      \n      // Verify the stored data\n      const storedData = JSON.parse((AsyncStorage.setItem as jest.Mock).mock.calls[0][1]);\n      expect(storedData.length).toBe(2);\n      expect(storedData[0].message).toBe('Existing error');\n      expect(storedData[1].message).toBe('New error');\n    });\n\n    test('should handle AsyncStorage getItem failure', async () => {\n      // Arrange\n      (AsyncStorage.getItem as jest.Mock).mockRejectedValue(new Error('Storage read error'));\n      \n      // Act\n      const error = createValidationError('Test error');\n      await logError(error);\n      \n      // Assert\n      expect(consoleErrorSpy).toHaveBeenCalledWith(\n        'Error storing error in AsyncStorage:',\n        expect.any(Error)\n      );\n    });\n\n    test('should handle AsyncStorage setItem failure', async () => {\n      // Arrange\n      (AsyncStorage.setItem as jest.Mock).mockRejectedValue(new Error('Storage write error'));\n      \n      // Act\n      const error = createValidationError('Test error');\n      await logError(error);\n      \n      // Assert\n      expect(consoleErrorSpy).toHaveBeenCalledWith(\n        'Error storing error in AsyncStorage:',\n        expect.any(Error)\n      );\n    });\n\n    test('should handle corrupted JSON in AsyncStorage', async () => {\n      // Arrange\n      (AsyncStorage.getItem as jest.Mock).mockResolvedValue('{\"corrupted:json');\n      \n      // Act\n      const error = createValidationError('Test error');\n      await logError(error);\n      \n      // Assert\n      expect(consoleErrorSpy).toHaveBeenCalledWith(\n        'Error storing error in AsyncStorage:',\n        expect.any(Error)\n      );\n    });\n\n    test('should enforce maximum error storage limit', async () => {\n      // Arrange\n      const maxErrors = 10;\n      configureErrorService({ maxStoredErrors: maxErrors });\n      \n      // Create more errors than the limit\n      const existingErrors = Array(maxErrors + 5).fill(null).map((_, i) => ({\n        message: `Error ${i}`,\n        category: ErrorCategory.UNKNOWN,\n        severity: ErrorSeverity.ERROR,\n        timestamp: new Date(Date.now() - (i * 1000)).toISOString(), // Older errors first\n      }));\n      \n      (AsyncStorage.getItem as jest.Mock).mockResolvedValue(JSON.stringify(existingErrors));\n      \n      // Act\n      const newError = createValidationError('New error');\n      await logError(newError);\n      \n      // Assert\n      expect(AsyncStorage.setItem).toHaveBeenCalled();\n      \n      // Verify the stored data\n      const storedData = JSON.parse((AsyncStorage.setItem as jest.Mock).mock.calls[0][1]);\n      expect(storedData.length).toBe(maxErrors);\n      \n      // Should keep the most recent errors (including the new one)\n      expect(storedData[maxErrors - 1].message).toBe('New error');\n    });\n\n    test('should retrieve stored errors', async () => {\n      // Arrange\n      const mockErrors = [\n        {\n          message: 'Stored error 1',\n          category: ErrorCategory.DATABASE,\n          severity: ErrorSeverity.ERROR,\n          timestamp: new Date().toISOString(),\n        },\n        {\n          message: 'Stored error 2',\n          category: ErrorCategory.NETWORK,\n          severity: ErrorSeverity.WARNING,\n          timestamp: new Date().toISOString(),\n        },\n      ];\n      \n      (AsyncStorage.getItem as jest.Mock).mockResolvedValue(JSON.stringify(mockErrors));\n      \n      // Act\n      const retrievedErrors = await getStoredErrors();\n      \n      // Assert\n      expect(AsyncStorage.getItem).toHaveBeenCalledWith('app_errors');\n      expect(retrievedErrors).toEqual(mockErrors);\n    });\n\n    test('should handle getStoredErrors failure', async () => {\n      // Arrange\n      (AsyncStorage.getItem as jest.Mock).mockRejectedValue(new Error('Storage read error'));\n      \n      // Act\n      const retrievedErrors = await getStoredErrors();\n      \n      // Assert\n      expect(consoleErrorSpy).toHaveBeenCalledWith(\n        'Error retrieving errors from AsyncStorage:',\n        expect.any(Error)\n      );\n      expect(retrievedErrors).toEqual([]);\n    });\n\n    test('should clear stored errors', async () => {\n      // Act\n      await clearStoredErrors();\n      \n      // Assert\n      expect(AsyncStorage.setItem).toHaveBeenCalledWith('app_errors', '[]');\n    });\n\n    test('should handle clearStoredErrors failure', async () => {\n      // Arrange\n      (AsyncStorage.setItem as jest.Mock).mockRejectedValue(new Error('Storage write error'));\n      \n      // Act\n      await clearStoredErrors();\n      \n      // Assert\n      expect(consoleErrorSpy).toHaveBeenCalledWith(\n        'Error clearing errors from AsyncStorage:',\n        expect.any(Error)\n      );\n    });\n  });\n\n  describe('Error Logging', () => {\n    test('should log errors to console when enabled', () => {\n      // Arrange\n      configureErrorService({ enableConsoleLogging: true });\n      const error: AppError = {\n        message: 'Test error',\n        category: ErrorCategory.DATABASE,\n        severity: ErrorSeverity.ERROR,\n        timestamp: new Date(),\n      };\n      \n      // Act\n      logError(error);\n      \n      // Assert\n      expect(consoleErrorSpy).toHaveBeenCalledWith(\n        `[ERROR] [database] Test error`,\n        expect.objectContaining({\n          context: undefined,\n          timestamp: error.timestamp,\n        })\n      );\n    });\n\n    test('should not log errors to console when disabled', () => {\n      // Arrange\n      configureErrorService({ enableConsoleLogging: false });\n      const error: AppError = {\n        message: 'Test error',\n        category: ErrorCategory.DATABASE,\n        severity: ErrorSeverity.ERROR,\n        timestamp: new Date(),\n      };\n      \n      // Act\n      logError(error);\n      \n      // Assert\n      expect(consoleErrorSpy).not.toHaveBeenCalled();\n    });\n\n    test('should not store errors when storage logging is disabled', async () => {\n      // Arrange\n      configureErrorService({ enableStorageLogging: false });\n      const error: AppError = {\n        message: 'Test error',\n        category: ErrorCategory.DATABASE,\n        severity: ErrorSeverity.ERROR,\n        timestamp: new Date(),\n      };\n      \n      // Act\n      await logError(error);\n      \n      // Assert\n      expect(AsyncStorage.setItem).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('getUserFriendlyMessage', () => {\n    test('should return specific message for PostgreSQL unique violation', () => {\n      // Arrange\n      const error: AppError = {\n        message: 'duplicate key value violates unique constraint',\n        code: '23505',\n        category: ErrorCategory.DATABASE,\n        severity: ErrorSeverity.ERROR,\n        timestamp: new Date(),\n      };\n      \n      // Act\n      const friendlyMessage = getUserFriendlyMessage(error);\n      \n      // Assert\n      expect(friendlyMessage).toBe('This information already exists in our system.');\n    });\n\n    test('should return specific message for PostgreSQL undefined table', () => {\n      // Arrange\n      const error: AppError = {\n        message: 'relation \"non_existent_table\" does not exist',\n        code: '42P01',\n        category: ErrorCategory.DATABASE,\n        severity: ErrorSeverity.ERROR,\n        timestamp: new Date(),\n      };\n      \n      // Act\n      const friendlyMessage = getUserFriendlyMessage(error);\n      \n      // Assert\n      expect(friendlyMessage).toBe('We encountered a database configuration issue. Please contact support.');\n    });\n\n    test('should return specific message for auth errors', () => {\n      // Arrange\n      const error: AppError = {\n        message: 'Invalid email or password',\n        code: 'auth/wrong-password',\n        category: ErrorCategory.AUTHENTICATION,\n        severity: ErrorSeverity.ERROR,\n        timestamp: new Date(),\n      };\n      \n      // Act\n      const friendlyMessage = getUserFriendlyMessage(error);\n      \n      // Assert\n      expect(friendlyMessage).toBe('Invalid login credentials. Please check your email and password.');\n    });\n\n    test('should return specific message for HTTP status codes', () => {\n      // Arrange\n      const error404: AppError = {\n        message: 'Not found',\n        code: '404',\n        category: ErrorCategory.NETWORK,\n        severity: ErrorSeverity.ERROR,\n        timestamp: new Date(),\n      };\n      \n      const error500: AppError = {\n        message: 'Internal server error',\n        code: '500',\n        category: ErrorCategory.NETWORK,\n        severity: ErrorSeverity.ERROR,\n        timestamp: new Date(),\n      };\n      \n      // Act\n      const friendlyMessage404 = getUserFriendlyMessage(error404);\n      const friendlyMessage500 = getUserFriendlyMessage(error500);\n      \n      // Assert\n      expect(friendlyMessage404).toBe('The requested resource was not found.');\n      expect(friendlyMessage500).toBe('Server error. Please try again later.');\n    });\n\n    test('should use original message if it is user-friendly', () => {\n      // Arrange\n      const error: AppError = {\n        message: 'Your password must be at least 8 characters long',\n        category: ErrorCategory.VALIDATION,\n        severity: ErrorSeverity.WARNING,\n        timestamp: new Date(),\n      };\n      \n      // Act\n      const friendlyMessage = getUserFriendlyMessage(error);\n      \n      // Assert\n      expect(friendlyMessage).toBe('Your password must be at least 8 characters long');\n    });\n\n    test('should fall back to category default if message is technical', () => {\n      // Arrange\n      const error: AppError = {\n        message: 'TypeError: Cannot read property \"id\" of undefined',\n        category: ErrorCategory.VALIDATION,\n        severity: ErrorSeverity.WARNING,\n        timestamp: new Date(),\n      };\n      \n      // Act\n      const friendlyMessage = getUserFriendlyMessage(error);\n      \n      // Assert\n      expect(friendlyMessage).toBe('Some information you entered is not valid.');\n    });\n\n    test('should handle errors with no message', () => {\n      // Arrange\n      const error: AppError = {\n        message: '',\n        category: ErrorCategory.UNKNOWN,\n        severity: ErrorSeverity.ERROR,\n        timestamp: new Date(),\n      };\n      \n      // Act\n      const friendlyMessage = getUserFriendlyMessage(error);\n      \n      // Assert\n      expect(friendlyMessage).toBe('An unexpected error occurred. Please try again later.');\n    });\n  });\n\n  describe('withErrorHandling', () => {\n    test('should wrap function and return result on success', async () => {\n      // Arrange\n      const successFn = jest.fn().mockResolvedValue('success result');\n      const wrappedFn = withErrorHandling(successFn);\n      \n      // Act\n      const result = await wrappedFn('arg1', 'arg2');\n      \n      // Assert\n      expect(successFn).toHaveBeenCalledWith('arg1', 'arg2');\n      expect(result).toBe('success result');\n    });\n\n    test('should catch and handle errors', async () => {\n      // Arrange\n      const errorFn = jest.fn().mockRejectedValue(new Error('Test error'));\n      const wrappedFn = withErrorHandling(errorFn);\n      \n      // Act & Assert\n      await expect(wrappedFn('arg1')).rejects.toMatchObject({\n        message: 'Test error',\n        category: ErrorCategory.UNKNOWN,\n      });\n      \n      expect(consoleErrorSpy).toHaveBeenCalled();\n    });\n\n    test('should use custom error handler if provided', async () => {\n      // Arrange\n      const errorFn = jest.fn().mockRejectedValue(new Error('Test error'));\n      const customErrorHandler = jest.fn();\n      const wrappedFn = withErrorHandling(errorFn, customErrorHandler);\n      \n      // Act\n      try {\n        await wrappedFn('arg1');\n      } catch (error) {\n        // Expected to throw\n      }\n      \n      // Assert\n      expect(customErrorHandler).toHaveBeenCalledWith(\n        expect.objectContaining({\n          message: 'Test error',\n          category: ErrorCategory.UNKNOWN,\n        })\n      );\n      \n      // Should not use default error logging\n      expect(consoleErrorSpy).not.toHaveBeenCalled();\n    });\n\n    test('should include function name and args in error context', async () => {\n      // Arrange\n      function namedFunction() {\n        return Promise.reject(new Error('Named function error'));\n      }\n      \n      const wrappedFn = withErrorHandling(namedFunction);\n      \n      // Act\n      try {\n        await wrappedFn();\n      } catch (error) {\n        // Expected to throw\n        expect(error).toMatchObject({\n          context: {\n            functionName: 'namedFunction',\n            args: [],\n          },\n        });\n      }\n    });\n  });\n\n  describe('Edge Cases', () => {\n    test('should handle circular reference errors', async () => {\n      // Arrange\n      const circularObj: any = { name: 'circular' };\n      circularObj.self = circularObj; // Create circular reference\n      \n      const error = new Error('Circular reference error');\n      error.cause = circularObj;\n      \n      // Act\n      const appError = handleSupabaseError(error);\n      await logError(appError);\n      \n      // Assert - should not throw when stringifying\n      expect(AsyncStorage.setItem).toHaveBeenCalled();\n    });\n\n    test('should handle very large error objects', async () => {\n      // Arrange\n      const largeData = Array(10000).fill('x').join(''); // Create a large string\n      const largeError = new Error('Large error');\n      (largeError as any).largeData = largeData;\n      \n      // Act\n      const appError = handleSupabaseError(largeError);\n      await logError(appError);\n      \n      // Assert - should not throw when storing\n      expect(AsyncStorage.setItem).toHaveBeenCalled();\n    });\n\n    test('should handle errors with Unicode characters', async () => {\n      // Arrange\n      const unicodeError = new Error('Unicode error: 你好, مرحبا, привет, こんにちは');\n      \n      // Act\n      const appError = handleSupabaseError(unicodeError);\n      await logError(appError);\n      \n      // Assert\n      expect(AsyncStorage.setItem).toHaveBeenCalled();\n      \n      // Verify the message was preserved\n      const storedData = JSON.parse((AsyncStorage.setItem as jest.Mock).mock.calls[0][1]);\n      expect(storedData[0].message).toBe('Unicode error: 你好, مرحبا, привет, こんにちは');\n    });\n\n    test('should handle AsyncStorage quota exceeded', async () => {\n      // Arrange\n      (AsyncStorage.setItem as jest.Mock).mockRejectedValue(\n        new Error('Quota exceeded')\n      );\n      \n      // Act\n      const error = createValidationError('Test error');\n      await logError(error);\n      \n      // Assert\n      expect(consoleErrorSpy).toHaveBeenCalledWith(\n        'Error storing error in AsyncStorage:',\n        expect.any(Error)\n      );\n    });\n\n    test('should handle errors with unusual properties', async () => {\n      // Arrange\n      const unusualError = new Error('Unusual error');\n      (unusualError as any).domNode = document.createElement('div'); // DOM node that can't be serialized\n      (unusualError as any).function = function() { return 'cannot serialize'; };\n      \n      // Act\n      const appError = handleSupabaseError(unusualError);\n      await logError(appError);\n      \n      // Assert - should not throw when storing\n      expect(AsyncStorage.setItem).toHaveBeenCalled();\n    });\n  });\n\n  describe('Performance Tests', () => {\n    test('should handle large volumes of errors efficiently', async () => {\n      // Arrange\n      const errorCount = 1000;\n      const errors = Array(errorCount).fill(null).map((_, i) => ({\n        message: `Error ${i}`,\n        category: ErrorCategory.UNKNOWN,\n        severity: ErrorSeverity.ERROR,\n        timestamp: new Date(),\n      }));\n      \n      // Configure to keep all errors for this test\n      configureErrorService({ maxStoredErrors: errorCount + 1 });\n      \n      (AsyncStorage.getItem as jest.Mock).mockResolvedValue(JSON.stringify(errors));\n      \n      // Act\n      const startTime = performance.now();\n      \n      const newError = createValidationError('Performance test error');\n      await logError(newError);\n      \n      const endTime = performance.now();\n      const duration = endTime - startTime;\n      \n      // Assert\n      expect(AsyncStorage.setItem).toHaveBeenCalled();\n      \n      // This is a soft assertion - the actual threshold depends on the environment\n      // but we want to ensure it doesn't take an unreasonable amount of time\n      expect(duration).toBeLessThan(1000); // Should process in under 1 second\n      \n      // Verify we stored all errors plus the new one\n      const storedData = JSON.parse((AsyncStorage.setItem as jest.Mock).mock.calls[0][1]);\n      expect(storedData.length).toBe(errorCount + 1);\n    });\n\n    test('should efficiently process and store 100 errors in sequence', async () => {\n      // Arrange\n      const errorCount = 100;\n      \n      // Configure to keep all errors\n      configureErrorService({ maxStoredErrors: errorCount + 10 });\n      \n      // Mock empty initial storage\n      (AsyncStorage.getItem as jest.Mock).mockResolvedValue(null);\n      \n      // Act\n      const startTime = performance.now();\n      \n      // Process 100 errors in sequence\n      for (let i = 0; i < errorCount; i++) {\n        const error = createValidationError(`Sequential error ${i}`);\n        // Update the mock to return the growing array\n        const currentErrors = Array(i).fill(null).map((_, j) => ({\n          message: `Sequential error ${j}`,\n          category: ErrorCategory.VALIDATION,\n          severity: ErrorSeverity.WARNING,\n          timestamp: new Date(),\n        }));\n        \n        (AsyncStorage.getItem as jest.Mock).mockResolvedValueOnce(\n          i === 0 ? null : JSON.stringify(currentErrors)\n        );\n        \n        await logError(error);\n      }\n      \n      const endTime = performance.now();\n      const duration = endTime - startTime;\n      \n      // Assert\n      expect(AsyncStorage.setItem).toHaveBeenCalledTimes(errorCount);\n      \n      // This is a soft assertion - the actual threshold depends on the environment\n      expect(duration).toBeLessThan(5000); // Should process in under 5 seconds\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}