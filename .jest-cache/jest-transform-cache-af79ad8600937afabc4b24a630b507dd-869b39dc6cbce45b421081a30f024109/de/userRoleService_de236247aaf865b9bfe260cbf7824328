f68e0e500251c3648aa9957dc8708b2f
"use strict";

/* istanbul ignore next */
function cov_tania2nji() {
  var path = "/Users/kevin/card-show-finder/src/services/userRoleService.ts";
  var hash = "200a7eb2dbd7dbcc4ce597871ff543e3130ab9c9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kevin/card-show-finder/src/services/userRoleService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 540
        }
      },
      "2": {
        start: {
          line: 4,
          column: 19
        },
        end: {
          line: 4,
          column: 41
        }
      },
      "3": {
        start: {
          line: 5,
          column: 25
        },
        end: {
          line: 5,
          column: 52
        }
      },
      "4": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 13,
          column: 51
        }
      },
      "5": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 9,
          column: 38
        }
      },
      "6": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 34
        }
      },
      "7": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 42
        }
      },
      "8": {
        start: {
          line: 12,
          column: 4
        },
        end: {
          line: 12,
          column: 50
        }
      },
      "9": {
        start: {
          line: 23,
          column: 0
        },
        end: {
          line: 23,
          column: 29
        }
      },
      "10": {
        start: {
          line: 32,
          column: 22
        },
        end: {
          line: 37,
          column: 1
        }
      },
      "11": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 34,
          column: 20
        }
      },
      "12": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 20
        }
      },
      "13": {
        start: {
          line: 35,
          column: 18
        },
        end: {
          line: 35,
          column: 36
        }
      },
      "14": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 36,
          column: 66
        }
      },
      "15": {
        start: {
          line: 38,
          column: 0
        },
        end: {
          line: 38,
          column: 38
        }
      },
      "16": {
        start: {
          line: 47,
          column: 0
        },
        end: {
          line: 56,
          column: 45
        }
      },
      "17": {
        start: {
          line: 48,
          column: 4
        },
        end: {
          line: 48,
          column: 34
        }
      },
      "18": {
        start: {
          line: 49,
          column: 4
        },
        end: {
          line: 49,
          column: 40
        }
      },
      "19": {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 50,
          column: 36
        }
      },
      "20": {
        start: {
          line: 51,
          column: 4
        },
        end: {
          line: 51,
          column: 48
        }
      },
      "21": {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 52,
          column: 44
        }
      },
      "22": {
        start: {
          line: 53,
          column: 4
        },
        end: {
          line: 53,
          column: 60
        }
      },
      "23": {
        start: {
          line: 54,
          column: 4
        },
        end: {
          line: 54,
          column: 50
        }
      },
      "24": {
        start: {
          line: 55,
          column: 4
        },
        end: {
          line: 55,
          column: 52
        }
      },
      "25": {
        start: {
          line: 61,
          column: 25
        },
        end: {
          line: 89,
          column: 1
        }
      },
      "26": {
        start: {
          line: 95,
          column: 25
        },
        end: {
          line: 100,
          column: 1
        }
      },
      "27": {
        start: {
          line: 96,
          column: 4
        },
        end: {
          line: 97,
          column: 20
        }
      },
      "28": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 97,
          column: 20
        }
      },
      "29": {
        start: {
          line: 98,
          column: 20
        },
        end: {
          line: 98,
          column: 46
        }
      },
      "30": {
        start: {
          line: 99,
          column: 4
        },
        end: {
          line: 99,
          column: 49
        }
      },
      "31": {
        start: {
          line: 101,
          column: 0
        },
        end: {
          line: 101,
          column: 44
        }
      },
      "32": {
        start: {
          line: 109,
          column: 29
        },
        end: {
          line: 124,
          column: 1
        }
      },
      "33": {
        start: {
          line: 110,
          column: 4
        },
        end: {
          line: 111,
          column: 20
        }
      },
      "34": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 111,
          column: 20
        }
      },
      "35": {
        start: {
          line: 112,
          column: 4
        },
        end: {
          line: 123,
          column: 5
        }
      },
      "36": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 57
        }
      },
      "37": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 118,
          column: 59
        }
      },
      "38": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 24
        }
      },
      "39": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 25
        }
      },
      "40": {
        start: {
          line: 125,
          column: 0
        },
        end: {
          line: 125,
          column: 52
        }
      },
      "41": {
        start: {
          line: 129,
          column: 26
        },
        end: {
          line: 133,
          column: 1
        }
      },
      "42": {
        start: {
          line: 130,
          column: 4
        },
        end: {
          line: 131,
          column: 20
        }
      },
      "43": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 131,
          column: 20
        }
      },
      "44": {
        start: {
          line: 132,
          column: 4
        },
        end: {
          line: 132,
          column: 40
        }
      },
      "45": {
        start: {
          line: 134,
          column: 0
        },
        end: {
          line: 134,
          column: 46
        }
      },
      "46": {
        start: {
          line: 138,
          column: 25
        },
        end: {
          line: 143,
          column: 1
        }
      },
      "47": {
        start: {
          line: 139,
          column: 4
        },
        end: {
          line: 140,
          column: 20
        }
      },
      "48": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 140,
          column: 20
        }
      },
      "49": {
        start: {
          line: 141,
          column: 4
        },
        end: {
          line: 142,
          column: 46
        }
      },
      "50": {
        start: {
          line: 144,
          column: 0
        },
        end: {
          line: 144,
          column: 44
        }
      },
      "51": {
        start: {
          line: 148,
          column: 28
        },
        end: {
          line: 152,
          column: 1
        }
      },
      "52": {
        start: {
          line: 149,
          column: 4
        },
        end: {
          line: 150,
          column: 20
        }
      },
      "53": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 150,
          column: 20
        }
      },
      "54": {
        start: {
          line: 151,
          column: 4
        },
        end: {
          line: 151,
          column: 48
        }
      },
      "55": {
        start: {
          line: 153,
          column: 0
        },
        end: {
          line: 153,
          column: 50
        }
      },
      "56": {
        start: {
          line: 159,
          column: 20
        },
        end: {
          line: 176,
          column: 1
        }
      },
      "57": {
        start: {
          line: 160,
          column: 4
        },
        end: {
          line: 175,
          column: 5
        }
      },
      "58": {
        start: {
          line: 161,
          column: 32
        },
        end: {
          line: 165,
          column: 21
        }
      },
      "59": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 169,
          column: 9
        }
      },
      "60": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 167,
          column: 62
        }
      },
      "61": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 168,
          column: 24
        }
      },
      "62": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 170,
          column: 54
        }
      },
      "63": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 173,
          column: 58
        }
      },
      "64": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 174,
          column: 20
        }
      },
      "65": {
        start: {
          line: 177,
          column: 0
        },
        end: {
          line: 177,
          column: 34
        }
      },
      "66": {
        start: {
          line: 183,
          column: 23
        },
        end: {
          line: 200,
          column: 1
        }
      },
      "67": {
        start: {
          line: 184,
          column: 4
        },
        end: {
          line: 199,
          column: 5
        }
      },
      "68": {
        start: {
          line: 185,
          column: 32
        },
        end: {
          line: 189,
          column: 21
        }
      },
      "69": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 193,
          column: 9
        }
      },
      "70": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 191,
          column: 65
        }
      },
      "71": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 192,
          column: 24
        }
      },
      "72": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 194,
          column: 20
        }
      },
      "73": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 197,
          column: 61
        }
      },
      "74": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 198,
          column: 20
        }
      },
      "75": {
        start: {
          line: 201,
          column: 0
        },
        end: {
          line: 201,
          column: 40
        }
      },
      "76": {
        start: {
          line: 208,
          column: 27
        },
        end: {
          line: 210,
          column: 1
        }
      },
      "77": {
        start: {
          line: 209,
          column: 4
        },
        end: {
          line: 209,
          column: 72
        }
      },
      "78": {
        start: {
          line: 211,
          column: 0
        },
        end: {
          line: 211,
          column: 48
        }
      },
      "79": {
        start: {
          line: 218,
          column: 30
        },
        end: {
          line: 220,
          column: 1
        }
      },
      "80": {
        start: {
          line: 219,
          column: 4
        },
        end: {
          line: 219,
          column: 75
        }
      },
      "81": {
        start: {
          line: 221,
          column: 0
        },
        end: {
          line: 221,
          column: 54
        }
      },
      "82": {
        start: {
          line: 228,
          column: 16
        },
        end: {
          line: 233,
          column: 1
        }
      },
      "83": {
        start: {
          line: 229,
          column: 4
        },
        end: {
          line: 231,
          column: 5
        }
      },
      "84": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 230,
          column: 20
        }
      },
      "85": {
        start: {
          line: 232,
          column: 4
        },
        end: {
          line: 232,
          column: 37
        }
      },
      "86": {
        start: {
          line: 234,
          column: 0
        },
        end: {
          line: 234,
          column: 26
        }
      },
      "87": {
        start: {
          line: 241,
          column: 19
        },
        end: {
          line: 246,
          column: 1
        }
      },
      "88": {
        start: {
          line: 242,
          column: 4
        },
        end: {
          line: 244,
          column: 5
        }
      },
      "89": {
        start: {
          line: 243,
          column: 8
        },
        end: {
          line: 243,
          column: 20
        }
      },
      "90": {
        start: {
          line: 245,
          column: 4
        },
        end: {
          line: 245,
          column: 44
        }
      },
      "91": {
        start: {
          line: 247,
          column: 0
        },
        end: {
          line: 247,
          column: 32
        }
      },
      "92": {
        start: {
          line: 254,
          column: 23
        },
        end: {
          line: 256,
          column: 1
        }
      },
      "93": {
        start: {
          line: 255,
          column: 4
        },
        end: {
          line: 255,
          column: 72
        }
      },
      "94": {
        start: {
          line: 257,
          column: 0
        },
        end: {
          line: 257,
          column: 40
        }
      },
      "95": {
        start: {
          line: 264,
          column: 31
        },
        end: {
          line: 266,
          column: 1
        }
      },
      "96": {
        start: {
          line: 265,
          column: 4
        },
        end: {
          line: 265,
          column: 80
        }
      },
      "97": {
        start: {
          line: 267,
          column: 0
        },
        end: {
          line: 267,
          column: 56
        }
      },
      "98": {
        start: {
          line: 274,
          column: 27
        },
        end: {
          line: 276,
          column: 1
        }
      },
      "99": {
        start: {
          line: 275,
          column: 4
        },
        end: {
          line: 275,
          column: 75
        }
      },
      "100": {
        start: {
          line: 277,
          column: 0
        },
        end: {
          line: 277,
          column: 48
        }
      },
      "101": {
        start: {
          line: 284,
          column: 21
        },
        end: {
          line: 286,
          column: 1
        }
      },
      "102": {
        start: {
          line: 285,
          column: 4
        },
        end: {
          line: 285,
          column: 54
        }
      },
      "103": {
        start: {
          line: 287,
          column: 0
        },
        end: {
          line: 287,
          column: 36
        }
      },
      "104": {
        start: {
          line: 295,
          column: 23
        },
        end: {
          line: 301,
          column: 1
        }
      },
      "105": {
        start: {
          line: 296,
          column: 4
        },
        end: {
          line: 298,
          column: 5
        }
      },
      "106": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 297,
          column: 20
        }
      },
      "107": {
        start: {
          line: 300,
          column: 4
        },
        end: {
          line: 300,
          column: 62
        }
      },
      "108": {
        start: {
          line: 302,
          column: 0
        },
        end: {
          line: 302,
          column: 40
        }
      },
      "109": {
        start: {
          line: 314,
          column: 23
        },
        end: {
          line: 317,
          column: 1
        }
      },
      "110": {
        start: {
          line: 315,
          column: 4
        },
        end: {
          line: 315,
          column: 53
        }
      },
      "111": {
        start: {
          line: 316,
          column: 4
        },
        end: {
          line: 316,
          column: 44
        }
      },
      "112": {
        start: {
          line: 318,
          column: 0
        },
        end: {
          line: 318,
          column: 40
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 1
          },
          end: {
            line: 8,
            column: 2
          }
        },
        loc: {
          start: {
            line: 8,
            column: 21
          },
          end: {
            line: 13,
            column: 1
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 32,
            column: 22
          },
          end: {
            line: 32,
            column: 23
          }
        },
        loc: {
          start: {
            line: 32,
            column: 32
          },
          end: {
            line: 37,
            column: 1
          }
        },
        line: 32
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 47,
            column: 1
          },
          end: {
            line: 47,
            column: 2
          }
        },
        loc: {
          start: {
            line: 47,
            column: 19
          },
          end: {
            line: 56,
            column: 1
          }
        },
        line: 47
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 95,
            column: 25
          },
          end: {
            line: 95,
            column: 26
          }
        },
        loc: {
          start: {
            line: 95,
            column: 47
          },
          end: {
            line: 100,
            column: 1
          }
        },
        line: 95
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 109,
            column: 29
          },
          end: {
            line: 109,
            column: 30
          }
        },
        loc: {
          start: {
            line: 109,
            column: 60
          },
          end: {
            line: 124,
            column: 1
          }
        },
        line: 109
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 129,
            column: 26
          },
          end: {
            line: 129,
            column: 27
          }
        },
        loc: {
          start: {
            line: 129,
            column: 40
          },
          end: {
            line: 133,
            column: 1
          }
        },
        line: 129
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 138,
            column: 25
          },
          end: {
            line: 138,
            column: 26
          }
        },
        loc: {
          start: {
            line: 138,
            column: 39
          },
          end: {
            line: 143,
            column: 1
          }
        },
        line: 138
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 148,
            column: 28
          },
          end: {
            line: 148,
            column: 29
          }
        },
        loc: {
          start: {
            line: 148,
            column: 42
          },
          end: {
            line: 152,
            column: 1
          }
        },
        line: 148
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 159,
            column: 20
          },
          end: {
            line: 159,
            column: 21
          }
        },
        loc: {
          start: {
            line: 159,
            column: 38
          },
          end: {
            line: 176,
            column: 1
          }
        },
        line: 159
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 183,
            column: 23
          },
          end: {
            line: 183,
            column: 24
          }
        },
        loc: {
          start: {
            line: 183,
            column: 41
          },
          end: {
            line: 200,
            column: 1
          }
        },
        line: 183
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 208,
            column: 27
          },
          end: {
            line: 208,
            column: 28
          }
        },
        loc: {
          start: {
            line: 208,
            column: 41
          },
          end: {
            line: 210,
            column: 1
          }
        },
        line: 208
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 218,
            column: 30
          },
          end: {
            line: 218,
            column: 31
          }
        },
        loc: {
          start: {
            line: 218,
            column: 44
          },
          end: {
            line: 220,
            column: 1
          }
        },
        line: 218
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 228,
            column: 16
          },
          end: {
            line: 228,
            column: 17
          }
        },
        loc: {
          start: {
            line: 228,
            column: 44
          },
          end: {
            line: 233,
            column: 1
          }
        },
        line: 228
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 241,
            column: 19
          },
          end: {
            line: 241,
            column: 20
          }
        },
        loc: {
          start: {
            line: 241,
            column: 48
          },
          end: {
            line: 246,
            column: 1
          }
        },
        line: 241
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 254,
            column: 23
          },
          end: {
            line: 254,
            column: 24
          }
        },
        loc: {
          start: {
            line: 254,
            column: 37
          },
          end: {
            line: 256,
            column: 1
          }
        },
        line: 254
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 264,
            column: 31
          },
          end: {
            line: 264,
            column: 32
          }
        },
        loc: {
          start: {
            line: 264,
            column: 45
          },
          end: {
            line: 266,
            column: 1
          }
        },
        line: 264
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 274,
            column: 27
          },
          end: {
            line: 274,
            column: 28
          }
        },
        loc: {
          start: {
            line: 274,
            column: 41
          },
          end: {
            line: 276,
            column: 1
          }
        },
        line: 274
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 284,
            column: 21
          },
          end: {
            line: 284,
            column: 22
          }
        },
        loc: {
          start: {
            line: 284,
            column: 35
          },
          end: {
            line: 286,
            column: 1
          }
        },
        line: 284
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 295,
            column: 23
          },
          end: {
            line: 295,
            column: 24
          }
        },
        loc: {
          start: {
            line: 295,
            column: 60
          },
          end: {
            line: 301,
            column: 1
          }
        },
        line: 295
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 314,
            column: 23
          },
          end: {
            line: 314,
            column: 24
          }
        },
        loc: {
          start: {
            line: 314,
            column: 41
          },
          end: {
            line: 317,
            column: 1
          }
        },
        line: 314
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 13,
            column: 3
          },
          end: {
            line: 13,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 3
          },
          end: {
            line: 13,
            column: 11
          }
        }, {
          start: {
            line: 13,
            column: 16
          },
          end: {
            line: 13,
            column: 48
          }
        }],
        line: 13
      },
      "1": {
        loc: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 34,
            column: 20
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 34,
            column: 20
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 33
      },
      "2": {
        loc: {
          start: {
            line: 36,
            column: 11
          },
          end: {
            line: 36,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 36,
            column: 53
          },
          end: {
            line: 36,
            column: 58
          }
        }, {
          start: {
            line: 36,
            column: 61
          },
          end: {
            line: 36,
            column: 65
          }
        }],
        line: 36
      },
      "3": {
        loc: {
          start: {
            line: 56,
            column: 3
          },
          end: {
            line: 56,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 56,
            column: 3
          },
          end: {
            line: 56,
            column: 9
          }
        }, {
          start: {
            line: 56,
            column: 14
          },
          end: {
            line: 56,
            column: 42
          }
        }],
        line: 56
      },
      "4": {
        loc: {
          start: {
            line: 96,
            column: 4
          },
          end: {
            line: 97,
            column: 20
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 4
          },
          end: {
            line: 97,
            column: 20
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "5": {
        loc: {
          start: {
            line: 99,
            column: 11
          },
          end: {
            line: 99,
            column: 48
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 99,
            column: 21
          },
          end: {
            line: 99,
            column: 40
          }
        }, {
          start: {
            line: 99,
            column: 43
          },
          end: {
            line: 99,
            column: 48
          }
        }],
        line: 99
      },
      "6": {
        loc: {
          start: {
            line: 110,
            column: 4
          },
          end: {
            line: 111,
            column: 20
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 4
          },
          end: {
            line: 111,
            column: 20
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "7": {
        loc: {
          start: {
            line: 112,
            column: 4
          },
          end: {
            line: 123,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 114,
            column: 57
          }
        }, {
          start: {
            line: 115,
            column: 8
          },
          end: {
            line: 118,
            column: 59
          }
        }, {
          start: {
            line: 119,
            column: 8
          },
          end: {
            line: 120,
            column: 24
          }
        }, {
          start: {
            line: 121,
            column: 8
          },
          end: {
            line: 122,
            column: 25
          }
        }],
        line: 112
      },
      "8": {
        loc: {
          start: {
            line: 116,
            column: 20
          },
          end: {
            line: 118,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 116,
            column: 20
          },
          end: {
            line: 116,
            column: 55
          }
        }, {
          start: {
            line: 117,
            column: 16
          },
          end: {
            line: 117,
            column: 49
          }
        }, {
          start: {
            line: 118,
            column: 16
          },
          end: {
            line: 118,
            column: 57
          }
        }],
        line: 116
      },
      "9": {
        loc: {
          start: {
            line: 130,
            column: 4
          },
          end: {
            line: 131,
            column: 20
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 4
          },
          end: {
            line: 131,
            column: 20
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      },
      "10": {
        loc: {
          start: {
            line: 139,
            column: 4
          },
          end: {
            line: 140,
            column: 20
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 139,
            column: 4
          },
          end: {
            line: 140,
            column: 20
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 139
      },
      "11": {
        loc: {
          start: {
            line: 141,
            column: 12
          },
          end: {
            line: 142,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 141,
            column: 12
          },
          end: {
            line: 141,
            column: 44
          }
        }, {
          start: {
            line: 142,
            column: 8
          },
          end: {
            line: 142,
            column: 44
          }
        }],
        line: 141
      },
      "12": {
        loc: {
          start: {
            line: 149,
            column: 4
          },
          end: {
            line: 150,
            column: 20
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 149,
            column: 4
          },
          end: {
            line: 150,
            column: 20
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 149
      },
      "13": {
        loc: {
          start: {
            line: 166,
            column: 8
          },
          end: {
            line: 169,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 166,
            column: 8
          },
          end: {
            line: 169,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 166
      },
      "14": {
        loc: {
          start: {
            line: 190,
            column: 8
          },
          end: {
            line: 193,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 190,
            column: 8
          },
          end: {
            line: 193,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 190
      },
      "15": {
        loc: {
          start: {
            line: 229,
            column: 4
          },
          end: {
            line: 231,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 229,
            column: 4
          },
          end: {
            line: 231,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 229
      },
      "16": {
        loc: {
          start: {
            line: 242,
            column: 4
          },
          end: {
            line: 244,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 242,
            column: 4
          },
          end: {
            line: 244,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 242
      },
      "17": {
        loc: {
          start: {
            line: 296,
            column: 4
          },
          end: {
            line: 298,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 296,
            column: 4
          },
          end: {
            line: 298,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 296
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0, 0, 0],
      "8": [0, 0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/kevin/card-show-finder/src/services/userRoleService.ts",
      mappings: ";;;AAAA,0CAAuC;AACvC,qDAAsD;AAEtD,sBAAsB;AACtB,IAAY,QAKX;AALD,WAAY,QAAQ;IAClB,iCAAqB,CAAA;IACrB,6BAAiB,CAAA;IACjB,qCAAyB,CAAA;IACzB,6CAAiC,CAAA;AACnC,CAAC,EALW,QAAQ,wBAAR,QAAQ,QAKnB;AAED;;;;;;;GAOG;AACH,6EAA6E;AAChE,QAAA,YAAY,GAAG,KAAK,CAAC;AAGlC;;wEAEwE;AAExE;;;;GAIG;AACI,MAAM,aAAa,GAAG,CAAC,IAAoB,EAAmB,EAAE;IACrE,IAAI,CAAC,IAAI;QAAE,OAAO,IAAI,CAAC;IACvB,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,EAAc,CAAC;IAC7C,OAAQ,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAc,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;AAC9E,CAAC,CAAC;AAJW,QAAA,aAAa,iBAIxB;AAEF;;wEAEwE;AAExE;;;GAGG;AACH,IAAY,MASX;AATD,WAAY,MAAM;IAChB,6BAAmB,CAAA;IACnB,mCAAyB,CAAA;IACzB,+BAAqB,CAAA;IACrB,2CAAiC,CAAA;IACjC,uCAA6B,CAAA;IAC7B,uDAA6C,CAAA;IAC7C,6CAAmC,CAAA;IACnC,+CAAqC,CAAA;AACvC,CAAC,EATW,MAAM,sBAAN,MAAM,QASjB;AAED;;;GAGG;AACH,MAAM,gBAAgB,GAAkC;IACtD,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,IAAI,GAAG,CAAS;QACnC,MAAM,CAAC,OAAO;QACd,MAAM,CAAC,UAAU;QACjB,MAAM,CAAC,QAAQ;KAChB,CAAC;IACF,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,IAAI,GAAG,CAAS;QACjC,MAAM,CAAC,UAAU;QACjB,MAAM,CAAC,oBAAoB;KAC5B,CAAC;IACF,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,IAAI,GAAG,CAAS;QACrC,MAAM,CAAC,OAAO;QACd,MAAM,CAAC,UAAU;QACjB,MAAM,CAAC,QAAQ;QACf,MAAM,CAAC,cAAc;QACrB,MAAM,CAAC,oBAAoB;QAC3B,MAAM,CAAC,eAAe;KACvB,CAAC;IACF,CAAC,QAAQ,CAAC,cAAc,CAAC,EAAE,IAAI,GAAG,CAAS;QACzC,MAAM,CAAC,OAAO;QACd,MAAM,CAAC,UAAU;QACjB,MAAM,CAAC,QAAQ;QACf,MAAM,CAAC,cAAc;QACrB,MAAM,CAAC,YAAY;QACnB,MAAM,CAAC,oBAAoB;QAC3B,MAAM,CAAC,eAAe;QACtB,MAAM,CAAC,gBAAgB;KACxB,CAAC;CACH,CAAC;AAEF;;;;GAIG;AACI,MAAM,gBAAgB,GAAG,CAAC,QAAkB,EAAE,MAAc,EAAW,EAAE;IAC9E,IAAI,oBAAY;QAAE,OAAO,IAAI,CAAC;IAC9B,MAAM,OAAO,GAAG,gBAAgB,CAAC,QAAQ,CAAC,CAAC;IAC3C,OAAO,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;AAC/C,CAAC,CAAC;AAJW,QAAA,gBAAgB,oBAI3B;AAEF;;wEAEwE;AAExE;;;GAGG;AACI,MAAM,oBAAoB,GAAG,CAClC,UAAoB,EACpB,aAAuB,EACd,EAAE;IACX,IAAI,oBAAY;QAAE,OAAO,IAAI,CAAC;IAE9B,QAAQ,UAAU,EAAE,CAAC;QACnB,KAAK,QAAQ,CAAC,QAAQ;YACpB,OAAO,aAAa,KAAK,QAAQ,CAAC,UAAU,CAAC;QAC/C,KAAK,QAAQ,CAAC,UAAU;YACtB,OAAO,CACL,aAAa,KAAK,QAAQ,CAAC,QAAQ;gBACnC,aAAa,KAAK,QAAQ,CAAC,MAAM;gBACjC,aAAa,KAAK,QAAQ,CAAC,cAAc,CAC1C,CAAC;QACJ,KAAK,QAAQ,CAAC,cAAc;YAC1B,OAAO,IAAI,CAAC,CAAC,gBAAgB;QAC/B;YACE,OAAO,KAAK,CAAC;IACjB,CAAC;AACH,CAAC,CAAC;AApBW,QAAA,oBAAoB,wBAoB/B;AAEF;;GAEG;AACI,MAAM,iBAAiB,GAAG,CAAC,QAAkB,EAAW,EAAE;IAC/D,IAAI,oBAAY;QAAE,OAAO,IAAI,CAAC;IAC9B,OAAO,QAAQ,KAAK,QAAQ,CAAC,MAAM,CAAC;AACtC,CAAC,CAAC;AAHW,QAAA,iBAAiB,qBAG5B;AAEF;;GAEG;AACI,MAAM,gBAAgB,GAAG,CAAC,QAAkB,EAAW,EAAE;IAC9D,IAAI,oBAAY;QAAE,OAAO,IAAI,CAAC;IAC9B,OAAO,CACL,QAAQ,KAAK,QAAQ,CAAC,UAAU;QAChC,QAAQ,KAAK,QAAQ,CAAC,cAAc,CACrC,CAAC;AACJ,CAAC,CAAC;AANW,QAAA,gBAAgB,oBAM3B;AAEF;;GAEG;AACI,MAAM,mBAAmB,GAAG,CAAC,QAAkB,EAAW,EAAE;IACjE,IAAI,oBAAY;QAAE,OAAO,IAAI,CAAC;IAC9B,OAAO,QAAQ,KAAK,QAAQ,CAAC,cAAc,CAAC;AAC9C,CAAC,CAAC;AAHW,QAAA,mBAAmB,uBAG9B;AAEF;;;;GAIG;AACI,MAAM,WAAW,GAAG,KAAK,EAAE,MAAc,EAA4B,EAAE;IAC5E,IAAI,CAAC;QACH,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,mBAAQ;aACnC,IAAI,CAAC,UAAU,CAAC;aAChB,MAAM,CAAC,MAAM,CAAC;aACd,EAAE,CAAC,IAAI,EAAE,MAAM,CAAC;aAChB,MAAM,EAAE,CAAC;QAEZ,IAAI,KAAK,EAAE,CAAC;YACV,OAAO,CAAC,KAAK,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;YAClD,OAAO,IAAI,CAAC;QACd,CAAC;QAED,OAAO,IAAA,qBAAa,EAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACnC,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;QAClD,OAAO,IAAI,CAAC;IACd,CAAC;AACH,CAAC,CAAC;AAlBW,QAAA,WAAW,eAkBtB;AAEF;;;;GAIG;AACI,MAAM,cAAc,GAAG,KAAK,EAAE,MAAc,EAAE,EAAE;IACrD,IAAI,CAAC;QACH,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,mBAAQ;aACnC,IAAI,CAAC,UAAU,CAAC;aAChB,MAAM,CAAC,2CAA2C,CAAC;aACnD,EAAE,CAAC,IAAI,EAAE,MAAM,CAAC;aAChB,MAAM,EAAE,CAAC;QAEZ,IAAI,KAAK,EAAE,CAAC;YACV,OAAO,CAAC,KAAK,CAAC,8BAA8B,EAAE,KAAK,CAAC,CAAC;YACrD,OAAO,IAAI,CAAC;QACd,CAAC;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,8BAA8B,EAAE,KAAK,CAAC,CAAC;QACrD,OAAO,IAAI,CAAC;IACd,CAAC;AACH,CAAC,CAAC;AAlBW,QAAA,cAAc,kBAkBzB;AAEF;;;;;GAKG;AACI,MAAM,kBAAkB,GAAG,CAAC,QAAkB,EAAW,EAAE;IAChE,OAAO,IAAA,wBAAgB,EAAC,QAAQ,EAAE,MAAM,CAAC,YAAY,CAAC,CAAC;AACzD,CAAC,CAAC;AAFW,QAAA,kBAAkB,sBAE7B;AAEF;;;;;GAKG;AACI,MAAM,qBAAqB,GAAG,CAAC,QAAkB,EAAW,EAAE;IACnE,OAAO,IAAA,wBAAgB,EAAC,QAAQ,EAAE,MAAM,CAAC,eAAe,CAAC,CAAC;AAC5D,CAAC,CAAC;AAFW,QAAA,qBAAqB,yBAEhC;AAEF;;;;;GAKG;AACI,MAAM,OAAO,GAAG,CAAC,QAAkB,EAAE,YAAsB,EAAW,EAAE;IAC7E,IAAI,oBAAY,EAAE,CAAC;QACjB,OAAO,IAAI,CAAC,CAAC,kCAAkC;IACjD,CAAC;IACD,OAAO,QAAQ,KAAK,YAAY,CAAC;AACnC,CAAC,CAAC;AALW,QAAA,OAAO,WAKlB;AAEF;;;;;GAKG;AACI,MAAM,UAAU,GAAG,CAAC,QAAkB,EAAE,aAAyB,EAAW,EAAE;IACnF,IAAI,oBAAY,EAAE,CAAC;QACjB,OAAO,IAAI,CAAC,CAAC,kCAAkC;IACjD,CAAC;IACD,OAAO,aAAa,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;AAC1C,CAAC,CAAC;AALW,QAAA,UAAU,cAKrB;AAEF;;;;;GAKG;AACI,MAAM,cAAc,GAAG,CAAC,QAAkB,EAAW,EAAE;IAC5D,OAAO,IAAA,wBAAgB,EAAC,QAAQ,EAAE,MAAM,CAAC,YAAY,CAAC,CAAC;AACzD,CAAC,CAAC;AAFW,QAAA,cAAc,kBAEzB;AAEF;;;;;GAKG;AACI,MAAM,sBAAsB,GAAG,CAAC,QAAkB,EAAW,EAAE;IACpE,OAAO,IAAA,wBAAgB,EAAC,QAAQ,EAAE,MAAM,CAAC,oBAAoB,CAAC,CAAC;AACjE,CAAC,CAAC;AAFW,QAAA,sBAAsB,0BAEjC;AAEF;;;;;GAKG;AACI,MAAM,kBAAkB,GAAG,CAAC,QAAkB,EAAW,EAAE;IAChE,OAAO,IAAA,wBAAgB,EAAC,QAAQ,EAAE,MAAM,CAAC,eAAe,CAAC,CAAC;AAC5D,CAAC,CAAC;AAFW,QAAA,kBAAkB,sBAE7B;AAEF;;;;;GAKG;AACI,MAAM,YAAY,GAAG,CAAC,QAAkB,EAAW,EAAE;IAC1D,OAAO,CAAC,IAAA,0BAAkB,EAAC,QAAQ,CAAC,CAAC;AACvC,CAAC,CAAC;AAFW,QAAA,YAAY,gBAEvB;AAEF;;;;;;GAMG;AACI,MAAM,cAAc,GAAG,CAAC,eAAyB,EAAE,cAAwB,EAAW,EAAE;IAC7F,IAAI,oBAAY,EAAE,CAAC;QACjB,OAAO,IAAI,CAAC,CAAC,mCAAmC;IAClD,CAAC;IAED,gDAAgD;IAChD,OAAO,IAAA,6BAAqB,EAAC,cAAc,CAAC,CAAC;AAC/C,CAAC,CAAC;AAPW,QAAA,cAAc,kBAOzB;AAEF;;wEAEwE;AAExE;;;;;;;GAOG;AACI,MAAM,cAAc,GAAG,KAAK,EAAE,MAAc,EAA4B,EAAE;IAC/E,MAAM,IAAA,mCAAkB,GAAE,CAAC;IAC3B,OAAO,IAAA,mBAAW,EAAC,MAAM,CAAC,CAAC;AAC7B,CAAC,CAAC;AAHW,QAAA,cAAc,kBAGzB",
      names: [],
      sources: ["/Users/kevin/card-show-finder/src/services/userRoleService.ts"],
      sourcesContent: ["import { supabase } from '../supabase';\nimport { refreshUserSession } from './sessionService';\n\n// User role constants\nexport enum UserRole {\n  ATTENDEE = 'attendee',\n  DEALER = 'dealer',\n  MVP_DEALER = 'mvp_dealer',\n  SHOW_ORGANIZER = 'show_organizer',\n}\n\n/**\n * Global test-mode flag.\n *\n * KEEP THIS **FALSE** IN PRODUCTION.\n * Can be overridden at runtime by setting\n *   globalThis.CSF_IS_TEST_MODE = true\n * during e2e / unit tests.\n */\n// NOTE: changing this to **const** prevents runtime overrides in production.\nexport const IS_TEST_MODE = false;\n\n\n/* ------------------------------------------------------------------\n * Utility helpers\n * ------------------------------------------------------------------ */\n\n/**\n * Normalises a role string coming from the database (often lowercase)\n * to the corresponding uppercase `UserRole` enum value.\n * Returns `null` if it cannot be mapped.\n */\nexport const normalizeRole = (role?: string | null): UserRole | null => {\n  if (!role) return null;\n  const upper = role.toUpperCase() as UserRole;\n  return (Object.values(UserRole) as string[]).includes(upper) ? upper : null;\n};\n\n/* ------------------------------------------------------------------\n * Permission Matrix\n * ------------------------------------------------------------------ */\n\n/**\n * Discrete actions in the system that can be gated by role.\n * Extend this enum as new features are added.\n */\nexport enum Action {\n  SEND_DM = 'SEND_DM',\n  RECEIVE_DM = 'RECEIVE_DM',\n  REPLY_DM = 'REPLY_DM',\n  SEND_BROADCAST = 'SEND_BROADCAST',\n  MANAGE_SHOWS = 'MANAGE_SHOWS', // create / edit show listings\n  DEALER_PARTICIPATION = 'DEALER_PARTICIPATION',\n  PREMIUM_FEATURE = 'PREMIUM_FEATURE',\n  MODERATE_MESSAGE = 'MODERATE_MESSAGE',\n}\n\n/**\n * Mapping of role \u21D2 allowed action set.\n * NOTE: keep this in sync with product requirements.\n */\nconst ROLE_PERMISSIONS: Record<UserRole, Set<Action>> = {\n  [UserRole.ATTENDEE]: new Set<Action>([\n    Action.SEND_DM,\n    Action.RECEIVE_DM,\n    Action.REPLY_DM,\n  ]),\n  [UserRole.DEALER]: new Set<Action>([\n    Action.RECEIVE_DM,\n    Action.DEALER_PARTICIPATION,\n  ]),\n  [UserRole.MVP_DEALER]: new Set<Action>([\n    Action.SEND_DM,\n    Action.RECEIVE_DM,\n    Action.REPLY_DM,\n    Action.SEND_BROADCAST,\n    Action.DEALER_PARTICIPATION,\n    Action.PREMIUM_FEATURE,\n  ]),\n  [UserRole.SHOW_ORGANIZER]: new Set<Action>([\n    Action.SEND_DM,\n    Action.RECEIVE_DM,\n    Action.REPLY_DM,\n    Action.SEND_BROADCAST,\n    Action.MANAGE_SHOWS,\n    Action.DEALER_PARTICIPATION,\n    Action.PREMIUM_FEATURE,\n    Action.MODERATE_MESSAGE,\n  ]),\n};\n\n/**\n * Generic permission checker.\n * @param userRole   caller\u2019s role\n * @param action     action to check\n */\nexport const canPerformAction = (userRole: UserRole, action: Action): boolean => {\n  if (IS_TEST_MODE) return true;\n  const allowed = ROLE_PERMISSIONS[userRole];\n  return allowed ? allowed.has(action) : false;\n};\n\n/* ------------------------------------------------------------------\n * Messaging-specific helpers\n * ------------------------------------------------------------------ */\n\n/**\n * Checks if a sender can initiate a DM to a recipient\n * (show validation must be handled by caller when needed).\n */\nexport const canSendDirectMessage = (\n  senderRole: UserRole,\n  recipientRole: UserRole\n): boolean => {\n  if (IS_TEST_MODE) return true;\n\n  switch (senderRole) {\n    case UserRole.ATTENDEE:\n      return recipientRole === UserRole.MVP_DEALER;\n    case UserRole.MVP_DEALER:\n      return (\n        recipientRole === UserRole.ATTENDEE ||\n        recipientRole === UserRole.DEALER ||\n        recipientRole === UserRole.SHOW_ORGANIZER\n      );\n    case UserRole.SHOW_ORGANIZER:\n      return true; // can DM anyone\n    default:\n      return false;\n  }\n};\n\n/**\n * Dealers are read-only, everyone else can reply.\n */\nexport const canReplyToMessage = (userRole: UserRole): boolean => {\n  if (IS_TEST_MODE) return true;\n  return userRole !== UserRole.DEALER;\n};\n\n/**\n * Broadcast: MVP dealer (attendees only) or organizer (quota enforced server-side)\n */\nexport const canSendBroadcast = (userRole: UserRole): boolean => {\n  if (IS_TEST_MODE) return true;\n  return (\n    userRole === UserRole.MVP_DEALER ||\n    userRole === UserRole.SHOW_ORGANIZER\n  );\n};\n\n/**\n * Show organizers (for their shows) & admins (handled elsewhere) can moderate.\n */\nexport const canModerateMessages = (userRole: UserRole): boolean => {\n  if (IS_TEST_MODE) return true;\n  return userRole === UserRole.SHOW_ORGANIZER;\n};\n\n/**\n * Fetches a user's role from the profiles table.\n * @param userId The ID of the user.\n * @returns The user's role as a string, or null if not found/error.\n */\nexport const getUserRole = async (userId: string): Promise<UserRole | null> => {\n  try {\n    const { data, error } = await supabase\n      .from('profiles')\n      .select('role')\n      .eq('id', userId)\n      .single();\n\n    if (error) {\n      console.error('Error fetching user role:', error);\n      return null;\n    }\n\n    return normalizeRole(data?.role);\n  } catch (error) {\n    console.error('Exception in getUserRole:', error);\n    return null;\n  }\n};\n\n/**\n * Get user profile by ID.\n * @param userId User ID to lookup\n * @returns User profile information or null\n */\nexport const getUserProfile = async (userId: string) => {\n  try {\n    const { data, error } = await supabase\n      .from('profiles')\n      .select('id, username, full_name, avatar_url, role')\n      .eq('id', userId)\n      .single();\n      \n    if (error) {\n      console.error('Error fetching user profile:', error);\n      return null;\n    }\n    \n    return data;\n  } catch (error) {\n    console.error('Exception in getUserProfile:', error);\n    return null;\n  }\n};\n\n/**\n * Checks if a user can send messages.\n * In our current system, all users can send messages.\n * @param userRole The role of the user.\n * @returns True if the user can send messages, false otherwise.\n */\nexport const canUserSendMessage = (userRole: UserRole): boolean => {\n  return canPerformAction(userRole, Action.SEND_MESSAGE);\n};\n\n/**\n * Checks if a user can receive messages.\n * Only MVP_DEALER and SHOW_ORGANIZER can receive messages in production.\n * @param userRole The role of the user.\n * @returns True if the user can receive messages, false otherwise.\n */\nexport const canUserReceiveMessage = (userRole: UserRole): boolean => {\n  return canPerformAction(userRole, Action.RECEIVE_MESSAGE);\n};\n\n/**\n * Provides a general function to check if a user has a specific role.\n * @param userRole The role of the user.\n * @param requiredRole The role required for the action.\n * @returns True if the user has the required role, false otherwise.\n */\nexport const hasRole = (userRole: UserRole, requiredRole: UserRole): boolean => {\n  if (IS_TEST_MODE) {\n    return true; // Bypass role checks in test mode\n  }\n  return userRole === requiredRole;\n};\n\n/**\n * Provides a general function to check if a user has one of several roles.\n * @param userRole The role of the user.\n * @param requiredRoles An array of roles, at least one of which the user must have.\n * @returns True if the user has any of the required roles, false otherwise.\n */\nexport const hasAnyRole = (userRole: UserRole, requiredRoles: UserRole[]): boolean => {\n  if (IS_TEST_MODE) {\n    return true; // Bypass role checks in test mode\n  }\n  return requiredRoles.includes(userRole);\n};\n\n/**\n * Checks if a user can create or edit show listings.\n * Only SHOW_ORGANIZER role can manage show listings.\n * @param userRole The role of the user.\n * @returns True if the user can manage show listings, false otherwise.\n */\nexport const canManageShows = (userRole: UserRole): boolean => {\n  return canPerformAction(userRole, Action.MANAGE_SHOWS);\n};\n\n/**\n * Checks if a user can participate as a dealer in shows.\n * DEALER, MVP_DEALER, and SHOW_ORGANIZER roles can participate as dealers.\n * @param userRole The role of the user.\n * @returns True if the user can participate as a dealer, false otherwise.\n */\nexport const canParticipateAsDealer = (userRole: UserRole): boolean => {\n  return canPerformAction(userRole, Action.DEALER_PARTICIPATION);\n};\n\n/**\n * Checks if a user has premium features.\n * MVP_DEALER and SHOW_ORGANIZER have premium features.\n * @param userRole The role of the user.\n * @returns True if the user has premium features, false otherwise.\n */\nexport const hasPremiumFeatures = (userRole: UserRole): boolean => {\n  return canPerformAction(userRole, Action.PREMIUM_FEATURE);\n};\n\n/**\n * Checks if a user needs to upgrade to access certain features.\n * ATTENDEE and DEALER roles need to upgrade for premium features.\n * @param userRole The role of the user.\n * @returns True if the user needs to upgrade, false otherwise.\n */\nexport const needsUpgrade = (userRole: UserRole): boolean => {\n  return !hasPremiumFeatures(userRole);\n};\n\n/**\n * Checks if a user can contact another user based on their roles.\n * Used to determine if \"Message\" button should be shown in profiles.\n * @param currentUserRole Role of the current user \n * @param targetUserRole Role of the user to be messaged\n * @returns Boolean indicating if messaging is allowed\n */\nexport const canContactUser = (currentUserRole: UserRole, targetUserRole: UserRole): boolean => {\n  if (IS_TEST_MODE) {\n    return true; // Allow all messaging in test mode\n  }\n  \n  // Check if the target user can receive messages\n  return canUserReceiveMessage(targetUserRole);\n};\n\n/* ------------------------------------------------------------------\n * Session / role synchronisation helpers\n * ------------------------------------------------------------------ */\n\n/**\n * Convenience helper that:\n * 1. Refreshes the session token\n * 2. Fetches the latest role from the database\n *\n * This should be called after any action that might change the user's\n * subscription or role (e.g., webhook, upgrade flow).\n */\nexport const updateUserRole = async (userId: string): Promise<UserRole | null> => {\n  await refreshUserSession();\n  return getUserRole(userId);\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "200a7eb2dbd7dbcc4ce597871ff543e3130ab9c9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_tania2nji = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_tania2nji();
cov_tania2nji().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_tania2nji().s[1]++;
exports.updateUserRole = exports.canContactUser = exports.needsUpgrade = exports.hasPremiumFeatures = exports.canParticipateAsDealer = exports.canManageShows = exports.hasAnyRole = exports.hasRole = exports.canUserReceiveMessage = exports.canUserSendMessage = exports.getUserProfile = exports.getUserRole = exports.canModerateMessages = exports.canSendBroadcast = exports.canReplyToMessage = exports.canSendDirectMessage = exports.canPerformAction = exports.Action = exports.normalizeRole = exports.IS_TEST_MODE = exports.UserRole = void 0;
const supabase_1 =
/* istanbul ignore next */
(cov_tania2nji().s[2]++, require("../supabase"));
const sessionService_1 =
/* istanbul ignore next */
(cov_tania2nji().s[3]++, require("./sessionService"));
// User role constants
var UserRole;
/* istanbul ignore next */
cov_tania2nji().s[4]++;
(function (UserRole) {
  /* istanbul ignore next */
  cov_tania2nji().f[0]++;
  cov_tania2nji().s[5]++;
  UserRole["ATTENDEE"] = "attendee";
  /* istanbul ignore next */
  cov_tania2nji().s[6]++;
  UserRole["DEALER"] = "dealer";
  /* istanbul ignore next */
  cov_tania2nji().s[7]++;
  UserRole["MVP_DEALER"] = "mvp_dealer";
  /* istanbul ignore next */
  cov_tania2nji().s[8]++;
  UserRole["SHOW_ORGANIZER"] = "show_organizer";
})(
/* istanbul ignore next */
(cov_tania2nji().b[0][0]++, UserRole) ||
/* istanbul ignore next */
(cov_tania2nji().b[0][1]++, exports.UserRole = UserRole = {}));
/**
 * Global test-mode flag.
 *
 * KEEP THIS **FALSE** IN PRODUCTION.
 * Can be overridden at runtime by setting
 *   globalThis.CSF_IS_TEST_MODE = true
 * during e2e / unit tests.
 */
// NOTE: changing this to **const** prevents runtime overrides in production.
/* istanbul ignore next */
cov_tania2nji().s[9]++;
exports.IS_TEST_MODE = false;
/* ------------------------------------------------------------------
 * Utility helpers
 * ------------------------------------------------------------------ */
/**
 * Normalises a role string coming from the database (often lowercase)
 * to the corresponding uppercase `UserRole` enum value.
 * Returns `null` if it cannot be mapped.
 */
/* istanbul ignore next */
cov_tania2nji().s[10]++;
const normalizeRole = role => {
  /* istanbul ignore next */
  cov_tania2nji().f[1]++;
  cov_tania2nji().s[11]++;
  if (!role) {
    /* istanbul ignore next */
    cov_tania2nji().b[1][0]++;
    cov_tania2nji().s[12]++;
    return null;
  } else
  /* istanbul ignore next */
  {
    cov_tania2nji().b[1][1]++;
  }
  const upper =
  /* istanbul ignore next */
  (cov_tania2nji().s[13]++, role.toUpperCase());
  /* istanbul ignore next */
  cov_tania2nji().s[14]++;
  return Object.values(UserRole).includes(upper) ?
  /* istanbul ignore next */
  (cov_tania2nji().b[2][0]++, upper) :
  /* istanbul ignore next */
  (cov_tania2nji().b[2][1]++, null);
};
/* istanbul ignore next */
cov_tania2nji().s[15]++;
exports.normalizeRole = normalizeRole;
/* ------------------------------------------------------------------
 * Permission Matrix
 * ------------------------------------------------------------------ */
/**
 * Discrete actions in the system that can be gated by role.
 * Extend this enum as new features are added.
 */
var Action;
/* istanbul ignore next */
cov_tania2nji().s[16]++;
(function (Action) {
  /* istanbul ignore next */
  cov_tania2nji().f[2]++;
  cov_tania2nji().s[17]++;
  Action["SEND_DM"] = "SEND_DM";
  /* istanbul ignore next */
  cov_tania2nji().s[18]++;
  Action["RECEIVE_DM"] = "RECEIVE_DM";
  /* istanbul ignore next */
  cov_tania2nji().s[19]++;
  Action["REPLY_DM"] = "REPLY_DM";
  /* istanbul ignore next */
  cov_tania2nji().s[20]++;
  Action["SEND_BROADCAST"] = "SEND_BROADCAST";
  /* istanbul ignore next */
  cov_tania2nji().s[21]++;
  Action["MANAGE_SHOWS"] = "MANAGE_SHOWS";
  /* istanbul ignore next */
  cov_tania2nji().s[22]++;
  Action["DEALER_PARTICIPATION"] = "DEALER_PARTICIPATION";
  /* istanbul ignore next */
  cov_tania2nji().s[23]++;
  Action["PREMIUM_FEATURE"] = "PREMIUM_FEATURE";
  /* istanbul ignore next */
  cov_tania2nji().s[24]++;
  Action["MODERATE_MESSAGE"] = "MODERATE_MESSAGE";
})(
/* istanbul ignore next */
(cov_tania2nji().b[3][0]++, Action) ||
/* istanbul ignore next */
(cov_tania2nji().b[3][1]++, exports.Action = Action = {}));
/**
 * Mapping of role ⇒ allowed action set.
 * NOTE: keep this in sync with product requirements.
 */
const ROLE_PERMISSIONS =
/* istanbul ignore next */
(cov_tania2nji().s[25]++, {
  [UserRole.ATTENDEE]: new Set([Action.SEND_DM, Action.RECEIVE_DM, Action.REPLY_DM]),
  [UserRole.DEALER]: new Set([Action.RECEIVE_DM, Action.DEALER_PARTICIPATION]),
  [UserRole.MVP_DEALER]: new Set([Action.SEND_DM, Action.RECEIVE_DM, Action.REPLY_DM, Action.SEND_BROADCAST, Action.DEALER_PARTICIPATION, Action.PREMIUM_FEATURE]),
  [UserRole.SHOW_ORGANIZER]: new Set([Action.SEND_DM, Action.RECEIVE_DM, Action.REPLY_DM, Action.SEND_BROADCAST, Action.MANAGE_SHOWS, Action.DEALER_PARTICIPATION, Action.PREMIUM_FEATURE, Action.MODERATE_MESSAGE])
});
/**
 * Generic permission checker.
 * @param userRole   caller’s role
 * @param action     action to check
 */
/* istanbul ignore next */
cov_tania2nji().s[26]++;
const canPerformAction = (userRole, action) => {
  /* istanbul ignore next */
  cov_tania2nji().f[3]++;
  cov_tania2nji().s[27]++;
  if (exports.IS_TEST_MODE) {
    /* istanbul ignore next */
    cov_tania2nji().b[4][0]++;
    cov_tania2nji().s[28]++;
    return true;
  } else
  /* istanbul ignore next */
  {
    cov_tania2nji().b[4][1]++;
  }
  const allowed =
  /* istanbul ignore next */
  (cov_tania2nji().s[29]++, ROLE_PERMISSIONS[userRole]);
  /* istanbul ignore next */
  cov_tania2nji().s[30]++;
  return allowed ?
  /* istanbul ignore next */
  (cov_tania2nji().b[5][0]++, allowed.has(action)) :
  /* istanbul ignore next */
  (cov_tania2nji().b[5][1]++, false);
};
/* istanbul ignore next */
cov_tania2nji().s[31]++;
exports.canPerformAction = canPerformAction;
/* ------------------------------------------------------------------
 * Messaging-specific helpers
 * ------------------------------------------------------------------ */
/**
 * Checks if a sender can initiate a DM to a recipient
 * (show validation must be handled by caller when needed).
 */
/* istanbul ignore next */
cov_tania2nji().s[32]++;
const canSendDirectMessage = (senderRole, recipientRole) => {
  /* istanbul ignore next */
  cov_tania2nji().f[4]++;
  cov_tania2nji().s[33]++;
  if (exports.IS_TEST_MODE) {
    /* istanbul ignore next */
    cov_tania2nji().b[6][0]++;
    cov_tania2nji().s[34]++;
    return true;
  } else
  /* istanbul ignore next */
  {
    cov_tania2nji().b[6][1]++;
  }
  cov_tania2nji().s[35]++;
  switch (senderRole) {
    case UserRole.ATTENDEE:
      /* istanbul ignore next */
      cov_tania2nji().b[7][0]++;
      cov_tania2nji().s[36]++;
      return recipientRole === UserRole.MVP_DEALER;
    case UserRole.MVP_DEALER:
      /* istanbul ignore next */
      cov_tania2nji().b[7][1]++;
      cov_tania2nji().s[37]++;
      return /* istanbul ignore next */(cov_tania2nji().b[8][0]++, recipientRole === UserRole.ATTENDEE) ||
      /* istanbul ignore next */
      (cov_tania2nji().b[8][1]++, recipientRole === UserRole.DEALER) ||
      /* istanbul ignore next */
      (cov_tania2nji().b[8][2]++, recipientRole === UserRole.SHOW_ORGANIZER);
    case UserRole.SHOW_ORGANIZER:
      /* istanbul ignore next */
      cov_tania2nji().b[7][2]++;
      cov_tania2nji().s[38]++;
      return true;
    // can DM anyone
    default:
      /* istanbul ignore next */
      cov_tania2nji().b[7][3]++;
      cov_tania2nji().s[39]++;
      return false;
  }
};
/* istanbul ignore next */
cov_tania2nji().s[40]++;
exports.canSendDirectMessage = canSendDirectMessage;
/**
 * Dealers are read-only, everyone else can reply.
 */
/* istanbul ignore next */
cov_tania2nji().s[41]++;
const canReplyToMessage = userRole => {
  /* istanbul ignore next */
  cov_tania2nji().f[5]++;
  cov_tania2nji().s[42]++;
  if (exports.IS_TEST_MODE) {
    /* istanbul ignore next */
    cov_tania2nji().b[9][0]++;
    cov_tania2nji().s[43]++;
    return true;
  } else
  /* istanbul ignore next */
  {
    cov_tania2nji().b[9][1]++;
  }
  cov_tania2nji().s[44]++;
  return userRole !== UserRole.DEALER;
};
/* istanbul ignore next */
cov_tania2nji().s[45]++;
exports.canReplyToMessage = canReplyToMessage;
/**
 * Broadcast: MVP dealer (attendees only) or organizer (quota enforced server-side)
 */
/* istanbul ignore next */
cov_tania2nji().s[46]++;
const canSendBroadcast = userRole => {
  /* istanbul ignore next */
  cov_tania2nji().f[6]++;
  cov_tania2nji().s[47]++;
  if (exports.IS_TEST_MODE) {
    /* istanbul ignore next */
    cov_tania2nji().b[10][0]++;
    cov_tania2nji().s[48]++;
    return true;
  } else
  /* istanbul ignore next */
  {
    cov_tania2nji().b[10][1]++;
  }
  cov_tania2nji().s[49]++;
  return /* istanbul ignore next */(cov_tania2nji().b[11][0]++, userRole === UserRole.MVP_DEALER) ||
  /* istanbul ignore next */
  (cov_tania2nji().b[11][1]++, userRole === UserRole.SHOW_ORGANIZER);
};
/* istanbul ignore next */
cov_tania2nji().s[50]++;
exports.canSendBroadcast = canSendBroadcast;
/**
 * Show organizers (for their shows) & admins (handled elsewhere) can moderate.
 */
/* istanbul ignore next */
cov_tania2nji().s[51]++;
const canModerateMessages = userRole => {
  /* istanbul ignore next */
  cov_tania2nji().f[7]++;
  cov_tania2nji().s[52]++;
  if (exports.IS_TEST_MODE) {
    /* istanbul ignore next */
    cov_tania2nji().b[12][0]++;
    cov_tania2nji().s[53]++;
    return true;
  } else
  /* istanbul ignore next */
  {
    cov_tania2nji().b[12][1]++;
  }
  cov_tania2nji().s[54]++;
  return userRole === UserRole.SHOW_ORGANIZER;
};
/* istanbul ignore next */
cov_tania2nji().s[55]++;
exports.canModerateMessages = canModerateMessages;
/**
 * Fetches a user's role from the profiles table.
 * @param userId The ID of the user.
 * @returns The user's role as a string, or null if not found/error.
 */
/* istanbul ignore next */
cov_tania2nji().s[56]++;
const getUserRole = async userId => {
  /* istanbul ignore next */
  cov_tania2nji().f[8]++;
  cov_tania2nji().s[57]++;
  try {
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_tania2nji().s[58]++, await supabase_1.supabase.from('profiles').select('role').eq('id', userId).single());
    /* istanbul ignore next */
    cov_tania2nji().s[59]++;
    if (error) {
      /* istanbul ignore next */
      cov_tania2nji().b[13][0]++;
      cov_tania2nji().s[60]++;
      console.error('Error fetching user role:', error);
      /* istanbul ignore next */
      cov_tania2nji().s[61]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_tania2nji().b[13][1]++;
    }
    cov_tania2nji().s[62]++;
    return (0, exports.normalizeRole)(data?.role);
  } catch (error) {
    /* istanbul ignore next */
    cov_tania2nji().s[63]++;
    console.error('Exception in getUserRole:', error);
    /* istanbul ignore next */
    cov_tania2nji().s[64]++;
    return null;
  }
};
/* istanbul ignore next */
cov_tania2nji().s[65]++;
exports.getUserRole = getUserRole;
/**
 * Get user profile by ID.
 * @param userId User ID to lookup
 * @returns User profile information or null
 */
/* istanbul ignore next */
cov_tania2nji().s[66]++;
const getUserProfile = async userId => {
  /* istanbul ignore next */
  cov_tania2nji().f[9]++;
  cov_tania2nji().s[67]++;
  try {
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_tania2nji().s[68]++, await supabase_1.supabase.from('profiles').select('id, username, full_name, avatar_url, role').eq('id', userId).single());
    /* istanbul ignore next */
    cov_tania2nji().s[69]++;
    if (error) {
      /* istanbul ignore next */
      cov_tania2nji().b[14][0]++;
      cov_tania2nji().s[70]++;
      console.error('Error fetching user profile:', error);
      /* istanbul ignore next */
      cov_tania2nji().s[71]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_tania2nji().b[14][1]++;
    }
    cov_tania2nji().s[72]++;
    return data;
  } catch (error) {
    /* istanbul ignore next */
    cov_tania2nji().s[73]++;
    console.error('Exception in getUserProfile:', error);
    /* istanbul ignore next */
    cov_tania2nji().s[74]++;
    return null;
  }
};
/* istanbul ignore next */
cov_tania2nji().s[75]++;
exports.getUserProfile = getUserProfile;
/**
 * Checks if a user can send messages.
 * In our current system, all users can send messages.
 * @param userRole The role of the user.
 * @returns True if the user can send messages, false otherwise.
 */
/* istanbul ignore next */
cov_tania2nji().s[76]++;
const canUserSendMessage = userRole => {
  /* istanbul ignore next */
  cov_tania2nji().f[10]++;
  cov_tania2nji().s[77]++;
  return (0, exports.canPerformAction)(userRole, Action.SEND_MESSAGE);
};
/* istanbul ignore next */
cov_tania2nji().s[78]++;
exports.canUserSendMessage = canUserSendMessage;
/**
 * Checks if a user can receive messages.
 * Only MVP_DEALER and SHOW_ORGANIZER can receive messages in production.
 * @param userRole The role of the user.
 * @returns True if the user can receive messages, false otherwise.
 */
/* istanbul ignore next */
cov_tania2nji().s[79]++;
const canUserReceiveMessage = userRole => {
  /* istanbul ignore next */
  cov_tania2nji().f[11]++;
  cov_tania2nji().s[80]++;
  return (0, exports.canPerformAction)(userRole, Action.RECEIVE_MESSAGE);
};
/* istanbul ignore next */
cov_tania2nji().s[81]++;
exports.canUserReceiveMessage = canUserReceiveMessage;
/**
 * Provides a general function to check if a user has a specific role.
 * @param userRole The role of the user.
 * @param requiredRole The role required for the action.
 * @returns True if the user has the required role, false otherwise.
 */
/* istanbul ignore next */
cov_tania2nji().s[82]++;
const hasRole = (userRole, requiredRole) => {
  /* istanbul ignore next */
  cov_tania2nji().f[12]++;
  cov_tania2nji().s[83]++;
  if (exports.IS_TEST_MODE) {
    /* istanbul ignore next */
    cov_tania2nji().b[15][0]++;
    cov_tania2nji().s[84]++;
    return true; // Bypass role checks in test mode
  } else
  /* istanbul ignore next */
  {
    cov_tania2nji().b[15][1]++;
  }
  cov_tania2nji().s[85]++;
  return userRole === requiredRole;
};
/* istanbul ignore next */
cov_tania2nji().s[86]++;
exports.hasRole = hasRole;
/**
 * Provides a general function to check if a user has one of several roles.
 * @param userRole The role of the user.
 * @param requiredRoles An array of roles, at least one of which the user must have.
 * @returns True if the user has any of the required roles, false otherwise.
 */
/* istanbul ignore next */
cov_tania2nji().s[87]++;
const hasAnyRole = (userRole, requiredRoles) => {
  /* istanbul ignore next */
  cov_tania2nji().f[13]++;
  cov_tania2nji().s[88]++;
  if (exports.IS_TEST_MODE) {
    /* istanbul ignore next */
    cov_tania2nji().b[16][0]++;
    cov_tania2nji().s[89]++;
    return true; // Bypass role checks in test mode
  } else
  /* istanbul ignore next */
  {
    cov_tania2nji().b[16][1]++;
  }
  cov_tania2nji().s[90]++;
  return requiredRoles.includes(userRole);
};
/* istanbul ignore next */
cov_tania2nji().s[91]++;
exports.hasAnyRole = hasAnyRole;
/**
 * Checks if a user can create or edit show listings.
 * Only SHOW_ORGANIZER role can manage show listings.
 * @param userRole The role of the user.
 * @returns True if the user can manage show listings, false otherwise.
 */
/* istanbul ignore next */
cov_tania2nji().s[92]++;
const canManageShows = userRole => {
  /* istanbul ignore next */
  cov_tania2nji().f[14]++;
  cov_tania2nji().s[93]++;
  return (0, exports.canPerformAction)(userRole, Action.MANAGE_SHOWS);
};
/* istanbul ignore next */
cov_tania2nji().s[94]++;
exports.canManageShows = canManageShows;
/**
 * Checks if a user can participate as a dealer in shows.
 * DEALER, MVP_DEALER, and SHOW_ORGANIZER roles can participate as dealers.
 * @param userRole The role of the user.
 * @returns True if the user can participate as a dealer, false otherwise.
 */
/* istanbul ignore next */
cov_tania2nji().s[95]++;
const canParticipateAsDealer = userRole => {
  /* istanbul ignore next */
  cov_tania2nji().f[15]++;
  cov_tania2nji().s[96]++;
  return (0, exports.canPerformAction)(userRole, Action.DEALER_PARTICIPATION);
};
/* istanbul ignore next */
cov_tania2nji().s[97]++;
exports.canParticipateAsDealer = canParticipateAsDealer;
/**
 * Checks if a user has premium features.
 * MVP_DEALER and SHOW_ORGANIZER have premium features.
 * @param userRole The role of the user.
 * @returns True if the user has premium features, false otherwise.
 */
/* istanbul ignore next */
cov_tania2nji().s[98]++;
const hasPremiumFeatures = userRole => {
  /* istanbul ignore next */
  cov_tania2nji().f[16]++;
  cov_tania2nji().s[99]++;
  return (0, exports.canPerformAction)(userRole, Action.PREMIUM_FEATURE);
};
/* istanbul ignore next */
cov_tania2nji().s[100]++;
exports.hasPremiumFeatures = hasPremiumFeatures;
/**
 * Checks if a user needs to upgrade to access certain features.
 * ATTENDEE and DEALER roles need to upgrade for premium features.
 * @param userRole The role of the user.
 * @returns True if the user needs to upgrade, false otherwise.
 */
/* istanbul ignore next */
cov_tania2nji().s[101]++;
const needsUpgrade = userRole => {
  /* istanbul ignore next */
  cov_tania2nji().f[17]++;
  cov_tania2nji().s[102]++;
  return !(0, exports.hasPremiumFeatures)(userRole);
};
/* istanbul ignore next */
cov_tania2nji().s[103]++;
exports.needsUpgrade = needsUpgrade;
/**
 * Checks if a user can contact another user based on their roles.
 * Used to determine if "Message" button should be shown in profiles.
 * @param currentUserRole Role of the current user
 * @param targetUserRole Role of the user to be messaged
 * @returns Boolean indicating if messaging is allowed
 */
/* istanbul ignore next */
cov_tania2nji().s[104]++;
const canContactUser = (currentUserRole, targetUserRole) => {
  /* istanbul ignore next */
  cov_tania2nji().f[18]++;
  cov_tania2nji().s[105]++;
  if (exports.IS_TEST_MODE) {
    /* istanbul ignore next */
    cov_tania2nji().b[17][0]++;
    cov_tania2nji().s[106]++;
    return true; // Allow all messaging in test mode
  } else
  /* istanbul ignore next */
  {
    cov_tania2nji().b[17][1]++;
  }
  // Check if the target user can receive messages
  cov_tania2nji().s[107]++;
  return (0, exports.canUserReceiveMessage)(targetUserRole);
};
/* istanbul ignore next */
cov_tania2nji().s[108]++;
exports.canContactUser = canContactUser;
/* ------------------------------------------------------------------
 * Session / role synchronisation helpers
 * ------------------------------------------------------------------ */
/**
 * Convenience helper that:
 * 1. Refreshes the session token
 * 2. Fetches the latest role from the database
 *
 * This should be called after any action that might change the user's
 * subscription or role (e.g., webhook, upgrade flow).
 */
/* istanbul ignore next */
cov_tania2nji().s[109]++;
const updateUserRole = async userId => {
  /* istanbul ignore next */
  cov_tania2nji().f[19]++;
  cov_tania2nji().s[110]++;
  await (0, sessionService_1.refreshUserSession)();
  /* istanbul ignore next */
  cov_tania2nji().s[111]++;
  return (0, exports.getUserRole)(userId);
};
/* istanbul ignore next */
cov_tania2nji().s[112]++;
exports.updateUserRole = updateUserRole;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,