{"version":3,"names":["supabase_1","cov_tania2nji","s","require","sessionService_1","UserRole","f","b","exports","IS_TEST_MODE","normalizeRole","role","upper","toUpperCase","Object","values","includes","Action","ROLE_PERMISSIONS","ATTENDEE","Set","SEND_DM","RECEIVE_DM","REPLY_DM","DEALER","DEALER_PARTICIPATION","MVP_DEALER","SEND_BROADCAST","PREMIUM_FEATURE","SHOW_ORGANIZER","MANAGE_SHOWS","MODERATE_MESSAGE","canPerformAction","userRole","action","allowed","has","canSendDirectMessage","senderRole","recipientRole","canReplyToMessage","canSendBroadcast","canModerateMessages","getUserRole","userId","data","error","supabase","from","select","eq","single","console","getUserProfile","canUserSendMessage","SEND_MESSAGE","canUserReceiveMessage","RECEIVE_MESSAGE","hasRole","requiredRole","hasAnyRole","requiredRoles","canManageShows","canParticipateAsDealer","hasPremiumFeatures","needsUpgrade","canContactUser","currentUserRole","targetUserRole","updateUserRole","refreshUserSession"],"sources":["/Users/kevin/card-show-finder/src/services/userRoleService.ts"],"sourcesContent":["import { supabase } from '../supabase';\nimport { refreshUserSession } from './sessionService';\n\n// User role constants\nexport enum UserRole {\n  ATTENDEE = 'attendee',\n  DEALER = 'dealer',\n  MVP_DEALER = 'mvp_dealer',\n  SHOW_ORGANIZER = 'show_organizer',\n}\n\n/**\n * Global test-mode flag.\n *\n * KEEP THIS **FALSE** IN PRODUCTION.\n * Can be overridden at runtime by setting\n *   globalThis.CSF_IS_TEST_MODE = true\n * during e2e / unit tests.\n */\n// NOTE: changing this to **const** prevents runtime overrides in production.\nexport const IS_TEST_MODE = false;\n\n\n/* ------------------------------------------------------------------\n * Utility helpers\n * ------------------------------------------------------------------ */\n\n/**\n * Normalises a role string coming from the database (often lowercase)\n * to the corresponding uppercase `UserRole` enum value.\n * Returns `null` if it cannot be mapped.\n */\nexport const normalizeRole = (role?: string | null): UserRole | null => {\n  if (!role) return null;\n  const upper = role.toUpperCase() as UserRole;\n  return (Object.values(UserRole) as string[]).includes(upper) ? upper : null;\n};\n\n/* ------------------------------------------------------------------\n * Permission Matrix\n * ------------------------------------------------------------------ */\n\n/**\n * Discrete actions in the system that can be gated by role.\n * Extend this enum as new features are added.\n */\nexport enum Action {\n  SEND_DM = 'SEND_DM',\n  RECEIVE_DM = 'RECEIVE_DM',\n  REPLY_DM = 'REPLY_DM',\n  SEND_BROADCAST = 'SEND_BROADCAST',\n  MANAGE_SHOWS = 'MANAGE_SHOWS', // create / edit show listings\n  DEALER_PARTICIPATION = 'DEALER_PARTICIPATION',\n  PREMIUM_FEATURE = 'PREMIUM_FEATURE',\n  MODERATE_MESSAGE = 'MODERATE_MESSAGE',\n}\n\n/**\n * Mapping of role ⇒ allowed action set.\n * NOTE: keep this in sync with product requirements.\n */\nconst ROLE_PERMISSIONS: Record<UserRole, Set<Action>> = {\n  [UserRole.ATTENDEE]: new Set<Action>([\n    Action.SEND_DM,\n    Action.RECEIVE_DM,\n    Action.REPLY_DM,\n  ]),\n  [UserRole.DEALER]: new Set<Action>([\n    Action.RECEIVE_DM,\n    Action.DEALER_PARTICIPATION,\n  ]),\n  [UserRole.MVP_DEALER]: new Set<Action>([\n    Action.SEND_DM,\n    Action.RECEIVE_DM,\n    Action.REPLY_DM,\n    Action.SEND_BROADCAST,\n    Action.DEALER_PARTICIPATION,\n    Action.PREMIUM_FEATURE,\n  ]),\n  [UserRole.SHOW_ORGANIZER]: new Set<Action>([\n    Action.SEND_DM,\n    Action.RECEIVE_DM,\n    Action.REPLY_DM,\n    Action.SEND_BROADCAST,\n    Action.MANAGE_SHOWS,\n    Action.DEALER_PARTICIPATION,\n    Action.PREMIUM_FEATURE,\n    Action.MODERATE_MESSAGE,\n  ]),\n};\n\n/**\n * Generic permission checker.\n * @param userRole   caller’s role\n * @param action     action to check\n */\nexport const canPerformAction = (userRole: UserRole, action: Action): boolean => {\n  if (IS_TEST_MODE) return true;\n  const allowed = ROLE_PERMISSIONS[userRole];\n  return allowed ? allowed.has(action) : false;\n};\n\n/* ------------------------------------------------------------------\n * Messaging-specific helpers\n * ------------------------------------------------------------------ */\n\n/**\n * Checks if a sender can initiate a DM to a recipient\n * (show validation must be handled by caller when needed).\n */\nexport const canSendDirectMessage = (\n  senderRole: UserRole,\n  recipientRole: UserRole\n): boolean => {\n  if (IS_TEST_MODE) return true;\n\n  switch (senderRole) {\n    case UserRole.ATTENDEE:\n      return recipientRole === UserRole.MVP_DEALER;\n    case UserRole.MVP_DEALER:\n      return (\n        recipientRole === UserRole.ATTENDEE ||\n        recipientRole === UserRole.DEALER ||\n        recipientRole === UserRole.SHOW_ORGANIZER\n      );\n    case UserRole.SHOW_ORGANIZER:\n      return true; // can DM anyone\n    default:\n      return false;\n  }\n};\n\n/**\n * Dealers are read-only, everyone else can reply.\n */\nexport const canReplyToMessage = (userRole: UserRole): boolean => {\n  if (IS_TEST_MODE) return true;\n  return userRole !== UserRole.DEALER;\n};\n\n/**\n * Broadcast: MVP dealer (attendees only) or organizer (quota enforced server-side)\n */\nexport const canSendBroadcast = (userRole: UserRole): boolean => {\n  if (IS_TEST_MODE) return true;\n  return (\n    userRole === UserRole.MVP_DEALER ||\n    userRole === UserRole.SHOW_ORGANIZER\n  );\n};\n\n/**\n * Show organizers (for their shows) & admins (handled elsewhere) can moderate.\n */\nexport const canModerateMessages = (userRole: UserRole): boolean => {\n  if (IS_TEST_MODE) return true;\n  return userRole === UserRole.SHOW_ORGANIZER;\n};\n\n/**\n * Fetches a user's role from the profiles table.\n * @param userId The ID of the user.\n * @returns The user's role as a string, or null if not found/error.\n */\nexport const getUserRole = async (userId: string): Promise<UserRole | null> => {\n  try {\n    const { data, error } = await supabase\n      .from('profiles')\n      .select('role')\n      .eq('id', userId)\n      .single();\n\n    if (error) {\n      console.error('Error fetching user role:', error);\n      return null;\n    }\n\n    return normalizeRole(data?.role);\n  } catch (error) {\n    console.error('Exception in getUserRole:', error);\n    return null;\n  }\n};\n\n/**\n * Get user profile by ID.\n * @param userId User ID to lookup\n * @returns User profile information or null\n */\nexport const getUserProfile = async (userId: string) => {\n  try {\n    const { data, error } = await supabase\n      .from('profiles')\n      .select('id, username, full_name, avatar_url, role')\n      .eq('id', userId)\n      .single();\n      \n    if (error) {\n      console.error('Error fetching user profile:', error);\n      return null;\n    }\n    \n    return data;\n  } catch (error) {\n    console.error('Exception in getUserProfile:', error);\n    return null;\n  }\n};\n\n/**\n * Checks if a user can send messages.\n * In our current system, all users can send messages.\n * @param userRole The role of the user.\n * @returns True if the user can send messages, false otherwise.\n */\nexport const canUserSendMessage = (userRole: UserRole): boolean => {\n  return canPerformAction(userRole, Action.SEND_MESSAGE);\n};\n\n/**\n * Checks if a user can receive messages.\n * Only MVP_DEALER and SHOW_ORGANIZER can receive messages in production.\n * @param userRole The role of the user.\n * @returns True if the user can receive messages, false otherwise.\n */\nexport const canUserReceiveMessage = (userRole: UserRole): boolean => {\n  return canPerformAction(userRole, Action.RECEIVE_MESSAGE);\n};\n\n/**\n * Provides a general function to check if a user has a specific role.\n * @param userRole The role of the user.\n * @param requiredRole The role required for the action.\n * @returns True if the user has the required role, false otherwise.\n */\nexport const hasRole = (userRole: UserRole, requiredRole: UserRole): boolean => {\n  if (IS_TEST_MODE) {\n    return true; // Bypass role checks in test mode\n  }\n  return userRole === requiredRole;\n};\n\n/**\n * Provides a general function to check if a user has one of several roles.\n * @param userRole The role of the user.\n * @param requiredRoles An array of roles, at least one of which the user must have.\n * @returns True if the user has any of the required roles, false otherwise.\n */\nexport const hasAnyRole = (userRole: UserRole, requiredRoles: UserRole[]): boolean => {\n  if (IS_TEST_MODE) {\n    return true; // Bypass role checks in test mode\n  }\n  return requiredRoles.includes(userRole);\n};\n\n/**\n * Checks if a user can create or edit show listings.\n * Only SHOW_ORGANIZER role can manage show listings.\n * @param userRole The role of the user.\n * @returns True if the user can manage show listings, false otherwise.\n */\nexport const canManageShows = (userRole: UserRole): boolean => {\n  return canPerformAction(userRole, Action.MANAGE_SHOWS);\n};\n\n/**\n * Checks if a user can participate as a dealer in shows.\n * DEALER, MVP_DEALER, and SHOW_ORGANIZER roles can participate as dealers.\n * @param userRole The role of the user.\n * @returns True if the user can participate as a dealer, false otherwise.\n */\nexport const canParticipateAsDealer = (userRole: UserRole): boolean => {\n  return canPerformAction(userRole, Action.DEALER_PARTICIPATION);\n};\n\n/**\n * Checks if a user has premium features.\n * MVP_DEALER and SHOW_ORGANIZER have premium features.\n * @param userRole The role of the user.\n * @returns True if the user has premium features, false otherwise.\n */\nexport const hasPremiumFeatures = (userRole: UserRole): boolean => {\n  return canPerformAction(userRole, Action.PREMIUM_FEATURE);\n};\n\n/**\n * Checks if a user needs to upgrade to access certain features.\n * ATTENDEE and DEALER roles need to upgrade for premium features.\n * @param userRole The role of the user.\n * @returns True if the user needs to upgrade, false otherwise.\n */\nexport const needsUpgrade = (userRole: UserRole): boolean => {\n  return !hasPremiumFeatures(userRole);\n};\n\n/**\n * Checks if a user can contact another user based on their roles.\n * Used to determine if \"Message\" button should be shown in profiles.\n * @param currentUserRole Role of the current user \n * @param targetUserRole Role of the user to be messaged\n * @returns Boolean indicating if messaging is allowed\n */\nexport const canContactUser = (currentUserRole: UserRole, targetUserRole: UserRole): boolean => {\n  if (IS_TEST_MODE) {\n    return true; // Allow all messaging in test mode\n  }\n  \n  // Check if the target user can receive messages\n  return canUserReceiveMessage(targetUserRole);\n};\n\n/* ------------------------------------------------------------------\n * Session / role synchronisation helpers\n * ------------------------------------------------------------------ */\n\n/**\n * Convenience helper that:\n * 1. Refreshes the session token\n * 2. Fetches the latest role from the database\n *\n * This should be called after any action that might change the user's\n * subscription or role (e.g., webhook, upgrade flow).\n */\nexport const updateUserRole = async (userId: string): Promise<UserRole | null> => {\n  await refreshUserSession();\n  return getUserRole(userId);\n};\n"],"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","ignoreList":[]}