{"version":3,"names":["cov_aqm4thb94","actualCoverage","async_storage_1","s","__importDefault","require","CACHE_KEYS","SHOWS","SHOW_FILTERS","SHOW_TIMESTAMP","CACHE_EXPIRATION","cacheShows","shows","filters","f","timestamp","Date","now","default","setItem","JSON","stringify","toString","console","log","length","toLocaleString","error","exports","getCachedShows","timestampStr","getItem","b","parseInt","showsJson","filtersJson","parse","Math","round","clearShowsCache","removeItem"],"sources":["/Users/kevin/card-show-finder/src/services/cacheService.ts"],"sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Show, ShowFilters } from '../types';\n\n// Define cache keys\nconst CACHE_KEYS = {\n  SHOWS: 'cache:shows',\n  SHOW_FILTERS: 'cache:show_filters',\n  SHOW_TIMESTAMP: 'cache:shows_timestamp',\n};\n\n// Cache expiration time (in milliseconds)\nconst CACHE_EXPIRATION = 60 * 60 * 1000; // 1 hour\n\n/**\n * Caches show data along with the timestamp\n * @param shows The shows data to cache\n * @param filters The filters used to fetch the shows\n */\nexport const cacheShows = async (shows: Show[], filters: ShowFilters): Promise<void> => {\n  try {\n    const timestamp = Date.now();\n    \n    // Store the shows data\n    await AsyncStorage.setItem(CACHE_KEYS.SHOWS, JSON.stringify(shows));\n    \n    // Store the filters used\n    await AsyncStorage.setItem(CACHE_KEYS.SHOW_FILTERS, JSON.stringify(filters));\n    \n    // Store the timestamp\n    await AsyncStorage.setItem(CACHE_KEYS.SHOW_TIMESTAMP, timestamp.toString());\n    \n    console.log(`Cached ${shows.length} shows at ${new Date(timestamp).toLocaleString()}`);\n  } catch (error) {\n    console.error('Error caching shows:', error);\n  }\n};\n\n/**\n * Retrieves cached show data if available and not expired\n * @returns The cached shows and filters, or null if cache is expired or not available\n */\nexport const getCachedShows = async (): Promise<{ shows: Show[]; filters: ShowFilters } | null> => {\n  try {\n    // Get the timestamp\n    const timestampStr = await AsyncStorage.getItem(CACHE_KEYS.SHOW_TIMESTAMP);\n    \n    if (!timestampStr) {\n      return null;\n    }\n    \n    const timestamp = parseInt(timestampStr, 10);\n    const now = Date.now();\n    \n    // Check if cache has expired\n    if (now - timestamp > CACHE_EXPIRATION) {\n      console.log('Show cache expired, fetching fresh data');\n      return null;\n    }\n    \n    // Get the cached shows\n    const showsJson = await AsyncStorage.getItem(CACHE_KEYS.SHOWS);\n    const filtersJson = await AsyncStorage.getItem(CACHE_KEYS.SHOW_FILTERS);\n    \n    if (!showsJson || !filtersJson) {\n      return null;\n    }\n    \n    const shows = JSON.parse(showsJson) as Show[];\n    const filters = JSON.parse(filtersJson) as ShowFilters;\n    \n    console.log(`Retrieved ${shows.length} shows from cache (${Math.round((now - timestamp) / 1000 / 60)} minutes old)`);\n    \n    return { shows, filters };\n  } catch (error) {\n    console.error('Error retrieving cached shows:', error);\n    return null;\n  }\n};\n\n/**\n * Clears the shows cache\n */\nexport const clearShowsCache = async (): Promise<void> => {\n  try {\n    await AsyncStorage.removeItem(CACHE_KEYS.SHOWS);\n    await AsyncStorage.removeItem(CACHE_KEYS.SHOW_FILTERS);\n    await AsyncStorage.removeItem(CACHE_KEYS.SHOW_TIMESTAMP);\n    console.log('Shows cache cleared');\n  } catch (error) {\n    console.error('Error clearing shows cache:', error);\n  }\n};\n"],"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","ignoreList":[]}