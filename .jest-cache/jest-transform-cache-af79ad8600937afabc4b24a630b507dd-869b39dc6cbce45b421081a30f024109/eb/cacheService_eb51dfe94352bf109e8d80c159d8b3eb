4578b8f17008edd848ee3a595e078a34
"use strict";

/* istanbul ignore next */
function cov_aqm4thb94() {
  var path = "/Users/kevin/card-show-finder/src/services/cacheService.ts";
  var hash = "c109325453590ed8eaf4aac11b3145c5af823e2e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kevin/card-show-finder/src/services/cacheService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 79
        }
      },
      "4": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 7,
          column: 93
        }
      },
      "5": {
        start: {
          line: 9,
          column: 19
        },
        end: {
          line: 13,
          column: 1
        }
      },
      "6": {
        start: {
          line: 15,
          column: 25
        },
        end: {
          line: 15,
          column: 39
        }
      },
      "7": {
        start: {
          line: 21,
          column: 19
        },
        end: {
          line: 35,
          column: 1
        }
      },
      "8": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 34,
          column: 5
        }
      },
      "9": {
        start: {
          line: 23,
          column: 26
        },
        end: {
          line: 23,
          column: 36
        }
      },
      "10": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 87
        }
      },
      "11": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 96
        }
      },
      "12": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 95
        }
      },
      "13": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 95
        }
      },
      "14": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 53
        }
      },
      "15": {
        start: {
          line: 36,
          column: 0
        },
        end: {
          line: 36,
          column: 32
        }
      },
      "16": {
        start: {
          line: 41,
          column: 23
        },
        end: {
          line: 70,
          column: 1
        }
      },
      "17": {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 69,
          column: 5
        }
      },
      "18": {
        start: {
          line: 44,
          column: 29
        },
        end: {
          line: 44,
          column: 93
        }
      },
      "19": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 47,
          column: 9
        }
      },
      "20": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 46,
          column: 24
        }
      },
      "21": {
        start: {
          line: 48,
          column: 26
        },
        end: {
          line: 48,
          column: 52
        }
      },
      "22": {
        start: {
          line: 49,
          column: 20
        },
        end: {
          line: 49,
          column: 30
        }
      },
      "23": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 54,
          column: 9
        }
      },
      "24": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 67
        }
      },
      "25": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 24
        }
      },
      "26": {
        start: {
          line: 56,
          column: 26
        },
        end: {
          line: 56,
          column: 81
        }
      },
      "27": {
        start: {
          line: 57,
          column: 28
        },
        end: {
          line: 57,
          column: 90
        }
      },
      "28": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 60,
          column: 9
        }
      },
      "29": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 24
        }
      },
      "30": {
        start: {
          line: 61,
          column: 22
        },
        end: {
          line: 61,
          column: 43
        }
      },
      "31": {
        start: {
          line: 62,
          column: 24
        },
        end: {
          line: 62,
          column: 47
        }
      },
      "32": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 125
        }
      },
      "33": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 34
        }
      },
      "34": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 63
        }
      },
      "35": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 68,
          column: 20
        }
      },
      "36": {
        start: {
          line: 71,
          column: 0
        },
        end: {
          line: 71,
          column: 40
        }
      },
      "37": {
        start: {
          line: 75,
          column: 24
        },
        end: {
          line: 85,
          column: 1
        }
      },
      "38": {
        start: {
          line: 76,
          column: 4
        },
        end: {
          line: 84,
          column: 5
        }
      },
      "39": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 67
        }
      },
      "40": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 74
        }
      },
      "41": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 79,
          column: 76
        }
      },
      "42": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 43
        }
      },
      "43": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 83,
          column: 60
        }
      },
      "44": {
        start: {
          line: 86,
          column: 0
        },
        end: {
          line: 86,
          column: 42
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 21,
            column: 19
          },
          end: {
            line: 21,
            column: 20
          }
        },
        loc: {
          start: {
            line: 21,
            column: 45
          },
          end: {
            line: 35,
            column: 1
          }
        },
        line: 21
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 41,
            column: 23
          },
          end: {
            line: 41,
            column: 24
          }
        },
        loc: {
          start: {
            line: 41,
            column: 35
          },
          end: {
            line: 70,
            column: 1
          }
        },
        line: 41
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 75,
            column: 24
          },
          end: {
            line: 75,
            column: 25
          }
        },
        loc: {
          start: {
            line: 75,
            column: 36
          },
          end: {
            line: 85,
            column: 1
          }
        },
        line: 75
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "4": {
        loc: {
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 54,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 54,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 51
      },
      "5": {
        loc: {
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "6": {
        loc: {
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 58,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 58,
            column: 22
          }
        }, {
          start: {
            line: 58,
            column: 26
          },
          end: {
            line: 58,
            column: 38
          }
        }],
        line: 58
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/kevin/card-show-finder/src/services/cacheService.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/kevin/card-show-finder/src/services/cacheService.ts"],
      sourcesContent: ["import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Show, ShowFilters } from '../types';\n\n// Define cache keys\nconst CACHE_KEYS = {\n  SHOWS: 'cache:shows',\n  SHOW_FILTERS: 'cache:show_filters',\n  SHOW_TIMESTAMP: 'cache:shows_timestamp',\n};\n\n// Cache expiration time (in milliseconds)\nconst CACHE_EXPIRATION = 60 * 60 * 1000; // 1 hour\n\n/**\n * Caches show data along with the timestamp\n * @param shows The shows data to cache\n * @param filters The filters used to fetch the shows\n */\nexport const cacheShows = async (shows: Show[], filters: ShowFilters): Promise<void> => {\n  try {\n    const timestamp = Date.now();\n    \n    // Store the shows data\n    await AsyncStorage.setItem(CACHE_KEYS.SHOWS, JSON.stringify(shows));\n    \n    // Store the filters used\n    await AsyncStorage.setItem(CACHE_KEYS.SHOW_FILTERS, JSON.stringify(filters));\n    \n    // Store the timestamp\n    await AsyncStorage.setItem(CACHE_KEYS.SHOW_TIMESTAMP, timestamp.toString());\n    \n    console.log(`Cached ${shows.length} shows at ${new Date(timestamp).toLocaleString()}`);\n  } catch (error) {\n    console.error('Error caching shows:', error);\n  }\n};\n\n/**\n * Retrieves cached show data if available and not expired\n * @returns The cached shows and filters, or null if cache is expired or not available\n */\nexport const getCachedShows = async (): Promise<{ shows: Show[]; filters: ShowFilters } | null> => {\n  try {\n    // Get the timestamp\n    const timestampStr = await AsyncStorage.getItem(CACHE_KEYS.SHOW_TIMESTAMP);\n    \n    if (!timestampStr) {\n      return null;\n    }\n    \n    const timestamp = parseInt(timestampStr, 10);\n    const now = Date.now();\n    \n    // Check if cache has expired\n    if (now - timestamp > CACHE_EXPIRATION) {\n      console.log('Show cache expired, fetching fresh data');\n      return null;\n    }\n    \n    // Get the cached shows\n    const showsJson = await AsyncStorage.getItem(CACHE_KEYS.SHOWS);\n    const filtersJson = await AsyncStorage.getItem(CACHE_KEYS.SHOW_FILTERS);\n    \n    if (!showsJson || !filtersJson) {\n      return null;\n    }\n    \n    const shows = JSON.parse(showsJson) as Show[];\n    const filters = JSON.parse(filtersJson) as ShowFilters;\n    \n    console.log(`Retrieved ${shows.length} shows from cache (${Math.round((now - timestamp) / 1000 / 60)} minutes old)`);\n    \n    return { shows, filters };\n  } catch (error) {\n    console.error('Error retrieving cached shows:', error);\n    return null;\n  }\n};\n\n/**\n * Clears the shows cache\n */\nexport const clearShowsCache = async (): Promise<void> => {\n  try {\n    await AsyncStorage.removeItem(CACHE_KEYS.SHOWS);\n    await AsyncStorage.removeItem(CACHE_KEYS.SHOW_FILTERS);\n    await AsyncStorage.removeItem(CACHE_KEYS.SHOW_TIMESTAMP);\n    console.log('Shows cache cleared');\n  } catch (error) {\n    console.error('Error clearing shows cache:', error);\n  }\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c109325453590ed8eaf4aac11b3145c5af823e2e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_aqm4thb94 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_aqm4thb94();
var __importDefault =
/* istanbul ignore next */
(cov_aqm4thb94().s[0]++,
/* istanbul ignore next */
(cov_aqm4thb94().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_aqm4thb94().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_aqm4thb94().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_aqm4thb94().f[0]++;
  cov_aqm4thb94().s[1]++;
  return /* istanbul ignore next */(cov_aqm4thb94().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_aqm4thb94().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_aqm4thb94().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_aqm4thb94().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_aqm4thb94().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_aqm4thb94().s[3]++;
exports.clearShowsCache = exports.getCachedShows = exports.cacheShows = void 0;
const async_storage_1 =
/* istanbul ignore next */
(cov_aqm4thb94().s[4]++, __importDefault(require("@react-native-async-storage/async-storage")));
// Define cache keys
const CACHE_KEYS =
/* istanbul ignore next */
(cov_aqm4thb94().s[5]++, {
  SHOWS: 'cache:shows',
  SHOW_FILTERS: 'cache:show_filters',
  SHOW_TIMESTAMP: 'cache:shows_timestamp'
});
// Cache expiration time (in milliseconds)
const CACHE_EXPIRATION =
/* istanbul ignore next */
(cov_aqm4thb94().s[6]++, 60 * 60 * 1000); // 1 hour
/**
 * Caches show data along with the timestamp
 * @param shows The shows data to cache
 * @param filters The filters used to fetch the shows
 */
/* istanbul ignore next */
cov_aqm4thb94().s[7]++;
const cacheShows = async (shows, filters) => {
  /* istanbul ignore next */
  cov_aqm4thb94().f[1]++;
  cov_aqm4thb94().s[8]++;
  try {
    const timestamp =
    /* istanbul ignore next */
    (cov_aqm4thb94().s[9]++, Date.now());
    // Store the shows data
    /* istanbul ignore next */
    cov_aqm4thb94().s[10]++;
    await async_storage_1.default.setItem(CACHE_KEYS.SHOWS, JSON.stringify(shows));
    // Store the filters used
    /* istanbul ignore next */
    cov_aqm4thb94().s[11]++;
    await async_storage_1.default.setItem(CACHE_KEYS.SHOW_FILTERS, JSON.stringify(filters));
    // Store the timestamp
    /* istanbul ignore next */
    cov_aqm4thb94().s[12]++;
    await async_storage_1.default.setItem(CACHE_KEYS.SHOW_TIMESTAMP, timestamp.toString());
    /* istanbul ignore next */
    cov_aqm4thb94().s[13]++;
    console.log(`Cached ${shows.length} shows at ${new Date(timestamp).toLocaleString()}`);
  } catch (error) {
    /* istanbul ignore next */
    cov_aqm4thb94().s[14]++;
    console.error('Error caching shows:', error);
  }
};
/* istanbul ignore next */
cov_aqm4thb94().s[15]++;
exports.cacheShows = cacheShows;
/**
 * Retrieves cached show data if available and not expired
 * @returns The cached shows and filters, or null if cache is expired or not available
 */
/* istanbul ignore next */
cov_aqm4thb94().s[16]++;
const getCachedShows = async () => {
  /* istanbul ignore next */
  cov_aqm4thb94().f[2]++;
  cov_aqm4thb94().s[17]++;
  try {
    // Get the timestamp
    const timestampStr =
    /* istanbul ignore next */
    (cov_aqm4thb94().s[18]++, await async_storage_1.default.getItem(CACHE_KEYS.SHOW_TIMESTAMP));
    /* istanbul ignore next */
    cov_aqm4thb94().s[19]++;
    if (!timestampStr) {
      /* istanbul ignore next */
      cov_aqm4thb94().b[3][0]++;
      cov_aqm4thb94().s[20]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_aqm4thb94().b[3][1]++;
    }
    const timestamp =
    /* istanbul ignore next */
    (cov_aqm4thb94().s[21]++, parseInt(timestampStr, 10));
    const now =
    /* istanbul ignore next */
    (cov_aqm4thb94().s[22]++, Date.now());
    // Check if cache has expired
    /* istanbul ignore next */
    cov_aqm4thb94().s[23]++;
    if (now - timestamp > CACHE_EXPIRATION) {
      /* istanbul ignore next */
      cov_aqm4thb94().b[4][0]++;
      cov_aqm4thb94().s[24]++;
      console.log('Show cache expired, fetching fresh data');
      /* istanbul ignore next */
      cov_aqm4thb94().s[25]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_aqm4thb94().b[4][1]++;
    }
    // Get the cached shows
    const showsJson =
    /* istanbul ignore next */
    (cov_aqm4thb94().s[26]++, await async_storage_1.default.getItem(CACHE_KEYS.SHOWS));
    const filtersJson =
    /* istanbul ignore next */
    (cov_aqm4thb94().s[27]++, await async_storage_1.default.getItem(CACHE_KEYS.SHOW_FILTERS));
    /* istanbul ignore next */
    cov_aqm4thb94().s[28]++;
    if (
    /* istanbul ignore next */
    (cov_aqm4thb94().b[6][0]++, !showsJson) ||
    /* istanbul ignore next */
    (cov_aqm4thb94().b[6][1]++, !filtersJson)) {
      /* istanbul ignore next */
      cov_aqm4thb94().b[5][0]++;
      cov_aqm4thb94().s[29]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_aqm4thb94().b[5][1]++;
    }
    const shows =
    /* istanbul ignore next */
    (cov_aqm4thb94().s[30]++, JSON.parse(showsJson));
    const filters =
    /* istanbul ignore next */
    (cov_aqm4thb94().s[31]++, JSON.parse(filtersJson));
    /* istanbul ignore next */
    cov_aqm4thb94().s[32]++;
    console.log(`Retrieved ${shows.length} shows from cache (${Math.round((now - timestamp) / 1000 / 60)} minutes old)`);
    /* istanbul ignore next */
    cov_aqm4thb94().s[33]++;
    return {
      shows,
      filters
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_aqm4thb94().s[34]++;
    console.error('Error retrieving cached shows:', error);
    /* istanbul ignore next */
    cov_aqm4thb94().s[35]++;
    return null;
  }
};
/* istanbul ignore next */
cov_aqm4thb94().s[36]++;
exports.getCachedShows = getCachedShows;
/**
 * Clears the shows cache
 */
/* istanbul ignore next */
cov_aqm4thb94().s[37]++;
const clearShowsCache = async () => {
  /* istanbul ignore next */
  cov_aqm4thb94().f[3]++;
  cov_aqm4thb94().s[38]++;
  try {
    /* istanbul ignore next */
    cov_aqm4thb94().s[39]++;
    await async_storage_1.default.removeItem(CACHE_KEYS.SHOWS);
    /* istanbul ignore next */
    cov_aqm4thb94().s[40]++;
    await async_storage_1.default.removeItem(CACHE_KEYS.SHOW_FILTERS);
    /* istanbul ignore next */
    cov_aqm4thb94().s[41]++;
    await async_storage_1.default.removeItem(CACHE_KEYS.SHOW_TIMESTAMP);
    /* istanbul ignore next */
    cov_aqm4thb94().s[42]++;
    console.log('Shows cache cleared');
  } catch (error) {
    /* istanbul ignore next */
    cov_aqm4thb94().s[43]++;
    console.error('Error clearing shows cache:', error);
  }
};
/* istanbul ignore next */
cov_aqm4thb94().s[44]++;
exports.clearShowsCache = clearShowsCache;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,