660fa38acb9786fedab361d14fd4463c
"use strict";

/* istanbul ignore next */
function cov_2jkwhs2ywk() {
  var path = "/Users/kevin/card-show-finder/src/hooks/useInfiniteShows.ts";
  var hash = "c5a121c925552a0ae5a744089302ea1e9ad81643";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kevin/card-show-finder/src/hooks/useInfiniteShows.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 34
        }
      },
      "2": {
        start: {
          line: 4,
          column: 22
        },
        end: {
          line: 4,
          column: 54
        }
      },
      "3": {
        start: {
          line: 5,
          column: 22
        },
        end: {
          line: 5,
          column: 56
        }
      },
      "4": {
        start: {
          line: 13,
          column: 25
        },
        end: {
          line: 115,
          column: 1
        }
      },
      "5": {
        start: {
          line: 14,
          column: 199
        },
        end: {
          line: 14,
          column: 205
        }
      },
      "6": {
        start: {
          line: 31,
          column: 31
        },
        end: {
          line: 35,
          column: 44
        }
      },
      "7": {
        start: {
          line: 36,
          column: 33
        },
        end: {
          line: 38,
          column: 51
        }
      },
      "8": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 43,
          column: 5
        }
      },
      "9": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 42,
          column: 78
        }
      },
      "10": {
        start: {
          line: 45,
          column: 118
        },
        end: {
          line: 89,
          column: 6
        }
      },
      "11": {
        start: {
          line: 58,
          column: 32
        },
        end: {
          line: 69,
          column: 13
        }
      },
      "12": {
        start: {
          line: 71,
          column: 27
        },
        end: {
          line: 71,
          column: 82
        }
      },
      "13": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 75,
          column: 13
        }
      },
      "14": {
        start: {
          line: 74,
          column: 16
        },
        end: {
          line: 74,
          column: 46
        }
      },
      "15": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 26
        }
      },
      "16": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 82,
          column: 13
        }
      },
      "17": {
        start: {
          line: 81,
          column: 16
        },
        end: {
          line: 81,
          column: 33
        }
      },
      "18": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 55
        }
      },
      "19": {
        start: {
          line: 91,
          column: 20
        },
        end: {
          line: 93,
          column: 5
        }
      },
      "20": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 92,
          column: 24
        }
      },
      "21": {
        start: {
          line: 95,
          column: 27
        },
        end: {
          line: 95,
          column: 71
        }
      },
      "22": {
        start: {
          line: 95,
          column: 55
        },
        end: {
          line: 95,
          column: 64
        }
      },
      "23": {
        start: {
          line: 97,
          column: 23
        },
        end: {
          line: 97,
          column: 65
        }
      },
      "24": {
        start: {
          line: 99,
          column: 25
        },
        end: {
          line: 99,
          column: 87
        }
      },
      "25": {
        start: {
          line: 100,
          column: 4
        },
        end: {
          line: 114,
          column: 6
        }
      },
      "26": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 107,
          column: 13
        }
      },
      "27": {
        start: {
          line: 106,
          column: 16
        },
        end: {
          line: 106,
          column: 38
        }
      },
      "28": {
        start: {
          line: 116,
          column: 0
        },
        end: {
          line: 116,
          column: 44
        }
      },
      "29": {
        start: {
          line: 117,
          column: 0
        },
        end: {
          line: 117,
          column: 43
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 13,
            column: 25
          },
          end: {
            line: 13,
            column: 26
          }
        },
        loc: {
          start: {
            line: 13,
            column: 37
          },
          end: {
            line: 115,
            column: 1
          }
        },
        line: 13
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 56,
            column: 17
          },
          end: {
            line: 56,
            column: 18
          }
        },
        loc: {
          start: {
            line: 56,
            column: 46
          },
          end: {
            line: 77,
            column: 9
          }
        },
        line: 56
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 78,
            column: 26
          },
          end: {
            line: 78,
            column: 27
          }
        },
        loc: {
          start: {
            line: 78,
            column: 40
          },
          end: {
            line: 85,
            column: 9
          }
        },
        line: 78
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 91,
            column: 20
          },
          end: {
            line: 91,
            column: 21
          }
        },
        loc: {
          start: {
            line: 91,
            column: 32
          },
          end: {
            line: 93,
            column: 5
          }
        },
        line: 91
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 95,
            column: 47
          },
          end: {
            line: 95,
            column: 48
          }
        },
        loc: {
          start: {
            line: 95,
            column: 55
          },
          end: {
            line: 95,
            column: 64
          }
        },
        line: 95
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 104,
            column: 23
          },
          end: {
            line: 104,
            column: 24
          }
        },
        loc: {
          start: {
            line: 104,
            column: 35
          },
          end: {
            line: 108,
            column: 9
          }
        },
        line: 104
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 14,
            column: 25
          },
          end: {
            line: 14,
            column: 36
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 14,
            column: 34
          },
          end: {
            line: 14,
            column: 36
          }
        }],
        line: 14
      },
      "1": {
        loc: {
          start: {
            line: 14,
            column: 38
          },
          end: {
            line: 14,
            column: 60
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 14,
            column: 50
          },
          end: {
            line: 14,
            column: 60
          }
        }],
        line: 14
      },
      "2": {
        loc: {
          start: {
            line: 14,
            column: 62
          },
          end: {
            line: 14,
            column: 127
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 14,
            column: 72
          },
          end: {
            line: 14,
            column: 127
          }
        }],
        line: 14
      },
      "3": {
        loc: {
          start: {
            line: 14,
            column: 164
          },
          end: {
            line: 14,
            column: 177
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 14,
            column: 175
          },
          end: {
            line: 14,
            column: 177
          }
        }],
        line: 14
      },
      "4": {
        loc: {
          start: {
            line: 14,
            column: 179
          },
          end: {
            line: 14,
            column: 193
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 14,
            column: 189
          },
          end: {
            line: 14,
            column: 193
          }
        }],
        line: 14
      },
      "5": {
        loc: {
          start: {
            line: 31,
            column: 31
          },
          end: {
            line: 35,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 31,
            column: 31
          },
          end: {
            line: 31,
            column: 42
          }
        }, {
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 32,
            column: 48
          }
        }, {
          start: {
            line: 33,
            column: 8
          },
          end: {
            line: 33,
            column: 49
          }
        }, {
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 34,
            column: 43
          }
        }, {
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 35,
            column: 44
          }
        }],
        line: 31
      },
      "6": {
        loc: {
          start: {
            line: 36,
            column: 33
          },
          end: {
            line: 38,
            column: 51
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 37,
            column: 10
          },
          end: {
            line: 37,
            column: 21
          }
        }, {
          start: {
            line: 38,
            column: 10
          },
          end: {
            line: 38,
            column: 51
          }
        }],
        line: 36
      },
      "7": {
        loc: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "8": {
        loc: {
          start: {
            line: 56,
            column: 26
          },
          end: {
            line: 56,
            column: 39
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 56,
            column: 38
          },
          end: {
            line: 56,
            column: 39
          }
        }],
        line: 56
      },
      "9": {
        loc: {
          start: {
            line: 73,
            column: 12
          },
          end: {
            line: 75,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 12
          },
          end: {
            line: 75,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      },
      "10": {
        loc: {
          start: {
            line: 80,
            column: 12
          },
          end: {
            line: 82,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 12
          },
          end: {
            line: 82,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 80
      },
      "11": {
        loc: {
          start: {
            line: 95,
            column: 27
          },
          end: {
            line: 95,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 95,
            column: 27
          },
          end: {
            line: 95,
            column: 65
          }
        }, {
          start: {
            line: 95,
            column: 69
          },
          end: {
            line: 95,
            column: 71
          }
        }],
        line: 95
      },
      "12": {
        loc: {
          start: {
            line: 97,
            column: 23
          },
          end: {
            line: 97,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 97,
            column: 23
          },
          end: {
            line: 97,
            column: 60
          }
        }, {
          start: {
            line: 97,
            column: 64
          },
          end: {
            line: 97,
            column: 65
          }
        }],
        line: 97
      },
      "13": {
        loc: {
          start: {
            line: 99,
            column: 25
          },
          end: {
            line: 99,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 99,
            column: 35
          },
          end: {
            line: 99,
            column: 80
          }
        }, {
          start: {
            line: 99,
            column: 83
          },
          end: {
            line: 99,
            column: 87
          }
        }],
        line: 99
      },
      "14": {
        loc: {
          start: {
            line: 99,
            column: 35
          },
          end: {
            line: 99,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 99,
            column: 35
          },
          end: {
            line: 99,
            column: 54
          }
        }, {
          start: {
            line: 99,
            column: 58
          },
          end: {
            line: 99,
            column: 80
          }
        }],
        line: 99
      },
      "15": {
        loc: {
          start: {
            line: 105,
            column: 12
          },
          end: {
            line: 107,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 105,
            column: 12
          },
          end: {
            line: 107,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 105
      },
      "16": {
        loc: {
          start: {
            line: 105,
            column: 16
          },
          end: {
            line: 105,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 105,
            column: 16
          },
          end: {
            line: 105,
            column: 27
          }
        }, {
          start: {
            line: 105,
            column: 31
          },
          end: {
            line: 105,
            column: 50
          }
        }],
        line: 105
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0],
      "1": [0],
      "2": [0],
      "3": [0],
      "4": [0],
      "5": [0, 0, 0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/kevin/card-show-finder/src/hooks/useInfiniteShows.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/kevin/card-show-finder/src/hooks/useInfiniteShows.ts"],
      sourcesContent: ["import { useInfiniteQuery } from '@tanstack/react-query';\nimport { getPaginatedShows, PaginatedShowsParams } from '../services/showService';\nimport { Show, ShowFilters, Coordinates } from '../types';\n\n/**\n * Interface for the parameters accepted by useInfiniteShows hook\n */\nexport interface InfiniteShowsParams extends ShowFilters {\n  /**\n   * User's current coordinates (required for geo-filtering)\n   */\n  coordinates: Coordinates;\n  \n  /**\n   * Number of shows to fetch per page\n   * @default 20\n   */\n  pageSize?: number;\n  \n  /**\n   * Whether to enable the query automatically\n   * @default true\n   */\n  enabled?: boolean;\n}\n\n/**\n * Result interface returned by useInfiniteShows hook\n */\nexport interface InfiniteShowsResult {\n  /**\n   * Flattened array of all shows across all loaded pages\n   */\n  shows: Show[];\n  \n  /**\n   * Total count of shows matching the filter criteria\n   */\n  totalCount: number;\n  \n  /**\n   * Whether there are more pages that can be loaded\n   */\n  hasNextPage: boolean;\n  \n  /**\n   * Function to fetch the next page of shows\n   */\n  fetchNextPage: () => Promise<void>;\n  \n  /**\n   * Function to refresh all data\n   */\n  refresh: () => Promise<void>;\n  \n  /**\n   * Whether the initial data is loading\n   */\n  isLoading: boolean;\n  \n  /**\n   * Whether more data is being fetched\n   */\n  isFetchingNextPage: boolean;\n  \n  /**\n   * Whether a refresh is in progress\n   */\n  isRefreshing: boolean;\n  \n  /**\n   * Error message if any\n   */\n  error: string | null;\n}\n\n/**\n * Custom hook that uses React Query's useInfiniteQuery to implement infinite scrolling\n * for the shows list on the home screen.\n * \n * @param params - Filtering parameters and coordinates\n * @returns An object with shows data, loading states, and functions to fetch more data\n */\nexport const useInfiniteShows = (params: InfiniteShowsParams): InfiniteShowsResult => {\n  const {\n    coordinates,\n    radius = 25,\n    startDate = new Date(),\n    endDate = new Date(new Date().setDate(new Date().getDate() + 30)),\n    maxEntryFee,\n    features,\n    categories,\n    pageSize = 20,\n    enabled = true,\n  } = params;\n  \n  /**\n   * ------------------------------------------------------------------\n   * Coordinate handling\n   * ------------------------------------------------------------------\n   * HomeScreen (and potentially other callers) may pass `null` or an\n   * incomplete coordinates object while location permissions are being\n   * resolved.  Previously we threw an error, which prevented the hook\n   * from ever executing and left the UI in an empty-state loop.\n   *\n   * Instead, we now:\n   *   1. Detect whether the incoming coordinates are valid numbers\n   *   2. If invalid, fall back to a sensible default (Carmel, IN) which\n   *      is seeded with real shows in seed data\n   *   3. Log a debug message so developers can see when the fallback\n   *      path is taken\n   */\n  const isValidCoordinates =\n    coordinates &&\n    typeof coordinates.latitude === 'number' &&\n    typeof coordinates.longitude === 'number' &&\n    !Number.isNaN(coordinates.latitude) &&\n    !Number.isNaN(coordinates.longitude);\n\n  const effectiveCoordinates: Coordinates = isValidCoordinates\n    ? coordinates\n    : { latitude: 39.9784, longitude: -86.118 }; // Carmel, IN\n\n  if (!isValidCoordinates) {\n    // eslint-disable-next-line no-console\n    console.debug(\n      '[useInfiniteShows] Invalid or missing coordinates supplied. ' +\n        'Falling back to default coordinates (Carmel, IN).',\n      coordinates\n    );\n  }\n  \n  // Set up the infinite query\n  const {\n    data,\n    fetchNextPage,\n    hasNextPage,\n    isFetchingNextPage,\n    isLoading,\n    isError,\n    error: queryError,\n    refetch,\n  } = useInfiniteQuery({\n    queryKey: ['shows', 'infinite', { \n      coordinates: effectiveCoordinates, \n      radius, \n      startDate, \n      endDate, \n      maxEntryFee, \n      features, \n      categories, \n      pageSize \n    }],\n    queryFn: async ({ pageParam = 1 }) => {\n      // Prepare parameters for the paginated shows query\n      const queryParams: PaginatedShowsParams = {\n        latitude: effectiveCoordinates.latitude,\n        longitude: effectiveCoordinates.longitude,\n        radius,\n        startDate,\n        endDate,\n        maxEntryFee,\n        features,\n        categories,\n        pageSize,\n        page: pageParam,\n      };\n      \n      // Call the service function to get paginated shows\n      const result = await getPaginatedShows(queryParams);\n      \n      // If there's an error, throw it so React Query can handle it\n      if (result.error) {\n        throw new Error(result.error);\n      }\n      \n      return result;\n    },\n    getNextPageParam: (lastPage) => {\n      // If we've reached the last page, return undefined (stops infinite loading)\n      if (lastPage.pagination.currentPage >= lastPage.pagination.totalPages) {\n        return undefined;\n      }\n      \n      // Otherwise, return the next page number\n      return lastPage.pagination.currentPage + 1;\n    },\n    enabled,\n    staleTime: 60 * 1000, // Consider data fresh for 1 minute\n    refetchOnWindowFocus: false,\n  });\n  \n  // Function to refresh data\n  const refresh = async (): Promise<void> => {\n    await refetch();\n  };\n  \n  // Flatten the pages of shows into a single array\n  const flattenedShows = data?.pages.flatMap(page => page.data) || [];\n  \n  // Get the total count from the first page (or 0 if no data)\n  const totalCount = data?.pages[0]?.pagination.totalCount || 0;\n  \n  // Extract error message if any\n  const errorMessage = isError ? (queryError as Error)?.message || 'Failed to load shows' : null;\n  \n  return {\n    shows: flattenedShows,\n    totalCount,\n    hasNextPage: !!hasNextPage,\n    fetchNextPage: async () => {\n      if (hasNextPage && !isFetchingNextPage) {\n        await fetchNextPage();\n      }\n    },\n    refresh,\n    isLoading,\n    isFetchingNextPage,\n    isRefreshing: false, // This would need to be tracked separately if needed\n    error: errorMessage,\n  };\n};\n\nexport default useInfiniteShows;\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c5a121c925552a0ae5a744089302ea1e9ad81643"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2jkwhs2ywk = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2jkwhs2ywk();
cov_2jkwhs2ywk().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2jkwhs2ywk().s[1]++;
exports.useInfiniteShows = void 0;
const react_query_1 =
/* istanbul ignore next */
(cov_2jkwhs2ywk().s[2]++, require("@tanstack/react-query"));
const showService_1 =
/* istanbul ignore next */
(cov_2jkwhs2ywk().s[3]++, require("../services/showService"));
/**
 * Custom hook that uses React Query's useInfiniteQuery to implement infinite scrolling
 * for the shows list on the home screen.
 *
 * @param params - Filtering parameters and coordinates
 * @returns An object with shows data, loading states, and functions to fetch more data
 */
/* istanbul ignore next */
cov_2jkwhs2ywk().s[4]++;
const useInfiniteShows = params => {
  /* istanbul ignore next */
  cov_2jkwhs2ywk().f[0]++;
  const {
    coordinates,
    radius =
    /* istanbul ignore next */
    (cov_2jkwhs2ywk().b[0][0]++, 25),
    startDate =
    /* istanbul ignore next */
    (cov_2jkwhs2ywk().b[1][0]++, new Date()),
    endDate =
    /* istanbul ignore next */
    (cov_2jkwhs2ywk().b[2][0]++, new Date(new Date().setDate(new Date().getDate() + 30))),
    maxEntryFee,
    features,
    categories,
    pageSize =
    /* istanbul ignore next */
    (cov_2jkwhs2ywk().b[3][0]++, 20),
    enabled =
    /* istanbul ignore next */
    (cov_2jkwhs2ywk().b[4][0]++, true)
  } =
  /* istanbul ignore next */
  (cov_2jkwhs2ywk().s[5]++, params);
  /**
   * ------------------------------------------------------------------
   * Coordinate handling
   * ------------------------------------------------------------------
   * HomeScreen (and potentially other callers) may pass `null` or an
   * incomplete coordinates object while location permissions are being
   * resolved.  Previously we threw an error, which prevented the hook
   * from ever executing and left the UI in an empty-state loop.
   *
   * Instead, we now:
   *   1. Detect whether the incoming coordinates are valid numbers
   *   2. If invalid, fall back to a sensible default (Carmel, IN) which
   *      is seeded with real shows in seed data
   *   3. Log a debug message so developers can see when the fallback
   *      path is taken
   */
  const isValidCoordinates =
  /* istanbul ignore next */
  (cov_2jkwhs2ywk().s[6]++,
  /* istanbul ignore next */
  (cov_2jkwhs2ywk().b[5][0]++, coordinates) &&
  /* istanbul ignore next */
  (cov_2jkwhs2ywk().b[5][1]++, typeof coordinates.latitude === 'number') &&
  /* istanbul ignore next */
  (cov_2jkwhs2ywk().b[5][2]++, typeof coordinates.longitude === 'number') &&
  /* istanbul ignore next */
  (cov_2jkwhs2ywk().b[5][3]++, !Number.isNaN(coordinates.latitude)) &&
  /* istanbul ignore next */
  (cov_2jkwhs2ywk().b[5][4]++, !Number.isNaN(coordinates.longitude)));
  const effectiveCoordinates =
  /* istanbul ignore next */
  (cov_2jkwhs2ywk().s[7]++, isValidCoordinates ?
  /* istanbul ignore next */
  (cov_2jkwhs2ywk().b[6][0]++, coordinates) :
  /* istanbul ignore next */
  (cov_2jkwhs2ywk().b[6][1]++, {
    latitude: 39.9784,
    longitude: -86.118
  })); // Carmel, IN
  /* istanbul ignore next */
  cov_2jkwhs2ywk().s[8]++;
  if (!isValidCoordinates) {
    /* istanbul ignore next */
    cov_2jkwhs2ywk().b[7][0]++;
    cov_2jkwhs2ywk().s[9]++;
    // eslint-disable-next-line no-console
    console.debug('[useInfiniteShows] Invalid or missing coordinates supplied. ' + 'Falling back to default coordinates (Carmel, IN).', coordinates);
  } else
  /* istanbul ignore next */
  {
    cov_2jkwhs2ywk().b[7][1]++;
  }
  // Set up the infinite query
  const {
    data,
    fetchNextPage,
    hasNextPage,
    isFetchingNextPage,
    isLoading,
    isError,
    error: queryError,
    refetch
  } =
  /* istanbul ignore next */
  (cov_2jkwhs2ywk().s[10]++, (0, react_query_1.useInfiniteQuery)({
    queryKey: ['shows', 'infinite', {
      coordinates: effectiveCoordinates,
      radius,
      startDate,
      endDate,
      maxEntryFee,
      features,
      categories,
      pageSize
    }],
    queryFn: async ({
      pageParam =
      /* istanbul ignore next */
      (cov_2jkwhs2ywk().b[8][0]++, 1)
    }) => {
      /* istanbul ignore next */
      cov_2jkwhs2ywk().f[1]++;
      // Prepare parameters for the paginated shows query
      const queryParams =
      /* istanbul ignore next */
      (cov_2jkwhs2ywk().s[11]++, {
        latitude: effectiveCoordinates.latitude,
        longitude: effectiveCoordinates.longitude,
        radius,
        startDate,
        endDate,
        maxEntryFee,
        features,
        categories,
        pageSize,
        page: pageParam
      });
      // Call the service function to get paginated shows
      const result =
      /* istanbul ignore next */
      (cov_2jkwhs2ywk().s[12]++, await (0, showService_1.getPaginatedShows)(queryParams));
      // If there's an error, throw it so React Query can handle it
      /* istanbul ignore next */
      cov_2jkwhs2ywk().s[13]++;
      if (result.error) {
        /* istanbul ignore next */
        cov_2jkwhs2ywk().b[9][0]++;
        cov_2jkwhs2ywk().s[14]++;
        throw new Error(result.error);
      } else
      /* istanbul ignore next */
      {
        cov_2jkwhs2ywk().b[9][1]++;
      }
      cov_2jkwhs2ywk().s[15]++;
      return result;
    },
    getNextPageParam: lastPage => {
      /* istanbul ignore next */
      cov_2jkwhs2ywk().f[2]++;
      cov_2jkwhs2ywk().s[16]++;
      // If we've reached the last page, return undefined (stops infinite loading)
      if (lastPage.pagination.currentPage >= lastPage.pagination.totalPages) {
        /* istanbul ignore next */
        cov_2jkwhs2ywk().b[10][0]++;
        cov_2jkwhs2ywk().s[17]++;
        return undefined;
      } else
      /* istanbul ignore next */
      {
        cov_2jkwhs2ywk().b[10][1]++;
      }
      // Otherwise, return the next page number
      cov_2jkwhs2ywk().s[18]++;
      return lastPage.pagination.currentPage + 1;
    },
    enabled,
    staleTime: 60 * 1000,
    // Consider data fresh for 1 minute
    refetchOnWindowFocus: false
  }));
  // Function to refresh data
  /* istanbul ignore next */
  cov_2jkwhs2ywk().s[19]++;
  const refresh = async () => {
    /* istanbul ignore next */
    cov_2jkwhs2ywk().f[3]++;
    cov_2jkwhs2ywk().s[20]++;
    await refetch();
  };
  // Flatten the pages of shows into a single array
  const flattenedShows =
  /* istanbul ignore next */
  (cov_2jkwhs2ywk().s[21]++,
  /* istanbul ignore next */
  (cov_2jkwhs2ywk().b[11][0]++, data?.pages.flatMap(page => {
    /* istanbul ignore next */
    cov_2jkwhs2ywk().f[4]++;
    cov_2jkwhs2ywk().s[22]++;
    return page.data;
  })) ||
  /* istanbul ignore next */
  (cov_2jkwhs2ywk().b[11][1]++, []));
  // Get the total count from the first page (or 0 if no data)
  const totalCount =
  /* istanbul ignore next */
  (cov_2jkwhs2ywk().s[23]++,
  /* istanbul ignore next */
  (cov_2jkwhs2ywk().b[12][0]++, data?.pages[0]?.pagination.totalCount) ||
  /* istanbul ignore next */
  (cov_2jkwhs2ywk().b[12][1]++, 0));
  // Extract error message if any
  const errorMessage =
  /* istanbul ignore next */
  (cov_2jkwhs2ywk().s[24]++, isError ?
  /* istanbul ignore next */
  (cov_2jkwhs2ywk().b[13][0]++,
  /* istanbul ignore next */
  (cov_2jkwhs2ywk().b[14][0]++, queryError?.message) ||
  /* istanbul ignore next */
  (cov_2jkwhs2ywk().b[14][1]++, 'Failed to load shows')) :
  /* istanbul ignore next */
  (cov_2jkwhs2ywk().b[13][1]++, null));
  /* istanbul ignore next */
  cov_2jkwhs2ywk().s[25]++;
  return {
    shows: flattenedShows,
    totalCount,
    hasNextPage: !!hasNextPage,
    fetchNextPage: async () => {
      /* istanbul ignore next */
      cov_2jkwhs2ywk().f[5]++;
      cov_2jkwhs2ywk().s[26]++;
      if (
      /* istanbul ignore next */
      (cov_2jkwhs2ywk().b[16][0]++, hasNextPage) &&
      /* istanbul ignore next */
      (cov_2jkwhs2ywk().b[16][1]++, !isFetchingNextPage)) {
        /* istanbul ignore next */
        cov_2jkwhs2ywk().b[15][0]++;
        cov_2jkwhs2ywk().s[27]++;
        await fetchNextPage();
      } else
      /* istanbul ignore next */
      {
        cov_2jkwhs2ywk().b[15][1]++;
      }
    },
    refresh,
    isLoading,
    isFetchingNextPage,
    isRefreshing: false,
    // This would need to be tracked separately if needed
    error: errorMessage
  };
};
/* istanbul ignore next */
cov_2jkwhs2ywk().s[28]++;
exports.useInfiniteShows = useInfiniteShows;
/* istanbul ignore next */
cov_2jkwhs2ywk().s[29]++;
exports.default = exports.useInfiniteShows;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,