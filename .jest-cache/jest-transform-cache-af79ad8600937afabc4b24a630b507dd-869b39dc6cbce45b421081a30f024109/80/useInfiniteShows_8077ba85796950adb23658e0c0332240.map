{"version":3,"names":["react_query_1","cov_2jkwhs2ywk","s","require","showService_1","useInfiniteShows","params","f","coordinates","radius","b","startDate","Date","endDate","setDate","getDate","maxEntryFee","features","categories","pageSize","enabled","isValidCoordinates","latitude","longitude","Number","isNaN","effectiveCoordinates","console","debug","data","fetchNextPage","hasNextPage","isFetchingNextPage","isLoading","isError","error","queryError","refetch","useInfiniteQuery","queryKey","queryFn","pageParam","queryParams","page","result","getPaginatedShows","Error","getNextPageParam","lastPage","pagination","currentPage","totalPages","undefined","staleTime","refetchOnWindowFocus","refresh","flattenedShows","pages","flatMap","totalCount","errorMessage","message","shows","isRefreshing","exports","default"],"sources":["/Users/kevin/card-show-finder/src/hooks/useInfiniteShows.ts"],"sourcesContent":["import { useInfiniteQuery } from '@tanstack/react-query';\nimport { getPaginatedShows, PaginatedShowsParams } from '../services/showService';\nimport { Show, ShowFilters, Coordinates } from '../types';\n\n/**\n * Interface for the parameters accepted by useInfiniteShows hook\n */\nexport interface InfiniteShowsParams extends ShowFilters {\n  /**\n   * User's current coordinates (required for geo-filtering)\n   */\n  coordinates: Coordinates;\n  \n  /**\n   * Number of shows to fetch per page\n   * @default 20\n   */\n  pageSize?: number;\n  \n  /**\n   * Whether to enable the query automatically\n   * @default true\n   */\n  enabled?: boolean;\n}\n\n/**\n * Result interface returned by useInfiniteShows hook\n */\nexport interface InfiniteShowsResult {\n  /**\n   * Flattened array of all shows across all loaded pages\n   */\n  shows: Show[];\n  \n  /**\n   * Total count of shows matching the filter criteria\n   */\n  totalCount: number;\n  \n  /**\n   * Whether there are more pages that can be loaded\n   */\n  hasNextPage: boolean;\n  \n  /**\n   * Function to fetch the next page of shows\n   */\n  fetchNextPage: () => Promise<void>;\n  \n  /**\n   * Function to refresh all data\n   */\n  refresh: () => Promise<void>;\n  \n  /**\n   * Whether the initial data is loading\n   */\n  isLoading: boolean;\n  \n  /**\n   * Whether more data is being fetched\n   */\n  isFetchingNextPage: boolean;\n  \n  /**\n   * Whether a refresh is in progress\n   */\n  isRefreshing: boolean;\n  \n  /**\n   * Error message if any\n   */\n  error: string | null;\n}\n\n/**\n * Custom hook that uses React Query's useInfiniteQuery to implement infinite scrolling\n * for the shows list on the home screen.\n * \n * @param params - Filtering parameters and coordinates\n * @returns An object with shows data, loading states, and functions to fetch more data\n */\nexport const useInfiniteShows = (params: InfiniteShowsParams): InfiniteShowsResult => {\n  const {\n    coordinates,\n    radius = 25,\n    startDate = new Date(),\n    endDate = new Date(new Date().setDate(new Date().getDate() + 30)),\n    maxEntryFee,\n    features,\n    categories,\n    pageSize = 20,\n    enabled = true,\n  } = params;\n  \n  /**\n   * ------------------------------------------------------------------\n   * Coordinate handling\n   * ------------------------------------------------------------------\n   * HomeScreen (and potentially other callers) may pass `null` or an\n   * incomplete coordinates object while location permissions are being\n   * resolved.  Previously we threw an error, which prevented the hook\n   * from ever executing and left the UI in an empty-state loop.\n   *\n   * Instead, we now:\n   *   1. Detect whether the incoming coordinates are valid numbers\n   *   2. If invalid, fall back to a sensible default (Carmel, IN) which\n   *      is seeded with real shows in seed data\n   *   3. Log a debug message so developers can see when the fallback\n   *      path is taken\n   */\n  const isValidCoordinates =\n    coordinates &&\n    typeof coordinates.latitude === 'number' &&\n    typeof coordinates.longitude === 'number' &&\n    !Number.isNaN(coordinates.latitude) &&\n    !Number.isNaN(coordinates.longitude);\n\n  const effectiveCoordinates: Coordinates = isValidCoordinates\n    ? coordinates\n    : { latitude: 39.9784, longitude: -86.118 }; // Carmel, IN\n\n  if (!isValidCoordinates) {\n    // eslint-disable-next-line no-console\n    console.debug(\n      '[useInfiniteShows] Invalid or missing coordinates supplied. ' +\n        'Falling back to default coordinates (Carmel, IN).',\n      coordinates\n    );\n  }\n  \n  // Set up the infinite query\n  const {\n    data,\n    fetchNextPage,\n    hasNextPage,\n    isFetchingNextPage,\n    isLoading,\n    isError,\n    error: queryError,\n    refetch,\n  } = useInfiniteQuery({\n    queryKey: ['shows', 'infinite', { \n      coordinates: effectiveCoordinates, \n      radius, \n      startDate, \n      endDate, \n      maxEntryFee, \n      features, \n      categories, \n      pageSize \n    }],\n    queryFn: async ({ pageParam = 1 }) => {\n      // Prepare parameters for the paginated shows query\n      const queryParams: PaginatedShowsParams = {\n        latitude: effectiveCoordinates.latitude,\n        longitude: effectiveCoordinates.longitude,\n        radius,\n        startDate,\n        endDate,\n        maxEntryFee,\n        features,\n        categories,\n        pageSize,\n        page: pageParam,\n      };\n      \n      // Call the service function to get paginated shows\n      const result = await getPaginatedShows(queryParams);\n      \n      // If there's an error, throw it so React Query can handle it\n      if (result.error) {\n        throw new Error(result.error);\n      }\n      \n      return result;\n    },\n    getNextPageParam: (lastPage) => {\n      // If we've reached the last page, return undefined (stops infinite loading)\n      if (lastPage.pagination.currentPage >= lastPage.pagination.totalPages) {\n        return undefined;\n      }\n      \n      // Otherwise, return the next page number\n      return lastPage.pagination.currentPage + 1;\n    },\n    enabled,\n    staleTime: 60 * 1000, // Consider data fresh for 1 minute\n    refetchOnWindowFocus: false,\n  });\n  \n  // Function to refresh data\n  const refresh = async (): Promise<void> => {\n    await refetch();\n  };\n  \n  // Flatten the pages of shows into a single array\n  const flattenedShows = data?.pages.flatMap(page => page.data) || [];\n  \n  // Get the total count from the first page (or 0 if no data)\n  const totalCount = data?.pages[0]?.pagination.totalCount || 0;\n  \n  // Extract error message if any\n  const errorMessage = isError ? (queryError as Error)?.message || 'Failed to load shows' : null;\n  \n  return {\n    shows: flattenedShows,\n    totalCount,\n    hasNextPage: !!hasNextPage,\n    fetchNextPage: async () => {\n      if (hasNextPage && !isFetchingNextPage) {\n        await fetchNextPage();\n      }\n    },\n    refresh,\n    isLoading,\n    isFetchingNextPage,\n    isRefreshing: false, // This would need to be tracked separately if needed\n    error: errorMessage,\n  };\n};\n\nexport default useInfiniteShows;\n"],"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","ignoreList":[]}