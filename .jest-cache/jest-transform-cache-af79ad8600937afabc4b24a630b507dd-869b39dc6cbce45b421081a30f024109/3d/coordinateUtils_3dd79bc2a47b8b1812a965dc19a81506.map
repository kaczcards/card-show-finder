{"version":3,"names":["cov_1zdl274oa","actualCoverage","s","sanitizeCoordinates","coordinates","f","b","console","warn","latitude","longitude","isNaN","Math","abs","originalLat","originalLong","exports","calculateDistance","lat1","lon1","lat2","lon2","R","dLat","PI","dLon","a","sin","cos","c","atan2","sqrt"],"sources":["/Users/kevin/card-show-finder/src/utils/coordinateUtils.ts"],"sourcesContent":["/**\n * Utility functions for working with geographic coordinates\n */\nimport { Coordinates } from '../types';\n\n/**\n * Sanitizes coordinates to ensure they are valid\n * \n * This function:\n * 1. Verifies both latitude and longitude are numbers\n * 2. Detects and swaps swapped coordinates (a common error)\n * 3. Ensures latitude is between -90 and 90\n * 4. Ensures longitude is between -180 and 180\n * \n * @param coordinates The coordinates to sanitize\n * @returns Sanitized coordinates or null if invalid\n */\nexport const sanitizeCoordinates = (coordinates?: Coordinates | null): Coordinates | null => {\n  // If no coordinates provided, return null\n  if (!coordinates) {\n    console.warn('No coordinates provided to sanitize');\n    return null;\n  }\n\n  const { latitude, longitude } = coordinates;\n\n  // Verify both values are numbers\n  if (typeof latitude !== 'number' || typeof longitude !== 'number' || \n      isNaN(latitude) || isNaN(longitude)) {\n    console.warn('Invalid coordinates: latitude or longitude is not a number', { latitude, longitude });\n    return null;\n  }\n\n  // Check for swapped coordinates\n  // This is often the case when lat > 90 or long > 180\n  if (Math.abs(latitude) > 90 && Math.abs(longitude) <= 90) {\n    console.warn('Coordinates appear to be swapped - fixing automatically', { \n      originalLat: latitude, \n      originalLong: longitude \n    });\n    \n    // Swap them and proceed with the rest of the validation\n    return sanitizeCoordinates({\n      latitude: longitude,\n      longitude: latitude\n    });\n  }\n\n  // Validate latitude range (-90 to 90)\n  if (latitude < -90 || latitude > 90) {\n    console.warn('Invalid latitude value outside -90 to 90 range:', latitude);\n    return null;\n  }\n\n  // Validate longitude range (-180 to 180)\n  if (longitude < -180 || longitude > 180) {\n    console.warn('Invalid longitude value outside -180 to 180 range:', longitude);\n    return null;\n  }\n\n  // Return the valid coordinates\n  return { latitude, longitude };\n};\n\n/**\n * Calculates the distance between two points using the Haversine formula\n * @param lat1 Latitude of point 1\n * @param lon1 Longitude of point 1\n * @param lat2 Latitude of point 2\n * @param lon2 Longitude of point 2\n * @returns Distance in miles\n */\nexport const calculateDistance = (\n  lat1: number, \n  lon1: number, \n  lat2: number, \n  lon2: number\n): number => {\n  // Radius of the earth in miles\n  const R = 3958.8;\n  \n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLon = (lon2 - lon1) * Math.PI / 180;\n  \n  const a = \n    Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * \n    Math.sin(dLon/2) * Math.sin(dLon/2);\n  \n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n  return R * c;\n};\n"],"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","ignoreList":[]}