5fefa31ec7631d928f91a50b3643f8c6
"use strict";

/* istanbul ignore next */
function cov_1zdl274oa() {
  var path = "/Users/kevin/card-show-finder/src/utils/coordinateUtils.ts";
  var hash = "3a597541632e4cbbc8e47053ac313921a81f65c3";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kevin/card-show-finder/src/utils/coordinateUtils.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 65
        }
      },
      "2": {
        start: {
          line: 16,
          column: 28
        },
        end: {
          line: 54,
          column: 1
        }
      },
      "3": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 21,
          column: 5
        }
      },
      "4": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 60
        }
      },
      "5": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 20
        }
      },
      "6": {
        start: {
          line: 22,
          column: 36
        },
        end: {
          line: 22,
          column: 47
        }
      },
      "7": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 28,
          column: 5
        }
      },
      "8": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 108
        }
      },
      "9": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 20
        }
      },
      "10": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 41,
          column: 5
        }
      },
      "11": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 35,
          column: 11
        }
      },
      "12": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 40,
          column: 11
        }
      },
      "13": {
        start: {
          line: 43,
          column: 4
        },
        end: {
          line: 46,
          column: 5
        }
      },
      "14": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 82
        }
      },
      "15": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 20
        }
      },
      "16": {
        start: {
          line: 48,
          column: 4
        },
        end: {
          line: 51,
          column: 5
        }
      },
      "17": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 86
        }
      },
      "18": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 50,
          column: 20
        }
      },
      "19": {
        start: {
          line: 53,
          column: 4
        },
        end: {
          line: 53,
          column: 35
        }
      },
      "20": {
        start: {
          line: 55,
          column: 0
        },
        end: {
          line: 55,
          column: 50
        }
      },
      "21": {
        start: {
          line: 64,
          column: 26
        },
        end: {
          line: 74,
          column: 1
        }
      },
      "22": {
        start: {
          line: 66,
          column: 14
        },
        end: {
          line: 66,
          column: 20
        }
      },
      "23": {
        start: {
          line: 67,
          column: 17
        },
        end: {
          line: 67,
          column: 46
        }
      },
      "24": {
        start: {
          line: 68,
          column: 17
        },
        end: {
          line: 68,
          column: 46
        }
      },
      "25": {
        start: {
          line: 69,
          column: 14
        },
        end: {
          line: 71,
          column: 51
        }
      },
      "26": {
        start: {
          line: 72,
          column: 14
        },
        end: {
          line: 72,
          column: 60
        }
      },
      "27": {
        start: {
          line: 73,
          column: 4
        },
        end: {
          line: 73,
          column: 17
        }
      },
      "28": {
        start: {
          line: 75,
          column: 0
        },
        end: {
          line: 75,
          column: 46
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 16,
            column: 28
          },
          end: {
            line: 16,
            column: 29
          }
        },
        loc: {
          start: {
            line: 16,
            column: 45
          },
          end: {
            line: 54,
            column: 1
          }
        },
        line: 16
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 64,
            column: 26
          },
          end: {
            line: 64,
            column: 27
          }
        },
        loc: {
          start: {
            line: 64,
            column: 54
          },
          end: {
            line: 74,
            column: 1
          }
        },
        line: 64
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 18
      },
      "1": {
        loc: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 24
      },
      "2": {
        loc: {
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 25,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 24,
            column: 36
          }
        }, {
          start: {
            line: 24,
            column: 40
          },
          end: {
            line: 24,
            column: 69
          }
        }, {
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 25,
            column: 23
          }
        }, {
          start: {
            line: 25,
            column: 27
          },
          end: {
            line: 25,
            column: 43
          }
        }],
        line: 24
      },
      "3": {
        loc: {
          start: {
            line: 31,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 31
      },
      "4": {
        loc: {
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 31,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 31,
            column: 31
          }
        }, {
          start: {
            line: 31,
            column: 35
          },
          end: {
            line: 31,
            column: 60
          }
        }],
        line: 31
      },
      "5": {
        loc: {
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 46,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 46,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 43
      },
      "6": {
        loc: {
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 43,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 43,
            column: 22
          }
        }, {
          start: {
            line: 43,
            column: 26
          },
          end: {
            line: 43,
            column: 39
          }
        }],
        line: 43
      },
      "7": {
        loc: {
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 51,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 51,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "8": {
        loc: {
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 48,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 48,
            column: 24
          }
        }, {
          start: {
            line: 48,
            column: 28
          },
          end: {
            line: 48,
            column: 43
          }
        }],
        line: 48
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0, 0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/kevin/card-show-finder/src/utils/coordinateUtils.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/kevin/card-show-finder/src/utils/coordinateUtils.ts"],
      sourcesContent: ["/**\n * Utility functions for working with geographic coordinates\n */\nimport { Coordinates } from '../types';\n\n/**\n * Sanitizes coordinates to ensure they are valid\n * \n * This function:\n * 1. Verifies both latitude and longitude are numbers\n * 2. Detects and swaps swapped coordinates (a common error)\n * 3. Ensures latitude is between -90 and 90\n * 4. Ensures longitude is between -180 and 180\n * \n * @param coordinates The coordinates to sanitize\n * @returns Sanitized coordinates or null if invalid\n */\nexport const sanitizeCoordinates = (coordinates?: Coordinates | null): Coordinates | null => {\n  // If no coordinates provided, return null\n  if (!coordinates) {\n    console.warn('No coordinates provided to sanitize');\n    return null;\n  }\n\n  const { latitude, longitude } = coordinates;\n\n  // Verify both values are numbers\n  if (typeof latitude !== 'number' || typeof longitude !== 'number' || \n      isNaN(latitude) || isNaN(longitude)) {\n    console.warn('Invalid coordinates: latitude or longitude is not a number', { latitude, longitude });\n    return null;\n  }\n\n  // Check for swapped coordinates\n  // This is often the case when lat > 90 or long > 180\n  if (Math.abs(latitude) > 90 && Math.abs(longitude) <= 90) {\n    console.warn('Coordinates appear to be swapped - fixing automatically', { \n      originalLat: latitude, \n      originalLong: longitude \n    });\n    \n    // Swap them and proceed with the rest of the validation\n    return sanitizeCoordinates({\n      latitude: longitude,\n      longitude: latitude\n    });\n  }\n\n  // Validate latitude range (-90 to 90)\n  if (latitude < -90 || latitude > 90) {\n    console.warn('Invalid latitude value outside -90 to 90 range:', latitude);\n    return null;\n  }\n\n  // Validate longitude range (-180 to 180)\n  if (longitude < -180 || longitude > 180) {\n    console.warn('Invalid longitude value outside -180 to 180 range:', longitude);\n    return null;\n  }\n\n  // Return the valid coordinates\n  return { latitude, longitude };\n};\n\n/**\n * Calculates the distance between two points using the Haversine formula\n * @param lat1 Latitude of point 1\n * @param lon1 Longitude of point 1\n * @param lat2 Latitude of point 2\n * @param lon2 Longitude of point 2\n * @returns Distance in miles\n */\nexport const calculateDistance = (\n  lat1: number, \n  lon1: number, \n  lat2: number, \n  lon2: number\n): number => {\n  // Radius of the earth in miles\n  const R = 3958.8;\n  \n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLon = (lon2 - lon1) * Math.PI / 180;\n  \n  const a = \n    Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * \n    Math.sin(dLon/2) * Math.sin(dLon/2);\n  \n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n  return R * c;\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3a597541632e4cbbc8e47053ac313921a81f65c3"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1zdl274oa = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1zdl274oa();
cov_1zdl274oa().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1zdl274oa().s[1]++;
exports.calculateDistance = exports.sanitizeCoordinates = void 0;
/**
 * Sanitizes coordinates to ensure they are valid
 *
 * This function:
 * 1. Verifies both latitude and longitude are numbers
 * 2. Detects and swaps swapped coordinates (a common error)
 * 3. Ensures latitude is between -90 and 90
 * 4. Ensures longitude is between -180 and 180
 *
 * @param coordinates The coordinates to sanitize
 * @returns Sanitized coordinates or null if invalid
 */
/* istanbul ignore next */
cov_1zdl274oa().s[2]++;
const sanitizeCoordinates = coordinates => {
  /* istanbul ignore next */
  cov_1zdl274oa().f[0]++;
  cov_1zdl274oa().s[3]++;
  // If no coordinates provided, return null
  if (!coordinates) {
    /* istanbul ignore next */
    cov_1zdl274oa().b[0][0]++;
    cov_1zdl274oa().s[4]++;
    console.warn('No coordinates provided to sanitize');
    /* istanbul ignore next */
    cov_1zdl274oa().s[5]++;
    return null;
  } else
  /* istanbul ignore next */
  {
    cov_1zdl274oa().b[0][1]++;
  }
  const {
    latitude,
    longitude
  } =
  /* istanbul ignore next */
  (cov_1zdl274oa().s[6]++, coordinates);
  // Verify both values are numbers
  /* istanbul ignore next */
  cov_1zdl274oa().s[7]++;
  if (
  /* istanbul ignore next */
  (cov_1zdl274oa().b[2][0]++, typeof latitude !== 'number') ||
  /* istanbul ignore next */
  (cov_1zdl274oa().b[2][1]++, typeof longitude !== 'number') ||
  /* istanbul ignore next */
  (cov_1zdl274oa().b[2][2]++, isNaN(latitude)) ||
  /* istanbul ignore next */
  (cov_1zdl274oa().b[2][3]++, isNaN(longitude))) {
    /* istanbul ignore next */
    cov_1zdl274oa().b[1][0]++;
    cov_1zdl274oa().s[8]++;
    console.warn('Invalid coordinates: latitude or longitude is not a number', {
      latitude,
      longitude
    });
    /* istanbul ignore next */
    cov_1zdl274oa().s[9]++;
    return null;
  } else
  /* istanbul ignore next */
  {
    cov_1zdl274oa().b[1][1]++;
  }
  // Check for swapped coordinates
  // This is often the case when lat > 90 or long > 180
  cov_1zdl274oa().s[10]++;
  if (
  /* istanbul ignore next */
  (cov_1zdl274oa().b[4][0]++, Math.abs(latitude) > 90) &&
  /* istanbul ignore next */
  (cov_1zdl274oa().b[4][1]++, Math.abs(longitude) <= 90)) {
    /* istanbul ignore next */
    cov_1zdl274oa().b[3][0]++;
    cov_1zdl274oa().s[11]++;
    console.warn('Coordinates appear to be swapped - fixing automatically', {
      originalLat: latitude,
      originalLong: longitude
    });
    // Swap them and proceed with the rest of the validation
    /* istanbul ignore next */
    cov_1zdl274oa().s[12]++;
    return (0, exports.sanitizeCoordinates)({
      latitude: longitude,
      longitude: latitude
    });
  } else
  /* istanbul ignore next */
  {
    cov_1zdl274oa().b[3][1]++;
  }
  // Validate latitude range (-90 to 90)
  cov_1zdl274oa().s[13]++;
  if (
  /* istanbul ignore next */
  (cov_1zdl274oa().b[6][0]++, latitude < -90) ||
  /* istanbul ignore next */
  (cov_1zdl274oa().b[6][1]++, latitude > 90)) {
    /* istanbul ignore next */
    cov_1zdl274oa().b[5][0]++;
    cov_1zdl274oa().s[14]++;
    console.warn('Invalid latitude value outside -90 to 90 range:', latitude);
    /* istanbul ignore next */
    cov_1zdl274oa().s[15]++;
    return null;
  } else
  /* istanbul ignore next */
  {
    cov_1zdl274oa().b[5][1]++;
  }
  // Validate longitude range (-180 to 180)
  cov_1zdl274oa().s[16]++;
  if (
  /* istanbul ignore next */
  (cov_1zdl274oa().b[8][0]++, longitude < -180) ||
  /* istanbul ignore next */
  (cov_1zdl274oa().b[8][1]++, longitude > 180)) {
    /* istanbul ignore next */
    cov_1zdl274oa().b[7][0]++;
    cov_1zdl274oa().s[17]++;
    console.warn('Invalid longitude value outside -180 to 180 range:', longitude);
    /* istanbul ignore next */
    cov_1zdl274oa().s[18]++;
    return null;
  } else
  /* istanbul ignore next */
  {
    cov_1zdl274oa().b[7][1]++;
  }
  // Return the valid coordinates
  cov_1zdl274oa().s[19]++;
  return {
    latitude,
    longitude
  };
};
/* istanbul ignore next */
cov_1zdl274oa().s[20]++;
exports.sanitizeCoordinates = sanitizeCoordinates;
/**
 * Calculates the distance between two points using the Haversine formula
 * @param lat1 Latitude of point 1
 * @param lon1 Longitude of point 1
 * @param lat2 Latitude of point 2
 * @param lon2 Longitude of point 2
 * @returns Distance in miles
 */
/* istanbul ignore next */
cov_1zdl274oa().s[21]++;
const calculateDistance = (lat1, lon1, lat2, lon2) => {
  /* istanbul ignore next */
  cov_1zdl274oa().f[1]++;
  // Radius of the earth in miles
  const R =
  /* istanbul ignore next */
  (cov_1zdl274oa().s[22]++, 3958.8);
  const dLat =
  /* istanbul ignore next */
  (cov_1zdl274oa().s[23]++, (lat2 - lat1) * Math.PI / 180);
  const dLon =
  /* istanbul ignore next */
  (cov_1zdl274oa().s[24]++, (lon2 - lon1) * Math.PI / 180);
  const a =
  /* istanbul ignore next */
  (cov_1zdl274oa().s[25]++, Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2));
  const c =
  /* istanbul ignore next */
  (cov_1zdl274oa().s[26]++, 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)));
  /* istanbul ignore next */
  cov_1zdl274oa().s[27]++;
  return R * c;
};
/* istanbul ignore next */
cov_1zdl274oa().s[28]++;
exports.calculateDistance = calculateDistance;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,