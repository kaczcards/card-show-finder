{"version":3,"names":["supabase","geocodeAddress","chalk","MAX_RETRIES","cov_1fk5pgtda3","s","formatElapsedTime","milliseconds","f","seconds","Math","floor","minutes","hours","remainingMinutes","remainingSeconds","b","calculateEta","stats","processed","elapsedMs","Date","getTime","startTime","msPerItem","remainingItems","total","estimatedRemainingMs","hasInvalidCoordinates","show","latitude","undefined","longitude","abs","fetchAllShows","_ref","_asyncToGenerator","console","warn","cyan","_ref2","from","select","order","ascending","data","error","Error","message","Array","isArray","yellow","green","length","red","Promise","resolve","setTimeout","_ref3","retryError","apply","arguments","updateShowCoordinates","_ref4","showId","retryCount","_ref5","update","updated_at","toISOString","eq","_x","_x2","_x3","processShow","_ref6","address","title","id","coordinates","updated","_x4","processShowsInBatches","_ref7","shows","batchSize","delayBetweenRequestsMs","succeeded","failed","skipped","totalBatches","ceil","_loop","batch","slice","i","currentBatch","bold","blue","success","percentComplete","round","elapsedTime","eta","toString","indexOf","dim","batchDelayMs","_x5","geocodeExistingShows","_ref8","allShows","showsToProcess","filter","trim","parseCommandLineArgs","args","process","argv","delay","parsedBatchSize","parseInt","isNaN","parsedDelay","require","main","module","magenta","_ref0","exit"],"sources":["geocodeExistingShows.ts"],"sourcesContent":["/**\n * Geocode Existing Shows Script\n * \n * This script finds all shows in the database that have addresses but missing\n * or invalid coordinates (null, undefined, or near 0,0) and geocodes them.\n * \n * Usage:\n * 1. Make sure you're logged in to Supabase (this uses the existing client)\n * 2. Run with: npx ts-node src/scripts/geocodeExistingShows.ts [batchSize] [delayMs]\n *    - batchSize: Number of shows to process in each batch (default: 5)\n *    - delayMs: Delay in milliseconds between requests (default: 1000)\n */\n\nimport { supabase } from '../supabase';\nimport { geocodeAddress } from '../services/locationService';\nimport chalk from 'chalk';\n\n// Type definitions\ninterface Show {\n  id: string;\n  title: string;\n  address: string;\n  latitude?: number | null;\n  longitude?: number | null;\n}\n\ninterface GeocodingStats {\n  total: number;\n  processed: number;\n  succeeded: number;\n  failed: number;\n  skipped: number;\n  startTime: Date;\n}\n\n// Maximum number of retries for geocoding requests\nconst MAX_RETRIES = 3;\n\n/**\n * Format elapsed time in a human-readable format\n */\nconst formatElapsedTime = (milliseconds: number): string => {\n  const seconds = Math.floor(milliseconds / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n\n  const remainingMinutes = minutes % 60;\n  const remainingSeconds = seconds % 60;\n\n  if (hours > 0) {\n    return `${hours}h ${remainingMinutes}m ${remainingSeconds}s`;\n  } else if (minutes > 0) {\n    return `${minutes}m ${remainingSeconds}s`;\n  } else {\n    return `${seconds}s`;\n  }\n};\n\n/**\n * Calculate and format estimated time remaining\n */\nconst calculateEta = (stats: GeocodingStats): string => {\n  if (stats.processed === 0) return 'calculating...';\n\n  const elapsedMs = new Date().getTime() - stats.startTime.getTime();\n  const msPerItem = elapsedMs / stats.processed;\n  const remainingItems = stats.total - stats.processed;\n  const estimatedRemainingMs = msPerItem * remainingItems;\n\n  return formatElapsedTime(estimatedRemainingMs);\n};\n\n/**\n * Check if coordinates are missing or invalid (null, undefined, or near 0,0)\n */\nconst hasInvalidCoordinates = (show: Show): boolean => {\n  // Check if coordinates are missing\n  if (\n    show.latitude === null || \n    show.latitude === undefined || \n    show.longitude === null || \n    show.longitude === undefined\n  ) {\n    return true;\n  }\n  \n  // Check if coordinates are suspiciously close to 0,0\n  // (which is in the Gulf of Guinea, unlikely for a real card show)\n  if (\n    Math.abs(show.latitude) < 0.0001 && \n    Math.abs(show.longitude) < 0.0001\n  ) {\n    return true;\n  }\n  \n  return false;\n};\n\n/**\n * Fetch all shows from the database\n */\nconst fetchAllShows = async (): Promise<Show[]> => {\n  console.warn(chalk.cyan('Fetching all shows from the database...'));\n  \n  try {\n    const { data, error } = await supabase\n      .from('shows')\n      .select('id, title, address, latitude, longitude')\n      .order('created_at', { ascending: false });\n    \n    if (error) {\n      throw new Error(`Error fetching shows: ${error.message}`);\n    }\n    \n    if (!data || !Array.isArray(data)) {\n      console.warn(chalk.yellow('No shows found in the database.'));\n      return [];\n    }\n    \n    console.warn(chalk.green(`Successfully fetched ${data.length} shows`));\n    return data as Show[];\n  } catch (error) {\n    console.error(chalk.red('Failed to fetch shows:'), error);\n    \n    // Retry once after a short delay\n    console.warn(chalk.yellow('Retrying fetch after 5 seconds...'));\n    await new Promise(resolve => setTimeout(resolve, 5000));\n    \n    try {\n      const { data, error } = await supabase\n        .from('shows')\n        .select('id, title, address, latitude, longitude')\n        .order('created_at', { ascending: false });\n      \n      if (error) {\n        throw new Error(`Error fetching shows on retry: ${error.message}`);\n      }\n      \n      if (!data || !Array.isArray(data)) {\n        return [];\n      }\n      \n      console.warn(chalk.green(`Successfully fetched ${data.length} shows on retry`));\n      return data as Show[];\n    } catch (retryError) {\n      console.error(chalk.red('Failed to fetch shows on retry:'), retryError);\n      return [];\n    }\n  }\n};\n\n/**\n * Update a show with new coordinates\n */\nconst updateShowCoordinates = async (\n  showId: string, \n  latitude: number, \n  longitude: number,\n  retryCount: number = 0\n): Promise<boolean> => {\n  try {\n    const { error } = await supabase\n      .from('shows')\n      .update({\n        latitude,\n        longitude,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', showId);\n    \n    if (error) {\n      console.error(chalk.red(`Failed to update show ${showId}:`), error.message);\n      \n      // Retry logic\n      if (retryCount < MAX_RETRIES) {\n        console.warn(chalk.yellow(`Retrying update (attempt ${retryCount + 1} of ${MAX_RETRIES})...`));\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        return updateShowCoordinates(showId, latitude, longitude, retryCount + 1);\n      }\n      \n      return false;\n    }\n    \n    return true;\n  } catch (error) {\n    console.error(chalk.red(`Error updating show ${showId}:`), error);\n    \n    // Retry logic\n    if (retryCount < MAX_RETRIES) {\n      console.warn(chalk.yellow(`Retrying update (attempt ${retryCount + 1} of ${MAX_RETRIES})...`));\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      return updateShowCoordinates(showId, latitude, longitude, retryCount + 1);\n    }\n    \n    return false;\n  }\n};\n\n/**\n * Process a single show - geocode its address and update coordinates\n */\nconst processShow = async (show: Show, retryCount: number = 0): Promise<boolean> => {\n  if (!show.address) {\n    console.warn(chalk.yellow(`Skipping show \"${show.title}\" (ID: ${show.id}) - No address provided`));\n    return false;\n  }\n  \n  try {\n    console.warn(chalk.cyan(`Geocoding address for \"${show.title}\" (ID: ${show.id}): ${show.address}`));\n    \n    const coordinates = await geocodeAddress(show.address);\n    \n    if (!coordinates) {\n      console.error(chalk.red(`Failed to geocode address for show \"${show.title}\" (ID: ${show.id})`));\n      \n      // Retry logic\n      if (retryCount < MAX_RETRIES) {\n        console.warn(chalk.yellow(`Retrying geocoding (attempt ${retryCount + 1} of ${MAX_RETRIES})...`));\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        return processShow(show, retryCount + 1);\n      }\n      \n      return false;\n    }\n    \n    console.warn(chalk.green(`Successfully geocoded \"${show.title}\" - Coordinates:`), coordinates);\n    \n    // Update the show with new coordinates\n    const updated = await updateShowCoordinates(\n      show.id, \n      coordinates.latitude, \n      coordinates.longitude\n    );\n    \n    if (updated) {\n      console.warn(chalk.green(`Updated coordinates for show \"${show.title}\" (ID: ${show.id})`));\n      return true;\n    } else {\n      console.error(chalk.red(`Failed to update coordinates for show \"${show.title}\" (ID: ${show.id})`));\n      return false;\n    }\n  } catch (error) {\n    console.error(chalk.red(`Error processing show \"${show.title}\" (ID: ${show.id}):`), error);\n    \n    // Retry logic\n    if (retryCount < MAX_RETRIES) {\n      console.warn(chalk.yellow(`Retrying due to error (attempt ${retryCount + 1} of ${MAX_RETRIES})...`));\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      return processShow(show, retryCount + 1);\n    }\n    \n    return false;\n  }\n};\n\n/**\n * Process shows in batches with delays to avoid rate limits\n */\nconst processShowsInBatches = async (\n  shows: Show[], \n  batchSize: number = 5, \n  delayBetweenRequestsMs: number = 1000\n): Promise<GeocodingStats> => {\n  const stats: GeocodingStats = {\n    total: shows.length,\n    processed: 0,\n    succeeded: 0,\n    failed: 0,\n    skipped: 0,\n    startTime: new Date()\n  };\n  \n  const totalBatches = Math.ceil(shows.length / batchSize);\n  \n  // Process shows in batches\n  for (let i = 0; i < shows.length; i += batchSize) {\n    const batch = shows.slice(i, i + batchSize);\n    const currentBatch = Math.floor(i / batchSize) + 1;\n    \n    console.warn(chalk.bold.blue(`\\n--- Processing batch ${currentBatch} of ${totalBatches} ---`));\n    \n    // Process each show in the batch\n    for (const show of batch) {\n      if (!show.address) {\n        console.warn(chalk.yellow(`Skipping show \"${show.title}\" - No address provided`));\n        stats.skipped++;\n        continue;\n      }\n      \n      const success = await processShow(show);\n      stats.processed++;\n      \n      if (success) {\n        stats.succeeded++;\n      } else {\n        stats.failed++;\n      }\n      \n      // Calculate and display progress\n      const percentComplete = Math.round((stats.processed / stats.total) * 100);\n      const elapsedTime = formatElapsedTime(new Date().getTime() - stats.startTime.getTime());\n      const eta = calculateEta(stats);\n      \n      console.warn(chalk.bold(`\\nProgress: ${stats.processed}/${stats.total} shows (${percentComplete}%)`));\n      console.warn(`Elapsed: ${elapsedTime} | Estimated remaining: ${eta}`);\n      console.warn(`Success: ${chalk.green(stats.succeeded.toString())}, Failed: ${chalk.red(stats.failed.toString())}, Skipped: ${chalk.yellow(stats.skipped.toString())}`);\n      \n      // Add delay between requests to avoid rate limits\n      if (batch.indexOf(show) < batch.length - 1) {\n        console.warn(chalk.dim(`Waiting ${delayBetweenRequestsMs}ms before next request...`));\n        await new Promise(resolve => setTimeout(resolve, delayBetweenRequestsMs));\n      }\n    }\n    \n    // Add delay between batches\n    if (i + batchSize < shows.length) {\n      const batchDelayMs = 3000;\n      console.warn(chalk.dim(`\\nWaiting ${batchDelayMs}ms before next batch...`));\n      await new Promise(resolve => setTimeout(resolve, batchDelayMs));\n    }\n  }\n  \n  return stats;\n};\n\n/**\n * Main function to geocode all shows with missing or invalid coordinates\n */\nconst geocodeExistingShows = async (\n  batchSize: number = 5, \n  delayBetweenRequestsMs: number = 1000\n): Promise<GeocodingStats> => {\n  try {\n    console.warn(chalk.bold.green('\\n=== Starting geocoding process for existing shows ==='));\n    console.warn(chalk.cyan(`Batch size: ${batchSize}, Delay between requests: ${delayBetweenRequestsMs}ms`));\n    \n    // Fetch all shows\n    const allShows = await fetchAllShows();\n    \n    if (allShows.length === 0) {\n      console.warn(chalk.yellow('No shows found in the database.'));\n      return {\n        total: 0,\n        processed: 0,\n        succeeded: 0,\n        failed: 0,\n        skipped: 0,\n        startTime: new Date()\n      };\n    }\n    \n    // Filter shows with valid addresses but missing or invalid coordinates\n    const showsToProcess = allShows.filter(show => \n      show.address && \n      show.address.trim().length > 0 && \n      hasInvalidCoordinates(show)\n    );\n    \n    console.warn(chalk.bold(`\\nFound ${chalk.cyan(showsToProcess.length.toString())} shows with addresses but missing or invalid coordinates`));\n    console.warn(chalk.dim(`(out of ${allShows.length} total shows in the database)`));\n    \n    if (showsToProcess.length === 0) {\n      console.warn(chalk.green('\\nNo shows need geocoding. All done!'));\n      return {\n        total: allShows.length,\n        processed: 0,\n        succeeded: 0,\n        failed: 0,\n        skipped: allShows.length,\n        startTime: new Date()\n      };\n    }\n    \n    // Process shows in batches\n    const stats = await processShowsInBatches(\n      showsToProcess, \n      batchSize, \n      delayBetweenRequestsMs\n    );\n    \n    const elapsedTime = formatElapsedTime(new Date().getTime() - stats.startTime.getTime());\n    \n    console.warn(chalk.bold.green('\\n=== Geocoding process completed ==='));\n    console.warn(chalk.bold(`Total time: ${elapsedTime}`));\n    console.warn(chalk.bold(`Total shows: ${stats.total}`));\n    console.warn(`Processed: ${stats.processed}`);\n    console.warn(`Succeeded: ${chalk.green(stats.succeeded.toString())}`);\n    console.warn(`Failed: ${chalk.red(stats.failed.toString())}`);\n    console.warn(`Skipped: ${chalk.yellow(stats.skipped.toString())}`);\n    \n    return stats;\n  } catch (error) {\n    console.error(chalk.bold.red('\\nError in geocodeExistingShows:'), error);\n    throw error;\n  }\n};\n\n/**\n * Parse command line arguments\n */\nconst parseCommandLineArgs = (): { batchSize: number; delay: number } => {\n  const args = process.argv.slice(2);\n  \n  let batchSize = 5;\n  let delay = 1000;\n  \n  // Check if batch size is provided\n  if (args.length >= 1) {\n    const parsedBatchSize = parseInt(args[0], 10);\n    if (!isNaN(parsedBatchSize) && parsedBatchSize > 0) {\n      batchSize = parsedBatchSize;\n    } else {\n      console.warn(chalk.yellow('Invalid batch size provided, using default (5)'));\n    }\n  }\n  \n  // Check if delay is provided\n  if (args.length >= 2) {\n    const parsedDelay = parseInt(args[1], 10);\n    if (!isNaN(parsedDelay) && parsedDelay >= 0) {\n      delay = parsedDelay;\n    } else {\n      console.warn(chalk.yellow('Invalid delay provided, using default (1000ms)'));\n    }\n  }\n  \n  return { batchSize, delay };\n};\n\n/**\n * Run the script directly if executed with node/ts-node\n */\nif (require.main === module) {\n  (async () => {\n    try {\n      console.warn(chalk.bold.magenta('\\n=== GEOCODING EXISTING SHOWS ==='));\n      \n      // Parse command line arguments\n      const { batchSize, delay } = parseCommandLineArgs();\n      \n      // Run the geocoding process\n      await geocodeExistingShows(batchSize, delay);\n      \n      console.warn(chalk.bold.magenta('\\n=== SCRIPT COMPLETED SUCCESSFULLY ==='));\n      process.exit(0);\n    } catch (error) {\n      console.error(chalk.bold.red('\\nScript failed:'), error);\n      process.exit(1);\n    }\n  })();\n}\n\n// Export for use in other scripts\nexport { geocodeExistingShows };\n"],"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","ignoreList":[]}