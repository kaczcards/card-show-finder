9defd0a181a92c726ca529e3426f813b
function cov_1fs1ma1w45() {
  var path = "/Users/kevin/card-show-finder/src/components/ui/ErrorDisplay.tsx";
  var hash = "b47b8fd1bdabe6687d42adb3113a29b7e5d77503";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kevin/card-show-finder/src/components/ui/ErrorDisplay.tsx",
    statementMap: {
      "0": {
        start: {
          line: 45,
          column: 50
        },
        end: {
          line: 96,
          column: 1
        }
      },
      "1": {
        start: {
          line: 54,
          column: 20
        },
        end: {
          line: 54,
          column: 30
        }
      },
      "2": {
        start: {
          line: 57,
          column: 21
        },
        end: {
          line: 59,
          column: 41
        }
      },
      "3": {
        start: {
          line: 62,
          column: 2
        },
        end: {
          line: 73,
          column: 3
        }
      },
      "4": {
        start: {
          line: 63,
          column: 4
        },
        end: {
          line: 72,
          column: 6
        }
      },
      "5": {
        start: {
          line: 76,
          column: 2
        },
        end: {
          line: 95,
          column: 4
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 45,
            column: 50
          },
          end: {
            line: 45,
            column: 51
          }
        },
        loc: {
          start: {
            line: 52,
            column: 6
          },
          end: {
            line: 96,
            column: 1
          }
        },
        line: 52
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 46,
            column: 2
          },
          end: {
            line: 46,
            column: 17
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 46,
            column: 9
          },
          end: {
            line: 46,
            column: 17
          }
        }],
        line: 46
      },
      "1": {
        loc: {
          start: {
            line: 47,
            column: 2
          },
          end: {
            line: 47,
            column: 17
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 47,
            column: 10
          },
          end: {
            line: 47,
            column: 17
          }
        }],
        line: 47
      },
      "2": {
        loc: {
          start: {
            line: 50,
            column: 2
          },
          end: {
            line: 50,
            column: 21
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 50,
            column: 14
          },
          end: {
            line: 50,
            column: 21
          }
        }],
        line: 50
      },
      "3": {
        loc: {
          start: {
            line: 57,
            column: 21
          },
          end: {
            line: 59,
            column: 41
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 58,
            column: 6
          },
          end: {
            line: 58,
            column: 45
          }
        }, {
          start: {
            line: 59,
            column: 6
          },
          end: {
            line: 59,
            column: 41
          }
        }],
        line: 57
      },
      "4": {
        loc: {
          start: {
            line: 62,
            column: 2
          },
          end: {
            line: 73,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 2
          },
          end: {
            line: 73,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 62
      },
      "5": {
        loc: {
          start: {
            line: 86,
            column: 7
          },
          end: {
            line: 93,
            column: 7
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 86,
            column: 7
          },
          end: {
            line: 86,
            column: 14
          }
        }, {
          start: {
            line: 87,
            column: 8
          },
          end: {
            line: 92,
            column: 27
          }
        }],
        line: 86
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0],
      "1": [0],
      "2": [0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b47b8fd1bdabe6687d42adb3113a29b7e5d77503"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_1fs1ma1w45 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1fs1ma1w45();
import React from 'react';
import { View, Text, TouchableOpacity } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useTheme } from '../../contexts/ThemeContext';
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
cov_1fs1ma1w45().s[0]++;
var ErrorDisplay = function ErrorDisplay(_ref) {
  var _ref$type = _ref.type,
    type = _ref$type === void 0 ? (cov_1fs1ma1w45().b[0][0]++, 'inline') : _ref$type,
    _ref$title = _ref.title,
    title = _ref$title === void 0 ? (cov_1fs1ma1w45().b[1][0]++, 'Error') : _ref$title,
    message = _ref.message,
    onRetry = _ref.onRetry,
    _ref$retryText = _ref.retryText,
    retryText = _ref$retryText === void 0 ? (cov_1fs1ma1w45().b[2][0]++, 'Retry') : _ref$retryText,
    style = _ref.style;
  cov_1fs1ma1w45().f[0]++;
  var _ref2 = (cov_1fs1ma1w45().s[1]++, useTheme()),
    theme = _ref2.theme;
  var errorStyle = (cov_1fs1ma1w45().s[2]++, type === 'fullScreen' ? (cov_1fs1ma1w45().b[3][0]++, theme.components.errorStates.fullScreen) : (cov_1fs1ma1w45().b[3][1]++, theme.components.errorStates.inline));
  cov_1fs1ma1w45().s[3]++;
  if (type === 'inline') {
    cov_1fs1ma1w45().b[4][0]++;
    cov_1fs1ma1w45().s[4]++;
    return _jsxs(View, {
      style: [errorStyle.container, style],
      children: [_jsx(Ionicons, {
        name: "alert-circle",
        size: 20,
        style: errorStyle.icon
      }), _jsx(Text, {
        style: errorStyle.text,
        children: message
      })]
    });
  } else {
    cov_1fs1ma1w45().b[4][1]++;
  }
  cov_1fs1ma1w45().s[5]++;
  return _jsxs(View, {
    style: [errorStyle.container, style],
    children: [_jsx(Ionicons, {
      name: "alert-circle-outline",
      size: 60,
      style: errorStyle.icon
    }), _jsx(Text, {
      style: errorStyle.title,
      children: title
    }), _jsx(Text, {
      style: errorStyle.message,
      children: message
    }), (cov_1fs1ma1w45().b[5][0]++, onRetry) && (cov_1fs1ma1w45().b[5][1]++, _jsx(TouchableOpacity, {
      style: errorStyle.button.container,
      onPress: onRetry,
      children: _jsx(Text, {
        style: errorStyle.button.text,
        children: retryText
      })
    }))]
  });
};
export default ErrorDisplay;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIlZpZXciLCJUZXh0IiwiVG91Y2hhYmxlT3BhY2l0eSIsIklvbmljb25zIiwidXNlVGhlbWUiLCJqc3giLCJfanN4IiwianN4cyIsIl9qc3hzIiwiY292XzFmczFtYTF3NDUiLCJzIiwiRXJyb3JEaXNwbGF5IiwiX3JlZiIsIl9yZWYkdHlwZSIsInR5cGUiLCJiIiwiX3JlZiR0aXRsZSIsInRpdGxlIiwibWVzc2FnZSIsIm9uUmV0cnkiLCJfcmVmJHJldHJ5VGV4dCIsInJldHJ5VGV4dCIsInN0eWxlIiwiZiIsIl9yZWYyIiwidGhlbWUiLCJlcnJvclN0eWxlIiwiY29tcG9uZW50cyIsImVycm9yU3RhdGVzIiwiZnVsbFNjcmVlbiIsImlubGluZSIsImNvbnRhaW5lciIsImNoaWxkcmVuIiwibmFtZSIsInNpemUiLCJpY29uIiwidGV4dCIsImJ1dHRvbiIsIm9uUHJlc3MiXSwic291cmNlcyI6WyJFcnJvckRpc3BsYXkudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBWaWV3LCBUZXh0LCBTdHlsZVNoZWV0LCBUb3VjaGFibGVPcGFjaXR5LCBTdHlsZVByb3AsIFZpZXdTdHlsZSB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyBJb25pY29ucyB9IGZyb20gJ0BleHBvL3ZlY3Rvci1pY29ucyc7XG5pbXBvcnQgeyB1c2VUaGVtZSB9IGZyb20gJy4uLy4uL2NvbnRleHRzL1RoZW1lQ29udGV4dCc7XG5cbmludGVyZmFjZSBFcnJvckRpc3BsYXlQcm9wcyB7XG4gIC8qKlxuICAgKiBEaXNwbGF5IHR5cGU6ICdmdWxsU2NyZWVuJyBmb3IgZW50aXJlIHNjcmVlbiBlcnJvciwgXG4gICAqICdpbmxpbmUnIGZvciB3aXRoaW4tY29tcG9uZW50IGVycm9yXG4gICAqL1xuICB0eXBlPzogJ2Z1bGxTY3JlZW4nIHwgJ2lubGluZSc7XG4gIFxuICAvKipcbiAgICogVGhlIGVycm9yIHRpdGxlIChmb3IgZnVsbFNjcmVlbiB0eXBlKVxuICAgKi9cbiAgdGl0bGU/OiBzdHJpbmc7XG4gIFxuICAvKipcbiAgICogVGhlIGVycm9yIG1lc3NhZ2VcbiAgICovXG4gIG1lc3NhZ2U6IHN0cmluZztcbiAgXG4gIC8qKlxuICAgKiBPcHRpb25hbCByZXRyeSBhY3Rpb25cbiAgICovXG4gIG9uUmV0cnk/OiAoKSA9PiB2b2lkO1xuICBcbiAgLyoqXG4gICAqIEN1c3RvbSByZXRyeSBidXR0b24gdGV4dFxuICAgKi9cbiAgcmV0cnlUZXh0Pzogc3RyaW5nO1xuICBcbiAgLyoqXG4gICAqIE9wdGlvbmFsIGN1c3RvbSBzdHlsZSBmb3IgdGhlIGNvbnRhaW5lclxuICAgKi9cbiAgc3R5bGU/OiBTdHlsZVByb3A8Vmlld1N0eWxlPjtcbn1cblxuLyoqXG4gKiBFcnJvckRpc3BsYXkgLSBBIHN0YW5kYXJkaXplZCBlcnJvciBkaXNwbGF5IGNvbXBvbmVudFxuICogXG4gKiBUaGlzIGNvbXBvbmVudCBwcm92aWRlcyBhIGNvbnNpc3RlbnQgZXJyb3Igc3RhdGUgZGlzcGxheSB0aHJvdWdob3V0IHRoZSBhcHAsXG4gKiB3aXRoIHN1cHBvcnQgZm9yIGJvdGggZnVsbC1zY3JlZW4gYW5kIGlubGluZSBlcnJvciBzdGF0ZXMuXG4gKi9cbmNvbnN0IEVycm9yRGlzcGxheTogUmVhY3QuRkM8RXJyb3JEaXNwbGF5UHJvcHM+ID0gKHtcbiAgdHlwZSA9ICdpbmxpbmUnLFxuICB0aXRsZSA9ICdFcnJvcicsXG4gIG1lc3NhZ2UsXG4gIG9uUmV0cnksXG4gIHJldHJ5VGV4dCA9ICdSZXRyeScsXG4gIHN0eWxlLFxufSkgPT4ge1xuICAvLyBHZXQgdGhlbWUgZnJvbSBjb250ZXh0XG4gIGNvbnN0IHsgdGhlbWUgfSA9IHVzZVRoZW1lKCk7XG4gIFxuICAvLyBHZXQgZXJyb3Igc3R5bGVzIGJhc2VkIG9uIHR5cGVcbiAgY29uc3QgZXJyb3JTdHlsZSA9IHR5cGUgPT09ICdmdWxsU2NyZWVuJ1xuICAgID8gdGhlbWUuY29tcG9uZW50cy5lcnJvclN0YXRlcy5mdWxsU2NyZWVuXG4gICAgOiB0aGVtZS5jb21wb25lbnRzLmVycm9yU3RhdGVzLmlubGluZTtcbiAgXG4gIC8vIEZvciBpbmxpbmUgZXJyb3JzXG4gIGlmICh0eXBlID09PSAnaW5saW5lJykge1xuICAgIHJldHVybiAoXG4gICAgICA8VmlldyBzdHlsZT17W2Vycm9yU3R5bGUuY29udGFpbmVyLCBzdHlsZV19PlxuICAgICAgICA8SW9uaWNvbnMgXG4gICAgICAgICAgbmFtZT1cImFsZXJ0LWNpcmNsZVwiIFxuICAgICAgICAgIHNpemU9ezIwfSBcbiAgICAgICAgICBzdHlsZT17ZXJyb3JTdHlsZS5pY29ufSBcbiAgICAgICAgLz5cbiAgICAgICAgPFRleHQgc3R5bGU9e2Vycm9yU3R5bGUudGV4dH0+e21lc3NhZ2V9PC9UZXh0PlxuICAgICAgPC9WaWV3PlxuICAgICk7XG4gIH1cbiAgXG4gIC8vIEZvciBmdWxsIHNjcmVlbiBlcnJvcnNcbiAgcmV0dXJuIChcbiAgICA8VmlldyBzdHlsZT17W2Vycm9yU3R5bGUuY29udGFpbmVyLCBzdHlsZV19PlxuICAgICAgPElvbmljb25zIFxuICAgICAgICBuYW1lPVwiYWxlcnQtY2lyY2xlLW91dGxpbmVcIiBcbiAgICAgICAgc2l6ZT17NjB9IFxuICAgICAgICBzdHlsZT17ZXJyb3JTdHlsZS5pY29ufSBcbiAgICAgIC8+XG4gICAgICA8VGV4dCBzdHlsZT17ZXJyb3JTdHlsZS50aXRsZX0+e3RpdGxlfTwvVGV4dD5cbiAgICAgIDxUZXh0IHN0eWxlPXtlcnJvclN0eWxlLm1lc3NhZ2V9PnttZXNzYWdlfTwvVGV4dD5cbiAgICAgIFxuICAgICAge29uUmV0cnkgJiYgKFxuICAgICAgICA8VG91Y2hhYmxlT3BhY2l0eVxuICAgICAgICAgIHN0eWxlPXtlcnJvclN0eWxlLmJ1dHRvbi5jb250YWluZXJ9XG4gICAgICAgICAgb25QcmVzcz17b25SZXRyeX1cbiAgICAgICAgPlxuICAgICAgICAgIDxUZXh0IHN0eWxlPXtlcnJvclN0eWxlLmJ1dHRvbi50ZXh0fT57cmV0cnlUZXh0fTwvVGV4dD5cbiAgICAgICAgPC9Ub3VjaGFibGVPcGFjaXR5PlxuICAgICAgKX1cbiAgICA8L1ZpZXc+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBFcnJvckRpc3BsYXk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLE9BQU9BLEtBQUssTUFBTSxPQUFPO0FBQ3pCLFNBQVNDLElBQUksRUFBRUMsSUFBSSxFQUFjQyxnQkFBZ0IsUUFBOEIsY0FBYztBQUM3RixTQUFTQyxRQUFRLFFBQVEsb0JBQW9CO0FBQzdDLFNBQVNDLFFBQVEsUUFBUSw2QkFBNkI7QUFBQyxTQUFBQyxHQUFBLElBQUFDLElBQUEsRUFBQUMsSUFBQSxJQUFBQyxLQUFBO0FBQUFDLGNBQUEsR0FBQUMsQ0FBQTtBQXlDdkQsSUFBTUMsWUFBeUMsR0FBRyxTQUE1Q0EsWUFBeUNBLENBQUFDLElBQUEsRUFPekM7RUFBQSxJQUFBQyxTQUFBLEdBQUFELElBQUEsQ0FOSkUsSUFBSTtJQUFKQSxJQUFJLEdBQUFELFNBQUEsZUFBQUosY0FBQSxHQUFBTSxDQUFBLFVBQUcsUUFBUSxJQUFBRixTQUFBO0lBQUFHLFVBQUEsR0FBQUosSUFBQSxDQUNmSyxLQUFLO0lBQUxBLEtBQUssR0FBQUQsVUFBQSxlQUFBUCxjQUFBLEdBQUFNLENBQUEsVUFB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