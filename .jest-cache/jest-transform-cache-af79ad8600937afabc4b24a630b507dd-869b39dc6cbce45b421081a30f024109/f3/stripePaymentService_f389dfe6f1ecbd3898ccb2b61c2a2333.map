{"version":3,"names":["cov_2672s7zqdg","actualCoverage","s","supabase_1","require","subscriptionTypes_1","userRoleService_1","STRIPE_PUBLISHABLE_KEY","process","env","EXPO_PUBLIC_STRIPE_PUBLISHABLE_KEY","SUPABASE_EDGE_FUNCTION_URL","EXPO_PUBLIC_SUPABASE_URL","initializeStripe","f","b","console","error","exports","createPaymentSheetForSubscription","userId","planId","initPaymentSheet","presentPaymentSheet","plan","SUBSCRIPTION_PLANS","find","p","id","success","response","fetch","method","headers","supabase","auth","getSession","data","session","access_token","body","JSON","stringify","amount","price","currency","ok","errorBody","json","Error","paymentIntent","ephemeralKey","customer","initError","merchantDisplayName","customerId","customerEphemeralKeySecret","paymentIntentClientSecret","allowsDelayedPaymentMethods","returnURL","logPayment","user_id","plan_id","status","transaction_id","error_message","message","presentError","code","processSubscriptionUpdate","transactionId","expiryDate","calculateExpiryDate","newRole","type","UserRole","MVP_DEALER","SHOW_ORGANIZER","updateUserProfileWithSubscription","toISOString","expiryDateISO","from","update","role","subscription_status","payment_status","subscription_expiry","updated_at","Date","eq","paymentData","insert"],"sources":["/Users/kevin/card-show-finder/src/services/stripePaymentService.ts"],"sourcesContent":["import { StripeProvider, useStripe } from '@stripe/stripe-react-native';\nimport { supabase } from '../supabase';\nimport { SubscriptionPlan, SUBSCRIPTION_PLANS, calculateExpiryDate } from './subscriptionTypes';\nimport { UserRole } from './userRoleService';\n\n// --- Type Definitions ---\n\n/**\n * Represents the outcome of a payment operation.\n */\nexport interface StripePaymentResult {\n  success: boolean;\n  error?: string;\n  transactionId?: string;\n}\n\n/**\n * Defines the expected JSON response from the backend (Supabase Edge Function)\n * when creating a payment intent.\n */\ninterface PaymentIntentResponse {\n  paymentIntent: string; // The Payment Intent client secret\n  ephemeralKey: string;  // The Ephemeral Key secret for the customer\n  customer: string;      // The Stripe Customer ID\n  publishableKey: string; // The Stripe publishable key\n}\n\n/**\n * Defines the structure for logging a payment transaction in Supabase.\n */\ninterface PaymentLog {\n  id?: string;\n  user_id: string;\n  plan_id: string;\n  amount: number;\n  currency: string;\n  status: 'succeeded' | 'failed' | 'pending';\n  transaction_id: string; // Stripe Payment Intent ID\n  error_message?: string;\n  created_at?: string;\n}\n\n// --- Constants ---\n\n// It's crucial to load this from environment variables and not hardcode it.\nconst STRIPE_PUBLISHABLE_KEY = process.env.EXPO_PUBLIC_STRIPE_PUBLISHABLE_KEY;\nconst SUPABASE_EDGE_FUNCTION_URL = `${process.env.EXPO_PUBLIC_SUPABASE_URL}/functions/v1/create-payment-intent`;\n\n// --- Service Implementation ---\n\n/**\n * Initializes the Stripe SDK.\n * This should be called once at the root of your application.\n * @returns {boolean} True if initialization was successful, false otherwise.\n */\nexport const initializeStripe = (): boolean => {\n  if (!STRIPE_PUBLISHABLE_KEY) {\n    console.error('Stripe publishable key is not set. Please check your environment variables.');\n    return false;\n  }\n  // The StripeProvider component handles initialization. This function is for validation.\n  return true;\n};\n\n/**\n * Creates and presents the Stripe Payment Sheet for a given subscription plan.\n * This function orchestrates the entire client-side payment flow.\n *\n * @param userId - The ID of the user purchasing the subscription.\n * @param planId - The ID of the subscription plan being purchased.\n * @param initPaymentSheet - The `initPaymentSheet` function from the `useStripe` hook.\n * @param presentPaymentSheet - The `presentPaymentSheet` function from the `useStripe` hook.\n * @returns {Promise<StripePaymentResult>} The result of the payment operation.\n */\nexport const createPaymentSheetForSubscription = async (\n  userId: string,\n  planId: string,\n  initPaymentSheet: (params: any) => Promise<any>,\n  presentPaymentSheet: () => Promise<any>\n): Promise<StripePaymentResult> => {\n  const plan = SUBSCRIPTION_PLANS.find(p => p.id === planId);\n  if (!plan) {\n    return { success: false, error: 'Subscription plan not found.' };\n  }\n\n  try {\n    // 1. Create a payment intent on the server (via Supabase Edge Function)\n    const response = await fetch(SUPABASE_EDGE_FUNCTION_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${supabase.auth.getSession()?.data.session?.access_token}`,\n      },\n      body: JSON.stringify({\n        amount: plan.price * 100, // Stripe expects amount in cents\n        currency: 'usd',\n        userId: userId,\n        planId: plan.id,\n      }),\n    });\n\n    if (!response.ok) {\n      const errorBody = await response.json();\n      throw new Error(errorBody.error || 'Failed to create payment intent.');\n    }\n\n    const { paymentIntent, ephemeralKey, customer }: PaymentIntentResponse = await response.json();\n\n    // 2. Initialize the Payment Sheet\n    const { error: initError } = await initPaymentSheet({\n      merchantDisplayName: 'Card Show Finder, LLC.',\n      customerId: customer,\n      customerEphemeralKeySecret: ephemeralKey,\n      paymentIntentClientSecret: paymentIntent,\n      allowsDelayedPaymentMethods: true,\n      returnURL: 'cardshowfinder://stripe-redirect', // Custom URL scheme\n    });\n\n    if (initError) {\n      console.error('Stripe initPaymentSheet error:', initError);\n      await logPayment({\n        user_id: userId,\n        plan_id: plan.id,\n        amount: plan.price,\n        currency: 'usd',\n        status: 'failed',\n        transaction_id: paymentIntent,\n        error_message: `Init Error: ${initError.message}`,\n      });\n      return { success: false, error: `Initialization failed: ${initError.message}` };\n    }\n\n    // 3. Present the Payment Sheet\n    const { error: presentError } = await presentPaymentSheet();\n\n    if (presentError) {\n      // User cancelled or payment failed\n      if (presentError.code === 'Canceled') {\n        return { success: false, error: 'Payment was canceled.' };\n      }\n      console.error('Stripe presentPaymentSheet error:', presentError);\n      await logPayment({\n        user_id: userId,\n        plan_id: plan.id,\n        amount: plan.price,\n        currency: 'usd',\n        status: 'failed',\n        transaction_id: paymentIntent,\n        error_message: `Present Error: ${presentError.message}`,\n      });\n      return { success: false, error: `Payment failed: ${presentError.message}` };\n    }\n\n    // 4. Payment succeeded, process the subscription\n    await processSubscriptionUpdate(userId, plan, paymentIntent);\n\n    return { success: true, transactionId: paymentIntent };\n\n  } catch (error: any) {\n    console.error('An unexpected error occurred during payment:', error);\n    return { success: false, error: error.message || 'An unknown error occurred.' };\n  }\n};\n\n/**\n * Handles the logic after a successful payment: calculates expiry, updates the user's profile,\n * and logs the transaction.\n *\n * @param userId - The ID of the user.\n * @param plan - The subscription plan that was purchased.\n * @param transactionId - The Stripe Payment Intent ID for logging.\n */\nexport const processSubscriptionUpdate = async (\n  userId: string,\n  plan: SubscriptionPlan,\n  transactionId: string\n): Promise<void> => {\n  try {\n    /**\n     * Calculate the expiry date for the **paid** subscription.\n     * We intentionally ignore any free-trial data here because an upgrade\n     * should terminate the trial and start the paid period immediately.\n     * The helper in `subscriptionTypes` already encodes:\n     *   • Annual  → +365 days\n     *   • Monthly → +30  days\n     */\n    const expiryDate = calculateExpiryDate(plan);\n\n    // Determine the new role based on the subscription type\n    const newRole = plan.type === 'dealer' ? UserRole.MVP_DEALER : UserRole.SHOW_ORGANIZER;\n\n    // Update user profile in Supabase\n    await updateUserProfileWithSubscription(userId, newRole, expiryDate.toISOString());\n\n    // Log the successful payment\n    await logPayment({\n      user_id: userId,\n      plan_id: plan.id,\n      amount: plan.price,\n      currency: 'usd',\n      status: 'succeeded',\n      transaction_id: transactionId,\n    });\n\n  } catch (error) {\n    console.error('Failed to process subscription update after payment:', error);\n    // Even if post-payment processing fails, the payment was successful.\n    // This should be handled with a reconciliation process or monitoring.\n    // For now, we log the error.\n    await logPayment({\n      user_id: userId,\n      plan_id: plan.id,\n      amount: plan.price,\n      currency: 'usd',\n      status: 'failed', // Log as 'failed' to indicate a processing failure post-payment\n      transaction_id: transactionId,\n      error_message: 'Post-payment profile update failed.',\n    });\n  }\n};\n\n/**\n * Updates the user's profile in the Supabase 'profiles' table with new subscription details.\n *\n * @param userId - The user's ID.\n * @param newRole - The new role to assign to the user.\n * @param expiryDateISO - The ISO string of the subscription expiry date.\n */\nconst updateUserProfileWithSubscription = async (\n  userId: string,\n  newRole: UserRole,\n  expiryDateISO: string\n): Promise<void> => {\n  const { error } = await supabase\n    .from('profiles')\n    .update({\n      role: newRole,\n      subscription_status: 'active',\n      // Mark the user as having completed payment so UI does not show “Trial” banners\n      payment_status: 'paid',\n      subscription_expiry: expiryDateISO,\n      updated_at: new Date().toISOString(),\n    })\n    .eq('id', userId);\n\n  if (error) {\n    console.error('Error updating user profile with subscription:', error);\n    throw new Error('Failed to update user profile after payment.');\n  }\n};\n\n/**\n * Logs a payment transaction to the 'payments' table in Supabase.\n *\n * @param paymentData - The payment details to log.\n */\nconst logPayment = async (paymentData: PaymentLog): Promise<void> => {\n  const { error } = await supabase.from('payments').insert(paymentData);\n\n  if (error) {\n    console.error('Error logging payment transaction:', error);\n    // This is a non-critical error for the user flow, but important for analytics/debugging.\n  }\n};\n"],"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","ignoreList":[]}