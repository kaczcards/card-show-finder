66d16a67bb1d70414797dd5531052ece
"use strict";

/* istanbul ignore next */
function cov_2672s7zqdg() {
  var path = "/Users/kevin/card-show-finder/src/services/stripePaymentService.ts";
  var hash = "a267ded00df06a18cf71067987106bc74a7d686b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kevin/card-show-finder/src/services/stripePaymentService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 114
        }
      },
      "2": {
        start: {
          line: 4,
          column: 19
        },
        end: {
          line: 4,
          column: 41
        }
      },
      "3": {
        start: {
          line: 5,
          column: 28
        },
        end: {
          line: 5,
          column: 58
        }
      },
      "4": {
        start: {
          line: 6,
          column: 26
        },
        end: {
          line: 6,
          column: 54
        }
      },
      "5": {
        start: {
          line: 9,
          column: 31
        },
        end: {
          line: 9,
          column: 77
        }
      },
      "6": {
        start: {
          line: 10,
          column: 35
        },
        end: {
          line: 10,
          column: 111
        }
      },
      "7": {
        start: {
          line: 17,
          column: 25
        },
        end: {
          line: 24,
          column: 1
        }
      },
      "8": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 21,
          column: 5
        }
      },
      "9": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 101
        }
      },
      "10": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 21
        }
      },
      "11": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 23,
          column: 16
        }
      },
      "12": {
        start: {
          line: 25,
          column: 0
        },
        end: {
          line: 25,
          column: 44
        }
      },
      "13": {
        start: {
          line: 36,
          column: 42
        },
        end: {
          line: 110,
          column: 1
        }
      },
      "14": {
        start: {
          line: 37,
          column: 17
        },
        end: {
          line: 37,
          column: 82
        }
      },
      "15": {
        start: {
          line: 37,
          column: 66
        },
        end: {
          line: 37,
          column: 81
        }
      },
      "16": {
        start: {
          line: 38,
          column: 4
        },
        end: {
          line: 40,
          column: 5
        }
      },
      "17": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 73
        }
      },
      "18": {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 109,
          column: 5
        }
      },
      "19": {
        start: {
          line: 43,
          column: 25
        },
        end: {
          line: 55,
          column: 10
        }
      },
      "20": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 59,
          column: 9
        }
      },
      "21": {
        start: {
          line: 57,
          column: 30
        },
        end: {
          line: 57,
          column: 51
        }
      },
      "22": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 83
        }
      },
      "23": {
        start: {
          line: 60,
          column: 58
        },
        end: {
          line: 60,
          column: 79
        }
      },
      "24": {
        start: {
          line: 62,
          column: 37
        },
        end: {
          line: 69,
          column: 10
        }
      },
      "25": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 82,
          column: 9
        }
      },
      "26": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 71
        }
      },
      "27": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 80,
          column: 15
        }
      },
      "28": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 92
        }
      },
      "29": {
        start: {
          line: 84,
          column: 40
        },
        end: {
          line: 84,
          column: 67
        }
      },
      "30": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 101,
          column: 9
        }
      },
      "31": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 89,
          column: 13
        }
      },
      "32": {
        start: {
          line: 88,
          column: 16
        },
        end: {
          line: 88,
          column: 74
        }
      },
      "33": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 77
        }
      },
      "34": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 99,
          column: 15
        }
      },
      "35": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 88
        }
      },
      "36": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 103,
          column: 82
        }
      },
      "37": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 104,
          column: 63
        }
      },
      "38": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 107,
          column: 77
        }
      },
      "39": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 108,
          column: 88
        }
      },
      "40": {
        start: {
          line: 111,
          column: 0
        },
        end: {
          line: 111,
          column: 78
        }
      },
      "41": {
        start: {
          line: 120,
          column: 34
        },
        end: {
          line: 160,
          column: 1
        }
      },
      "42": {
        start: {
          line: 121,
          column: 4
        },
        end: {
          line: 159,
          column: 5
        }
      },
      "43": {
        start: {
          line: 130,
          column: 27
        },
        end: {
          line: 130,
          column: 77
        }
      },
      "44": {
        start: {
          line: 132,
          column: 24
        },
        end: {
          line: 132,
          column: 130
        }
      },
      "45": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 134,
          column: 91
        }
      },
      "46": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 143,
          column: 11
        }
      },
      "47": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 146,
          column: 85
        }
      },
      "48": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 158,
          column: 11
        }
      },
      "49": {
        start: {
          line: 161,
          column: 0
        },
        end: {
          line: 161,
          column: 62
        }
      },
      "50": {
        start: {
          line: 169,
          column: 42
        },
        end: {
          line: 185,
          column: 1
        }
      },
      "51": {
        start: {
          line: 170,
          column: 22
        },
        end: {
          line: 180,
          column: 25
        }
      },
      "52": {
        start: {
          line: 181,
          column: 4
        },
        end: {
          line: 184,
          column: 5
        }
      },
      "53": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 182,
          column: 79
        }
      },
      "54": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 183,
          column: 72
        }
      },
      "55": {
        start: {
          line: 191,
          column: 19
        },
        end: {
          line: 197,
          column: 1
        }
      },
      "56": {
        start: {
          line: 192,
          column: 22
        },
        end: {
          line: 192,
          column: 84
        }
      },
      "57": {
        start: {
          line: 193,
          column: 4
        },
        end: {
          line: 196,
          column: 5
        }
      },
      "58": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 194,
          column: 67
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 17,
            column: 25
          },
          end: {
            line: 17,
            column: 26
          }
        },
        loc: {
          start: {
            line: 17,
            column: 31
          },
          end: {
            line: 24,
            column: 1
          }
        },
        line: 17
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 36,
            column: 42
          },
          end: {
            line: 36,
            column: 43
          }
        },
        loc: {
          start: {
            line: 36,
            column: 107
          },
          end: {
            line: 110,
            column: 1
          }
        },
        line: 36
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 37,
            column: 61
          },
          end: {
            line: 37,
            column: 62
          }
        },
        loc: {
          start: {
            line: 37,
            column: 66
          },
          end: {
            line: 37,
            column: 81
          }
        },
        line: 37
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 120,
            column: 34
          },
          end: {
            line: 120,
            column: 35
          }
        },
        loc: {
          start: {
            line: 120,
            column: 73
          },
          end: {
            line: 160,
            column: 1
          }
        },
        line: 120
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 169,
            column: 42
          },
          end: {
            line: 169,
            column: 43
          }
        },
        loc: {
          start: {
            line: 169,
            column: 84
          },
          end: {
            line: 185,
            column: 1
          }
        },
        line: 169
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 191,
            column: 19
          },
          end: {
            line: 191,
            column: 20
          }
        },
        loc: {
          start: {
            line: 191,
            column: 42
          },
          end: {
            line: 197,
            column: 1
          }
        },
        line: 191
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 18
      },
      "1": {
        loc: {
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 40,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 40,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "2": {
        loc: {
          start: {
            line: 56,
            column: 8
          },
          end: {
            line: 59,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 8
          },
          end: {
            line: 59,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 56
      },
      "3": {
        loc: {
          start: {
            line: 58,
            column: 28
          },
          end: {
            line: 58,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 58,
            column: 28
          },
          end: {
            line: 58,
            column: 43
          }
        }, {
          start: {
            line: 58,
            column: 47
          },
          end: {
            line: 58,
            column: 81
          }
        }],
        line: 58
      },
      "4": {
        loc: {
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 70
      },
      "5": {
        loc: {
          start: {
            line: 85,
            column: 8
          },
          end: {
            line: 101,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 8
          },
          end: {
            line: 101,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 85
      },
      "6": {
        loc: {
          start: {
            line: 87,
            column: 12
          },
          end: {
            line: 89,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 87,
            column: 12
          },
          end: {
            line: 89,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 87
      },
      "7": {
        loc: {
          start: {
            line: 108,
            column: 40
          },
          end: {
            line: 108,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 108,
            column: 40
          },
          end: {
            line: 108,
            column: 53
          }
        }, {
          start: {
            line: 108,
            column: 57
          },
          end: {
            line: 108,
            column: 85
          }
        }],
        line: 108
      },
      "8": {
        loc: {
          start: {
            line: 132,
            column: 24
          },
          end: {
            line: 132,
            column: 130
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 132,
            column: 49
          },
          end: {
            line: 132,
            column: 86
          }
        }, {
          start: {
            line: 132,
            column: 89
          },
          end: {
            line: 132,
            column: 130
          }
        }],
        line: 132
      },
      "9": {
        loc: {
          start: {
            line: 181,
            column: 4
          },
          end: {
            line: 184,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 181,
            column: 4
          },
          end: {
            line: 184,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 181
      },
      "10": {
        loc: {
          start: {
            line: 193,
            column: 4
          },
          end: {
            line: 196,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 193,
            column: 4
          },
          end: {
            line: 196,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 193
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/kevin/card-show-finder/src/services/stripePaymentService.ts",
      mappings: ";;;AACA,0CAAuC;AACvC,2DAAgG;AAChG,uDAA6C;AAuC7C,oBAAoB;AAEpB,4EAA4E;AAC5E,MAAM,sBAAsB,GAAG,OAAO,CAAC,GAAG,CAAC,kCAAkC,CAAC;AAC9E,MAAM,0BAA0B,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,wBAAwB,qCAAqC,CAAC;AAEhH,iCAAiC;AAEjC;;;;GAIG;AACI,MAAM,gBAAgB,GAAG,GAAY,EAAE;IAC5C,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAC5B,OAAO,CAAC,KAAK,CAAC,6EAA6E,CAAC,CAAC;QAC7F,OAAO,KAAK,CAAC;IACf,CAAC;IACD,wFAAwF;IACxF,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAPW,QAAA,gBAAgB,oBAO3B;AAEF;;;;;;;;;GASG;AACI,MAAM,iCAAiC,GAAG,KAAK,EACpD,MAAc,EACd,MAAc,EACd,gBAA+C,EAC/C,mBAAuC,EACT,EAAE;IAChC,MAAM,IAAI,GAAG,sCAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,MAAM,CAAC,CAAC;IAC3D,IAAI,CAAC,IAAI,EAAE,CAAC;QACV,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,8BAA8B,EAAE,CAAC;IACnE,CAAC;IAED,IAAI,CAAC;QACH,wEAAwE;QACxE,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,0BAA0B,EAAE;YACvD,MAAM,EAAE,MAAM;YACd,OAAO,EAAE;gBACP,cAAc,EAAE,kBAAkB;gBAClC,eAAe,EAAE,UAAU,mBAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,YAAY,EAAE;aACpF;YACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;gBACnB,MAAM,EAAE,IAAI,CAAC,KAAK,GAAG,GAAG,EAAE,iCAAiC;gBAC3D,QAAQ,EAAE,KAAK;gBACf,MAAM,EAAE,MAAM;gBACd,MAAM,EAAE,IAAI,CAAC,EAAE;aAChB,CAAC;SACH,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;YACjB,MAAM,SAAS,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;YACxC,MAAM,IAAI,KAAK,CAAC,SAAS,CAAC,KAAK,IAAI,kCAAkC,CAAC,CAAC;QACzE,CAAC;QAED,MAAM,EAAE,aAAa,EAAE,YAAY,EAAE,QAAQ,EAAE,GAA0B,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QAE/F,kCAAkC;QAClC,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,MAAM,gBAAgB,CAAC;YAClD,mBAAmB,EAAE,wBAAwB;YAC7C,UAAU,EAAE,QAAQ;YACpB,0BAA0B,EAAE,YAAY;YACxC,yBAAyB,EAAE,aAAa;YACxC,2BAA2B,EAAE,IAAI;YACjC,SAAS,EAAE,kCAAkC,EAAE,oBAAoB;SACpE,CAAC,CAAC;QAEH,IAAI,SAAS,EAAE,CAAC;YACd,OAAO,CAAC,KAAK,CAAC,gCAAgC,EAAE,SAAS,CAAC,CAAC;YAC3D,MAAM,UAAU,CAAC;gBACf,OAAO,EAAE,MAAM;gBACf,OAAO,EAAE,IAAI,CAAC,EAAE;gBAChB,MAAM,EAAE,IAAI,CAAC,KAAK;gBAClB,QAAQ,EAAE,KAAK;gBACf,MAAM,EAAE,QAAQ;gBAChB,cAAc,EAAE,aAAa;gBAC7B,aAAa,EAAE,eAAe,SAAS,CAAC,OAAO,EAAE;aAClD,CAAC,CAAC;YACH,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,0BAA0B,SAAS,CAAC,OAAO,EAAE,EAAE,CAAC;QAClF,CAAC;QAED,+BAA+B;QAC/B,MAAM,EAAE,KAAK,EAAE,YAAY,EAAE,GAAG,MAAM,mBAAmB,EAAE,CAAC;QAE5D,IAAI,YAAY,EAAE,CAAC;YACjB,mCAAmC;YACnC,IAAI,YAAY,CAAC,IAAI,KAAK,UAAU,EAAE,CAAC;gBACrC,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,uBAAuB,EAAE,CAAC;YAC5D,CAAC;YACD,OAAO,CAAC,KAAK,CAAC,mCAAmC,EAAE,YAAY,CAAC,CAAC;YACjE,MAAM,UAAU,CAAC;gBACf,OAAO,EAAE,MAAM;gBACf,OAAO,EAAE,IAAI,CAAC,EAAE;gBAChB,MAAM,EAAE,IAAI,CAAC,KAAK;gBAClB,QAAQ,EAAE,KAAK;gBACf,MAAM,EAAE,QAAQ;gBAChB,cAAc,EAAE,aAAa;gBAC7B,aAAa,EAAE,kBAAkB,YAAY,CAAC,OAAO,EAAE;aACxD,CAAC,CAAC;YACH,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,mBAAmB,YAAY,CAAC,OAAO,EAAE,EAAE,CAAC;QAC9E,CAAC;QAED,iDAAiD;QACjD,MAAM,IAAA,iCAAyB,EAAC,MAAM,EAAE,IAAI,EAAE,aAAa,CAAC,CAAC;QAE7D,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,aAAa,EAAE,aAAa,EAAE,CAAC;IAEzD,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,OAAO,CAAC,KAAK,CAAC,8CAA8C,EAAE,KAAK,CAAC,CAAC;QACrE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,IAAI,4BAA4B,EAAE,CAAC;IAClF,CAAC;AACH,CAAC,CAAC;AAxFW,QAAA,iCAAiC,qCAwF5C;AAEF;;;;;;;GAOG;AACI,MAAM,yBAAyB,GAAG,KAAK,EAC5C,MAAc,EACd,IAAsB,EACtB,aAAqB,EACN,EAAE;IACjB,IAAI,CAAC;QACH;;;;;;;WAOG;QACH,MAAM,UAAU,GAAG,IAAA,uCAAmB,EAAC,IAAI,CAAC,CAAC;QAE7C,wDAAwD;QACxD,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,0BAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,0BAAQ,CAAC,cAAc,CAAC;QAEvF,kCAAkC;QAClC,MAAM,iCAAiC,CAAC,MAAM,EAAE,OAAO,EAAE,UAAU,CAAC,WAAW,EAAE,CAAC,CAAC;QAEnF,6BAA6B;QAC7B,MAAM,UAAU,CAAC;YACf,OAAO,EAAE,MAAM;YACf,OAAO,EAAE,IAAI,CAAC,EAAE;YAChB,MAAM,EAAE,IAAI,CAAC,KAAK;YAClB,QAAQ,EAAE,KAAK;YACf,MAAM,EAAE,WAAW;YACnB,cAAc,EAAE,aAAa;SAC9B,CAAC,CAAC;IAEL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,sDAAsD,EAAE,KAAK,CAAC,CAAC;QAC7E,qEAAqE;QACrE,sEAAsE;QACtE,6BAA6B;QAC7B,MAAM,UAAU,CAAC;YACf,OAAO,EAAE,MAAM;YACf,OAAO,EAAE,IAAI,CAAC,EAAE;YAChB,MAAM,EAAE,IAAI,CAAC,KAAK;YAClB,QAAQ,EAAE,KAAK;YACf,MAAM,EAAE,QAAQ,EAAE,gEAAgE;YAClF,cAAc,EAAE,aAAa;YAC7B,aAAa,EAAE,qCAAqC;SACrD,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC;AA/CW,QAAA,yBAAyB,6BA+CpC;AAEF;;;;;;GAMG;AACH,MAAM,iCAAiC,GAAG,KAAK,EAC7C,MAAc,EACd,OAAiB,EACjB,aAAqB,EACN,EAAE;IACjB,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,mBAAQ;SAC7B,IAAI,CAAC,UAAU,CAAC;SAChB,MAAM,CAAC;QACN,IAAI,EAAE,OAAO;QACb,mBAAmB,EAAE,QAAQ;QAC7B,gFAAgF;QAChF,cAAc,EAAE,MAAM;QACtB,mBAAmB,EAAE,aAAa;QAClC,UAAU,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;KACrC,CAAC;SACD,EAAE,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IAEpB,IAAI,KAAK,EAAE,CAAC;QACV,OAAO,CAAC,KAAK,CAAC,gDAAgD,EAAE,KAAK,CAAC,CAAC;QACvE,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;IAClE,CAAC;AACH,CAAC,CAAC;AAEF;;;;GAIG;AACH,MAAM,UAAU,GAAG,KAAK,EAAE,WAAuB,EAAiB,EAAE;IAClE,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,mBAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IAEtE,IAAI,KAAK,EAAE,CAAC;QACV,OAAO,CAAC,KAAK,CAAC,oCAAoC,EAAE,KAAK,CAAC,CAAC;QAC3D,yFAAyF;IAC3F,CAAC;AACH,CAAC,CAAC",
      names: [],
      sources: ["/Users/kevin/card-show-finder/src/services/stripePaymentService.ts"],
      sourcesContent: ["import { StripeProvider, useStripe } from '@stripe/stripe-react-native';\nimport { supabase } from '../supabase';\nimport { SubscriptionPlan, SUBSCRIPTION_PLANS, calculateExpiryDate } from './subscriptionTypes';\nimport { UserRole } from './userRoleService';\n\n// --- Type Definitions ---\n\n/**\n * Represents the outcome of a payment operation.\n */\nexport interface StripePaymentResult {\n  success: boolean;\n  error?: string;\n  transactionId?: string;\n}\n\n/**\n * Defines the expected JSON response from the backend (Supabase Edge Function)\n * when creating a payment intent.\n */\ninterface PaymentIntentResponse {\n  paymentIntent: string; // The Payment Intent client secret\n  ephemeralKey: string;  // The Ephemeral Key secret for the customer\n  customer: string;      // The Stripe Customer ID\n  publishableKey: string; // The Stripe publishable key\n}\n\n/**\n * Defines the structure for logging a payment transaction in Supabase.\n */\ninterface PaymentLog {\n  id?: string;\n  user_id: string;\n  plan_id: string;\n  amount: number;\n  currency: string;\n  status: 'succeeded' | 'failed' | 'pending';\n  transaction_id: string; // Stripe Payment Intent ID\n  error_message?: string;\n  created_at?: string;\n}\n\n// --- Constants ---\n\n// It's crucial to load this from environment variables and not hardcode it.\nconst STRIPE_PUBLISHABLE_KEY = process.env.EXPO_PUBLIC_STRIPE_PUBLISHABLE_KEY;\nconst SUPABASE_EDGE_FUNCTION_URL = `${process.env.EXPO_PUBLIC_SUPABASE_URL}/functions/v1/create-payment-intent`;\n\n// --- Service Implementation ---\n\n/**\n * Initializes the Stripe SDK.\n * This should be called once at the root of your application.\n * @returns {boolean} True if initialization was successful, false otherwise.\n */\nexport const initializeStripe = (): boolean => {\n  if (!STRIPE_PUBLISHABLE_KEY) {\n    console.error('Stripe publishable key is not set. Please check your environment variables.');\n    return false;\n  }\n  // The StripeProvider component handles initialization. This function is for validation.\n  return true;\n};\n\n/**\n * Creates and presents the Stripe Payment Sheet for a given subscription plan.\n * This function orchestrates the entire client-side payment flow.\n *\n * @param userId - The ID of the user purchasing the subscription.\n * @param planId - The ID of the subscription plan being purchased.\n * @param initPaymentSheet - The `initPaymentSheet` function from the `useStripe` hook.\n * @param presentPaymentSheet - The `presentPaymentSheet` function from the `useStripe` hook.\n * @returns {Promise<StripePaymentResult>} The result of the payment operation.\n */\nexport const createPaymentSheetForSubscription = async (\n  userId: string,\n  planId: string,\n  initPaymentSheet: (params: any) => Promise<any>,\n  presentPaymentSheet: () => Promise<any>\n): Promise<StripePaymentResult> => {\n  const plan = SUBSCRIPTION_PLANS.find(p => p.id === planId);\n  if (!plan) {\n    return { success: false, error: 'Subscription plan not found.' };\n  }\n\n  try {\n    // 1. Create a payment intent on the server (via Supabase Edge Function)\n    const response = await fetch(SUPABASE_EDGE_FUNCTION_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${supabase.auth.getSession()?.data.session?.access_token}`,\n      },\n      body: JSON.stringify({\n        amount: plan.price * 100, // Stripe expects amount in cents\n        currency: 'usd',\n        userId: userId,\n        planId: plan.id,\n      }),\n    });\n\n    if (!response.ok) {\n      const errorBody = await response.json();\n      throw new Error(errorBody.error || 'Failed to create payment intent.');\n    }\n\n    const { paymentIntent, ephemeralKey, customer }: PaymentIntentResponse = await response.json();\n\n    // 2. Initialize the Payment Sheet\n    const { error: initError } = await initPaymentSheet({\n      merchantDisplayName: 'Card Show Finder, LLC.',\n      customerId: customer,\n      customerEphemeralKeySecret: ephemeralKey,\n      paymentIntentClientSecret: paymentIntent,\n      allowsDelayedPaymentMethods: true,\n      returnURL: 'cardshowfinder://stripe-redirect', // Custom URL scheme\n    });\n\n    if (initError) {\n      console.error('Stripe initPaymentSheet error:', initError);\n      await logPayment({\n        user_id: userId,\n        plan_id: plan.id,\n        amount: plan.price,\n        currency: 'usd',\n        status: 'failed',\n        transaction_id: paymentIntent,\n        error_message: `Init Error: ${initError.message}`,\n      });\n      return { success: false, error: `Initialization failed: ${initError.message}` };\n    }\n\n    // 3. Present the Payment Sheet\n    const { error: presentError } = await presentPaymentSheet();\n\n    if (presentError) {\n      // User cancelled or payment failed\n      if (presentError.code === 'Canceled') {\n        return { success: false, error: 'Payment was canceled.' };\n      }\n      console.error('Stripe presentPaymentSheet error:', presentError);\n      await logPayment({\n        user_id: userId,\n        plan_id: plan.id,\n        amount: plan.price,\n        currency: 'usd',\n        status: 'failed',\n        transaction_id: paymentIntent,\n        error_message: `Present Error: ${presentError.message}`,\n      });\n      return { success: false, error: `Payment failed: ${presentError.message}` };\n    }\n\n    // 4. Payment succeeded, process the subscription\n    await processSubscriptionUpdate(userId, plan, paymentIntent);\n\n    return { success: true, transactionId: paymentIntent };\n\n  } catch (error: any) {\n    console.error('An unexpected error occurred during payment:', error);\n    return { success: false, error: error.message || 'An unknown error occurred.' };\n  }\n};\n\n/**\n * Handles the logic after a successful payment: calculates expiry, updates the user's profile,\n * and logs the transaction.\n *\n * @param userId - The ID of the user.\n * @param plan - The subscription plan that was purchased.\n * @param transactionId - The Stripe Payment Intent ID for logging.\n */\nexport const processSubscriptionUpdate = async (\n  userId: string,\n  plan: SubscriptionPlan,\n  transactionId: string\n): Promise<void> => {\n  try {\n    /**\n     * Calculate the expiry date for the **paid** subscription.\n     * We intentionally ignore any free-trial data here because an upgrade\n     * should terminate the trial and start the paid period immediately.\n     * The helper in `subscriptionTypes` already encodes:\n     *   \u2022 Annual  \u2192 +365 days\n     *   \u2022 Monthly \u2192 +30  days\n     */\n    const expiryDate = calculateExpiryDate(plan);\n\n    // Determine the new role based on the subscription type\n    const newRole = plan.type === 'dealer' ? UserRole.MVP_DEALER : UserRole.SHOW_ORGANIZER;\n\n    // Update user profile in Supabase\n    await updateUserProfileWithSubscription(userId, newRole, expiryDate.toISOString());\n\n    // Log the successful payment\n    await logPayment({\n      user_id: userId,\n      plan_id: plan.id,\n      amount: plan.price,\n      currency: 'usd',\n      status: 'succeeded',\n      transaction_id: transactionId,\n    });\n\n  } catch (error) {\n    console.error('Failed to process subscription update after payment:', error);\n    // Even if post-payment processing fails, the payment was successful.\n    // This should be handled with a reconciliation process or monitoring.\n    // For now, we log the error.\n    await logPayment({\n      user_id: userId,\n      plan_id: plan.id,\n      amount: plan.price,\n      currency: 'usd',\n      status: 'failed', // Log as 'failed' to indicate a processing failure post-payment\n      transaction_id: transactionId,\n      error_message: 'Post-payment profile update failed.',\n    });\n  }\n};\n\n/**\n * Updates the user's profile in the Supabase 'profiles' table with new subscription details.\n *\n * @param userId - The user's ID.\n * @param newRole - The new role to assign to the user.\n * @param expiryDateISO - The ISO string of the subscription expiry date.\n */\nconst updateUserProfileWithSubscription = async (\n  userId: string,\n  newRole: UserRole,\n  expiryDateISO: string\n): Promise<void> => {\n  const { error } = await supabase\n    .from('profiles')\n    .update({\n      role: newRole,\n      subscription_status: 'active',\n      // Mark the user as having completed payment so UI does not show \u201CTrial\u201D banners\n      payment_status: 'paid',\n      subscription_expiry: expiryDateISO,\n      updated_at: new Date().toISOString(),\n    })\n    .eq('id', userId);\n\n  if (error) {\n    console.error('Error updating user profile with subscription:', error);\n    throw new Error('Failed to update user profile after payment.');\n  }\n};\n\n/**\n * Logs a payment transaction to the 'payments' table in Supabase.\n *\n * @param paymentData - The payment details to log.\n */\nconst logPayment = async (paymentData: PaymentLog): Promise<void> => {\n  const { error } = await supabase.from('payments').insert(paymentData);\n\n  if (error) {\n    console.error('Error logging payment transaction:', error);\n    // This is a non-critical error for the user flow, but important for analytics/debugging.\n  }\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a267ded00df06a18cf71067987106bc74a7d686b"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2672s7zqdg = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2672s7zqdg();
cov_2672s7zqdg().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2672s7zqdg().s[1]++;
exports.processSubscriptionUpdate = exports.createPaymentSheetForSubscription = exports.initializeStripe = void 0;
const supabase_1 =
/* istanbul ignore next */
(cov_2672s7zqdg().s[2]++, require("../supabase"));
const subscriptionTypes_1 =
/* istanbul ignore next */
(cov_2672s7zqdg().s[3]++, require("./subscriptionTypes"));
const userRoleService_1 =
/* istanbul ignore next */
(cov_2672s7zqdg().s[4]++, require("./userRoleService"));
// --- Constants ---
// It's crucial to load this from environment variables and not hardcode it.
const STRIPE_PUBLISHABLE_KEY =
/* istanbul ignore next */
(cov_2672s7zqdg().s[5]++, process.env.EXPO_PUBLIC_STRIPE_PUBLISHABLE_KEY);
const SUPABASE_EDGE_FUNCTION_URL =
/* istanbul ignore next */
(cov_2672s7zqdg().s[6]++, `${process.env.EXPO_PUBLIC_SUPABASE_URL}/functions/v1/create-payment-intent`);
// --- Service Implementation ---
/**
 * Initializes the Stripe SDK.
 * This should be called once at the root of your application.
 * @returns {boolean} True if initialization was successful, false otherwise.
 */
/* istanbul ignore next */
cov_2672s7zqdg().s[7]++;
const initializeStripe = () => {
  /* istanbul ignore next */
  cov_2672s7zqdg().f[0]++;
  cov_2672s7zqdg().s[8]++;
  if (!STRIPE_PUBLISHABLE_KEY) {
    /* istanbul ignore next */
    cov_2672s7zqdg().b[0][0]++;
    cov_2672s7zqdg().s[9]++;
    console.error('Stripe publishable key is not set. Please check your environment variables.');
    /* istanbul ignore next */
    cov_2672s7zqdg().s[10]++;
    return false;
  } else
  /* istanbul ignore next */
  {
    cov_2672s7zqdg().b[0][1]++;
  }
  // The StripeProvider component handles initialization. This function is for validation.
  cov_2672s7zqdg().s[11]++;
  return true;
};
/* istanbul ignore next */
cov_2672s7zqdg().s[12]++;
exports.initializeStripe = initializeStripe;
/**
 * Creates and presents the Stripe Payment Sheet for a given subscription plan.
 * This function orchestrates the entire client-side payment flow.
 *
 * @param userId - The ID of the user purchasing the subscription.
 * @param planId - The ID of the subscription plan being purchased.
 * @param initPaymentSheet - The `initPaymentSheet` function from the `useStripe` hook.
 * @param presentPaymentSheet - The `presentPaymentSheet` function from the `useStripe` hook.
 * @returns {Promise<StripePaymentResult>} The result of the payment operation.
 */
/* istanbul ignore next */
cov_2672s7zqdg().s[13]++;
const createPaymentSheetForSubscription = async (userId, planId, initPaymentSheet, presentPaymentSheet) => {
  /* istanbul ignore next */
  cov_2672s7zqdg().f[1]++;
  const plan =
  /* istanbul ignore next */
  (cov_2672s7zqdg().s[14]++, subscriptionTypes_1.SUBSCRIPTION_PLANS.find(p => {
    /* istanbul ignore next */
    cov_2672s7zqdg().f[2]++;
    cov_2672s7zqdg().s[15]++;
    return p.id === planId;
  }));
  /* istanbul ignore next */
  cov_2672s7zqdg().s[16]++;
  if (!plan) {
    /* istanbul ignore next */
    cov_2672s7zqdg().b[1][0]++;
    cov_2672s7zqdg().s[17]++;
    return {
      success: false,
      error: 'Subscription plan not found.'
    };
  } else
  /* istanbul ignore next */
  {
    cov_2672s7zqdg().b[1][1]++;
  }
  cov_2672s7zqdg().s[18]++;
  try {
    // 1. Create a payment intent on the server (via Supabase Edge Function)
    const response =
    /* istanbul ignore next */
    (cov_2672s7zqdg().s[19]++, await fetch(SUPABASE_EDGE_FUNCTION_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${supabase_1.supabase.auth.getSession()?.data.session?.access_token}`
      },
      body: JSON.stringify({
        amount: plan.price * 100,
        // Stripe expects amount in cents
        currency: 'usd',
        userId: userId,
        planId: plan.id
      })
    }));
    /* istanbul ignore next */
    cov_2672s7zqdg().s[20]++;
    if (!response.ok) {
      /* istanbul ignore next */
      cov_2672s7zqdg().b[2][0]++;
      const errorBody =
      /* istanbul ignore next */
      (cov_2672s7zqdg().s[21]++, await response.json());
      /* istanbul ignore next */
      cov_2672s7zqdg().s[22]++;
      throw new Error(
      /* istanbul ignore next */
      (cov_2672s7zqdg().b[3][0]++, errorBody.error) ||
      /* istanbul ignore next */
      (cov_2672s7zqdg().b[3][1]++, 'Failed to create payment intent.'));
    } else
    /* istanbul ignore next */
    {
      cov_2672s7zqdg().b[2][1]++;
    }
    const {
      paymentIntent,
      ephemeralKey,
      customer
    } =
    /* istanbul ignore next */
    (cov_2672s7zqdg().s[23]++, await response.json());
    // 2. Initialize the Payment Sheet
    const {
      error: initError
    } =
    /* istanbul ignore next */
    (cov_2672s7zqdg().s[24]++, await initPaymentSheet({
      merchantDisplayName: 'Card Show Finder, LLC.',
      customerId: customer,
      customerEphemeralKeySecret: ephemeralKey,
      paymentIntentClientSecret: paymentIntent,
      allowsDelayedPaymentMethods: true,
      returnURL: 'cardshowfinder://stripe-redirect' // Custom URL scheme
    }));
    /* istanbul ignore next */
    cov_2672s7zqdg().s[25]++;
    if (initError) {
      /* istanbul ignore next */
      cov_2672s7zqdg().b[4][0]++;
      cov_2672s7zqdg().s[26]++;
      console.error('Stripe initPaymentSheet error:', initError);
      /* istanbul ignore next */
      cov_2672s7zqdg().s[27]++;
      await logPayment({
        user_id: userId,
        plan_id: plan.id,
        amount: plan.price,
        currency: 'usd',
        status: 'failed',
        transaction_id: paymentIntent,
        error_message: `Init Error: ${initError.message}`
      });
      /* istanbul ignore next */
      cov_2672s7zqdg().s[28]++;
      return {
        success: false,
        error: `Initialization failed: ${initError.message}`
      };
    } else
    /* istanbul ignore next */
    {
      cov_2672s7zqdg().b[4][1]++;
    }
    // 3. Present the Payment Sheet
    const {
      error: presentError
    } =
    /* istanbul ignore next */
    (cov_2672s7zqdg().s[29]++, await presentPaymentSheet());
    /* istanbul ignore next */
    cov_2672s7zqdg().s[30]++;
    if (presentError) {
      /* istanbul ignore next */
      cov_2672s7zqdg().b[5][0]++;
      cov_2672s7zqdg().s[31]++;
      // User cancelled or payment failed
      if (presentError.code === 'Canceled') {
        /* istanbul ignore next */
        cov_2672s7zqdg().b[6][0]++;
        cov_2672s7zqdg().s[32]++;
        return {
          success: false,
          error: 'Payment was canceled.'
        };
      } else
      /* istanbul ignore next */
      {
        cov_2672s7zqdg().b[6][1]++;
      }
      cov_2672s7zqdg().s[33]++;
      console.error('Stripe presentPaymentSheet error:', presentError);
      /* istanbul ignore next */
      cov_2672s7zqdg().s[34]++;
      await logPayment({
        user_id: userId,
        plan_id: plan.id,
        amount: plan.price,
        currency: 'usd',
        status: 'failed',
        transaction_id: paymentIntent,
        error_message: `Present Error: ${presentError.message}`
      });
      /* istanbul ignore next */
      cov_2672s7zqdg().s[35]++;
      return {
        success: false,
        error: `Payment failed: ${presentError.message}`
      };
    } else
    /* istanbul ignore next */
    {
      cov_2672s7zqdg().b[5][1]++;
    }
    // 4. Payment succeeded, process the subscription
    cov_2672s7zqdg().s[36]++;
    await (0, exports.processSubscriptionUpdate)(userId, plan, paymentIntent);
    /* istanbul ignore next */
    cov_2672s7zqdg().s[37]++;
    return {
      success: true,
      transactionId: paymentIntent
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_2672s7zqdg().s[38]++;
    console.error('An unexpected error occurred during payment:', error);
    /* istanbul ignore next */
    cov_2672s7zqdg().s[39]++;
    return {
      success: false,
      error:
      /* istanbul ignore next */
      (cov_2672s7zqdg().b[7][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_2672s7zqdg().b[7][1]++, 'An unknown error occurred.')
    };
  }
};
/* istanbul ignore next */
cov_2672s7zqdg().s[40]++;
exports.createPaymentSheetForSubscription = createPaymentSheetForSubscription;
/**
 * Handles the logic after a successful payment: calculates expiry, updates the user's profile,
 * and logs the transaction.
 *
 * @param userId - The ID of the user.
 * @param plan - The subscription plan that was purchased.
 * @param transactionId - The Stripe Payment Intent ID for logging.
 */
/* istanbul ignore next */
cov_2672s7zqdg().s[41]++;
const processSubscriptionUpdate = async (userId, plan, transactionId) => {
  /* istanbul ignore next */
  cov_2672s7zqdg().f[3]++;
  cov_2672s7zqdg().s[42]++;
  try {
    /**
     * Calculate the expiry date for the **paid** subscription.
     * We intentionally ignore any free-trial data here because an upgrade
     * should terminate the trial and start the paid period immediately.
     * The helper in `subscriptionTypes` already encodes:
     *   • Annual  → +365 days
     *   • Monthly → +30  days
     */
    const expiryDate =
    /* istanbul ignore next */
    (cov_2672s7zqdg().s[43]++, (0, subscriptionTypes_1.calculateExpiryDate)(plan));
    // Determine the new role based on the subscription type
    const newRole =
    /* istanbul ignore next */
    (cov_2672s7zqdg().s[44]++, plan.type === 'dealer' ?
    /* istanbul ignore next */
    (cov_2672s7zqdg().b[8][0]++, userRoleService_1.UserRole.MVP_DEALER) :
    /* istanbul ignore next */
    (cov_2672s7zqdg().b[8][1]++, userRoleService_1.UserRole.SHOW_ORGANIZER));
    // Update user profile in Supabase
    /* istanbul ignore next */
    cov_2672s7zqdg().s[45]++;
    await updateUserProfileWithSubscription(userId, newRole, expiryDate.toISOString());
    // Log the successful payment
    /* istanbul ignore next */
    cov_2672s7zqdg().s[46]++;
    await logPayment({
      user_id: userId,
      plan_id: plan.id,
      amount: plan.price,
      currency: 'usd',
      status: 'succeeded',
      transaction_id: transactionId
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2672s7zqdg().s[47]++;
    console.error('Failed to process subscription update after payment:', error);
    // Even if post-payment processing fails, the payment was successful.
    // This should be handled with a reconciliation process or monitoring.
    // For now, we log the error.
    /* istanbul ignore next */
    cov_2672s7zqdg().s[48]++;
    await logPayment({
      user_id: userId,
      plan_id: plan.id,
      amount: plan.price,
      currency: 'usd',
      status: 'failed',
      // Log as 'failed' to indicate a processing failure post-payment
      transaction_id: transactionId,
      error_message: 'Post-payment profile update failed.'
    });
  }
};
/* istanbul ignore next */
cov_2672s7zqdg().s[49]++;
exports.processSubscriptionUpdate = processSubscriptionUpdate;
/**
 * Updates the user's profile in the Supabase 'profiles' table with new subscription details.
 *
 * @param userId - The user's ID.
 * @param newRole - The new role to assign to the user.
 * @param expiryDateISO - The ISO string of the subscription expiry date.
 */
/* istanbul ignore next */
cov_2672s7zqdg().s[50]++;
const updateUserProfileWithSubscription = async (userId, newRole, expiryDateISO) => {
  /* istanbul ignore next */
  cov_2672s7zqdg().f[4]++;
  const {
    error
  } =
  /* istanbul ignore next */
  (cov_2672s7zqdg().s[51]++, await supabase_1.supabase.from('profiles').update({
    role: newRole,
    subscription_status: 'active',
    // Mark the user as having completed payment so UI does not show “Trial” banners
    payment_status: 'paid',
    subscription_expiry: expiryDateISO,
    updated_at: new Date().toISOString()
  }).eq('id', userId));
  /* istanbul ignore next */
  cov_2672s7zqdg().s[52]++;
  if (error) {
    /* istanbul ignore next */
    cov_2672s7zqdg().b[9][0]++;
    cov_2672s7zqdg().s[53]++;
    console.error('Error updating user profile with subscription:', error);
    /* istanbul ignore next */
    cov_2672s7zqdg().s[54]++;
    throw new Error('Failed to update user profile after payment.');
  } else
  /* istanbul ignore next */
  {
    cov_2672s7zqdg().b[9][1]++;
  }
};
/**
 * Logs a payment transaction to the 'payments' table in Supabase.
 *
 * @param paymentData - The payment details to log.
 */
/* istanbul ignore next */
cov_2672s7zqdg().s[55]++;
const logPayment = async paymentData => {
  /* istanbul ignore next */
  cov_2672s7zqdg().f[5]++;
  const {
    error
  } =
  /* istanbul ignore next */
  (cov_2672s7zqdg().s[56]++, await supabase_1.supabase.from('payments').insert(paymentData));
  /* istanbul ignore next */
  cov_2672s7zqdg().s[57]++;
  if (error) {
    /* istanbul ignore next */
    cov_2672s7zqdg().b[10][0]++;
    cov_2672s7zqdg().s[58]++;
    console.error('Error logging payment transaction:', error);
    // This is a non-critical error for the user flow, but important for analytics/debugging.
  } else
  /* istanbul ignore next */
  {
    cov_2672s7zqdg().b[10][1]++;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,