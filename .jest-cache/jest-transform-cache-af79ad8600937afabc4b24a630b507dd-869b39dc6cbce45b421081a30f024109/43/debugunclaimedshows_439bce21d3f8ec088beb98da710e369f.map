{"version":3,"names":["showSeriesService","testUnclaimedShowsDataHandling","_testUnclaimedShowsDataHandling","apply","arguments","_asyncToGenerator","cov_un1urhoal","f","s","console","warn","unclaimedSeries","getAllShowSeries","organizerId","undefined","Array","isArray","b","length","safeSeries","unclaimedShows","getUnclaimedShows","safeShows","combinedItems","concat","_toConsumableArray","error"],"sources":["debug-unclaimed-shows.ts"],"sourcesContent":["// Temporary debug file to test the useUnclaimedShows hook\nimport { showSeriesService } from './services/showSeriesService';\n\n/**\n * Quick debug helper for validating the data returned by the showSeriesService.\n * It purposefully logs out the shape and size of the returned arrays so we can\n * ensure downstream hooks (e.g. useUnclaimedShows) wonâ€™t break on `undefined`.\n */\nasync function testUnclaimedShowsDataHandling() {\n  console.warn('---- STARTING DEBUG TEST ----');\n  \n  try {\n    // Test getAllShowSeries function\n    console.warn('[_TEST] Testing getAllShowSeries...');\n    const unclaimedSeries = await showSeriesService.getAllShowSeries({\n      organizerId: undefined\n    });\n    console.warn('[_DEBUG] Value of unclaimedSeries:', unclaimedSeries);\n    console.warn(\n      '[_DEBUG] Type of unclaimedSeries:',\n      Array.isArray(unclaimedSeries) ? 'array' : typeof unclaimedSeries,\n    );\n    console.warn(\n      '[_DEBUG] Length of unclaimedSeries:',\n      Array.isArray(unclaimedSeries) ? unclaimedSeries.length : 'N/A',\n    );\n    \n    // Ensure it's an array even if empty\n    const safeSeries = unclaimedSeries || [];\n    console.warn('[_DEBUG] Safe series is array:', Array.isArray(safeSeries));\n    \n    // Test getUnclaimedShows function\n    console.warn('[_TEST] Testing getUnclaimedShows...');\n    const unclaimedShows = await showSeriesService.getUnclaimedShows();\n    console.warn('[_DEBUG] Value of unclaimedShows:', unclaimedShows);\n    console.warn(\n      '[_DEBUG] Type of unclaimedShows:',\n      Array.isArray(unclaimedShows) ? 'array' : typeof unclaimedShows,\n    );\n    console.warn(\n      '[_DEBUG] Length of unclaimedShows:',\n      Array.isArray(unclaimedShows) ? unclaimedShows.length : 'N/A',\n    );\n    \n    // Ensure it's an array even if empty\n    const safeShows = unclaimedShows || [];\n    console.warn('[_DEBUG] Safe shows is array:', Array.isArray(safeShows));\n    \n    // Test the combined data\n    console.warn('[_TEST] Testing combined data...');\n    // This would crash if either unclaimedSeries or unclaimedShows is undefined\n    const combinedItems = [\n      ...safeSeries,\n      ...safeShows\n    ];\n    console.warn('[_DEBUG] Combined items length:', combinedItems.length);\n    \n    console.warn('---- DEBUG TEST SUCCESSFUL ----');\n  } catch (error) {\n    console.error('[_ERROR] Debug test failed:', error);\n  }\n}\n\n// Export for use in other modules if needed\nexport { testUnclaimedShowsDataHandling };\n"],"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","ignoreList":[]}