{"version":3,"names":["mockStorage","_data","Map","setItem","jest","fn","key","value","Promise","resolve","reject","Math","random","Error","setTimeout","set","getItem","get","removeItem","delete","clear","getAllKeys","Array","from","keys","MockEventEmitter","_classCallCheck2","default","listeners","_createClass2","addListener","event","listener","_this","has","push","remove","removeListener","eventListeners","index","indexOf","splice","removeAllListeners","emit","_len","arguments","length","args","_key","forEach","apply","e","console","error","describe","consoleErrorSpy","consoleWarnSpy","setTimeoutSpy","clearTimeoutSpy","beforeEach","clearAllMocks","useFakeTimers","spyOn","mockImplementation","global","afterEach","clearAllTimers","useRealTimers","mockRestore","test","_asyncToGenerator2","initialData","JSON","stringify","theme","notifications","update1","_ref2","data","parse","update2","_ref3","_yield$Promise$all","all","_yield$Promise$all2","_slicedToArray2","result1","result2","expect","not","toEqual","finalValue","objectContaining","any","String","Boolean","toBe","currentVersion","currentValue","getWithVersion","version","setWithVersion","_ref6","k","valueStr","_x","_x2","incrementWithRetry","_ref7","maxRetries","undefined","retries","dataStr","newData","r","pow","advanceTimersByTime","results","allSettled","every","status","eventEmitter","mockCallback","subscription","toHaveBeenCalledWith","mockClear","toHaveBeenCalled","timerId","clearTimeout","abortController","AbortController","signal","longRunningOperation","checkAbort","aborted","intervalId","setInterval","clearInterval","operationPromise","abort","rejects","toThrow","processData","_ref0","_validatedData","_transformedData","_savedData","Object","assign","saved","_x3","innerOperation","_ref10","middleOperation","_ref11","message","outerOperation","_ref12","fetchWithFallback","_ref14","url","fallback","_x4","_x5","result","timeoutPromise","ms","_","slowOperation","racePromise","race","operationWithTimeout","_ref17","operation","timeoutMs","timeoutError","timeoutId","finally","_x6","_x7","_ref19","id","duration","timeout","_x8","_x9","_x0","reason","toContain","concurrencyLimit","activeOperations","maxConcurrentOperations","_ref21","max","_x1","runWithConcurrencyLimit","_ref22","operations","limit","executing","_loop","_operation","p","then","_x10","_x11","fill","map","i","toBeLessThanOrEqual","op","successResults","filter","priorityQueue","priority","sort","a","b","executionOrder","_results","item","deeplyNested","level1","level2","level3","level4","level5","retrieved","circular","name","self","child","parent","seen","WeakSet","serialized","add","deserialized","specialCharsObject","emoji","arabic","chinese","russian","japanese","korean","thai","specialChars","escapeChars","malformedJSON","SyntaxError","safeParse","json","step1","_ref30","step2","_ref31","step3","_ref32","_ref34","_ref35","_ref36","createAppError","code","context","executeOperation","_ref38","appError","_x12","fail","executeAll","_ref40","ops","successes","failures","_x13","attempts","maxAttempts","unreliableOperation","withRetry","_ref42","_lastError","baseDelay","factor","lastError","_loop2","v","warn","attempt","delay","_ret","_x14","_x15","toHaveBeenCalledTimes","withRetryAndJitter","_ref44","_lastError2","jitter","_loop3","expDelay","jitterAmount","ceil","_ret2","_x16","_x17","delays","mock","calls","call","Set","size","networkError","validationError","callCount","withConditionalRetry","_ref46","shouldRetry","_x18","_x19","_x20","largeArray","processInChunks","_ref48","items","chunkSize","processor","chunk","slice","chunkResults","_toConsumableArray2","_x21","_x22","_x23","processItems","_ref49","processed","_x24","startTime","performance","now","endTime","toBeLessThan","expensiveCalculation","sqrt","memoize","cache","_len2","_key2","memoizedCalculation","_result3","_result4","concurrentOperations","completedOperations","failedOperations","promises","catch","toBeGreaterThan"],"sources":["asyncOperationEdgeCases.test.ts"],"sourcesContent":["/**\n * Edge Cases and Async Operations Test Suite\n * \n * This test suite focuses on testing edge cases related to asynchronous operations\n * using pure JavaScript/TypeScript patterns, including race conditions, memory management,\n * promise chains, timeouts, concurrent operations, and error handling patterns.\n */\n\n// Simple mock for AsyncStorage-like functionality\nconst mockStorage = {\n  _data: new Map<string, string>(),\n  setItem: jest.fn((key: string, value: string) => {\n    return new Promise<void>((resolve, reject) => {\n      // Simulate occasional failures\n      if (Math.random() < 0.1) {\n        reject(new Error('Storage error'));\n        return;\n      }\n      \n      setTimeout(() => {\n        mockStorage._data.set(key, value);\n        resolve();\n      }, Math.random() * 10); // Random delay to simulate race conditions\n    });\n  }),\n  getItem: jest.fn((key: string) => {\n    return new Promise<string | null>((resolve) => {\n      setTimeout(() => {\n        resolve(mockStorage._data.get(key) || null);\n      }, Math.random() * 10); // Random delay to simulate race conditions\n    });\n  }),\n  removeItem: jest.fn((key: string) => {\n    return new Promise<void>((resolve) => {\n      setTimeout(() => {\n        mockStorage._data.delete(key);\n        resolve();\n      }, Math.random() * 10);\n    });\n  }),\n  clear: jest.fn(() => {\n    return new Promise<void>((resolve) => {\n      mockStorage._data.clear();\n      resolve();\n    });\n  }),\n  getAllKeys: jest.fn(() => {\n    return new Promise<string[]>((resolve) => {\n      resolve(Array.from(mockStorage._data.keys()));\n    });\n  })\n};\n\n// Mock for EventEmitter\nclass MockEventEmitter {\n  private listeners: Map<string, Array<(...args: any[]) => void>> = new Map();\n  \n  addListener(event: string, listener: (...args: any[]) => void) {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, []);\n    }\n    this.listeners.get(event)!.push(listener);\n    return {\n      remove: () => this.removeListener(event, listener)\n    };\n  }\n  \n  removeListener(event: string, listener: (...args: any[]) => void) {\n    if (!this.listeners.has(event)) return;\n    \n    const eventListeners = this.listeners.get(event)!;\n    const index = eventListeners.indexOf(listener);\n    if (index !== -1) {\n      eventListeners.splice(index, 1);\n    }\n  }\n  \n  removeAllListeners(event?: string) {\n    if (event) {\n      this.listeners.delete(event);\n    } else {\n      this.listeners.clear();\n    }\n  }\n  \n  emit(event: string, ...args: any[]) {\n    if (!this.listeners.has(event)) return false;\n    \n    const eventListeners = this.listeners.get(event)!;\n    eventListeners.forEach(listener => {\n      try {\n        listener(...args);\n      } catch (e) {\n        console.error('Error in event listener:', e);\n      }\n    });\n    return true;\n  }\n}\n\ndescribe('Edge Cases and Async Operations', () => {\n  // Spy on console methods to prevent noise in test output\n  let consoleErrorSpy: jest.SpyInstance;\n  let consoleWarnSpy: jest.SpyInstance;\n  let setTimeoutSpy: jest.SpyInstance;\n  let clearTimeoutSpy: jest.SpyInstance;\n  \n  // Setup before each test\n  beforeEach(() => {\n    jest.clearAllMocks();\n    jest.useFakeTimers();\n    \n    // Spy on console methods\n    consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation(() => {});\n    consoleWarnSpy = jest.spyOn(console, 'warn').mockImplementation(() => {});\n    \n    // Spy on setTimeout and clearTimeout\n    setTimeoutSpy = jest.spyOn(global, 'setTimeout');\n    clearTimeoutSpy = jest.spyOn(global, 'clearTimeout');\n    \n    // Clear mock storage\n    mockStorage._data.clear();\n  });\n  \n  // Cleanup after each test\n  afterEach(() => {\n    jest.clearAllTimers();\n    jest.useRealTimers();\n    consoleErrorSpy.mockRestore();\n    consoleWarnSpy.mockRestore();\n    setTimeoutSpy.mockRestore();\n    clearTimeoutSpy.mockRestore();\n  });\n\n  describe('Race Conditions', () => {\n    test('should handle multiple concurrent storage operations on the same key', async () => {\n      // Arrange\n      const key = 'user_preferences';\n      const initialData = JSON.stringify({ theme: 'light', notifications: true });\n      \n      // Set initial data\n      await mockStorage.setItem(key, initialData);\n      \n      // Act - Simulate two concurrent updates\n      const update1 = async () => {\n        const data = JSON.parse(await mockStorage.getItem(key) || '{}');\n        data.theme = 'dark';\n        await mockStorage.setItem(key, JSON.stringify(data));\n        return data;\n      };\n      \n      const update2 = async () => {\n        const data = JSON.parse(await mockStorage.getItem(key) || '{}');\n        data.notifications = false;\n        await mockStorage.setItem(key, JSON.stringify(data));\n        return data;\n      };\n      \n      // Run both updates concurrently\n      const [result1, result2] = await Promise.all([update1(), update2()]);\n      \n      // Assert\n      // One update will overwrite the other due to race condition\n      expect(result1).not.toEqual(result2);\n      \n      // The final stored value will be from whichever operation completed last\n      const finalValue = JSON.parse(await mockStorage.getItem(key) || '{}');\n      expect(finalValue).toEqual(expect.objectContaining({\n        theme: expect.any(String),\n        notifications: expect.any(Boolean),\n      }));\n      \n      // Only one property was updated in each result\n      expect(result1.theme).toBe('dark');\n      expect(result2.notifications).toBe(false);\n    }, 60000);\n    \n    test('should implement optimistic locking to prevent race conditions', async () => {\n      // Arrange\n      const key = 'counter';\n      let currentVersion = 1;\n      let currentValue = 0;\n      \n      // Mock storage with version checking\n      const getWithVersion = jest.fn(async () => {\n        return JSON.stringify({ value: currentValue, version: currentVersion });\n      });\n      \n      const setWithVersion = jest.fn(async (k: string, valueStr: string) => {\n        const data = JSON.parse(valueStr);\n        \n        // Simulate optimistic locking - only update if versions match\n        if (data.version === currentVersion) {\n          currentValue = data.value;\n          currentVersion++;\n          return;\n        } else {\n          throw new Error('Version mismatch - data was modified by another process');\n        }\n      });\n      \n      // Function to increment with retry logic\n      const incrementWithRetry = async (maxRetries = 3): Promise<number> => {\n        let retries = 0;\n        \n        while (retries < maxRetries) {\n          try {\n            // Get current data\n            const dataStr = await getWithVersion(key);\n            const data = JSON.parse(dataStr || '{\"value\":0,\"version\":1}');\n            \n            // Update with current version\n            const newData = {\n              value: data.value + 1,\n              version: data.version\n            };\n            \n            // Try to save\n            await setWithVersion(key, JSON.stringify(newData));\n            return newData.value;\n          } catch (error) {\n            retries++;\n            if (retries >= maxRetries) {\n              throw error;\n            }\n            // Wait before retrying (exponential backoff)\n            await new Promise(r => setTimeout(r, 10 * Math.pow(2, retries)));\n            jest.advanceTimersByTime(10 * Math.pow(2, retries));\n          }\n        }\n        \n        throw new Error('Failed after max retries');\n      };\n      \n      // Act - Run multiple increments in parallel\n      const results = await Promise.allSettled([\n        incrementWithRetry(),\n        incrementWithRetry(),\n        incrementWithRetry()\n      ]);\n      \n      // Assert\n      // All operations should eventually succeed with retries\n      expect(results.every(r => r.status === 'fulfilled')).toBe(true);\n      \n      // Final value should be incremented by the number of operations\n      expect(currentValue).toBe(3);\n      \n      // Version should be incremented for each successful update\n      expect(currentVersion).toBe(4); // Started at 1, then 3 successful updates\n    }, 60000);\n  });\n\n  describe('Memory Management', () => {\n    test('should properly cleanup event listeners when component unmounts', () => {\n      // Arrange\n      const eventEmitter = new MockEventEmitter();\n      const mockCallback = jest.fn();\n      \n      // Act - Simulate component lifecycle\n      // Setup phase (componentDidMount)\n      const subscription = eventEmitter.addListener('dataChange', mockCallback);\n      \n      // Verify listener is working\n      eventEmitter.emit('dataChange', { value: 'test' });\n      expect(mockCallback).toHaveBeenCalledWith({ value: 'test' });\n      \n      // Cleanup phase (componentWillUnmount)\n      subscription.remove();\n      \n      // Verify listener is removed\n      mockCallback.mockClear();\n      eventEmitter.emit('dataChange', { value: 'test2' });\n      expect(mockCallback).not.toHaveBeenCalled();\n    });\n    \n    test('should cancel timers to prevent memory leaks', () => {\n      // Arrange\n      const mockCallback = jest.fn();\n      \n      // Act - Simulate component with timer\n      const timerId = setTimeout(mockCallback, 500);\n      \n      // Simulate component unmount - cleanup timers\n      clearTimeout(timerId);\n      \n      // Fast-forward time\n      jest.advanceTimersByTime(1000);\n      \n      // Assert\n      expect(mockCallback).not.toHaveBeenCalled();\n      expect(clearTimeoutSpy).toHaveBeenCalledWith(timerId);\n    });\n    \n    test('should handle abandoned promises that could cause memory leaks', async () => {\n      // Arrange\n      const abortController = new AbortController();\n      const { signal } = abortController;\n      \n      // Create a promise that checks for abort signal\n      const longRunningOperation = () => new Promise((resolve, reject) => {\n        const checkAbort = () => {\n          if (signal.aborted) {\n            reject(new Error('Operation aborted'));\n            return true;\n          }\n          return false;\n        };\n        \n        // Immediate check\n        if (checkAbort()) return;\n        \n        // Set up periodic checks\n        const intervalId = setInterval(() => {\n          if (checkAbort()) {\n            clearInterval(intervalId);\n          }\n        }, 100);\n        \n        // Resolve after a long time if not aborted\n        setTimeout(() => {\n          clearInterval(intervalId);\n          resolve('Operation completed');\n        }, 500);\n      });\n      \n      // Act - Start a long running operation\n      const operationPromise = longRunningOperation();\n      \n      // Simulate component unmount - abort the operation\n      abortController.abort();\n      \n      // Fast-forward time to trigger interval checks\n      jest.advanceTimersByTime(100);\n      \n      // Assert\n      await expect(operationPromise).rejects.toThrow('Operation aborted');\n    }, 60000);\n  });\n\n  describe('Promise Chain Failures', () => {\n    test('should handle errors in the middle of promise chains', async () => {\n      // Arrange\n      const processData = async (data: any) => {\n        // Step 1: Validate\n        const _validatedData = await Promise.resolve(data);\n        \n        // Step 2: Transform (will fail)\n        const _transformedData = await Promise.reject(new Error('Transform failed'));\n        \n        // Step 3: Save (should never execute)\n        const _savedData = await Promise.resolve({ ..._transformedData, saved: true });\n        \n        return _savedData;\n      };\n      \n      // Act & Assert\n      await expect(processData({ test: true })).rejects.toThrow('Transform failed');\n    });\n    \n    test('should handle errors in nested promise chains', async () => {\n      // Arrange\n      const innerOperation = async () => {\n        throw new Error('Inner operation failed');\n      };\n      \n      const middleOperation = async () => {\n        try {\n          return await innerOperation();\n        } catch (error) {\n          throw new Error(`Middle operation caught: ${(error as Error).message}`);\n        }\n      };\n      \n      const outerOperation = async () => {\n        try {\n          return await middleOperation();\n        } catch (error) {\n          throw new Error(`Outer operation caught: ${(error as Error).message}`);\n        }\n      };\n      \n      // Act & Assert\n      await expect(outerOperation()).rejects.toThrow(\n        'Outer operation caught: Middle operation caught: Inner operation failed'\n      );\n    });\n    \n    test('should recover from promise chain failures with fallback values', async () => {\n      // Arrange\n      const fetchWithFallback = async (url: string, fallback: any) => {\n        try {\n          throw new Error('Network error');\n        } catch (error) {\n          console.error('Error fetching data:', error);\n          return fallback;\n        }\n      };\n      \n      // Act\n      const result = await fetchWithFallback('https://api.example.com/data', { fallback: true });\n      \n      // Assert\n      expect(result).toEqual({ fallback: true });\n      expect(consoleErrorSpy).toHaveBeenCalled();\n    });\n  });\n\n  describe('Timeout Handling', () => {\n    test('should handle promise timeout with race pattern', async () => {\n      // Arrange\n      const timeoutPromise = (ms: number) => {\n        return new Promise((_, reject) => {\n          setTimeout(() => reject(new Error(`Operation timed out after ${ms}ms`)), ms);\n        });\n      };\n      \n      const slowOperation = () => {\n        return new Promise(resolve => {\n          setTimeout(() => resolve('Success'), 200);\n        });\n      };\n      \n      // Act & Assert - Operation should timeout\n      const racePromise = Promise.race([slowOperation(), timeoutPromise(100)]);\n      \n      // Fast-forward time to trigger timeout\n      jest.advanceTimersByTime(100);\n      \n      await expect(racePromise).rejects.toThrow('Operation timed out after 100ms');\n    });\n    \n    test('should implement custom timeout for async operations', async () => {\n      // Arrange\n      const operationWithTimeout = async <T>(\n        operation: () => Promise<T>,\n        timeoutMs: number\n      ): Promise<T> => {\n        const timeoutError = new Error(`Operation timed out after ${timeoutMs}ms`);\n        \n        let timeoutId: NodeJS.Timeout;\n        const timeoutPromise = new Promise<never>((_, reject) => {\n          timeoutId = setTimeout(() => reject(timeoutError), timeoutMs);\n        });\n        \n        return Promise.race([\n          operation(),\n          timeoutPromise\n        ]).finally(() => {\n          clearTimeout(timeoutId);\n        });\n      };\n      \n      // A slow operation that would take too long\n      const slowOperation = () => new Promise<string>(resolve => {\n        setTimeout(() => resolve('Success'), 200);\n      });\n      \n      // Act & Assert\n      const operationPromise = operationWithTimeout(() => slowOperation(), 100);\n      \n      // Fast-forward time to trigger timeout\n      jest.advanceTimersByTime(100);\n      \n      await expect(operationPromise).rejects.toThrow('Operation timed out after 100ms');\n    });\n    \n    test('should handle timeouts in parallel operations', async () => {\n      // Arrange\n      const operationWithTimeout = async (id: number, duration: number, timeout: number) => {\n        return new Promise((resolve, reject) => {\n          const timeoutId = setTimeout(() => {\n            reject(new Error(`Operation ${id} timed out after ${timeout}ms`));\n          }, timeout);\n          \n          setTimeout(() => {\n            clearTimeout(timeoutId);\n            resolve(`Operation ${id} completed in ${duration}ms`);\n          }, duration);\n        });\n      };\n      \n      // Act\n      const results = await Promise.allSettled([\n        operationWithTimeout(1, 50, 100),  // Should succeed\n        operationWithTimeout(2, 150, 100), // Should timeout\n        operationWithTimeout(3, 80, 100),  // Should succeed\n      ]);\n      \n      // Fast-forward time to trigger all operations\n      jest.advanceTimersByTime(50);  // First operation completes\n      jest.advanceTimersByTime(30);  // Third operation completes\n      jest.advanceTimersByTime(20);  // Timeout for second operation\n      \n      // Assert\n      expect(results[0].status).toBe('fulfilled');\n      expect(results[1].status).toBe('rejected');\n      expect(results[2].status).toBe('fulfilled');\n      \n      if (results[1].status === 'rejected') {\n        expect(results[1].reason.message).toContain('Operation 2 timed out');\n      }\n    });\n  });\n\n  describe('Concurrent Operations', () => {\n    test('should limit concurrency of parallel operations', async () => {\n      // Arrange\n      const concurrencyLimit = 3;\n      let activeOperations = 0;\n      let maxConcurrentOperations = 0;\n      \n      const operation = async (id: number) => {\n        activeOperations++;\n        maxConcurrentOperations = Math.max(maxConcurrentOperations, activeOperations);\n        \n        // Simulate work\n        await new Promise(resolve => setTimeout(resolve, 10));\n        jest.advanceTimersByTime(10);\n        \n        activeOperations--;\n        return `Operation ${id} completed`;\n      };\n      \n      // Helper to run operations with limited concurrency\n      const runWithConcurrencyLimit = async (operations: (() => Promise<any>)[], limit: number) => {\n        const results: any[] = [];\n        const executing: Promise<any>[] = [];\n        \n        for (const operation of operations) {\n          const p = Promise.resolve().then(() => operation());\n          results.push(p);\n          \n          if (limit <= operations.length) {\n            const e: Promise<any> = p.then(() => {\n              executing.splice(executing.indexOf(e), 1);\n            });\n            executing.push(e);\n            \n            if (executing.length >= limit) {\n              await Promise.race(executing);\n            }\n          }\n        }\n        \n        return Promise.all(results);\n      };\n      \n      // Act\n      const operations = Array(10).fill(null).map((_, i) => () => operation(i + 1));\n      await runWithConcurrencyLimit(operations, concurrencyLimit);\n      \n      // Assert\n      expect(maxConcurrentOperations).toBeLessThanOrEqual(concurrencyLimit);\n    }, 60000);\n    \n    test('should handle errors in concurrent operations without stopping others', async () => {\n      // Arrange\n      const operations = [\n        () => Promise.resolve('Operation 1 success'),\n        () => Promise.reject(new Error('Operation 2 failed')),\n        () => Promise.resolve('Operation 3 success'),\n        () => Promise.reject(new Error('Operation 4 failed')),\n        () => Promise.resolve('Operation 5 success'),\n      ];\n      \n      // Act\n      const results = await Promise.allSettled(operations.map(op => op()));\n      \n      // Assert\n      expect(results[0].status).toBe('fulfilled');\n      expect(results[1].status).toBe('rejected');\n      expect(results[2].status).toBe('fulfilled');\n      expect(results[3].status).toBe('rejected');\n      expect(results[4].status).toBe('fulfilled');\n      \n      const successResults = results.filter(r => r.status === 'fulfilled');\n      expect(successResults.length).toBe(3);\n    });\n    \n    test('should prioritize operations in concurrent queue', async () => {\n      // Arrange\n      interface QueueItem {\n        id: number;\n        priority: number;\n        operation: () => Promise<any>;\n      }\n      \n      const priorityQueue: QueueItem[] = [\n        { id: 1, priority: 2, operation: () => Promise.resolve('Operation 1 (Medium)') },\n        { id: 2, priority: 1, operation: () => Promise.resolve('Operation 2 (High)') },\n        { id: 3, priority: 3, operation: () => Promise.resolve('Operation 3 (Low)') },\n        { id: 4, priority: 1, operation: () => Promise.resolve('Operation 4 (High)') },\n        { id: 5, priority: 2, operation: () => Promise.resolve('Operation 5 (Medium)') },\n      ];\n      \n      // Sort by priority (lower number = higher priority)\n      priorityQueue.sort((a, b) => a.priority - b.priority);\n      \n      // Act\n      const executionOrder: number[] = [];\n      const _results = await Promise.all(\n        priorityQueue.map(item => {\n          return item.operation().then(result => {\n            executionOrder.push(item.id);\n            return result;\n          });\n        })\n      );\n      \n      // Assert\n      // High priority operations (2, 4) should be at the start of the execution order\n      expect(executionOrder[0]).toBe(2);\n      expect(executionOrder[1]).toBe(4);\n      \n      // Low priority operation (3) should be at the end\n      expect(executionOrder[executionOrder.length - 1]).toBe(3);\n    });\n  });\n\n  describe('Data Structure Edge Cases', () => {\n    test('should handle deeply nested objects', async () => {\n      // Arrange\n      const deeplyNested = {\n        level1: {\n          level2: {\n            level3: {\n              level4: {\n                level5: {\n                  value: 'Deep value',\n                },\n              },\n            },\n          },\n        },\n      };\n      \n      // Act\n      await mockStorage.setItem('deeplyNested', JSON.stringify(deeplyNested));\n      const retrieved = JSON.parse(await mockStorage.getItem('deeplyNested') || '{}');\n      \n      // Assert\n      expect(retrieved.level1.level2.level3.level4.level5.value).toBe('Deep value');\n    }, 60000);\n    \n    test('should handle circular references', async () => {\n      // Arrange\n      const circular: any = {\n        name: 'Circular Object',\n        value: 42,\n      };\n      circular.self = circular; // Create circular reference\n      \n      // Create a more complex circular structure\n      circular.child = {\n        parent: circular,\n        name: 'Child Object',\n      };\n      \n      // Act & Assert\n      // Direct JSON.stringify will throw\n      expect(() => JSON.stringify(circular)).toThrow();\n      \n      // Custom serializer to handle circular references\n      const seen = new WeakSet();\n      const serialized = JSON.stringify(circular, (key, value) => {\n        if (key && typeof value === 'object' && value !== null) {\n          if (seen.has(value)) {\n            return '[Circular Reference]';\n          }\n          seen.add(value);\n        }\n        return value;\n      });\n      \n      // Assert the serialized string contains the marker\n      expect(serialized).toContain('[Circular Reference]');\n      \n      // We can deserialize it back\n      const deserialized = JSON.parse(serialized);\n      expect(deserialized.name).toBe('Circular Object');\n      expect(deserialized.value).toBe(42);\n      expect(deserialized.child.name).toBe('Child Object');\n      expect(deserialized.child.parent).toBe('[Circular Reference]');\n    });\n    \n    test('should handle Unicode and special characters', async () => {\n      // Arrange\n      const specialCharsObject = {\n        emoji: '😀🚀🌟🔥🎉',\n        arabic: 'مرحبا بالعالم',\n        chinese: '你好世界',\n        russian: 'Привет, мир',\n        japanese: 'こんにちは世界',\n        korean: '안녕하세요 세계',\n        thai: 'สวัสดีชาวโลก',\n        specialChars: '©®™§¶†‡♠♣♥♦¿¡«»',\n        escapeChars: '\\n\\t\\r\\b\\f\\\\\\'\\\\\"',\n      };\n      \n      // Act\n      await mockStorage.setItem('specialChars', JSON.stringify(specialCharsObject));\n      const retrieved = JSON.parse(await mockStorage.getItem('specialChars') || '{}');\n      \n      // Assert\n      expect(retrieved.emoji).toBe(specialCharsObject.emoji);\n      expect(retrieved.arabic).toBe(specialCharsObject.arabic);\n      expect(retrieved.chinese).toBe(specialCharsObject.chinese);\n      expect(retrieved.russian).toBe(specialCharsObject.russian);\n      expect(retrieved.japanese).toBe(specialCharsObject.japanese);\n      expect(retrieved.korean).toBe(specialCharsObject.korean);\n      expect(retrieved.thai).toBe(specialCharsObject.thai);\n      expect(retrieved.specialChars).toBe(specialCharsObject.specialChars);\n      expect(retrieved.escapeChars).toBe(specialCharsObject.escapeChars);\n    }, 60000);\n    \n    test('should handle malformed data', async () => {\n      // Arrange\n      const malformedJSON = '{\"name\": \"Test\", \"value\": 42, missing: quotes, unclosed: {';\n      \n      // Act & Assert\n      expect(() => JSON.parse(malformedJSON)).toThrow(SyntaxError);\n      \n      // Safe parser with error handling\n      const safeParse = (json: string, fallback: any = {}) => {\n        try {\n          return JSON.parse(json);\n        } catch (error) {\n          console.error('Error parsing JSON:', error);\n          return fallback;\n        }\n      };\n      \n      // Act with safe parser\n      const result = safeParse(malformedJSON, { error: true });\n      \n      // Assert\n      expect(result).toEqual({ error: true });\n      expect(consoleErrorSpy).toHaveBeenCalled();\n    });\n  });\n\n  describe('Error Propagation', () => {\n    test('should propagate errors through async chains', async () => {\n      // Arrange\n      const step1 = async () => {\n        throw new Error('Error in step 1');\n      };\n      \n      const step2 = async () => {\n        await step1();\n        return 'Step 2 completed';\n      };\n      \n      const step3 = async () => {\n        const result = await step2();\n        return `Step 3 completed with ${result}`;\n      };\n      \n      // Act & Assert\n      await expect(step3()).rejects.toThrow('Error in step 1');\n    });\n    \n    test('should transform errors through async chains', async () => {\n      // Arrange\n      const step1 = async () => {\n        throw new Error('Database connection failed');\n      };\n      \n      const step2 = async () => {\n        try {\n          await step1();\n          return 'Step 2 completed';\n        } catch (error) {\n          throw new Error(`Data retrieval error: ${(error as Error).message}`);\n        }\n      };\n      \n      const step3 = async () => {\n        try {\n          const result = await step2();\n          return `Step 3 completed with ${result}`;\n        } catch (error) {\n          throw new Error(`Processing error: ${(error as Error).message}`);\n        }\n      };\n      \n      // Act & Assert\n      await expect(step3()).rejects.toThrow('Processing error: Data retrieval error: Database connection failed');\n    });\n    \n    test('should handle errors with context information', async () => {\n      // Arrange\n      interface AppError extends Error {\n        code?: string;\n        context?: Record<string, any>;\n      }\n      \n      const createAppError = (\n        message: string,\n        code?: string,\n        context?: Record<string, any>\n      ): AppError => {\n        const error = new Error(message) as AppError;\n        if (code) error.code = code;\n        if (context) error.context = context;\n        return error;\n      };\n      \n      const executeOperation = async (context: string) => {\n        try {\n          throw new Error('Operation failed');\n        } catch (error) {\n          const appError = createAppError(\n            (error as Error).message,\n            'OPERATION_ERROR',\n            { context }\n          );\n          throw appError;\n        }\n      };\n      \n      // Act & Assert\n      try {\n        await executeOperation('test-context');\n        fail('Should have thrown an error');\n      } catch (error: any) {\n        expect(error.message).toBe('Operation failed');\n        expect(error.code).toBe('OPERATION_ERROR');\n        expect(error.context).toEqual({ context: 'test-context' });\n      }\n    });\n    \n    test('should aggregate errors from multiple operations', async () => {\n      // Arrange\n      const operations = [\n        () => Promise.resolve('Operation 1 success'),\n        () => Promise.reject(new Error('Operation 2 failed')),\n        () => Promise.resolve('Operation 3 success'),\n        () => Promise.reject(new Error('Operation 4 failed')),\n      ];\n      \n      // Custom implementation to aggregate errors\n      const executeAll = async (ops: (() => Promise<any>)[]) => {\n        const results = await Promise.allSettled(ops.map(op => op()));\n        \n        const successes = results\n          .filter((r): r is PromiseFulfilledResult<any> => r.status === 'fulfilled')\n          .map(r => r.value);\n        \n        const failures = results\n          .filter((r): r is PromiseRejectedResult => r.status === 'rejected')\n          .map(r => r.reason);\n        \n        if (failures.length > 0) {\n          const error = new Error(`${failures.length} operations failed`);\n          (error as any).failures = failures;\n          (error as any).successes = successes;\n          throw error;\n        }\n        \n        return successes;\n      };\n      \n      // Act & Assert\n      try {\n        await executeAll(operations);\n        fail('Should have thrown an error');\n      } catch (error: any) {\n        expect(error.message).toBe('2 operations failed');\n        expect(error.failures.length).toBe(2);\n        expect(error.failures[0].message).toBe('Operation 2 failed');\n        expect(error.failures[1].message).toBe('Operation 4 failed');\n        expect(error.successes.length).toBe(2);\n        expect(error.successes).toEqual(['Operation 1 success', 'Operation 3 success']);\n      }\n    });\n  });\n\n  describe('Retry Mechanisms', () => {\n    test('should implement retry with exponential backoff', async () => {\n      // Arrange\n      let attempts = 0;\n      const maxAttempts = 3;\n      \n      const unreliableOperation = jest.fn().mockImplementation(() => {\n        attempts++;\n        if (attempts < 3) {\n          return Promise.reject(new Error(`Attempt ${attempts} failed`));\n        }\n        return Promise.resolve(`Success on attempt ${attempts}`);\n      });\n      \n      const withRetry = async <T>(\n        operation: () => Promise<T>,\n        maxRetries: number,\n        baseDelay = 10,\n        factor = 2\n      ): Promise<T> => {\n        let lastError: Error | null = null;\n        \n        for (let attempt = 1; attempt <= maxRetries; attempt++) {\n          try {\n            return await operation();\n          } catch (error) {\n            lastError = error as Error;\n            console.warn(`Attempt ${attempt} failed: ${lastError.message}`);\n            \n            if (attempt < maxRetries) {\n              const delay = baseDelay * Math.pow(factor, attempt - 1);\n              await new Promise(resolve => setTimeout(resolve, delay));\n              jest.advanceTimersByTime(delay);\n            }\n          }\n        }\n        \n        throw new Error(`All ${maxRetries} attempts failed. Last error: ${lastError?.message}`);\n      };\n      \n      // Act\n      const result = await withRetry(unreliableOperation, maxAttempts);\n      \n      // Assert\n      expect(result).toBe('Success on attempt 3');\n      expect(unreliableOperation).toHaveBeenCalledTimes(3);\n      expect(consoleWarnSpy).toHaveBeenCalledTimes(2);\n    }, 60000);\n    \n    test('should implement retry with jitter to prevent thundering herd', async () => {\n      // Arrange\n      let attempts = 0;\n      const maxAttempts = 3;\n      \n      const unreliableOperation = jest.fn().mockImplementation(() => {\n        attempts++;\n        if (attempts < 3) {\n          return Promise.reject(new Error(`Attempt ${attempts} failed`));\n        }\n        return Promise.resolve(`Success on attempt ${attempts}`);\n      });\n      \n      const withRetryAndJitter = async <T>(\n        operation: () => Promise<T>,\n        maxRetries: number,\n        baseDelay = 10,\n        factor = 2,\n        jitter = 0.5\n      ): Promise<T> => {\n        let lastError: Error | null = null;\n        \n        for (let attempt = 1; attempt <= maxRetries; attempt++) {\n          try {\n            return await operation();\n          } catch (error) {\n            lastError = error as Error;\n            \n            if (attempt < maxRetries) {\n              // Calculate delay with exponential backoff\n              const expDelay = baseDelay * Math.pow(factor, attempt - 1);\n              \n              // Add jitter to prevent thundering herd problem\n              const jitterAmount = expDelay * jitter;\n              const delay = expDelay + (Math.random() * jitterAmount * 2) - jitterAmount;\n              \n              await new Promise(resolve => setTimeout(resolve, delay));\n              jest.advanceTimersByTime(Math.ceil(delay));\n            }\n          }\n        }\n        \n        throw new Error(`All ${maxRetries} attempts failed. Last error: ${lastError?.message}`);\n      };\n      \n      // Act\n      const result = await withRetryAndJitter(unreliableOperation, maxAttempts);\n      \n      // Assert\n      expect(result).toBe('Success on attempt 3');\n      expect(unreliableOperation).toHaveBeenCalledTimes(3);\n      \n      // Verify setTimeout was called with different values each time\n      const delays = setTimeoutSpy.mock.calls.map(call => call[1]);\n      expect(new Set(delays).size).toBe(delays.length); // All delays should be unique\n    }, 60000);\n    \n    test('should implement conditional retry based on error type', async () => {\n      // Arrange\n      const networkError = new Error('Network error');\n      (networkError as any).code = 'NETWORK_ERROR';\n      \n      const validationError = new Error('Validation error');\n      (validationError as any).code = 'VALIDATION_ERROR';\n      \n      let callCount = 0;\n      const operation = jest.fn().mockImplementation(() => {\n        callCount++;\n        \n        if (callCount === 1) {\n          return Promise.reject(networkError); // Should retry\n        } else if (callCount === 2) {\n          return Promise.reject(validationError); // Should not retry\n        }\n        \n        return Promise.resolve('Success');\n      });\n      \n      const withConditionalRetry = async <T>(\n        operation: () => Promise<T>,\n        maxRetries: number,\n        shouldRetry: (error: Error) => boolean\n      ): Promise<T> => {\n        let attempts = 0;\n        let lastError: Error | null = null;\n        \n        while (attempts < maxRetries) {\n          try {\n            return await operation();\n          } catch (error) {\n            lastError = error as Error;\n            attempts++;\n            \n            if (attempts >= maxRetries || !shouldRetry(lastError)) {\n              throw lastError;\n            }\n            \n            await new Promise(resolve => setTimeout(resolve, 10));\n            jest.advanceTimersByTime(10);\n          }\n        }\n        \n        throw lastError;\n      };\n      \n      // Only retry network errors, not validation errors\n      const shouldRetry = (error: Error) => (error as any).code === 'NETWORK_ERROR';\n      \n      // Act & Assert\n      await expect(withConditionalRetry(operation, 3, shouldRetry)).rejects.toThrow('Validation error');\n      expect(operation).toHaveBeenCalledTimes(2);\n    }, 60000);\n  });\n\n  describe('Performance Optimization', () => {\n    test('should efficiently process large arrays with chunking', async () => {\n      // Arrange\n      const largeArray = Array(100).fill(null).map((_, i) => ({ id: i, value: `Item ${i}` }));\n      \n      // Function to process array in chunks\n      const processInChunks = async <T, R>(\n        items: T[],\n        chunkSize: number,\n        processor: (chunk: T[]) => Promise<R[]>\n      ): Promise<R[]> => {\n        const results: R[] = [];\n        \n        for (let i = 0; i < items.length; i += chunkSize) {\n          const chunk = items.slice(i, i + chunkSize);\n          const chunkResults = await processor(chunk);\n          results.push(...chunkResults);\n          \n          // Allow event loop to process other tasks between chunks\n          await new Promise(resolve => setTimeout(resolve, 0));\n          jest.advanceTimersByTime(0);\n        }\n        \n        return results;\n      };\n      \n      // Mock processor function\n      const processItems = jest.fn().mockImplementation(async (items: any[]) => {\n        return items.map(item => ({ ...item, processed: true }));\n      });\n      \n      // Act\n      const startTime = performance.now();\n      const results = await processInChunks(largeArray, 10, processItems);\n      const endTime = performance.now();\n      \n      // Assert\n      expect(results.length).toBe(100);\n      expect(results[0].processed).toBe(true);\n      expect(results[99].processed).toBe(true);\n      \n      // Should have called the processor 10 times (100 items / 10 chunk size)\n      expect(processItems).toHaveBeenCalledTimes(10);\n      \n      // Performance should be reasonable (specific threshold depends on environment)\n      const duration = endTime - startTime;\n      expect(duration).toBeLessThan(1000); // Should process in under 1 second\n    }, 60000);\n    \n    test('should implement memoization for expensive calculations', () => {\n      // Arrange\n      const expensiveCalculation = jest.fn((a: number, b: number) => {\n        // Simulate expensive calculation\n        let result = 0;\n        for (let i = 0; i < 100; i++) {\n          result += Math.sqrt(a * i + b);\n        }\n        return result;\n      });\n      \n      // Create a memoized version of the function\n      const memoize = <T extends (...args: any[]) => any>(fn: T): T => {\n        const cache = new Map<string, ReturnType<T>>();\n        \n        return ((...args: Parameters<T>): ReturnType<T> => {\n          const key = JSON.stringify(args);\n          \n          if (cache.has(key)) {\n            return cache.get(key)!;\n          }\n          \n          const result = fn(...args);\n          cache.set(key, result);\n          return result;\n        }) as T;\n      };\n      \n      const memoizedCalculation = memoize(expensiveCalculation);\n      \n      // Act\n      const result1 = memoizedCalculation(10, 20);\n      const result2 = memoizedCalculation(5, 10);\n      const _result3 = memoizedCalculation(10, 20); // Should use cached result\n      const _result4 = memoizedCalculation(5, 10);  // Should use cached result\n      \n      // Assert\n      expect(result1).toBe(memoizedCalculation(10, 20));\n      expect(result2).toBe(memoizedCalculation(5, 10));\n      \n      // Original function should only be called twice\n      expect(expensiveCalculation).toHaveBeenCalledTimes(2);\n    });\n    \n    test('should handle rapid concurrent operations', async () => {\n      // Arrange\n      const concurrentOperations = 20;\n      let completedOperations = 0;\n      let failedOperations = 0;\n      \n      // Mock storage with occasional failures\n      jest.spyOn(mockStorage, 'setItem').mockImplementation(() => {\n        // 10% chance of failure\n        if (Math.random() < 0.1) {\n          return Promise.reject(new Error('Random failure'));\n        }\n        return Promise.resolve();\n      });\n      \n      // Act\n      const startTime = performance.now();\n      \n      // Launch many concurrent operations\n      const promises = Array(concurrentOperations).fill(null).map((_, i) => {\n        return mockStorage.setItem(`key-${i}`, `value-${i}`)\n          .then(() => {\n            completedOperations += 1;\n          })\n          .catch(() => {\n            failedOperations += 1;\n          });\n      });\n      \n      await Promise.all(promises);\n      \n      // Assert\n      expect(completedOperations + failedOperations).toBe(concurrentOperations);\n      // We expect some random failures but not all\n      expect(completedOperations).toBeGreaterThan(0);\n      \n      const duration = performance.now() - startTime;\n      // Entire burst should finish quickly\n      expect(duration).toBeLessThan(1000);\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}