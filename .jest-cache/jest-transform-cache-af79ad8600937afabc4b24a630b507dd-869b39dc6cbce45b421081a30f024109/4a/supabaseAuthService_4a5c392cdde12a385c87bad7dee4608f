732dfce94050a95ecf99cfac7b72868c
"use strict";

/* istanbul ignore next */
function cov_1z3ozq605y() {
  var path = "/Users/kevin/card-show-finder/src/services/supabaseAuthService.ts";
  var hash = "89935e1731724dd5c241e8f8d36fc7f55c400a16";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kevin/card-show-finder/src/services/supabaseAuthService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 384
        }
      },
      "2": {
        start: {
          line: 4,
          column: 16
        },
        end: {
          line: 4,
          column: 35
        }
      },
      "3": {
        start: {
          line: 5,
          column: 19
        },
        end: {
          line: 5,
          column: 41
        }
      },
      "4": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 115
        }
      },
      "5": {
        start: {
          line: 6,
          column: 82
        },
        end: {
          line: 6,
          column: 109
        }
      },
      "6": {
        start: {
          line: 8,
          column: 21
        },
        end: {
          line: 8,
          column: 51
        }
      },
      "7": {
        start: {
          line: 12,
          column: 25
        },
        end: {
          line: 55,
          column: 1
        }
      },
      "8": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 15,
          column: 5
        }
      },
      "9": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 57
        }
      },
      "10": {
        start: {
          line: 17,
          column: 17
        },
        end: {
          line: 37,
          column: 5
        }
      },
      "11": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 40,
          column: 46
        }
      },
      "12": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 46
        }
      },
      "13": {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 42,
          column: 52
        }
      },
      "14": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 52
        }
      },
      "15": {
        start: {
          line: 43,
          column: 4
        },
        end: {
          line: 44,
          column: 61
        }
      },
      "16": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 61
        }
      },
      "17": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 46,
          column: 56
        }
      },
      "18": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 56
        }
      },
      "19": {
        start: {
          line: 47,
          column: 4
        },
        end: {
          line: 48,
          column: 56
        }
      },
      "20": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 56
        }
      },
      "21": {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 53,
          column: 5
        }
      },
      "22": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 89
        }
      },
      "23": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 52,
          column: 91
        }
      },
      "24": {
        start: {
          line: 54,
          column: 4
        },
        end: {
          line: 54,
          column: 16
        }
      },
      "25": {
        start: {
          line: 56,
          column: 0
        },
        end: {
          line: 56,
          column: 44
        }
      },
      "26": {
        start: {
          line: 60,
          column: 25
        },
        end: {
          line: 76,
          column: 1
        }
      },
      "27": {
        start: {
          line: 61,
          column: 4
        },
        end: {
          line: 75,
          column: 6
        }
      },
      "28": {
        start: {
          line: 77,
          column: 0
        },
        end: {
          line: 77,
          column: 44
        }
      },
      "29": {
        start: {
          line: 86,
          column: 15
        },
        end: {
          line: 149,
          column: 1
        }
      },
      "30": {
        start: {
          line: 87,
          column: 4
        },
        end: {
          line: 148,
          column: 5
        }
      },
      "31": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 91,
          column: 9
        }
      },
      "32": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 63
        }
      },
      "33": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "34": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 52
        }
      },
      "35": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "36": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 54
        }
      },
      "37": {
        start: {
          line: 99,
          column: 32
        },
        end: {
          line: 102,
          column: 10
        }
      },
      "38": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 105,
          column: 9
        }
      },
      "39": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 24
        }
      },
      "40": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 108,
          column: 9
        }
      },
      "41": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 53
        }
      },
      "42": {
        start: {
          line: 109,
          column: 23
        },
        end: {
          line: 109,
          column: 35
        }
      },
      "43": {
        start: {
          line: 111,
          column: 40
        },
        end: {
          line: 122,
          column: 10
        }
      },
      "44": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 127,
          column: 9
        }
      },
      "45": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 126,
          column: 66
        }
      },
      "46": {
        start: {
          line: 129,
          column: 21
        },
        end: {
          line: 142,
          column: 9
        }
      },
      "47": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 143,
          column: 20
        }
      },
      "48": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 146,
          column: 57
        }
      },
      "49": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 147,
          column: 20
        }
      },
      "50": {
        start: {
          line: 150,
          column: 0
        },
        end: {
          line: 150,
          column: 24
        }
      },
      "51": {
        start: {
          line: 159,
          column: 21
        },
        end: {
          line: 227,
          column: 1
        }
      },
      "52": {
        start: {
          line: 160,
          column: 4
        },
        end: {
          line: 226,
          column: 5
        }
      },
      "53": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 164,
          column: 9
        }
      },
      "54": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 163,
          column: 63
        }
      },
      "55": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 167,
          column: 9
        }
      },
      "56": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 166,
          column: 52
        }
      },
      "57": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 170,
          column: 9
        }
      },
      "58": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 169,
          column: 54
        }
      },
      "59": {
        start: {
          line: 172,
          column: 32
        },
        end: {
          line: 172,
          column: 90
        }
      },
      "60": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 175,
          column: 9
        }
      },
      "61": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 174,
          column: 24
        }
      },
      "62": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 178,
          column: 9
        }
      },
      "63": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 53
        }
      },
      "64": {
        start: {
          line: 179,
          column: 23
        },
        end: {
          line: 179,
          column: 35
        }
      },
      "65": {
        start: {
          line: 181,
          column: 28
        },
        end: {
          line: 185,
          column: 29
        }
      },
      "66": {
        start: {
          line: 187,
          column: 40
        },
        end: {
          line: 198,
          column: 10
        }
      },
      "67": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 202,
          column: 9
        }
      },
      "68": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 201,
          column: 66
        }
      },
      "69": {
        start: {
          line: 204,
          column: 23
        },
        end: {
          line: 204,
          column: 47
        }
      },
      "70": {
        start: {
          line: 205,
          column: 21
        },
        end: {
          line: 220,
          column: 9
        }
      },
      "71": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 221,
          column: 20
        }
      },
      "72": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 224,
          column: 63
        }
      },
      "73": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 225,
          column: 20
        }
      },
      "74": {
        start: {
          line: 228,
          column: 0
        },
        end: {
          line: 228,
          column: 36
        }
      },
      "75": {
        start: {
          line: 234,
          column: 15
        },
        end: {
          line: 268,
          column: 1
        }
      },
      "76": {
        start: {
          line: 235,
          column: 4
        },
        end: {
          line: 267,
          column: 5
        }
      },
      "77": {
        start: {
          line: 236,
          column: 32
        },
        end: {
          line: 239,
          column: 10
        }
      },
      "78": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 242,
          column: 9
        }
      },
      "79": {
        start: {
          line: 241,
          column: 12
        },
        end: {
          line: 241,
          column: 29
        }
      },
      "80": {
        start: {
          line: 243,
          column: 8
        },
        end: {
          line: 245,
          column: 9
        }
      },
      "81": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 244,
          column: 73
        }
      },
      "82": {
        start: {
          line: 247,
          column: 59
        },
        end: {
          line: 251,
          column: 21
        }
      },
      "83": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 256,
          column: 9
        }
      },
      "84": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 255,
          column: 14
        }
      },
      "85": {
        start: {
          line: 257,
          column: 8
        },
        end: {
          line: 259,
          column: 9
        }
      },
      "86": {
        start: {
          line: 258,
          column: 12
        },
        end: {
          line: 258,
          column: 74
        }
      },
      "87": {
        start: {
          line: 261,
          column: 21
        },
        end: {
          line: 261,
          column: 74
        }
      },
      "88": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 262,
          column: 24
        }
      },
      "89": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 265,
          column: 57
        }
      },
      "90": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 266,
          column: 25
        }
      },
      "91": {
        start: {
          line: 269,
          column: 0
        },
        end: {
          line: 269,
          column: 24
        }
      },
      "92": {
        start: {
          line: 273,
          column: 16
        },
        end: {
          line: 278,
          column: 1
        }
      },
      "93": {
        start: {
          line: 274,
          column: 22
        },
        end: {
          line: 274,
          column: 62
        }
      },
      "94": {
        start: {
          line: 275,
          column: 4
        },
        end: {
          line: 277,
          column: 5
        }
      },
      "95": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 276,
          column: 20
        }
      },
      "96": {
        start: {
          line: 279,
          column: 0
        },
        end: {
          line: 279,
          column: 26
        }
      },
      "97": {
        start: {
          line: 284,
          column: 19
        },
        end: {
          line: 317,
          column: 1
        }
      },
      "98": {
        start: {
          line: 285,
          column: 4
        },
        end: {
          line: 316,
          column: 5
        }
      },
      "99": {
        start: {
          line: 286,
          column: 59
        },
        end: {
          line: 286,
          column: 102
        }
      },
      "100": {
        start: {
          line: 287,
          column: 8
        },
        end: {
          line: 289,
          column: 9
        }
      },
      "101": {
        start: {
          line: 288,
          column: 12
        },
        end: {
          line: 288,
          column: 31
        }
      },
      "102": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 292,
          column: 9
        }
      },
      "103": {
        start: {
          line: 291,
          column: 12
        },
        end: {
          line: 291,
          column: 24
        }
      },
      "104": {
        start: {
          line: 293,
          column: 25
        },
        end: {
          line: 293,
          column: 49
        }
      },
      "105": {
        start: {
          line: 295,
          column: 59
        },
        end: {
          line: 299,
          column: 21
        }
      },
      "106": {
        start: {
          line: 300,
          column: 8
        },
        end: {
          line: 304,
          column: 9
        }
      },
      "107": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 302,
          column: 66
        }
      },
      "108": {
        start: {
          line: 303,
          column: 12
        },
        end: {
          line: 303,
          column: 31
        }
      },
      "109": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 308,
          column: 9
        }
      },
      "110": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 306,
          column: 68
        }
      },
      "111": {
        start: {
          line: 307,
          column: 12
        },
        end: {
          line: 307,
          column: 24
        }
      },
      "112": {
        start: {
          line: 310,
          column: 21
        },
        end: {
          line: 310,
          column: 73
        }
      },
      "113": {
        start: {
          line: 311,
          column: 8
        },
        end: {
          line: 311,
          column: 20
        }
      },
      "114": {
        start: {
          line: 314,
          column: 8
        },
        end: {
          line: 314,
          column: 63
        }
      },
      "115": {
        start: {
          line: 315,
          column: 8
        },
        end: {
          line: 315,
          column: 20
        }
      },
      "116": {
        start: {
          line: 318,
          column: 0
        },
        end: {
          line: 318,
          column: 32
        }
      },
      "117": {
        start: {
          line: 324,
          column: 23
        },
        end: {
          line: 372,
          column: 1
        }
      },
      "118": {
        start: {
          line: 325,
          column: 4
        },
        end: {
          line: 371,
          column: 5
        }
      },
      "119": {
        start: {
          line: 326,
          column: 8
        },
        end: {
          line: 329,
          column: 9
        }
      },
      "120": {
        start: {
          line: 327,
          column: 12
        },
        end: {
          line: 327,
          column: 91
        }
      },
      "121": {
        start: {
          line: 328,
          column: 12
        },
        end: {
          line: 328,
          column: 24
        }
      },
      "122": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 330,
          column: 83
        }
      },
      "123": {
        start: {
          line: 334,
          column: 59
        },
        end: {
          line: 338,
          column: 21
        }
      },
      "124": {
        start: {
          line: 339,
          column: 8
        },
        end: {
          line: 342,
          column: 9
        }
      },
      "125": {
        start: {
          line: 340,
          column: 12
        },
        end: {
          line: 340,
          column: 89
        }
      },
      "126": {
        start: {
          line: 341,
          column: 12
        },
        end: {
          line: 341,
          column: 24
        }
      },
      "127": {
        start: {
          line: 343,
          column: 8
        },
        end: {
          line: 346,
          column: 9
        }
      },
      "128": {
        start: {
          line: 344,
          column: 12
        },
        end: {
          line: 344,
          column: 85
        }
      },
      "129": {
        start: {
          line: 345,
          column: 12
        },
        end: {
          line: 345,
          column: 24
        }
      },
      "130": {
        start: {
          line: 351,
          column: 53
        },
        end: {
          line: 351,
          column: 93
        }
      },
      "131": {
        start: {
          line: 352,
          column: 23
        },
        end: {
          line: 352,
          column: 37
        }
      },
      "132": {
        start: {
          line: 353,
          column: 8
        },
        end: {
          line: 355,
          column: 9
        }
      },
      "133": {
        start: {
          line: 354,
          column: 12
        },
        end: {
          line: 354,
          column: 88
        }
      },
      "134": {
        start: {
          line: 357,
          column: 8
        },
        end: {
          line: 362,
          column: 9
        }
      },
      "135": {
        start: {
          line: 358,
          column: 12
        },
        end: {
          line: 361,
          column: 14
        }
      },
      "136": {
        start: {
          line: 366,
          column: 8
        },
        end: {
          line: 366,
          column: 68
        }
      },
      "137": {
        start: {
          line: 369,
          column: 8
        },
        end: {
          line: 369,
          column: 90
        }
      },
      "138": {
        start: {
          line: 370,
          column: 8
        },
        end: {
          line: 370,
          column: 20
        }
      },
      "139": {
        start: {
          line: 373,
          column: 0
        },
        end: {
          line: 373,
          column: 40
        }
      },
      "140": {
        start: {
          line: 378,
          column: 20
        },
        end: {
          line: 413,
          column: 1
        }
      },
      "141": {
        start: {
          line: 379,
          column: 4
        },
        end: {
          line: 412,
          column: 5
        }
      },
      "142": {
        start: {
          line: 380,
          column: 59
        },
        end: {
          line: 380,
          column: 102
        }
      },
      "143": {
        start: {
          line: 381,
          column: 8
        },
        end: {
          line: 383,
          column: 9
        }
      },
      "144": {
        start: {
          line: 382,
          column: 12
        },
        end: {
          line: 382,
          column: 31
        }
      },
      "145": {
        start: {
          line: 384,
          column: 8
        },
        end: {
          line: 386,
          column: 9
        }
      },
      "146": {
        start: {
          line: 385,
          column: 12
        },
        end: {
          line: 385,
          column: 24
        }
      },
      "147": {
        start: {
          line: 387,
          column: 25
        },
        end: {
          line: 387,
          column: 49
        }
      },
      "148": {
        start: {
          line: 389,
          column: 40
        },
        end: {
          line: 389,
          column: 87
        }
      },
      "149": {
        start: {
          line: 390,
          column: 8
        },
        end: {
          line: 392,
          column: 9
        }
      },
      "150": {
        start: {
          line: 391,
          column: 12
        },
        end: {
          line: 391,
          column: 31
        }
      },
      "151": {
        start: {
          line: 394,
          column: 59
        },
        end: {
          line: 398,
          column: 21
        }
      },
      "152": {
        start: {
          line: 399,
          column: 8
        },
        end: {
          line: 401,
          column: 9
        }
      },
      "153": {
        start: {
          line: 400,
          column: 12
        },
        end: {
          line: 400,
          column: 31
        }
      },
      "154": {
        start: {
          line: 402,
          column: 8
        },
        end: {
          line: 404,
          column: 9
        }
      },
      "155": {
        start: {
          line: 403,
          column: 12
        },
        end: {
          line: 403,
          column: 57
        }
      },
      "156": {
        start: {
          line: 406,
          column: 21
        },
        end: {
          line: 406,
          column: 73
        }
      },
      "157": {
        start: {
          line: 407,
          column: 8
        },
        end: {
          line: 407,
          column: 20
        }
      },
      "158": {
        start: {
          line: 410,
          column: 8
        },
        end: {
          line: 410,
          column: 55
        }
      },
      "159": {
        start: {
          line: 411,
          column: 8
        },
        end: {
          line: 411,
          column: 20
        }
      },
      "160": {
        start: {
          line: 414,
          column: 0
        },
        end: {
          line: 414,
          column: 34
        }
      },
      "161": {
        start: {
          line: 419,
          column: 22
        },
        end: {
          line: 432,
          column: 1
        }
      },
      "162": {
        start: {
          line: 420,
          column: 4
        },
        end: {
          line: 431,
          column: 5
        }
      },
      "163": {
        start: {
          line: 421,
          column: 26
        },
        end: {
          line: 423,
          column: 10
        }
      },
      "164": {
        start: {
          line: 424,
          column: 8
        },
        end: {
          line: 426,
          column: 9
        }
      },
      "165": {
        start: {
          line: 425,
          column: 12
        },
        end: {
          line: 425,
          column: 24
        }
      },
      "166": {
        start: {
          line: 429,
          column: 8
        },
        end: {
          line: 429,
          column: 70
        }
      },
      "167": {
        start: {
          line: 430,
          column: 8
        },
        end: {
          line: 430,
          column: 20
        }
      },
      "168": {
        start: {
          line: 433,
          column: 0
        },
        end: {
          line: 433,
          column: 38
        }
      },
      "169": {
        start: {
          line: 438,
          column: 23
        },
        end: {
          line: 451,
          column: 1
        }
      },
      "170": {
        start: {
          line: 439,
          column: 4
        },
        end: {
          line: 450,
          column: 5
        }
      },
      "171": {
        start: {
          line: 440,
          column: 26
        },
        end: {
          line: 442,
          column: 10
        }
      },
      "172": {
        start: {
          line: 443,
          column: 8
        },
        end: {
          line: 445,
          column: 9
        }
      },
      "173": {
        start: {
          line: 444,
          column: 12
        },
        end: {
          line: 444,
          column: 24
        }
      },
      "174": {
        start: {
          line: 448,
          column: 8
        },
        end: {
          line: 448,
          column: 65
        }
      },
      "175": {
        start: {
          line: 449,
          column: 8
        },
        end: {
          line: 449,
          column: 20
        }
      },
      "176": {
        start: {
          line: 452,
          column: 0
        },
        end: {
          line: 452,
          column: 40
        }
      },
      "177": {
        start: {
          line: 458,
          column: 26
        },
        end: {
          line: 505,
          column: 1
        }
      },
      "178": {
        start: {
          line: 459,
          column: 4
        },
        end: {
          line: 504,
          column: 5
        }
      },
      "179": {
        start: {
          line: 460,
          column: 8
        },
        end: {
          line: 462,
          column: 9
        }
      },
      "180": {
        start: {
          line: 461,
          column: 12
        },
        end: {
          line: 461,
          column: 62
        }
      },
      "181": {
        start: {
          line: 463,
          column: 23
        },
        end: {
          line: 463,
          column: 34
        }
      },
      "182": {
        start: {
          line: 468,
          column: 28
        },
        end: {
          line: 468,
          column: 59
        }
      },
      "183": {
        start: {
          line: 469,
          column: 28
        },
        end: {
          line: 469,
          column: 60
        }
      },
      "184": {
        start: {
          line: 471,
          column: 28
        },
        end: {
          line: 471,
          column: 67
        }
      },
      "185": {
        start: {
          line: 473,
          column: 8
        },
        end: {
          line: 477,
          column: 11
        }
      },
      "186": {
        start: {
          line: 474,
          column: 12
        },
        end: {
          line: 476,
          column: 13
        }
      },
      "187": {
        start: {
          line: 475,
          column: 16
        },
        end: {
          line: 475,
          column: 40
        }
      },
      "188": {
        start: {
          line: 479,
          column: 26
        },
        end: {
          line: 482,
          column: 29
        }
      },
      "189": {
        start: {
          line: 483,
          column: 8
        },
        end: {
          line: 485,
          column: 9
        }
      },
      "190": {
        start: {
          line: 484,
          column: 12
        },
        end: {
          line: 484,
          column: 24
        }
      },
      "191": {
        start: {
          line: 487,
          column: 28
        },
        end: {
          line: 487,
          column: 59
        }
      },
      "192": {
        start: {
          line: 488,
          column: 8
        },
        end: {
          line: 490,
          column: 9
        }
      },
      "193": {
        start: {
          line: 489,
          column: 12
        },
        end: {
          line: 489,
          column: 68
        }
      },
      "194": {
        start: {
          line: 495,
          column: 8
        },
        end: {
          line: 498,
          column: 9
        }
      },
      "195": {
        start: {
          line: 497,
          column: 12
        },
        end: {
          line: 497,
          column: 80
        }
      },
      "196": {
        start: {
          line: 499,
          column: 8
        },
        end: {
          line: 499,
          column: 27
        }
      },
      "197": {
        start: {
          line: 502,
          column: 8
        },
        end: {
          line: 502,
          column: 64
        }
      },
      "198": {
        start: {
          line: 503,
          column: 8
        },
        end: {
          line: 503,
          column: 20
        }
      },
      "199": {
        start: {
          line: 506,
          column: 0
        },
        end: {
          line: 506,
          column: 46
        }
      },
      "200": {
        start: {
          line: 510,
          column: 31
        },
        end: {
          line: 574,
          column: 1
        }
      },
      "201": {
        start: {
          line: 511,
          column: 22
        },
        end: {
          line: 511,
          column: 27
        }
      },
      "202": {
        start: {
          line: 512,
          column: 25
        },
        end: {
          line: 570,
          column: 6
        }
      },
      "203": {
        start: {
          line: 513,
          column: 8
        },
        end: {
          line: 513,
          column: 55
        }
      },
      "204": {
        start: {
          line: 515,
          column: 8
        },
        end: {
          line: 523,
          column: 9
        }
      },
      "205": {
        start: {
          line: 516,
          column: 12
        },
        end: {
          line: 521,
          column: 15
        }
      },
      "206": {
        start: {
          line: 522,
          column: 12
        },
        end: {
          line: 522,
          column: 31
        }
      },
      "207": {
        start: {
          line: 525,
          column: 8
        },
        end: {
          line: 569,
          column: 9
        }
      },
      "208": {
        start: {
          line: 526,
          column: 12
        },
        end: {
          line: 560,
          column: 13
        }
      },
      "209": {
        start: {
          line: 527,
          column: 16
        },
        end: {
          line: 529,
          column: 17
        }
      },
      "210": {
        start: {
          line: 528,
          column: 20
        },
        end: {
          line: 528,
          column: 78
        }
      },
      "211": {
        start: {
          line: 530,
          column: 31
        },
        end: {
          line: 530,
          column: 46
        }
      },
      "212": {
        start: {
          line: 532,
          column: 67
        },
        end: {
          line: 536,
          column: 29
        }
      },
      "213": {
        start: {
          line: 537,
          column: 16
        },
        end: {
          line: 539,
          column: 17
        }
      },
      "214": {
        start: {
          line: 538,
          column: 20
        },
        end: {
          line: 538,
          column: 39
        }
      },
      "215": {
        start: {
          line: 540,
          column: 16
        },
        end: {
          line: 542,
          column: 17
        }
      },
      "216": {
        start: {
          line: 541,
          column: 20
        },
        end: {
          line: 541,
          column: 65
        }
      },
      "217": {
        start: {
          line: 544,
          column: 29
        },
        end: {
          line: 544,
          column: 85
        }
      },
      "218": {
        start: {
          line: 545,
          column: 16
        },
        end: {
          line: 550,
          column: 19
        }
      },
      "219": {
        start: {
          line: 553,
          column: 16
        },
        end: {
          line: 553,
          column: 77
        }
      },
      "220": {
        start: {
          line: 554,
          column: 16
        },
        end: {
          line: 559,
          column: 19
        }
      },
      "221": {
        start: {
          line: 563,
          column: 12
        },
        end: {
          line: 568,
          column: 15
        }
      },
      "222": {
        start: {
          line: 571,
          column: 4
        },
        end: {
          line: 573,
          column: 6
        }
      },
      "223": {
        start: {
          line: 572,
          column: 8
        },
        end: {
          line: 572,
          column: 35
        }
      },
      "224": {
        start: {
          line: 575,
          column: 0
        },
        end: {
          line: 575,
          column: 56
        }
      },
      "225": {
        start: {
          line: 580,
          column: 24
        },
        end: {
          line: 583,
          column: 1
        }
      },
      "226": {
        start: {
          line: 581,
          column: 21
        },
        end: {
          line: 581,
          column: 64
        }
      },
      "227": {
        start: {
          line: 582,
          column: 4
        },
        end: {
          line: 582,
          column: 26
        }
      },
      "228": {
        start: {
          line: 584,
          column: 0
        },
        end: {
          line: 584,
          column: 42
        }
      },
      "229": {
        start: {
          line: 591,
          column: 23
        },
        end: {
          line: 607,
          column: 1
        }
      },
      "230": {
        start: {
          line: 592,
          column: 4
        },
        end: {
          line: 606,
          column: 5
        }
      },
      "231": {
        start: {
          line: 593,
          column: 26
        },
        end: {
          line: 599,
          column: 26
        }
      },
      "232": {
        start: {
          line: 600,
          column: 8
        },
        end: {
          line: 601,
          column: 24
        }
      },
      "233": {
        start: {
          line: 601,
          column: 12
        },
        end: {
          line: 601,
          column: 24
        }
      },
      "234": {
        start: {
          line: 604,
          column: 8
        },
        end: {
          line: 604,
          column: 58
        }
      },
      "235": {
        start: {
          line: 605,
          column: 8
        },
        end: {
          line: 605,
          column: 71
        }
      },
      "236": {
        start: {
          line: 608,
          column: 0
        },
        end: {
          line: 608,
          column: 40
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 68
          },
          end: {
            line: 6,
            column: 69
          }
        },
        loc: {
          start: {
            line: 6,
            column: 80
          },
          end: {
            line: 6,
            column: 111
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 25
          },
          end: {
            line: 12,
            column: 26
          }
        },
        loc: {
          start: {
            line: 12,
            column: 52
          },
          end: {
            line: 55,
            column: 1
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 60,
            column: 25
          },
          end: {
            line: 60,
            column: 26
          }
        },
        loc: {
          start: {
            line: 60,
            column: 35
          },
          end: {
            line: 76,
            column: 1
          }
        },
        line: 60
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 86,
            column: 15
          },
          end: {
            line: 86,
            column: 16
          }
        },
        loc: {
          start: {
            line: 86,
            column: 72
          },
          end: {
            line: 149,
            column: 1
          }
        },
        line: 86
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 159,
            column: 21
          },
          end: {
            line: 159,
            column: 22
          }
        },
        loc: {
          start: {
            line: 159,
            column: 88
          },
          end: {
            line: 227,
            column: 1
          }
        },
        line: 159
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 234,
            column: 15
          },
          end: {
            line: 234,
            column: 16
          }
        },
        loc: {
          start: {
            line: 234,
            column: 38
          },
          end: {
            line: 268,
            column: 1
          }
        },
        line: 234
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 273,
            column: 16
          },
          end: {
            line: 273,
            column: 17
          }
        },
        loc: {
          start: {
            line: 273,
            column: 28
          },
          end: {
            line: 278,
            column: 1
          }
        },
        line: 273
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 284,
            column: 19
          },
          end: {
            line: 284,
            column: 20
          }
        },
        loc: {
          start: {
            line: 284,
            column: 31
          },
          end: {
            line: 317,
            column: 1
          }
        },
        line: 284
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 324,
            column: 23
          },
          end: {
            line: 324,
            column: 24
          }
        },
        loc: {
          start: {
            line: 324,
            column: 41
          },
          end: {
            line: 372,
            column: 1
          }
        },
        line: 324
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 378,
            column: 20
          },
          end: {
            line: 378,
            column: 21
          }
        },
        loc: {
          start: {
            line: 378,
            column: 32
          },
          end: {
            line: 413,
            column: 1
          }
        },
        line: 378
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 419,
            column: 22
          },
          end: {
            line: 419,
            column: 23
          }
        },
        loc: {
          start: {
            line: 419,
            column: 39
          },
          end: {
            line: 432,
            column: 1
          }
        },
        line: 419
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 438,
            column: 23
          },
          end: {
            line: 438,
            column: 24
          }
        },
        loc: {
          start: {
            line: 438,
            column: 46
          },
          end: {
            line: 451,
            column: 1
          }
        },
        line: 438
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 458,
            column: 26
          },
          end: {
            line: 458,
            column: 27
          }
        },
        loc: {
          start: {
            line: 458,
            column: 46
          },
          end: {
            line: 505,
            column: 1
          }
        },
        line: 458
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 473,
            column: 41
          },
          end: {
            line: 473,
            column: 42
          }
        },
        loc: {
          start: {
            line: 473,
            column: 48
          },
          end: {
            line: 477,
            column: 9
          }
        },
        line: 473
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 510,
            column: 31
          },
          end: {
            line: 510,
            column: 32
          }
        },
        loc: {
          start: {
            line: 510,
            column: 45
          },
          end: {
            line: 574,
            column: 1
          }
        },
        line: 510
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 512,
            column: 68
          },
          end: {
            line: 512,
            column: 69
          }
        },
        loc: {
          start: {
            line: 512,
            column: 94
          },
          end: {
            line: 570,
            column: 5
          }
        },
        line: 512
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 571,
            column: 11
          },
          end: {
            line: 571,
            column: 12
          }
        },
        loc: {
          start: {
            line: 571,
            column: 17
          },
          end: {
            line: 573,
            column: 5
          }
        },
        line: 571
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 580,
            column: 24
          },
          end: {
            line: 580,
            column: 25
          }
        },
        loc: {
          start: {
            line: 580,
            column: 36
          },
          end: {
            line: 583,
            column: 1
          }
        },
        line: 580
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 591,
            column: 23
          },
          end: {
            line: 591,
            column: 24
          }
        },
        loc: {
          start: {
            line: 591,
            column: 47
          },
          end: {
            line: 607,
            column: 1
          }
        },
        line: 591
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 13
      },
      "1": {
        loc: {
          start: {
            line: 13,
            column: 8
          },
          end: {
            line: 13,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 8
          },
          end: {
            line: 13,
            column: 17
          }
        }, {
          start: {
            line: 13,
            column: 21
          },
          end: {
            line: 13,
            column: 33
          }
        }],
        line: 13
      },
      "2": {
        loc: {
          start: {
            line: 18,
            column: 12
          },
          end: {
            line: 18,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 12
          },
          end: {
            line: 18,
            column: 23
          }
        }, {
          start: {
            line: 18,
            column: 27
          },
          end: {
            line: 18,
            column: 41
          }
        }],
        line: 18
      },
      "3": {
        loc: {
          start: {
            line: 20,
            column: 19
          },
          end: {
            line: 20,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 19
          },
          end: {
            line: 20,
            column: 41
          }
        }, {
          start: {
            line: 20,
            column: 45
          },
          end: {
            line: 20,
            column: 51
          }
        }],
        line: 20
      },
      "4": {
        loc: {
          start: {
            line: 21,
            column: 21
          },
          end: {
            line: 21,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 21,
            column: 21
          },
          end: {
            line: 21,
            column: 46
          }
        }, {
          start: {
            line: 21,
            column: 50
          },
          end: {
            line: 21,
            column: 52
          }
        }],
        line: 21
      },
      "5": {
        loc: {
          start: {
            line: 22,
            column: 14
          },
          end: {
            line: 22,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 22,
            column: 14
          },
          end: {
            line: 22,
            column: 30
          }
        }, {
          start: {
            line: 22,
            column: 34
          },
          end: {
            line: 22,
            column: 59
          }
        }],
        line: 22
      },
      "6": {
        loc: {
          start: {
            line: 23,
            column: 19
          },
          end: {
            line: 23,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 23,
            column: 19
          },
          end: {
            line: 23,
            column: 38
          }
        }, {
          start: {
            line: 23,
            column: 42
          },
          end: {
            line: 23,
            column: 64
          }
        }],
        line: 23
      },
      "7": {
        loc: {
          start: {
            line: 24,
            column: 19
          },
          end: {
            line: 24,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 19
          },
          end: {
            line: 24,
            column: 41
          }
        }, {
          start: {
            line: 24,
            column: 45
          },
          end: {
            line: 24,
            column: 69
          }
        }],
        line: 24
      },
      "8": {
        loc: {
          start: {
            line: 25,
            column: 25
          },
          end: {
            line: 25,
            column: 67
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 25,
            column: 55
          },
          end: {
            line: 25,
            column: 59
          }
        }, {
          start: {
            line: 25,
            column: 62
          },
          end: {
            line: 25,
            column: 67
          }
        }],
        line: 25
      },
      "9": {
        loc: {
          start: {
            line: 26,
            column: 21
          },
          end: {
            line: 26,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 26,
            column: 21
          },
          end: {
            line: 26,
            column: 45
          }
        }, {
          start: {
            line: 26,
            column: 49
          },
          end: {
            line: 26,
            column: 60
          }
        }],
        line: 26
      },
      "10": {
        loc: {
          start: {
            line: 27,
            column: 28
          },
          end: {
            line: 27,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 27,
            column: 28
          },
          end: {
            line: 27,
            column: 59
          }
        }, {
          start: {
            line: 27,
            column: 63
          },
          end: {
            line: 27,
            column: 69
          }
        }],
        line: 27
      },
      "11": {
        loc: {
          start: {
            line: 29,
            column: 28
          },
          end: {
            line: 29,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 29,
            column: 28
          },
          end: {
            line: 29,
            column: 60
          }
        }, {
          start: {
            line: 29,
            column: 64
          },
          end: {
            line: 29,
            column: 65
          }
        }],
        line: 29
      },
      "12": {
        loc: {
          start: {
            line: 30,
            column: 29
          },
          end: {
            line: 30,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 30,
            column: 29
          },
          end: {
            line: 30,
            column: 62
          }
        }, {
          start: {
            line: 30,
            column: 66
          },
          end: {
            line: 30,
            column: 67
          }
        }],
        line: 30
      },
      "13": {
        loc: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 40,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 40,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "14": {
        loc: {
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 42,
            column: 52
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 42,
            column: 52
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 41
      },
      "15": {
        loc: {
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 44,
            column: 61
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 44,
            column: 61
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 43
      },
      "16": {
        loc: {
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 46,
            column: 56
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 46,
            column: 56
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "17": {
        loc: {
          start: {
            line: 47,
            column: 4
          },
          end: {
            line: 48,
            column: 56
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 4
          },
          end: {
            line: 48,
            column: 56
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 47
      },
      "18": {
        loc: {
          start: {
            line: 50,
            column: 4
          },
          end: {
            line: 53,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 50,
            column: 4
          },
          end: {
            line: 53,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 50
      },
      "19": {
        loc: {
          start: {
            line: 51,
            column: 42
          },
          end: {
            line: 51,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 51,
            column: 42
          },
          end: {
            line: 51,
            column: 83
          }
        }, {
          start: {
            line: 51,
            column: 87
          },
          end: {
            line: 51,
            column: 88
          }
        }],
        line: 51
      },
      "20": {
        loc: {
          start: {
            line: 52,
            column: 43
          },
          end: {
            line: 52,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 52,
            column: 43
          },
          end: {
            line: 52,
            column: 85
          }
        }, {
          start: {
            line: 52,
            column: 89
          },
          end: {
            line: 52,
            column: 90
          }
        }],
        line: 52
      },
      "21": {
        loc: {
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 89
      },
      "22": {
        loc: {
          start: {
            line: 89,
            column: 12
          },
          end: {
            line: 89,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 89,
            column: 12
          },
          end: {
            line: 89,
            column: 30
          }
        }, {
          start: {
            line: 89,
            column: 34
          },
          end: {
            line: 89,
            column: 55
          }
        }],
        line: 89
      },
      "23": {
        loc: {
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 94,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 94,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 92
      },
      "24": {
        loc: {
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "25": {
        loc: {
          start: {
            line: 103,
            column: 8
          },
          end: {
            line: 105,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 103,
            column: 8
          },
          end: {
            line: 105,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 103
      },
      "26": {
        loc: {
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 108,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 108,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 106
      },
      "27": {
        loc: {
          start: {
            line: 116,
            column: 23
          },
          end: {
            line: 116,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 116,
            column: 23
          },
          end: {
            line: 116,
            column: 31
          }
        }, {
          start: {
            line: 116,
            column: 35
          },
          end: {
            line: 116,
            column: 39
          }
        }],
        line: 116
      },
      "28": {
        loc: {
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 127,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 127,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 123
      },
      "29": {
        loc: {
          start: {
            line: 162,
            column: 8
          },
          end: {
            line: 164,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 162,
            column: 8
          },
          end: {
            line: 164,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 162
      },
      "30": {
        loc: {
          start: {
            line: 162,
            column: 12
          },
          end: {
            line: 162,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 162,
            column: 12
          },
          end: {
            line: 162,
            column: 18
          }
        }, {
          start: {
            line: 162,
            column: 22
          },
          end: {
            line: 162,
            column: 31
          }
        }],
        line: 162
      },
      "31": {
        loc: {
          start: {
            line: 165,
            column: 8
          },
          end: {
            line: 167,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 165,
            column: 8
          },
          end: {
            line: 167,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 165
      },
      "32": {
        loc: {
          start: {
            line: 168,
            column: 8
          },
          end: {
            line: 170,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 168,
            column: 8
          },
          end: {
            line: 170,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 168
      },
      "33": {
        loc: {
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 175,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 175,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 173
      },
      "34": {
        loc: {
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 178,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 178,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 176
      },
      "35": {
        loc: {
          start: {
            line: 181,
            column: 28
          },
          end: {
            line: 185,
            column: 29
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 182,
            column: 14
          },
          end: {
            line: 182,
            column: 25
          }
        }, {
          start: {
            line: 183,
            column: 14
          },
          end: {
            line: 185,
            column: 29
          }
        }],
        line: 181
      },
      "36": {
        loc: {
          start: {
            line: 183,
            column: 14
          },
          end: {
            line: 185,
            column: 29
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 184,
            column: 18
          },
          end: {
            line: 184,
            column: 26
          }
        }, {
          start: {
            line: 185,
            column: 18
          },
          end: {
            line: 185,
            column: 29
          }
        }],
        line: 183
      },
      "37": {
        loc: {
          start: {
            line: 183,
            column: 14
          },
          end: {
            line: 183,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 183,
            column: 14
          },
          end: {
            line: 183,
            column: 46
          }
        }, {
          start: {
            line: 183,
            column: 50
          },
          end: {
            line: 183,
            column: 86
          }
        }],
        line: 183
      },
      "38": {
        loc: {
          start: {
            line: 192,
            column: 23
          },
          end: {
            line: 192,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 192,
            column: 23
          },
          end: {
            line: 192,
            column: 31
          }
        }, {
          start: {
            line: 192,
            column: 35
          },
          end: {
            line: 192,
            column: 39
          }
        }],
        line: 192
      },
      "39": {
        loc: {
          start: {
            line: 199,
            column: 8
          },
          end: {
            line: 202,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 199,
            column: 8
          },
          end: {
            line: 202,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 199
      },
      "40": {
        loc: {
          start: {
            line: 209,
            column: 22
          },
          end: {
            line: 209,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 209,
            column: 22
          },
          end: {
            line: 209,
            column: 30
          }
        }, {
          start: {
            line: 209,
            column: 34
          },
          end: {
            line: 209,
            column: 43
          }
        }],
        line: 209
      },
      "41": {
        loc: {
          start: {
            line: 240,
            column: 8
          },
          end: {
            line: 242,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 240,
            column: 8
          },
          end: {
            line: 242,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 240
      },
      "42": {
        loc: {
          start: {
            line: 243,
            column: 8
          },
          end: {
            line: 245,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 243,
            column: 8
          },
          end: {
            line: 245,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 243
      },
      "43": {
        loc: {
          start: {
            line: 252,
            column: 8
          },
          end: {
            line: 256,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 252,
            column: 8
          },
          end: {
            line: 256,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 252
      },
      "44": {
        loc: {
          start: {
            line: 257,
            column: 8
          },
          end: {
            line: 259,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 257,
            column: 8
          },
          end: {
            line: 259,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 257
      },
      "45": {
        loc: {
          start: {
            line: 275,
            column: 4
          },
          end: {
            line: 277,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 275,
            column: 4
          },
          end: {
            line: 277,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 275
      },
      "46": {
        loc: {
          start: {
            line: 287,
            column: 8
          },
          end: {
            line: 289,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 287,
            column: 8
          },
          end: {
            line: 289,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 287
      },
      "47": {
        loc: {
          start: {
            line: 290,
            column: 8
          },
          end: {
            line: 292,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 290,
            column: 8
          },
          end: {
            line: 292,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 290
      },
      "48": {
        loc: {
          start: {
            line: 300,
            column: 8
          },
          end: {
            line: 304,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 300,
            column: 8
          },
          end: {
            line: 304,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 300
      },
      "49": {
        loc: {
          start: {
            line: 300,
            column: 12
          },
          end: {
            line: 300,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 300,
            column: 12
          },
          end: {
            line: 300,
            column: 24
          }
        }, {
          start: {
            line: 300,
            column: 28
          },
          end: {
            line: 300,
            column: 60
          }
        }],
        line: 300
      },
      "50": {
        loc: {
          start: {
            line: 305,
            column: 8
          },
          end: {
            line: 308,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 305,
            column: 8
          },
          end: {
            line: 308,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 305
      },
      "51": {
        loc: {
          start: {
            line: 326,
            column: 8
          },
          end: {
            line: 329,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 326,
            column: 8
          },
          end: {
            line: 329,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 326
      },
      "52": {
        loc: {
          start: {
            line: 339,
            column: 8
          },
          end: {
            line: 342,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 339,
            column: 8
          },
          end: {
            line: 342,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 339
      },
      "53": {
        loc: {
          start: {
            line: 343,
            column: 8
          },
          end: {
            line: 346,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 343,
            column: 8
          },
          end: {
            line: 346,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 343
      },
      "54": {
        loc: {
          start: {
            line: 353,
            column: 8
          },
          end: {
            line: 355,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 353,
            column: 8
          },
          end: {
            line: 355,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 353
      },
      "55": {
        loc: {
          start: {
            line: 357,
            column: 8
          },
          end: {
            line: 362,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 357,
            column: 8
          },
          end: {
            line: 362,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 357
      },
      "56": {
        loc: {
          start: {
            line: 357,
            column: 12
          },
          end: {
            line: 357,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 357,
            column: 12
          },
          end: {
            line: 357,
            column: 21
          }
        }, {
          start: {
            line: 357,
            column: 25
          },
          end: {
            line: 357,
            column: 47
          }
        }],
        line: 357
      },
      "57": {
        loc: {
          start: {
            line: 360,
            column: 23
          },
          end: {
            line: 360,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 360,
            column: 23
          },
          end: {
            line: 360,
            column: 40
          }
        }, {
          start: {
            line: 360,
            column: 44
          },
          end: {
            line: 360,
            column: 46
          }
        }],
        line: 360
      },
      "58": {
        loc: {
          start: {
            line: 381,
            column: 8
          },
          end: {
            line: 383,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 381,
            column: 8
          },
          end: {
            line: 383,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 381
      },
      "59": {
        loc: {
          start: {
            line: 384,
            column: 8
          },
          end: {
            line: 386,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 384,
            column: 8
          },
          end: {
            line: 386,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 384
      },
      "60": {
        loc: {
          start: {
            line: 390,
            column: 8
          },
          end: {
            line: 392,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 390,
            column: 8
          },
          end: {
            line: 392,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 390
      },
      "61": {
        loc: {
          start: {
            line: 399,
            column: 8
          },
          end: {
            line: 401,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 399,
            column: 8
          },
          end: {
            line: 401,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 399
      },
      "62": {
        loc: {
          start: {
            line: 402,
            column: 8
          },
          end: {
            line: 404,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 402,
            column: 8
          },
          end: {
            line: 404,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 402
      },
      "63": {
        loc: {
          start: {
            line: 424,
            column: 8
          },
          end: {
            line: 426,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 424,
            column: 8
          },
          end: {
            line: 426,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 424
      },
      "64": {
        loc: {
          start: {
            line: 443,
            column: 8
          },
          end: {
            line: 445,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 443,
            column: 8
          },
          end: {
            line: 445,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 443
      },
      "65": {
        loc: {
          start: {
            line: 460,
            column: 8
          },
          end: {
            line: 462,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 460,
            column: 8
          },
          end: {
            line: 462,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 460
      },
      "66": {
        loc: {
          start: {
            line: 460,
            column: 12
          },
          end: {
            line: 460,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 460,
            column: 12
          },
          end: {
            line: 460,
            column: 21
          }
        }, {
          start: {
            line: 460,
            column: 25
          },
          end: {
            line: 460,
            column: 37
          }
        }],
        line: 460
      },
      "67": {
        loc: {
          start: {
            line: 469,
            column: 28
          },
          end: {
            line: 469,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 469,
            column: 28
          },
          end: {
            line: 469,
            column: 52
          }
        }, {
          start: {
            line: 469,
            column: 56
          },
          end: {
            line: 469,
            column: 60
          }
        }],
        line: 469
      },
      "68": {
        loc: {
          start: {
            line: 474,
            column: 12
          },
          end: {
            line: 476,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 474,
            column: 12
          },
          end: {
            line: 476,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 474
      },
      "69": {
        loc: {
          start: {
            line: 483,
            column: 8
          },
          end: {
            line: 485,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 483,
            column: 8
          },
          end: {
            line: 485,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 483
      },
      "70": {
        loc: {
          start: {
            line: 488,
            column: 8
          },
          end: {
            line: 490,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 488,
            column: 8
          },
          end: {
            line: 490,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 488
      },
      "71": {
        loc: {
          start: {
            line: 495,
            column: 8
          },
          end: {
            line: 498,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 495,
            column: 8
          },
          end: {
            line: 498,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 495
      },
      "72": {
        loc: {
          start: {
            line: 495,
            column: 12
          },
          end: {
            line: 496,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 495,
            column: 12
          },
          end: {
            line: 495,
            column: 35
          }
        }, {
          start: {
            line: 496,
            column: 12
          },
          end: {
            line: 496,
            column: 51
          }
        }],
        line: 495
      },
      "73": {
        loc: {
          start: {
            line: 515,
            column: 8
          },
          end: {
            line: 523,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 515,
            column: 8
          },
          end: {
            line: 523,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 515
      },
      "74": {
        loc: {
          start: {
            line: 525,
            column: 8
          },
          end: {
            line: 569,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 525,
            column: 8
          },
          end: {
            line: 569,
            column: 9
          }
        }, {
          start: {
            line: 562,
            column: 13
          },
          end: {
            line: 569,
            column: 9
          }
        }],
        line: 525
      },
      "75": {
        loc: {
          start: {
            line: 527,
            column: 16
          },
          end: {
            line: 529,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 527,
            column: 16
          },
          end: {
            line: 529,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 527
      },
      "76": {
        loc: {
          start: {
            line: 527,
            column: 20
          },
          end: {
            line: 527,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 527,
            column: 20
          },
          end: {
            line: 527,
            column: 28
          }
        }, {
          start: {
            line: 527,
            column: 32
          },
          end: {
            line: 527,
            column: 45
          }
        }],
        line: 527
      },
      "77": {
        loc: {
          start: {
            line: 537,
            column: 16
          },
          end: {
            line: 539,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 537,
            column: 16
          },
          end: {
            line: 539,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 537
      },
      "78": {
        loc: {
          start: {
            line: 540,
            column: 16
          },
          end: {
            line: 542,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 540,
            column: 16
          },
          end: {
            line: 542,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 540
      },
      "79": {
        loc: {
          start: {
            line: 557,
            column: 27
          },
          end: {
            line: 557,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 557,
            column: 27
          },
          end: {
            line: 557,
            column: 40
          }
        }, {
          start: {
            line: 557,
            column: 44
          },
          end: {
            line: 557,
            column: 84
          }
        }],
        line: 557
      },
      "80": {
        loc: {
          start: {
            line: 600,
            column: 8
          },
          end: {
            line: 601,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 600,
            column: 8
          },
          end: {
            line: 601,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 600
      },
      "81": {
        loc: {
          start: {
            line: 605,
            column: 24
          },
          end: {
            line: 605,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 605,
            column: 24
          },
          end: {
            line: 605,
            column: 37
          }
        }, {
          start: {
            line: 605,
            column: 41
          },
          end: {
            line: 605,
            column: 69
          }
        }],
        line: 605
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0],
      "77": [0, 0],
      "78": [0, 0],
      "79": [0, 0],
      "80": [0, 0],
      "81": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/kevin/card-show-finder/src/services/supabaseAuthService.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/kevin/card-show-finder/src/services/supabaseAuthService.ts"],
      sourcesContent: ["import { AuthState, AuthCredentials, User, UserRole } from '../types';\nimport { supabase } from '../supabase';\nimport { Alert } from 'react-native';\n// Toast utility for user-visible notifications\nimport { showLocationChangedToast } from '../utils/toastUtils';\n\n// Re-export the shared Supabase client so callers that previously imported it\n// from this service continue to work without changes.\nexport { supabase };\n\n/**\n * Converting Supabase profile data to our User type\n */\nexport const mapProfileToUser = (\n  authData: any,\n  profileData: any,\n): User => {\n  if (!authData || !profileData) {\n    throw new Error('Invalid profile data provided');\n  }\n\n  // First extract fields directly from auth data\n  const user: User = {\n    id: authData.id || profileData.id,\n    email: authData.email,\n    firstName: profileData.first_name || 'User',\n    homeZipCode: profileData.home_zip_code || '',\n    role: (profileData.role as UserRole) || UserRole.ATTENDEE,\n    createdAt: authData.created_at || profileData.created_at,\n    updatedAt: profileData.updated_at || new Date().toISOString(),\n    isEmailVerified: authData.email_confirmed_at ? true : false,\n    accountType: profileData.account_type || 'collector',\n    subscriptionStatus: profileData.subscription_status || 'none',\n    subscriptionExpiry: profileData.subscription_expiry,\n    favoriteShowsCount: profileData.favorite_shows_count || 0,\n    showAttendanceCount: profileData.show_attendance_count || 0,\n    // Social media links\n    facebookUrl: profileData.facebook_url,\n    instagramUrl: profileData.instagram_url,\n    twitterUrl: profileData.twitter_url,\n    whatnotUrl: profileData.whatnot_url,\n    ebayStoreUrl: profileData.ebay_store_url\n  };\n\n  // Add optional fields if they exist\n  if (profileData.last_name) user.lastName = profileData.last_name;\n  if (profileData.phone_number) user.phoneNumber = profileData.phone_number;\n  if (profileData.profile_image_url) user.profileImageUrl = profileData.profile_image_url;\n  if (profileData.favorite_shows) user.favoriteShows = profileData.favorite_shows;\n  if (profileData.attended_shows) user.attendedShows = profileData.attended_shows;\n  \n  // Add notification broadcast limits for organizers\n  if (user.role === UserRole.SHOW_ORGANIZER) {\n    user.preShowBroadcastsRemaining = profileData.pre_show_broadcasts_remaining || 0;\n    user.postShowBroadcastsRemaining = profileData.post_show_broadcasts_remaining || 0;\n  }\n\n  return user;\n};\n\n/**\n * Maps user fields to profile DB fields\n */\nexport const mapUserToProfile = (user: Partial<User>) => {\n  return {\n    first_name: user.firstName,\n    last_name: user.lastName,\n    home_zip_code: user.homeZipCode,\n    phone_number: user.phoneNumber,\n    profile_image_url: user.profileImageUrl,\n    role: user.role,\n    account_type: user.accountType,\n    facebook_url: user.facebookUrl,\n    instagram_url: user.instagramUrl,\n    twitter_url: user.twitterUrl,\n    whatnot_url: user.whatnotUrl,\n    ebay_store_url: user.ebayStoreUrl,\n    updated_at: new Date().toISOString(),\n  };\n};\n\n/**\n * Sign up with email and password\n * @param credentials \n * @param homeZipCode \n * @param firstName \n * @param lastName \n * @returns Promise containing the User object\n */\nexport const signUp = async (\n  credentials: AuthCredentials,\n  homeZipCode: string,\n  firstName: string,\n  lastName?: string,\n): Promise<User> => {\n  try {\n    // Check if required fields are present\n    if (!credentials.email || !credentials.password) {\n      throw new Error('Email and password are required');\n    }\n\n    if (!homeZipCode) {\n      throw new Error('ZIP code is required');\n    }\n\n    if (!firstName) {\n      throw new Error('First name is required');\n    }\n\n    // First, create the auth user\n    const { data, error } = await supabase.auth.signUp({\n      email: credentials.email,\n      password: credentials.password,\n    });\n\n    if (error) {\n      throw error;\n    }\n\n    if (!data?.user) {\n      throw new Error('Failed to create user');\n    }\n\n    const userId = data.user.id;\n\n    // Then add their profile information to the profiles table\n    const { error: profileError } = await supabase\n      .from('profiles')\n      .upsert({\n        id: userId,\n        first_name: firstName,\n        last_name: lastName || null,\n        home_zip_code: homeZipCode,\n        role: UserRole.ATTENDEE, // Default role\n        account_type: 'collector', // Default account type\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      });\n\n    if (profileError) {\n      // If profile creation fails, we should still be OK since the auth\n      // trigger should create a minimal profile\n      console.warn('Error creating profile:', profileError);\n    }\n\n    // Construct user object\n    const user: User = {\n      id: userId,\n      email: credentials.email,\n      firstName,\n      lastName: lastName,\n      homeZipCode,\n      role: UserRole.ATTENDEE,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n      isEmailVerified: false,\n      accountType: 'collector',\n      subscriptionStatus: 'none',\n      subscriptionExpiry: null,\n    };\n\n    return user;\n  } catch (error: any) {\n    console.error('Error in signup:', error.message);\n    throw error;\n  }\n};\n\n/**\n * Register a new user with email, password, and profile information.\n * This mirrors the `signUp` flow but lets callers explicitly choose the\n * initial role (Dealer, MVP Dealer, Organizer, etc.).\n *\n * NOTE: `AuthContext` relies on this helper, so the return shape must be a\n * complete `User` object \u2013 NOT the `{ user, error }` shape used by `signIn`.\n */\nexport const registerUser = async (\n  email: string,\n  password: string,\n  firstName: string,\n  lastName: string,\n  homeZipCode: string,\n  role: UserRole,\n): Promise<User> => {\n  try {\n    // ---- Argument validation ----------------------------------------------------\n    if (!email || !password) {\n      throw new Error('Email and password are required');\n    }\n    if (!homeZipCode) {\n      throw new Error('ZIP code is required');\n    }\n    if (!firstName) {\n      throw new Error('First name is required');\n    }\n\n    // ---- Create Auth user -------------------------------------------------------\n    const { data, error } = await supabase.auth.signUp({ email, password });\n    if (error) {\n      throw error;\n    }\n    if (!data?.user) {\n      throw new Error('Failed to create user');\n    }\n\n    const userId = data.user.id;\n\n    // Determine account_type based on role\n    const accountType =\n      role === UserRole.SHOW_ORGANIZER\n        ? 'organizer'\n        : role === UserRole.DEALER || role === UserRole.MVP_DEALER\n        ? 'dealer'\n        : 'collector';\n\n    // ---- Insert / update profile row -------------------------------------------\n    const { error: profileError } = await supabase\n      .from('profiles')\n      .upsert({\n        id: userId,\n        first_name: firstName,\n        last_name: lastName || null,\n        home_zip_code: homeZipCode,\n        role,\n        account_type: accountType,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      });\n\n    if (profileError) {\n      // RLS triggers should still create a minimal row, but log just in case.\n      console.warn('Error creating profile:', profileError);\n    }\n\n    // ---- Build & return User object --------------------------------------------\n    const nowIso = new Date().toISOString();\n    const user: User = {\n      id: userId,\n      email,\n      firstName,\n      lastName: lastName || undefined,\n      homeZipCode,\n      role,\n      createdAt: nowIso,\n      updatedAt: nowIso,\n      isEmailVerified: false,\n      accountType: accountType as any,\n      subscriptionStatus: 'none',\n      subscriptionExpiry: null,\n      favoriteShows: [],\n      attendedShows: [],\n    };\n\n    return user;\n  } catch (error: any) {\n    console.error('Error in registerUser:', error.message);\n    throw error;\n  }\n};\n\n/**\n * Sign in with email and password\n * @param credentials \n * @returns Promise containing the User object\n */\nexport const signIn = async (\n  credentials: AuthCredentials,\n): Promise<{ user?: User; error?: Error }> => {\n  try {\n    const { data, error } = await supabase.auth.signInWithPassword({\n      email: credentials.email,\n      password: credentials.password,\n    });\n\n    if (error) {\n      return { error };\n    }\n\n    if (!data?.user) {\n      return { error: new Error('No user returned from sign in') };\n    }\n\n    // Fetch the user's profile\n    const { data: profileData, error: profileError } = await supabase\n      .from('profiles')\n      .select('*')\n      .eq('id', data.user.id)\n      .single();\n\n    if (profileError) {\n      return {\n        error: new Error(`Error fetching user profile: ${profileError.message}`),\n      };\n    }\n\n    if (!profileData) {\n      return { error: new Error('No profile data found for user') };\n    }\n\n    // Map to our User type\n    const user = mapProfileToUser(data.user, profileData);\n    return { user };\n  } catch (error: any) {\n    console.error('Error in signin:', error.message);\n    return { error };\n  }\n};\n\n/**\n * Sign out the current user\n */\nexport const signOut = async (): Promise<void> => {\n  const { error } = await supabase.auth.signOut();\n  if (error) {\n    throw error;\n  }\n};\n\n/**\n * Get the current session and user\n * @returns Promise containing the User object if session exists\n */\nexport const getSession = async (): Promise<User | null> => {\n  try {\n    const { data: sessionData, error: sessionError } = await supabase.auth.getSession();\n    \n    if (sessionError) {\n      throw sessionError;\n    }\n    \n    if (!sessionData?.session?.user) {\n      return null;\n    }\n    \n    const authUser = sessionData.session.user;\n    \n    // Fetch profile from the profiles table\n    const { data: profileData, error: profileError } = await supabase\n      .from('profiles')\n      .select('*')\n      .eq('id', authUser.id)\n      .single();\n    \n    if (profileError && profileError.code !== 'PGRST116') {\n      // PGRST116 means no rows returned\n      console.error('Error getting profile:', profileError);\n      throw profileError;\n    }\n    \n    if (!profileData) {\n      console.warn('No profile found for user:', authUser.id);\n      return null;\n    }\n    \n    // Map to our User type\n    const user = mapProfileToUser(authUser, profileData);\n    \n    return user;\n  } catch (error) {\n    console.error('Error getting current session:', error);\n    return null;\n  }\n};\n\n/**\n * Get current user profile by user ID\n * @param userId The user ID to fetch the profile for\n * @returns Promise containing the User object if found\n */\nexport const getCurrentUser = async (userId: string): Promise<User | null> => {\n  try {\n    if (!userId) {\n      console.error('[supabaseAuthService] getCurrentUser called with empty userId');\n      return null;\n    }\n\n    console.log('[supabaseAuthService] Fetching user profile for ID:', userId);\n\n    /* -----------------------------------------------------------\n     * 1) Fetch the user's profile row from `profiles`\n     * --------------------------------------------------------- */\n    const { data: profileData, error: profileError } = await supabase\n      .from('profiles')\n      .select('*')\n      .eq('id', userId)\n      .single();\n\n    if (profileError) {\n      console.error('[supabaseAuthService] Error fetching profile:', profileError);\n      return null;\n    }\n\n    if (!profileData) {\n      console.warn('[supabaseAuthService] No profile found for user:', userId);\n      return null;\n    }\n\n    /* -----------------------------------------------------------\n     * 2) Retrieve auth data for the **current** user via session.\n     *    (Supabase client-side cannot fetch arbitrary users.)\n     * --------------------------------------------------------- */\n    const { data: authData, error: authError } = await supabase.auth.getUser();\n\n    let authUser = authData?.user;\n\n    if (authError) {\n      console.error('[supabaseAuthService] Error fetching auth user:', authError);\n    }\n\n    // Fallback \u2013 construct minimal auth payload if IDs don\u2019t match\n    if (!authUser || authUser.id !== userId) {\n      authUser = {\n        id: userId,\n        email: profileData.email || '',\n      } as any;\n    }\n\n    /* -----------------------------------------------------------\n     * 3) Map combined auth + profile data to our `User` type\n     * --------------------------------------------------------- */\n    return mapProfileToUser(authUser, profileData);\n  } catch (error: any) {\n    console.error('[supabaseAuthService] Unexpected error in getCurrentUser:', error);\n    return null;\n  }\n};\n\n/**\n * Refresh the current user role\n * Used when a user upgrades their account\n */\nexport const refreshUser = async (): Promise<User | null> => {\n  try {\n    const { data: sessionData, error: sessionError } = await supabase.auth.getSession();\n    \n    if (sessionError) {\n      throw sessionError;\n    }\n    \n    if (!sessionData?.session?.user) {\n      return null;\n    }\n    \n    const authUser = sessionData.session.user;\n    \n    // Refresh the auth session token to ensure we have the latest claims\n    const { error: refreshError } = await supabase.auth.refreshSession();\n    \n    if (refreshError) {\n      throw refreshError;\n    }\n    \n    // Fetch updated profile from the profiles table\n    const { data: profileData, error: profileError } = await supabase\n      .from('profiles')\n      .select('*')\n      .eq('id', authUser.id)\n      .single();\n    \n    if (profileError) {\n      throw profileError;\n    }\n    \n    if (!profileData) {\n      throw new Error('No profile found for user');\n    }\n    \n    // Map to our User type\n    const user = mapProfileToUser(authUser, profileData);\n    \n    return user;\n  } catch (error) {\n    console.error('Error refreshing user:', error);\n    return null;\n  }\n};\n\n/**\n * Reset password\n * @param email \n */\nexport const resetPassword = async (email: string): Promise<void> => {\n  try {\n    const { error } = await supabase.auth.resetPasswordForEmail(email, {\n      redirectTo: 'cardshowhunter://reset-password',\n    });\n    \n    if (error) {\n      throw error;\n    }\n  } catch (error: any) {\n    console.error('Error sending password reset:', error.message);\n    throw error;\n  }\n};\n\n/**\n * Complete the password reset process\n * @param newPassword \n */\nexport const updatePassword = async (newPassword: string): Promise<void> => {\n  try {\n    const { error } = await supabase.auth.updateUser({\n      password: newPassword,\n    });\n    \n    if (error) {\n      throw error;\n    }\n  } catch (error: any) {\n    console.error('Error updating password:', error.message);\n    throw error;\n  }\n};\n\n/**\n * Update user profile \n * @param userData Partial User data to update\n * @returns Promise<User> Updated user\n */\nexport const updateUserProfile = async (userData: Partial<User>): Promise<User> => {\n  try {\n    if (!userData || !userData.id) {\n      throw new Error('User ID is required for update');\n    }\n    \n    const userId = userData.id;\n\n    /* ---------------------------------------------------------------\n     * Capture the user\u2019s existing home ZIP *before* the update so we\n     * can detect changes afterwards and surface a toast.\n     * ------------------------------------------------------------- */\n    const sessionUser = await getSession();\n    const previousZip = sessionUser?.homeZipCode ?? null;\n    \n    // Convert our User fields to DB fields\n    const profileData = mapUserToProfile(userData);\n    \n    // Remove any undefined values to avoid setting NULL\n    Object.keys(profileData).forEach(key => {\n      if (profileData[key] === undefined) {\n        delete profileData[key];\n      }\n    });\n    \n    // Update the profile\n    const { error } = await supabase\n      .from('profiles')\n      .update(profileData)\n      .eq('id', userId);\n    \n    if (error) {\n      throw error;\n    }\n    \n    // Get updated user data\n    const updatedUser = await getSession();\n    if (!updatedUser) {\n      throw new Error('Failed to retrieve updated user data');\n    }\n\n    /* ---------------------------------------------------------------\n     * If the home ZIP has changed, notify the user so they understand\n     * why the map recentred.\n     * ------------------------------------------------------------- */\n    if (\n      updatedUser.homeZipCode &&\n      updatedUser.homeZipCode !== previousZip\n    ) {\n      showLocationChangedToast(updatedUser.homeZipCode);\n    }\n    \n    return updatedUser;\n  } catch (error: any) {\n    console.error('Error updating profile:', error.message);\n    throw error;\n  }\n};\n\n/**\n * Subscribe to auth state changes\n */\nexport const subscribeToAuthChanges = (\n  callback: (authState: AuthState) => void\n) => {\n  let initialized = false;\n\n  const subscription = supabase.auth.onAuthStateChange(\n    async (event, session) => {\n      console.log('Auth state change event:', event);\n      \n      // Initial state is loading\n      if (!initialized) {\n        callback({\n          user: null,\n          isLoading: true,\n          error: null,\n          isAuthenticated: false,\n        });\n        initialized = true;\n      }\n      \n      // Check for signups, errors, invalid tokens, etc.\n      if (event === 'SIGNED_IN') {\n        try {\n          if (!session || !session.user) {\n            throw new Error('No session or user found after sign in');\n          }\n          \n          const userId = session.user.id;\n          \n          // Fetch user profile\n          const { data: profileData, error: profileError } = await supabase\n            .from('profiles')\n            .select('*')\n            .eq('id', userId)\n            .single();\n          \n          if (profileError) {\n            throw profileError;\n          }\n          \n          if (!profileData) {\n            throw new Error('No profile found for user');\n          }\n          \n          // Map profile to our User type\n          const user = mapProfileToUser(session.user, profileData);\n          \n          callback({\n            user,\n            isLoading: false,\n            error: null,\n            isAuthenticated: true,\n          });\n        } catch (error: any) {\n          console.error('Error in auth state change listener:', error);\n          callback({\n            user: null,\n            isLoading: false,\n            error: error.message || 'Failed to get user data on auth change',\n            isAuthenticated: false,\n          });\n        }\n      } else {\n        callback({\n          user: null,\n          isLoading: false,\n          error: null,\n          isAuthenticated: false,\n        });\n      }\n    }\n  );\n\n  return () => {\n    subscription.unsubscribe();\n  };\n};\n\n/**\n * Check if a user is authenticated\n * @returns Boolean indicating if a user is authenticated\n */\nexport const isAuthenticated = async (): Promise<boolean> => {\n  const { data } = await supabase.auth.getSession();\n  return !!data.session;\n};\n\n/**\n * Update user role (for upgrading to Dealer or Show Organizer)\n * @param uid User ID\n * @param newRole New user role\n * @returns Promise<void>\n */\nexport const updateUserRole = async (\n  uid: string,\n  newRole: UserRole\n): Promise<void> => {\n  try {\n    const { error } = await supabase\n      .from('profiles')\n      .update({\n        role: newRole,\n        updated_at: new Date().toISOString(),\n      })\n      .eq('id', uid);\n\n    if (error) throw error;\n  } catch (error: any) {\n    console.error('Error updating user role:', error);\n    throw new Error(error.message || 'Failed to update user role');\n  }\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "89935e1731724dd5c241e8f8d36fc7f55c400a16"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1z3ozq605y = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1z3ozq605y();
cov_1z3ozq605y().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1z3ozq605y().s[1]++;
exports.updateUserRole = exports.isAuthenticated = exports.subscribeToAuthChanges = exports.updateUserProfile = exports.updatePassword = exports.resetPassword = exports.refreshUser = exports.getCurrentUser = exports.getSession = exports.signOut = exports.signIn = exports.registerUser = exports.signUp = exports.mapUserToProfile = exports.mapProfileToUser = exports.supabase = void 0;
const types_1 =
/* istanbul ignore next */
(cov_1z3ozq605y().s[2]++, require("../types"));
const supabase_1 =
/* istanbul ignore next */
(cov_1z3ozq605y().s[3]++, require("../supabase"));
/* istanbul ignore next */
cov_1z3ozq605y().s[4]++;
Object.defineProperty(exports, "supabase", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1z3ozq605y().f[0]++;
    cov_1z3ozq605y().s[5]++;
    return supabase_1.supabase;
  }
});
// Toast utility for user-visible notifications
const toastUtils_1 =
/* istanbul ignore next */
(cov_1z3ozq605y().s[6]++, require("../utils/toastUtils"));
/**
 * Converting Supabase profile data to our User type
 */
/* istanbul ignore next */
cov_1z3ozq605y().s[7]++;
const mapProfileToUser = (authData, profileData) => {
  /* istanbul ignore next */
  cov_1z3ozq605y().f[1]++;
  cov_1z3ozq605y().s[8]++;
  if (
  /* istanbul ignore next */
  (cov_1z3ozq605y().b[1][0]++, !authData) ||
  /* istanbul ignore next */
  (cov_1z3ozq605y().b[1][1]++, !profileData)) {
    /* istanbul ignore next */
    cov_1z3ozq605y().b[0][0]++;
    cov_1z3ozq605y().s[9]++;
    throw new Error('Invalid profile data provided');
  } else
  /* istanbul ignore next */
  {
    cov_1z3ozq605y().b[0][1]++;
  }
  // First extract fields directly from auth data
  const user =
  /* istanbul ignore next */
  (cov_1z3ozq605y().s[10]++, {
    id:
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[2][0]++, authData.id) ||
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[2][1]++, profileData.id),
    email: authData.email,
    firstName:
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[3][0]++, profileData.first_name) ||
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[3][1]++, 'User'),
    homeZipCode:
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[4][0]++, profileData.home_zip_code) ||
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[4][1]++, ''),
    role:
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[5][0]++, profileData.role) ||
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[5][1]++, types_1.UserRole.ATTENDEE),
    createdAt:
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[6][0]++, authData.created_at) ||
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[6][1]++, profileData.created_at),
    updatedAt:
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[7][0]++, profileData.updated_at) ||
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[7][1]++, new Date().toISOString()),
    isEmailVerified: authData.email_confirmed_at ?
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[8][0]++, true) :
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[8][1]++, false),
    accountType:
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[9][0]++, profileData.account_type) ||
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[9][1]++, 'collector'),
    subscriptionStatus:
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[10][0]++, profileData.subscription_status) ||
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[10][1]++, 'none'),
    subscriptionExpiry: profileData.subscription_expiry,
    favoriteShowsCount:
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[11][0]++, profileData.favorite_shows_count) ||
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[11][1]++, 0),
    showAttendanceCount:
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[12][0]++, profileData.show_attendance_count) ||
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[12][1]++, 0),
    // Social media links
    facebookUrl: profileData.facebook_url,
    instagramUrl: profileData.instagram_url,
    twitterUrl: profileData.twitter_url,
    whatnotUrl: profileData.whatnot_url,
    ebayStoreUrl: profileData.ebay_store_url
  });
  // Add optional fields if they exist
  /* istanbul ignore next */
  cov_1z3ozq605y().s[11]++;
  if (profileData.last_name) {
    /* istanbul ignore next */
    cov_1z3ozq605y().b[13][0]++;
    cov_1z3ozq605y().s[12]++;
    user.lastName = profileData.last_name;
  } else
  /* istanbul ignore next */
  {
    cov_1z3ozq605y().b[13][1]++;
  }
  cov_1z3ozq605y().s[13]++;
  if (profileData.phone_number) {
    /* istanbul ignore next */
    cov_1z3ozq605y().b[14][0]++;
    cov_1z3ozq605y().s[14]++;
    user.phoneNumber = profileData.phone_number;
  } else
  /* istanbul ignore next */
  {
    cov_1z3ozq605y().b[14][1]++;
  }
  cov_1z3ozq605y().s[15]++;
  if (profileData.profile_image_url) {
    /* istanbul ignore next */
    cov_1z3ozq605y().b[15][0]++;
    cov_1z3ozq605y().s[16]++;
    user.profileImageUrl = profileData.profile_image_url;
  } else
  /* istanbul ignore next */
  {
    cov_1z3ozq605y().b[15][1]++;
  }
  cov_1z3ozq605y().s[17]++;
  if (profileData.favorite_shows) {
    /* istanbul ignore next */
    cov_1z3ozq605y().b[16][0]++;
    cov_1z3ozq605y().s[18]++;
    user.favoriteShows = profileData.favorite_shows;
  } else
  /* istanbul ignore next */
  {
    cov_1z3ozq605y().b[16][1]++;
  }
  cov_1z3ozq605y().s[19]++;
  if (profileData.attended_shows) {
    /* istanbul ignore next */
    cov_1z3ozq605y().b[17][0]++;
    cov_1z3ozq605y().s[20]++;
    user.attendedShows = profileData.attended_shows;
  } else
  /* istanbul ignore next */
  {
    cov_1z3ozq605y().b[17][1]++;
  }
  // Add notification broadcast limits for organizers
  cov_1z3ozq605y().s[21]++;
  if (user.role === types_1.UserRole.SHOW_ORGANIZER) {
    /* istanbul ignore next */
    cov_1z3ozq605y().b[18][0]++;
    cov_1z3ozq605y().s[22]++;
    user.preShowBroadcastsRemaining =
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[19][0]++, profileData.pre_show_broadcasts_remaining) ||
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[19][1]++, 0);
    /* istanbul ignore next */
    cov_1z3ozq605y().s[23]++;
    user.postShowBroadcastsRemaining =
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[20][0]++, profileData.post_show_broadcasts_remaining) ||
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[20][1]++, 0);
  } else
  /* istanbul ignore next */
  {
    cov_1z3ozq605y().b[18][1]++;
  }
  cov_1z3ozq605y().s[24]++;
  return user;
};
/* istanbul ignore next */
cov_1z3ozq605y().s[25]++;
exports.mapProfileToUser = mapProfileToUser;
/**
 * Maps user fields to profile DB fields
 */
/* istanbul ignore next */
cov_1z3ozq605y().s[26]++;
const mapUserToProfile = user => {
  /* istanbul ignore next */
  cov_1z3ozq605y().f[2]++;
  cov_1z3ozq605y().s[27]++;
  return {
    first_name: user.firstName,
    last_name: user.lastName,
    home_zip_code: user.homeZipCode,
    phone_number: user.phoneNumber,
    profile_image_url: user.profileImageUrl,
    role: user.role,
    account_type: user.accountType,
    facebook_url: user.facebookUrl,
    instagram_url: user.instagramUrl,
    twitter_url: user.twitterUrl,
    whatnot_url: user.whatnotUrl,
    ebay_store_url: user.ebayStoreUrl,
    updated_at: new Date().toISOString()
  };
};
/* istanbul ignore next */
cov_1z3ozq605y().s[28]++;
exports.mapUserToProfile = mapUserToProfile;
/**
 * Sign up with email and password
 * @param credentials
 * @param homeZipCode
 * @param firstName
 * @param lastName
 * @returns Promise containing the User object
 */
/* istanbul ignore next */
cov_1z3ozq605y().s[29]++;
const signUp = async (credentials, homeZipCode, firstName, lastName) => {
  /* istanbul ignore next */
  cov_1z3ozq605y().f[3]++;
  cov_1z3ozq605y().s[30]++;
  try {
    /* istanbul ignore next */
    cov_1z3ozq605y().s[31]++;
    // Check if required fields are present
    if (
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[22][0]++, !credentials.email) ||
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[22][1]++, !credentials.password)) {
      /* istanbul ignore next */
      cov_1z3ozq605y().b[21][0]++;
      cov_1z3ozq605y().s[32]++;
      throw new Error('Email and password are required');
    } else
    /* istanbul ignore next */
    {
      cov_1z3ozq605y().b[21][1]++;
    }
    cov_1z3ozq605y().s[33]++;
    if (!homeZipCode) {
      /* istanbul ignore next */
      cov_1z3ozq605y().b[23][0]++;
      cov_1z3ozq605y().s[34]++;
      throw new Error('ZIP code is required');
    } else
    /* istanbul ignore next */
    {
      cov_1z3ozq605y().b[23][1]++;
    }
    cov_1z3ozq605y().s[35]++;
    if (!firstName) {
      /* istanbul ignore next */
      cov_1z3ozq605y().b[24][0]++;
      cov_1z3ozq605y().s[36]++;
      throw new Error('First name is required');
    } else
    /* istanbul ignore next */
    {
      cov_1z3ozq605y().b[24][1]++;
    }
    // First, create the auth user
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_1z3ozq605y().s[37]++, await supabase_1.supabase.auth.signUp({
      email: credentials.email,
      password: credentials.password
    }));
    /* istanbul ignore next */
    cov_1z3ozq605y().s[38]++;
    if (error) {
      /* istanbul ignore next */
      cov_1z3ozq605y().b[25][0]++;
      cov_1z3ozq605y().s[39]++;
      throw error;
    } else
    /* istanbul ignore next */
    {
      cov_1z3ozq605y().b[25][1]++;
    }
    cov_1z3ozq605y().s[40]++;
    if (!data?.user) {
      /* istanbul ignore next */
      cov_1z3ozq605y().b[26][0]++;
      cov_1z3ozq605y().s[41]++;
      throw new Error('Failed to create user');
    } else
    /* istanbul ignore next */
    {
      cov_1z3ozq605y().b[26][1]++;
    }
    const userId =
    /* istanbul ignore next */
    (cov_1z3ozq605y().s[42]++, data.user.id);
    // Then add their profile information to the profiles table
    const {
      error: profileError
    } =
    /* istanbul ignore next */
    (cov_1z3ozq605y().s[43]++, await supabase_1.supabase.from('profiles').upsert({
      id: userId,
      first_name: firstName,
      last_name:
      /* istanbul ignore next */
      (cov_1z3ozq605y().b[27][0]++, lastName) ||
      /* istanbul ignore next */
      (cov_1z3ozq605y().b[27][1]++, null),
      home_zip_code: homeZipCode,
      role: types_1.UserRole.ATTENDEE,
      // Default role
      account_type: 'collector',
      // Default account type
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    }));
    /* istanbul ignore next */
    cov_1z3ozq605y().s[44]++;
    if (profileError) {
      /* istanbul ignore next */
      cov_1z3ozq605y().b[28][0]++;
      cov_1z3ozq605y().s[45]++;
      // If profile creation fails, we should still be OK since the auth
      // trigger should create a minimal profile
      console.warn('Error creating profile:', profileError);
    } else
    /* istanbul ignore next */
    {
      cov_1z3ozq605y().b[28][1]++;
    }
    // Construct user object
    const user =
    /* istanbul ignore next */
    (cov_1z3ozq605y().s[46]++, {
      id: userId,
      email: credentials.email,
      firstName,
      lastName: lastName,
      homeZipCode,
      role: types_1.UserRole.ATTENDEE,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      isEmailVerified: false,
      accountType: 'collector',
      subscriptionStatus: 'none',
      subscriptionExpiry: null
    });
    /* istanbul ignore next */
    cov_1z3ozq605y().s[47]++;
    return user;
  } catch (error) {
    /* istanbul ignore next */
    cov_1z3ozq605y().s[48]++;
    console.error('Error in signup:', error.message);
    /* istanbul ignore next */
    cov_1z3ozq605y().s[49]++;
    throw error;
  }
};
/* istanbul ignore next */
cov_1z3ozq605y().s[50]++;
exports.signUp = signUp;
/**
 * Register a new user with email, password, and profile information.
 * This mirrors the `signUp` flow but lets callers explicitly choose the
 * initial role (Dealer, MVP Dealer, Organizer, etc.).
 *
 * NOTE: `AuthContext` relies on this helper, so the return shape must be a
 * complete `User` object – NOT the `{ user, error }` shape used by `signIn`.
 */
/* istanbul ignore next */
cov_1z3ozq605y().s[51]++;
const registerUser = async (email, password, firstName, lastName, homeZipCode, role) => {
  /* istanbul ignore next */
  cov_1z3ozq605y().f[4]++;
  cov_1z3ozq605y().s[52]++;
  try {
    /* istanbul ignore next */
    cov_1z3ozq605y().s[53]++;
    // ---- Argument validation ----------------------------------------------------
    if (
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[30][0]++, !email) ||
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[30][1]++, !password)) {
      /* istanbul ignore next */
      cov_1z3ozq605y().b[29][0]++;
      cov_1z3ozq605y().s[54]++;
      throw new Error('Email and password are required');
    } else
    /* istanbul ignore next */
    {
      cov_1z3ozq605y().b[29][1]++;
    }
    cov_1z3ozq605y().s[55]++;
    if (!homeZipCode) {
      /* istanbul ignore next */
      cov_1z3ozq605y().b[31][0]++;
      cov_1z3ozq605y().s[56]++;
      throw new Error('ZIP code is required');
    } else
    /* istanbul ignore next */
    {
      cov_1z3ozq605y().b[31][1]++;
    }
    cov_1z3ozq605y().s[57]++;
    if (!firstName) {
      /* istanbul ignore next */
      cov_1z3ozq605y().b[32][0]++;
      cov_1z3ozq605y().s[58]++;
      throw new Error('First name is required');
    } else
    /* istanbul ignore next */
    {
      cov_1z3ozq605y().b[32][1]++;
    }
    // ---- Create Auth user -------------------------------------------------------
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_1z3ozq605y().s[59]++, await supabase_1.supabase.auth.signUp({
      email,
      password
    }));
    /* istanbul ignore next */
    cov_1z3ozq605y().s[60]++;
    if (error) {
      /* istanbul ignore next */
      cov_1z3ozq605y().b[33][0]++;
      cov_1z3ozq605y().s[61]++;
      throw error;
    } else
    /* istanbul ignore next */
    {
      cov_1z3ozq605y().b[33][1]++;
    }
    cov_1z3ozq605y().s[62]++;
    if (!data?.user) {
      /* istanbul ignore next */
      cov_1z3ozq605y().b[34][0]++;
      cov_1z3ozq605y().s[63]++;
      throw new Error('Failed to create user');
    } else
    /* istanbul ignore next */
    {
      cov_1z3ozq605y().b[34][1]++;
    }
    const userId =
    /* istanbul ignore next */
    (cov_1z3ozq605y().s[64]++, data.user.id);
    // Determine account_type based on role
    const accountType =
    /* istanbul ignore next */
    (cov_1z3ozq605y().s[65]++, role === types_1.UserRole.SHOW_ORGANIZER ?
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[35][0]++, 'organizer') :
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[35][1]++,
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[37][0]++, role === types_1.UserRole.DEALER) ||
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[37][1]++, role === types_1.UserRole.MVP_DEALER) ?
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[36][0]++, 'dealer') :
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[36][1]++, 'collector')));
    // ---- Insert / update profile row -------------------------------------------
    const {
      error: profileError
    } =
    /* istanbul ignore next */
    (cov_1z3ozq605y().s[66]++, await supabase_1.supabase.from('profiles').upsert({
      id: userId,
      first_name: firstName,
      last_name:
      /* istanbul ignore next */
      (cov_1z3ozq605y().b[38][0]++, lastName) ||
      /* istanbul ignore next */
      (cov_1z3ozq605y().b[38][1]++, null),
      home_zip_code: homeZipCode,
      role,
      account_type: accountType,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    }));
    /* istanbul ignore next */
    cov_1z3ozq605y().s[67]++;
    if (profileError) {
      /* istanbul ignore next */
      cov_1z3ozq605y().b[39][0]++;
      cov_1z3ozq605y().s[68]++;
      // RLS triggers should still create a minimal row, but log just in case.
      console.warn('Error creating profile:', profileError);
    } else
    /* istanbul ignore next */
    {
      cov_1z3ozq605y().b[39][1]++;
    }
    // ---- Build & return User object --------------------------------------------
    const nowIso =
    /* istanbul ignore next */
    (cov_1z3ozq605y().s[69]++, new Date().toISOString());
    const user =
    /* istanbul ignore next */
    (cov_1z3ozq605y().s[70]++, {
      id: userId,
      email,
      firstName,
      lastName:
      /* istanbul ignore next */
      (cov_1z3ozq605y().b[40][0]++, lastName) ||
      /* istanbul ignore next */
      (cov_1z3ozq605y().b[40][1]++, undefined),
      homeZipCode,
      role,
      createdAt: nowIso,
      updatedAt: nowIso,
      isEmailVerified: false,
      accountType: accountType,
      subscriptionStatus: 'none',
      subscriptionExpiry: null,
      favoriteShows: [],
      attendedShows: []
    });
    /* istanbul ignore next */
    cov_1z3ozq605y().s[71]++;
    return user;
  } catch (error) {
    /* istanbul ignore next */
    cov_1z3ozq605y().s[72]++;
    console.error('Error in registerUser:', error.message);
    /* istanbul ignore next */
    cov_1z3ozq605y().s[73]++;
    throw error;
  }
};
/* istanbul ignore next */
cov_1z3ozq605y().s[74]++;
exports.registerUser = registerUser;
/**
 * Sign in with email and password
 * @param credentials
 * @returns Promise containing the User object
 */
/* istanbul ignore next */
cov_1z3ozq605y().s[75]++;
const signIn = async credentials => {
  /* istanbul ignore next */
  cov_1z3ozq605y().f[5]++;
  cov_1z3ozq605y().s[76]++;
  try {
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_1z3ozq605y().s[77]++, await supabase_1.supabase.auth.signInWithPassword({
      email: credentials.email,
      password: credentials.password
    }));
    /* istanbul ignore next */
    cov_1z3ozq605y().s[78]++;
    if (error) {
      /* istanbul ignore next */
      cov_1z3ozq605y().b[41][0]++;
      cov_1z3ozq605y().s[79]++;
      return {
        error
      };
    } else
    /* istanbul ignore next */
    {
      cov_1z3ozq605y().b[41][1]++;
    }
    cov_1z3ozq605y().s[80]++;
    if (!data?.user) {
      /* istanbul ignore next */
      cov_1z3ozq605y().b[42][0]++;
      cov_1z3ozq605y().s[81]++;
      return {
        error: new Error('No user returned from sign in')
      };
    } else
    /* istanbul ignore next */
    {
      cov_1z3ozq605y().b[42][1]++;
    }
    // Fetch the user's profile
    const {
      data: profileData,
      error: profileError
    } =
    /* istanbul ignore next */
    (cov_1z3ozq605y().s[82]++, await supabase_1.supabase.from('profiles').select('*').eq('id', data.user.id).single());
    /* istanbul ignore next */
    cov_1z3ozq605y().s[83]++;
    if (profileError) {
      /* istanbul ignore next */
      cov_1z3ozq605y().b[43][0]++;
      cov_1z3ozq605y().s[84]++;
      return {
        error: new Error(`Error fetching user profile: ${profileError.message}`)
      };
    } else
    /* istanbul ignore next */
    {
      cov_1z3ozq605y().b[43][1]++;
    }
    cov_1z3ozq605y().s[85]++;
    if (!profileData) {
      /* istanbul ignore next */
      cov_1z3ozq605y().b[44][0]++;
      cov_1z3ozq605y().s[86]++;
      return {
        error: new Error('No profile data found for user')
      };
    } else
    /* istanbul ignore next */
    {
      cov_1z3ozq605y().b[44][1]++;
    }
    // Map to our User type
    const user =
    /* istanbul ignore next */
    (cov_1z3ozq605y().s[87]++, (0, exports.mapProfileToUser)(data.user, profileData));
    /* istanbul ignore next */
    cov_1z3ozq605y().s[88]++;
    return {
      user
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_1z3ozq605y().s[89]++;
    console.error('Error in signin:', error.message);
    /* istanbul ignore next */
    cov_1z3ozq605y().s[90]++;
    return {
      error
    };
  }
};
/* istanbul ignore next */
cov_1z3ozq605y().s[91]++;
exports.signIn = signIn;
/**
 * Sign out the current user
 */
/* istanbul ignore next */
cov_1z3ozq605y().s[92]++;
const signOut = async () => {
  /* istanbul ignore next */
  cov_1z3ozq605y().f[6]++;
  const {
    error
  } =
  /* istanbul ignore next */
  (cov_1z3ozq605y().s[93]++, await supabase_1.supabase.auth.signOut());
  /* istanbul ignore next */
  cov_1z3ozq605y().s[94]++;
  if (error) {
    /* istanbul ignore next */
    cov_1z3ozq605y().b[45][0]++;
    cov_1z3ozq605y().s[95]++;
    throw error;
  } else
  /* istanbul ignore next */
  {
    cov_1z3ozq605y().b[45][1]++;
  }
};
/* istanbul ignore next */
cov_1z3ozq605y().s[96]++;
exports.signOut = signOut;
/**
 * Get the current session and user
 * @returns Promise containing the User object if session exists
 */
/* istanbul ignore next */
cov_1z3ozq605y().s[97]++;
const getSession = async () => {
  /* istanbul ignore next */
  cov_1z3ozq605y().f[7]++;
  cov_1z3ozq605y().s[98]++;
  try {
    const {
      data: sessionData,
      error: sessionError
    } =
    /* istanbul ignore next */
    (cov_1z3ozq605y().s[99]++, await supabase_1.supabase.auth.getSession());
    /* istanbul ignore next */
    cov_1z3ozq605y().s[100]++;
    if (sessionError) {
      /* istanbul ignore next */
      cov_1z3ozq605y().b[46][0]++;
      cov_1z3ozq605y().s[101]++;
      throw sessionError;
    } else
    /* istanbul ignore next */
    {
      cov_1z3ozq605y().b[46][1]++;
    }
    cov_1z3ozq605y().s[102]++;
    if (!sessionData?.session?.user) {
      /* istanbul ignore next */
      cov_1z3ozq605y().b[47][0]++;
      cov_1z3ozq605y().s[103]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1z3ozq605y().b[47][1]++;
    }
    const authUser =
    /* istanbul ignore next */
    (cov_1z3ozq605y().s[104]++, sessionData.session.user);
    // Fetch profile from the profiles table
    const {
      data: profileData,
      error: profileError
    } =
    /* istanbul ignore next */
    (cov_1z3ozq605y().s[105]++, await supabase_1.supabase.from('profiles').select('*').eq('id', authUser.id).single());
    /* istanbul ignore next */
    cov_1z3ozq605y().s[106]++;
    if (
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[49][0]++, profileError) &&
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[49][1]++, profileError.code !== 'PGRST116')) {
      /* istanbul ignore next */
      cov_1z3ozq605y().b[48][0]++;
      cov_1z3ozq605y().s[107]++;
      // PGRST116 means no rows returned
      console.error('Error getting profile:', profileError);
      /* istanbul ignore next */
      cov_1z3ozq605y().s[108]++;
      throw profileError;
    } else
    /* istanbul ignore next */
    {
      cov_1z3ozq605y().b[48][1]++;
    }
    cov_1z3ozq605y().s[109]++;
    if (!profileData) {
      /* istanbul ignore next */
      cov_1z3ozq605y().b[50][0]++;
      cov_1z3ozq605y().s[110]++;
      console.warn('No profile found for user:', authUser.id);
      /* istanbul ignore next */
      cov_1z3ozq605y().s[111]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1z3ozq605y().b[50][1]++;
    }
    // Map to our User type
    const user =
    /* istanbul ignore next */
    (cov_1z3ozq605y().s[112]++, (0, exports.mapProfileToUser)(authUser, profileData));
    /* istanbul ignore next */
    cov_1z3ozq605y().s[113]++;
    return user;
  } catch (error) {
    /* istanbul ignore next */
    cov_1z3ozq605y().s[114]++;
    console.error('Error getting current session:', error);
    /* istanbul ignore next */
    cov_1z3ozq605y().s[115]++;
    return null;
  }
};
/* istanbul ignore next */
cov_1z3ozq605y().s[116]++;
exports.getSession = getSession;
/**
 * Get current user profile by user ID
 * @param userId The user ID to fetch the profile for
 * @returns Promise containing the User object if found
 */
/* istanbul ignore next */
cov_1z3ozq605y().s[117]++;
const getCurrentUser = async userId => {
  /* istanbul ignore next */
  cov_1z3ozq605y().f[8]++;
  cov_1z3ozq605y().s[118]++;
  try {
    /* istanbul ignore next */
    cov_1z3ozq605y().s[119]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_1z3ozq605y().b[51][0]++;
      cov_1z3ozq605y().s[120]++;
      console.error('[supabaseAuthService] getCurrentUser called with empty userId');
      /* istanbul ignore next */
      cov_1z3ozq605y().s[121]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1z3ozq605y().b[51][1]++;
    }
    cov_1z3ozq605y().s[122]++;
    console.log('[supabaseAuthService] Fetching user profile for ID:', userId);
    /* -----------------------------------------------------------
     * 1) Fetch the user's profile row from `profiles`
     * --------------------------------------------------------- */
    const {
      data: profileData,
      error: profileError
    } =
    /* istanbul ignore next */
    (cov_1z3ozq605y().s[123]++, await supabase_1.supabase.from('profiles').select('*').eq('id', userId).single());
    /* istanbul ignore next */
    cov_1z3ozq605y().s[124]++;
    if (profileError) {
      /* istanbul ignore next */
      cov_1z3ozq605y().b[52][0]++;
      cov_1z3ozq605y().s[125]++;
      console.error('[supabaseAuthService] Error fetching profile:', profileError);
      /* istanbul ignore next */
      cov_1z3ozq605y().s[126]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1z3ozq605y().b[52][1]++;
    }
    cov_1z3ozq605y().s[127]++;
    if (!profileData) {
      /* istanbul ignore next */
      cov_1z3ozq605y().b[53][0]++;
      cov_1z3ozq605y().s[128]++;
      console.warn('[supabaseAuthService] No profile found for user:', userId);
      /* istanbul ignore next */
      cov_1z3ozq605y().s[129]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1z3ozq605y().b[53][1]++;
    }
    /* -----------------------------------------------------------
     * 2) Retrieve auth data for the **current** user via session.
     *    (Supabase client-side cannot fetch arbitrary users.)
     * --------------------------------------------------------- */
    const {
      data: authData,
      error: authError
    } =
    /* istanbul ignore next */
    (cov_1z3ozq605y().s[130]++, await supabase_1.supabase.auth.getUser());
    let authUser =
    /* istanbul ignore next */
    (cov_1z3ozq605y().s[131]++, authData?.user);
    /* istanbul ignore next */
    cov_1z3ozq605y().s[132]++;
    if (authError) {
      /* istanbul ignore next */
      cov_1z3ozq605y().b[54][0]++;
      cov_1z3ozq605y().s[133]++;
      console.error('[supabaseAuthService] Error fetching auth user:', authError);
    } else
    /* istanbul ignore next */
    {
      cov_1z3ozq605y().b[54][1]++;
    }
    // Fallback – construct minimal auth payload if IDs don’t match
    cov_1z3ozq605y().s[134]++;
    if (
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[56][0]++, !authUser) ||
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[56][1]++, authUser.id !== userId)) {
      /* istanbul ignore next */
      cov_1z3ozq605y().b[55][0]++;
      cov_1z3ozq605y().s[135]++;
      authUser = {
        id: userId,
        email:
        /* istanbul ignore next */
        (cov_1z3ozq605y().b[57][0]++, profileData.email) ||
        /* istanbul ignore next */
        (cov_1z3ozq605y().b[57][1]++, '')
      };
    } else
    /* istanbul ignore next */
    {
      cov_1z3ozq605y().b[55][1]++;
    }
    /* -----------------------------------------------------------
     * 3) Map combined auth + profile data to our `User` type
     * --------------------------------------------------------- */
    cov_1z3ozq605y().s[136]++;
    return (0, exports.mapProfileToUser)(authUser, profileData);
  } catch (error) {
    /* istanbul ignore next */
    cov_1z3ozq605y().s[137]++;
    console.error('[supabaseAuthService] Unexpected error in getCurrentUser:', error);
    /* istanbul ignore next */
    cov_1z3ozq605y().s[138]++;
    return null;
  }
};
/* istanbul ignore next */
cov_1z3ozq605y().s[139]++;
exports.getCurrentUser = getCurrentUser;
/**
 * Refresh the current user role
 * Used when a user upgrades their account
 */
/* istanbul ignore next */
cov_1z3ozq605y().s[140]++;
const refreshUser = async () => {
  /* istanbul ignore next */
  cov_1z3ozq605y().f[9]++;
  cov_1z3ozq605y().s[141]++;
  try {
    const {
      data: sessionData,
      error: sessionError
    } =
    /* istanbul ignore next */
    (cov_1z3ozq605y().s[142]++, await supabase_1.supabase.auth.getSession());
    /* istanbul ignore next */
    cov_1z3ozq605y().s[143]++;
    if (sessionError) {
      /* istanbul ignore next */
      cov_1z3ozq605y().b[58][0]++;
      cov_1z3ozq605y().s[144]++;
      throw sessionError;
    } else
    /* istanbul ignore next */
    {
      cov_1z3ozq605y().b[58][1]++;
    }
    cov_1z3ozq605y().s[145]++;
    if (!sessionData?.session?.user) {
      /* istanbul ignore next */
      cov_1z3ozq605y().b[59][0]++;
      cov_1z3ozq605y().s[146]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1z3ozq605y().b[59][1]++;
    }
    const authUser =
    /* istanbul ignore next */
    (cov_1z3ozq605y().s[147]++, sessionData.session.user);
    // Refresh the auth session token to ensure we have the latest claims
    const {
      error: refreshError
    } =
    /* istanbul ignore next */
    (cov_1z3ozq605y().s[148]++, await supabase_1.supabase.auth.refreshSession());
    /* istanbul ignore next */
    cov_1z3ozq605y().s[149]++;
    if (refreshError) {
      /* istanbul ignore next */
      cov_1z3ozq605y().b[60][0]++;
      cov_1z3ozq605y().s[150]++;
      throw refreshError;
    } else
    /* istanbul ignore next */
    {
      cov_1z3ozq605y().b[60][1]++;
    }
    // Fetch updated profile from the profiles table
    const {
      data: profileData,
      error: profileError
    } =
    /* istanbul ignore next */
    (cov_1z3ozq605y().s[151]++, await supabase_1.supabase.from('profiles').select('*').eq('id', authUser.id).single());
    /* istanbul ignore next */
    cov_1z3ozq605y().s[152]++;
    if (profileError) {
      /* istanbul ignore next */
      cov_1z3ozq605y().b[61][0]++;
      cov_1z3ozq605y().s[153]++;
      throw profileError;
    } else
    /* istanbul ignore next */
    {
      cov_1z3ozq605y().b[61][1]++;
    }
    cov_1z3ozq605y().s[154]++;
    if (!profileData) {
      /* istanbul ignore next */
      cov_1z3ozq605y().b[62][0]++;
      cov_1z3ozq605y().s[155]++;
      throw new Error('No profile found for user');
    } else
    /* istanbul ignore next */
    {
      cov_1z3ozq605y().b[62][1]++;
    }
    // Map to our User type
    const user =
    /* istanbul ignore next */
    (cov_1z3ozq605y().s[156]++, (0, exports.mapProfileToUser)(authUser, profileData));
    /* istanbul ignore next */
    cov_1z3ozq605y().s[157]++;
    return user;
  } catch (error) {
    /* istanbul ignore next */
    cov_1z3ozq605y().s[158]++;
    console.error('Error refreshing user:', error);
    /* istanbul ignore next */
    cov_1z3ozq605y().s[159]++;
    return null;
  }
};
/* istanbul ignore next */
cov_1z3ozq605y().s[160]++;
exports.refreshUser = refreshUser;
/**
 * Reset password
 * @param email
 */
/* istanbul ignore next */
cov_1z3ozq605y().s[161]++;
const resetPassword = async email => {
  /* istanbul ignore next */
  cov_1z3ozq605y().f[10]++;
  cov_1z3ozq605y().s[162]++;
  try {
    const {
      error
    } =
    /* istanbul ignore next */
    (cov_1z3ozq605y().s[163]++, await supabase_1.supabase.auth.resetPasswordForEmail(email, {
      redirectTo: 'cardshowhunter://reset-password'
    }));
    /* istanbul ignore next */
    cov_1z3ozq605y().s[164]++;
    if (error) {
      /* istanbul ignore next */
      cov_1z3ozq605y().b[63][0]++;
      cov_1z3ozq605y().s[165]++;
      throw error;
    } else
    /* istanbul ignore next */
    {
      cov_1z3ozq605y().b[63][1]++;
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_1z3ozq605y().s[166]++;
    console.error('Error sending password reset:', error.message);
    /* istanbul ignore next */
    cov_1z3ozq605y().s[167]++;
    throw error;
  }
};
/* istanbul ignore next */
cov_1z3ozq605y().s[168]++;
exports.resetPassword = resetPassword;
/**
 * Complete the password reset process
 * @param newPassword
 */
/* istanbul ignore next */
cov_1z3ozq605y().s[169]++;
const updatePassword = async newPassword => {
  /* istanbul ignore next */
  cov_1z3ozq605y().f[11]++;
  cov_1z3ozq605y().s[170]++;
  try {
    const {
      error
    } =
    /* istanbul ignore next */
    (cov_1z3ozq605y().s[171]++, await supabase_1.supabase.auth.updateUser({
      password: newPassword
    }));
    /* istanbul ignore next */
    cov_1z3ozq605y().s[172]++;
    if (error) {
      /* istanbul ignore next */
      cov_1z3ozq605y().b[64][0]++;
      cov_1z3ozq605y().s[173]++;
      throw error;
    } else
    /* istanbul ignore next */
    {
      cov_1z3ozq605y().b[64][1]++;
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_1z3ozq605y().s[174]++;
    console.error('Error updating password:', error.message);
    /* istanbul ignore next */
    cov_1z3ozq605y().s[175]++;
    throw error;
  }
};
/* istanbul ignore next */
cov_1z3ozq605y().s[176]++;
exports.updatePassword = updatePassword;
/**
 * Update user profile
 * @param userData Partial User data to update
 * @returns Promise<User> Updated user
 */
/* istanbul ignore next */
cov_1z3ozq605y().s[177]++;
const updateUserProfile = async userData => {
  /* istanbul ignore next */
  cov_1z3ozq605y().f[12]++;
  cov_1z3ozq605y().s[178]++;
  try {
    /* istanbul ignore next */
    cov_1z3ozq605y().s[179]++;
    if (
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[66][0]++, !userData) ||
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[66][1]++, !userData.id)) {
      /* istanbul ignore next */
      cov_1z3ozq605y().b[65][0]++;
      cov_1z3ozq605y().s[180]++;
      throw new Error('User ID is required for update');
    } else
    /* istanbul ignore next */
    {
      cov_1z3ozq605y().b[65][1]++;
    }
    const userId =
    /* istanbul ignore next */
    (cov_1z3ozq605y().s[181]++, userData.id);
    /* ---------------------------------------------------------------
     * Capture the user’s existing home ZIP *before* the update so we
     * can detect changes afterwards and surface a toast.
     * ------------------------------------------------------------- */
    const sessionUser =
    /* istanbul ignore next */
    (cov_1z3ozq605y().s[182]++, await (0, exports.getSession)());
    const previousZip =
    /* istanbul ignore next */
    (cov_1z3ozq605y().s[183]++,
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[67][0]++, sessionUser?.homeZipCode) ??
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[67][1]++, null));
    // Convert our User fields to DB fields
    const profileData =
    /* istanbul ignore next */
    (cov_1z3ozq605y().s[184]++, (0, exports.mapUserToProfile)(userData));
    // Remove any undefined values to avoid setting NULL
    /* istanbul ignore next */
    cov_1z3ozq605y().s[185]++;
    Object.keys(profileData).forEach(key => {
      /* istanbul ignore next */
      cov_1z3ozq605y().f[13]++;
      cov_1z3ozq605y().s[186]++;
      if (profileData[key] === undefined) {
        /* istanbul ignore next */
        cov_1z3ozq605y().b[68][0]++;
        cov_1z3ozq605y().s[187]++;
        delete profileData[key];
      } else
      /* istanbul ignore next */
      {
        cov_1z3ozq605y().b[68][1]++;
      }
    });
    // Update the profile
    const {
      error
    } =
    /* istanbul ignore next */
    (cov_1z3ozq605y().s[188]++, await supabase_1.supabase.from('profiles').update(profileData).eq('id', userId));
    /* istanbul ignore next */
    cov_1z3ozq605y().s[189]++;
    if (error) {
      /* istanbul ignore next */
      cov_1z3ozq605y().b[69][0]++;
      cov_1z3ozq605y().s[190]++;
      throw error;
    } else
    /* istanbul ignore next */
    {
      cov_1z3ozq605y().b[69][1]++;
    }
    // Get updated user data
    const updatedUser =
    /* istanbul ignore next */
    (cov_1z3ozq605y().s[191]++, await (0, exports.getSession)());
    /* istanbul ignore next */
    cov_1z3ozq605y().s[192]++;
    if (!updatedUser) {
      /* istanbul ignore next */
      cov_1z3ozq605y().b[70][0]++;
      cov_1z3ozq605y().s[193]++;
      throw new Error('Failed to retrieve updated user data');
    } else
    /* istanbul ignore next */
    {
      cov_1z3ozq605y().b[70][1]++;
    }
    /* ---------------------------------------------------------------
     * If the home ZIP has changed, notify the user so they understand
     * why the map recentred.
     * ------------------------------------------------------------- */
    cov_1z3ozq605y().s[194]++;
    if (
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[72][0]++, updatedUser.homeZipCode) &&
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[72][1]++, updatedUser.homeZipCode !== previousZip)) {
      /* istanbul ignore next */
      cov_1z3ozq605y().b[71][0]++;
      cov_1z3ozq605y().s[195]++;
      (0, toastUtils_1.showLocationChangedToast)(updatedUser.homeZipCode);
    } else
    /* istanbul ignore next */
    {
      cov_1z3ozq605y().b[71][1]++;
    }
    cov_1z3ozq605y().s[196]++;
    return updatedUser;
  } catch (error) {
    /* istanbul ignore next */
    cov_1z3ozq605y().s[197]++;
    console.error('Error updating profile:', error.message);
    /* istanbul ignore next */
    cov_1z3ozq605y().s[198]++;
    throw error;
  }
};
/* istanbul ignore next */
cov_1z3ozq605y().s[199]++;
exports.updateUserProfile = updateUserProfile;
/**
 * Subscribe to auth state changes
 */
/* istanbul ignore next */
cov_1z3ozq605y().s[200]++;
const subscribeToAuthChanges = callback => {
  /* istanbul ignore next */
  cov_1z3ozq605y().f[14]++;
  let initialized =
  /* istanbul ignore next */
  (cov_1z3ozq605y().s[201]++, false);
  const subscription =
  /* istanbul ignore next */
  (cov_1z3ozq605y().s[202]++, supabase_1.supabase.auth.onAuthStateChange(async (event, session) => {
    /* istanbul ignore next */
    cov_1z3ozq605y().f[15]++;
    cov_1z3ozq605y().s[203]++;
    console.log('Auth state change event:', event);
    // Initial state is loading
    /* istanbul ignore next */
    cov_1z3ozq605y().s[204]++;
    if (!initialized) {
      /* istanbul ignore next */
      cov_1z3ozq605y().b[73][0]++;
      cov_1z3ozq605y().s[205]++;
      callback({
        user: null,
        isLoading: true,
        error: null,
        isAuthenticated: false
      });
      /* istanbul ignore next */
      cov_1z3ozq605y().s[206]++;
      initialized = true;
    } else
    /* istanbul ignore next */
    {
      cov_1z3ozq605y().b[73][1]++;
    }
    // Check for signups, errors, invalid tokens, etc.
    cov_1z3ozq605y().s[207]++;
    if (event === 'SIGNED_IN') {
      /* istanbul ignore next */
      cov_1z3ozq605y().b[74][0]++;
      cov_1z3ozq605y().s[208]++;
      try {
        /* istanbul ignore next */
        cov_1z3ozq605y().s[209]++;
        if (
        /* istanbul ignore next */
        (cov_1z3ozq605y().b[76][0]++, !session) ||
        /* istanbul ignore next */
        (cov_1z3ozq605y().b[76][1]++, !session.user)) {
          /* istanbul ignore next */
          cov_1z3ozq605y().b[75][0]++;
          cov_1z3ozq605y().s[210]++;
          throw new Error('No session or user found after sign in');
        } else
        /* istanbul ignore next */
        {
          cov_1z3ozq605y().b[75][1]++;
        }
        const userId =
        /* istanbul ignore next */
        (cov_1z3ozq605y().s[211]++, session.user.id);
        // Fetch user profile
        const {
          data: profileData,
          error: profileError
        } =
        /* istanbul ignore next */
        (cov_1z3ozq605y().s[212]++, await supabase_1.supabase.from('profiles').select('*').eq('id', userId).single());
        /* istanbul ignore next */
        cov_1z3ozq605y().s[213]++;
        if (profileError) {
          /* istanbul ignore next */
          cov_1z3ozq605y().b[77][0]++;
          cov_1z3ozq605y().s[214]++;
          throw profileError;
        } else
        /* istanbul ignore next */
        {
          cov_1z3ozq605y().b[77][1]++;
        }
        cov_1z3ozq605y().s[215]++;
        if (!profileData) {
          /* istanbul ignore next */
          cov_1z3ozq605y().b[78][0]++;
          cov_1z3ozq605y().s[216]++;
          throw new Error('No profile found for user');
        } else
        /* istanbul ignore next */
        {
          cov_1z3ozq605y().b[78][1]++;
        }
        // Map profile to our User type
        const user =
        /* istanbul ignore next */
        (cov_1z3ozq605y().s[217]++, (0, exports.mapProfileToUser)(session.user, profileData));
        /* istanbul ignore next */
        cov_1z3ozq605y().s[218]++;
        callback({
          user,
          isLoading: false,
          error: null,
          isAuthenticated: true
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_1z3ozq605y().s[219]++;
        console.error('Error in auth state change listener:', error);
        /* istanbul ignore next */
        cov_1z3ozq605y().s[220]++;
        callback({
          user: null,
          isLoading: false,
          error:
          /* istanbul ignore next */
          (cov_1z3ozq605y().b[79][0]++, error.message) ||
          /* istanbul ignore next */
          (cov_1z3ozq605y().b[79][1]++, 'Failed to get user data on auth change'),
          isAuthenticated: false
        });
      }
    } else {
      /* istanbul ignore next */
      cov_1z3ozq605y().b[74][1]++;
      cov_1z3ozq605y().s[221]++;
      callback({
        user: null,
        isLoading: false,
        error: null,
        isAuthenticated: false
      });
    }
  }));
  /* istanbul ignore next */
  cov_1z3ozq605y().s[222]++;
  return () => {
    /* istanbul ignore next */
    cov_1z3ozq605y().f[16]++;
    cov_1z3ozq605y().s[223]++;
    subscription.unsubscribe();
  };
};
/* istanbul ignore next */
cov_1z3ozq605y().s[224]++;
exports.subscribeToAuthChanges = subscribeToAuthChanges;
/**
 * Check if a user is authenticated
 * @returns Boolean indicating if a user is authenticated
 */
/* istanbul ignore next */
cov_1z3ozq605y().s[225]++;
const isAuthenticated = async () => {
  /* istanbul ignore next */
  cov_1z3ozq605y().f[17]++;
  const {
    data
  } =
  /* istanbul ignore next */
  (cov_1z3ozq605y().s[226]++, await supabase_1.supabase.auth.getSession());
  /* istanbul ignore next */
  cov_1z3ozq605y().s[227]++;
  return !!data.session;
};
/* istanbul ignore next */
cov_1z3ozq605y().s[228]++;
exports.isAuthenticated = isAuthenticated;
/**
 * Update user role (for upgrading to Dealer or Show Organizer)
 * @param uid User ID
 * @param newRole New user role
 * @returns Promise<void>
 */
/* istanbul ignore next */
cov_1z3ozq605y().s[229]++;
const updateUserRole = async (uid, newRole) => {
  /* istanbul ignore next */
  cov_1z3ozq605y().f[18]++;
  cov_1z3ozq605y().s[230]++;
  try {
    const {
      error
    } =
    /* istanbul ignore next */
    (cov_1z3ozq605y().s[231]++, await supabase_1.supabase.from('profiles').update({
      role: newRole,
      updated_at: new Date().toISOString()
    }).eq('id', uid));
    /* istanbul ignore next */
    cov_1z3ozq605y().s[232]++;
    if (error) {
      /* istanbul ignore next */
      cov_1z3ozq605y().b[80][0]++;
      cov_1z3ozq605y().s[233]++;
      throw error;
    } else
    /* istanbul ignore next */
    {
      cov_1z3ozq605y().b[80][1]++;
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_1z3ozq605y().s[234]++;
    console.error('Error updating user role:', error);
    /* istanbul ignore next */
    cov_1z3ozq605y().s[235]++;
    throw new Error(
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[81][0]++, error.message) ||
    /* istanbul ignore next */
    (cov_1z3ozq605y().b[81][1]++, 'Failed to update user role'));
  }
};
/* istanbul ignore next */
cov_1z3ozq605y().s[236]++;
exports.updateUserRole = updateUserRole;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,