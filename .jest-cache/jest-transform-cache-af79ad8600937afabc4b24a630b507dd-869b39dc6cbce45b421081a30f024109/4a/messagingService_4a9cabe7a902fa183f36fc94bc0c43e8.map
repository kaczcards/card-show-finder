{"version":3,"names":["supabase","userRoleService","cov_sa5xt6wt7","s","findDirectConversation","_ref","_asyncToGenerator","userA","userB","f","_ref2","from","select","eq","in","convoData","data","convoError","error","b","console","conversationMatches","filter","convo","conversation_participants","length","userIds","map","p","user_id","includes","id","_ref3","or","order","ascending","limit","legacyData","legacyError","conversation_id","_x","_x2","apply","arguments","createConversation","_ref4","params","_ref5","userId","participantIds","_ref5$isGroup","isGroup","showId","createDirectConversation","createGroupConversation","Error","_x3","_ref6","existingConversationId","_ref7","insert","type","created_at","Date","toISOString","single","conversationData","conversationError","conversationId","participants","_ref8","profiles","forEach","i","profile","find","prof","Object","assign","display_name","full_name","photo_url","avatar_url","_ref9","participantsError","_x4","_x5","_ref0","creatorId","_ref1","show_id","allParticipantIds","_toConsumableArray","Set","concat","_ref10","participantRecords","unread_count","_ref11","_x6","_x7","_x8","startConversationFromProfile","_ref12","currentUserId","profileUserId","initialMessage","recipientRole","getUserRole","IS_TEST_MODE","canUserReceiveMessage","sendMessage","_x9","_x0","_x1","getConversationParticipants","_ref13","_x10","getConversations","_ref14","_ref15","rpc","conversationsData","conversationsError","_ref16","participationsData","participationsError","conversationIds","_ref17","neq","allParticipantsData","allParticipantsError","participantsByConversation","participant","push","conversations","_participantsByConver","participant_count","last_message_text","last_message_timestamp","sort","a","timeA","getTime","timeB","_x11","getMessages","_ref18","_ref19","_x12","_ref20","senderId","recipientId","messageText","_ref21","Promise","all","_ref22","_slicedToArray","senderRole","canReplyToMessage","canSendDirectMessage","finalConversationId","_ref23","sender_id","message_text","read_by_user_ids","newMessage","messageError","update","updateError","_x13","_x14","_x15","_x16","sendGroupMessage","_ref24","_ref25","participantCheck","participantCheckError","_ref26","_x17","_x18","_x19","sendBroadcastMessage","_ref27","_ref28","message","recipientRoles","_ref29","functions","invoke","body","recipient_roles","is_pre_show","isPreShow","_x20","moderateMessage","_ref30","moderatorId","messageId","reason","undefined","_ref31","p_message_id","p_moderator_id","p_reason","err","_x21","_x22","reportMessage","_ref32","reporterId","_ref33","p_reporter_id","_x23","_x24","_x25","markMessageAsRead","_ref34","_ref35","_ref36","_ref37","msgData","decrementUnreadCount","_x26","_x27","markConversationAsRead","_ref38","_ref39","not","messages","updatedCount","_ref40","_x28","_x29","_ref41","_x30","_x31","subscribeToMessages","onNewMessage","channel","on","event","schema","table","payload","new","subscribe","getTotalUnreadCount","_ref42","_ref43","reduce","total","item","_x32"],"sources":["messagingService.ts"],"sourcesContent":["import { supabase } from '../supabase';\nimport * as userRoleService from './userRoleService';\nimport { UserRole } from './userRoleService';\n\n// TypeScript interfaces for Messages and Conversations\nexport interface Message {\n  id: string;\n  conversation_id: string;\n  sender_id: string;\n  message_text: string;\n  created_at: string;\n  read_by_user_ids: string[];\n  sender_profile?: {\n    id: string;\n    username?: string;\n    full_name?: string;\n    avatar_url?: string;\n  };\n}\n\nexport interface Conversation {\n  id: string;\n  type: 'direct' | 'group' | 'show';\n  show_id?: string;\n  participant_count: number;\n  last_message_text?: string;\n  last_message_timestamp?: string;\n  unread_count: number;\n  participants: {\n    user_id: string;\n    display_name?: string;\n    photo_url?: string;\n  }[];\n}\n\n// Broadcast message parameters\nexport interface BroadcastMessageParams {\n  senderId: string;\n  message: string;\n  recipientRoles: UserRole[];\n  showId?: string;\n  /**\n   * Optional override to explicitly mark the broadcast\n   * as pre-show (TRUE) or post-show (FALSE).  When omitted\n   * the edge-function infers this from current date vs show date.\n   */\n  isPreShow?: boolean;\n}\n\n// ---------------------------------------------------------------------------\n//  Conversation functions\n// ---------------------------------------------------------------------------\n\n/**\n * Try to find an existing one-to-one (direct) conversation between two users.\n * @param userA First user id\n * @param userB Second user id\n * @returns conversation id or null if none exists\n */\nexport const findDirectConversation = async (\n  userA: string,\n  userB: string\n): Promise<string | null> => {\n  try {\n    // Try to find in conversation_participants table (preferred approach)\n    const { data: convoData, error: convoError } = await supabase\n      .from('conversations')\n      .select(`\n        id,\n        type,\n        conversation_participants!inner(user_id)\n      `)\n      .eq('type', 'direct')\n      .in('conversation_participants.user_id', [userA, userB]);\n\n    if (convoError) {\n      console.error('[messagingService/findDirectConversation] advanced lookup error', convoError);\n      // Fall back to legacy approach\n    } else {\n      // Group results by conversation_id and count participants\n      const conversationMatches = convoData\n        .filter(convo => convo.conversation_participants.length === 2)\n        .filter(convo => {\n          // Check if both users are in this conversation\n          const userIds = convo.conversation_participants.map((p: any) => p.user_id);\n          return userIds.includes(userA) && userIds.includes(userB);\n        });\n      \n      if (conversationMatches.length > 0) {\n        return conversationMatches[0].id;\n      }\n    }\n\n    // Legacy fallback: Look in messages table\n    const { data: legacyData, error: legacyError } = await supabase\n      .from('messages')\n      .select('conversation_id')\n      .or(`and(sender_id.eq.${userA},recipient_id.eq.${userB}),and(sender_id.eq.${userB},recipient_id.eq.${userA})`)\n      .order('created_at', { ascending: false })\n      .limit(1);\n\n    if (legacyError) {\n      console.error('[messagingService/findDirectConversation] legacy error', legacyError);\n      return null;\n    }\n\n    if (legacyData && legacyData.length > 0) {\n      return legacyData[0].conversation_id;\n    }\n\n    return null;\n  } catch (error) {\n    console.error('[messagingService/findDirectConversation] exception', error);\n    return null;\n  }\n};\n\n/**\n * Create a direct conversation between two users.\n * This function creates the conversation record, adds participants,\n * but does NOT send any messages.\n * @param userA First user id\n * @param userB Second user id\n * @returns The conversation ID\n */\n\n/**\n * Generic conversation creation function that handles both direct and group conversations.\n * @param {Object} params - The conversation parameters\n * @param {string} params.userId - The ID of the user creating the conversation\n * @param {string[]} params.participantIds - Array of user IDs to include (for direct conversations, should contain one ID)\n * @param {boolean} params.isGroup - Whether this is a group conversation\n * @param {string} [params.showId] - Optional show ID for show-specific groups\n * @returns {Promise<string>} The conversation ID\n */\nexport const createConversation = async (params: { \n  userId: string;\n  participantIds: string[];\n  isGroup?: boolean;\n  showId?: string;\n}): Promise<string> => {\n  try {\n    const { userId, participantIds, isGroup = false, showId } = params;\n    \n    // Direct conversation (between two users)\n    if (!isGroup && participantIds.length === 1) {\n      return await createDirectConversation(userId, participantIds[0]);\n    }\n    \n    // Group conversation\n    if (isGroup || participantIds.length > 1) {\n      return await createGroupConversation(userId, participantIds, showId);\n    }\n    \n    throw new Error('Invalid conversation parameters');\n  } catch (error) {\n    console.error('[messagingService/createConversation] exception', error);\n    throw error;\n  }\n};\n\nexport const createDirectConversation = async (\n  userA: string,\n  userB: string\n): Promise<string> => {\n  try {\n    // First check if conversation already exists\n    const existingConversationId = await findDirectConversation(userA, userB);\n    if (existingConversationId) {\n      return existingConversationId;\n    }\n    \n    // Create a new conversation\n    const { data: conversationData, error: conversationError } = await supabase\n      .from('conversations')\n      .insert({\n        type: 'direct',\n        created_at: new Date().toISOString()\n      })\n      .select()\n      .single();\n    \n    if (conversationError || !conversationData) {\n      console.error('[messagingService/createDirectConversation] conversation error', conversationError);\n      throw new Error('Failed to create conversation');\n    }\n    \n    const conversationId = conversationData.id;\n    \n    // Add participants\n    const participants = [\n      { conversation_id: conversationId, user_id: userA },\n      { conversation_id: conversationId, user_id: userB }\n    ];\n    \n    // Fetch user profiles to get display names and photos\n    const { data: profiles } = await supabase\n      .from('profiles')\n      .select('id, full_name, avatar_url')\n      .in('id', [userA, userB]);\n      \n    if (profiles) {\n      participants.forEach((p, i) => {\n        const profile = profiles.find(prof => prof.id === p.user_id);\n        if (profile) {\n          participants[i] = {\n            ...p,\n            display_name: profile.full_name,\n            photo_url: profile.avatar_url\n          };\n        }\n      });\n    }\n    \n    const { error: participantsError } = await supabase\n      .from('conversation_participants')\n      .insert(participants);\n      \n    if (participantsError) {\n      console.error('[messagingService/createDirectConversation] participants error', participantsError);\n      // We created the conversation but failed to add participants\n      // This is a partial failure, but we still return the conversation ID\n      // A cleanup job could remove orphaned conversations\n    }\n    \n    return conversationId;\n  } catch (error) {\n    console.error('[messagingService/createDirectConversation] exception', error);\n    throw error;\n  }\n};\n\n/**\n * Creates a group conversation for broadcasting messages.\n * @param creatorId The ID of the user creating the group\n * @param participants Array of user IDs to include in the group \n * @param showId Optional Show ID if this is a show-specific group\n * @returns The conversation ID\n */\nexport const createGroupConversation = async (\n  creatorId: string,\n  participants: string[],\n  showId?: string\n): Promise<string> => {\n  try {\n    // Create a new group conversation\n    const { data: conversationData, error: conversationError } = await supabase\n      .from('conversations')\n      .insert({\n        type: showId ? 'show' : 'group',\n        show_id: showId || null,\n        created_at: new Date().toISOString()\n      })\n      .select()\n      .single();\n    \n    if (conversationError || !conversationData) {\n      console.error('[messagingService/createGroupConversation] conversation error', conversationError);\n      throw new Error('Failed to create group conversation');\n    }\n    \n    const conversationId = conversationData.id;\n    \n    // Always include the creator in the participants list\n    const allParticipantIds = [...new Set([creatorId, ...participants])];\n    \n    // Fetch user profiles for all participants\n    const { data: profiles } = await supabase\n      .from('profiles')\n      .select('id, full_name, avatar_url')\n      .in('id', allParticipantIds);\n    \n    // Create participant records\n    const participantRecords = allParticipantIds.map(userId => {\n      const profile = profiles?.find(p => p.id === userId);\n      return {\n        conversation_id: conversationId,\n        user_id: userId,\n        display_name: profile?.full_name,\n        photo_url: profile?.avatar_url,\n        // Only the creator has read all messages initially\n        unread_count: userId === creatorId ? 0 : 1\n      };\n    });\n    \n    // Insert all participants\n    const { error: participantsError } = await supabase\n      .from('conversation_participants')\n      .insert(participantRecords);\n    \n    if (participantsError) {\n      console.error('[messagingService/createGroupConversation] participants error', participantsError);\n      // Continue despite partial failure\n    }\n    \n    return conversationId;\n  } catch (error) {\n    console.error('[messagingService/createGroupConversation] exception', error);\n    throw error;\n  }\n};\n\n/**\n * Start a new conversation from a profile view.\n * Creates the conversation if needed, sends the initial message,\n * and returns the conversation ID for navigation.\n * \n * @param currentUserId The ID of the current user initiating the conversation\n * @param profileUserId The ID of the user whose profile is being viewed\n * @param initialMessage The first message to send\n * @returns Conversation ID for navigation\n */\nexport const startConversationFromProfile = async (\n  currentUserId: string,\n  profileUserId: string,\n  initialMessage: string\n): Promise<string> => {\n  try {\n    // Check if the recipient can receive messages\n    const recipientRole = await userRoleService.getUserRole(profileUserId);\n    if (!recipientRole) {\n      throw new Error('User not found');\n    }\n    \n    if (!userRoleService.IS_TEST_MODE && !userRoleService.canUserReceiveMessage(recipientRole)) {\n      throw new Error('This user cannot receive messages due to their role');\n    }\n    \n    // Create or find conversation\n    const conversationId = await createDirectConversation(currentUserId, profileUserId);\n    \n    // Send initial message\n    await sendMessage(currentUserId, profileUserId, initialMessage, conversationId);\n    \n    return conversationId;\n  } catch (error) {\n    console.error('[messagingService/startConversationFromProfile]', error);\n    throw error;\n  }\n};\n\n/**\n * Get participants (excluding optional filters) of a conversation.\n * Returned data structure mirrors Supabase `.from().select()` call so\n * callers can destructure `{ data, error }` just like a direct query.\n *\n * NOTE: We intentionally keep this lightweight – any additional profile\n * fields should be added by callers via `select()` if/when needed.\n *\n * @param conversationId The conversation to fetch participants for\n */\nexport const getConversationParticipants = async (\n  conversationId: string\n) => {\n  return supabase\n    .from('conversation_participants')\n    .select('user_id, display_name, photo_url')\n    .eq('conversation_id', conversationId);\n};\n\n/**\n * Get all conversations for the current user\n * @param userId The ID of the current user\n * @returns Array of conversations with last message and unread count\n */\nexport const getConversations = async (userId: string): Promise<Conversation[]> => {\n  try {\n    // Try to use the RPC function first (most efficient)\n    const { data: conversationsData, error: conversationsError } = await supabase\n      .rpc('get_user_conversations', { user_id: userId });\n      \n    if (!conversationsError && conversationsData) {\n      // console.log('Got conversations from RPC:', conversationsData);\n      return conversationsData;\n    }\n    \n    console.error('Error fetching conversations with RPC, falling back to query:', conversationsError);\n    \n    // Fallback to querying directly\n    const { data: participationsData, error: participationsError } = await supabase\n      .from('conversation_participants')\n      .select(`\n        conversation_id,\n        unread_count,\n        conversations!inner(\n          id, \n          type, \n          show_id, \n          last_message_text, \n          last_message_timestamp\n        )\n      `)\n      .eq('user_id', userId);\n      \n    if (participationsError) {\n      console.error('Error fetching conversations', participationsError);\n      throw new Error('Failed to fetch conversations');\n    }\n    \n    if (!participationsData || participationsData.length === 0) {\n      return [];\n    }\n    \n    // Get all conversation IDs\n    const conversationIds = participationsData.map(p => p.conversation_id);\n    \n    // Get all participants for these conversations\n    const { data: allParticipantsData, error: allParticipantsError } = await supabase\n      .from('conversation_participants')\n      .select(`\n        conversation_id,\n        user_id,\n        display_name,\n        photo_url\n      `)\n      .in('conversation_id', conversationIds)\n      .neq('user_id', userId);\n      \n    if (allParticipantsError) {\n      console.error('Error fetching participants', allParticipantsError);\n      // Continue with partial data\n    }\n    \n    // Group participants by conversation\n    const participantsByConversation: Record<string, any[]> = {};\n    \n    if (allParticipantsData) {\n      allParticipantsData.forEach(participant => {\n        if (!participantsByConversation[participant.conversation_id]) {\n          participantsByConversation[participant.conversation_id] = [];\n        }\n        participantsByConversation[participant.conversation_id].push({\n          user_id: participant.user_id,\n          display_name: participant.display_name,\n          photo_url: participant.photo_url\n        });\n      });\n    }\n    \n    // Build conversations data structure\n    const conversations: Conversation[] = participationsData.map(p => {\n      const convo = p.conversations;\n      return {\n        id: convo.id,\n        type: convo.type,\n        show_id: convo.show_id,\n        participant_count: (participantsByConversation[convo.id]?.length || 0) + 1, // +1 for self\n        last_message_text: convo.last_message_text,\n        last_message_timestamp: convo.last_message_timestamp,\n        unread_count: p.unread_count || 0,\n        participants: participantsByConversation[convo.id] || []\n      };\n    });\n    \n    // Sort by most recent message\n    return conversations.sort((a, b) => {\n      const timeA = a.last_message_timestamp ? new Date(a.last_message_timestamp).getTime() : 0;\n      const timeB = b.last_message_timestamp ? new Date(b.last_message_timestamp).getTime() : 0;\n      return timeB - timeA;\n    });\n  } catch (error) {\n    console.error('Error in getConversations:', error);\n    throw error;\n  }\n};\n\n// ---------------------------------------------------------------------------\n//  Message functions\n// ---------------------------------------------------------------------------\n\n/**\n * Get messages for a specific conversation\n * @param conversationId The ID of the conversation\n * @returns Array of messages in the conversation\n */\nexport const getMessages = async (conversationId: string): Promise<Message[]> => {\n  try {\n    // Get messages with joined profiles\n    const { data, error } = await supabase\n      .from('messages')\n      .select(`\n        id,\n        conversation_id,\n        sender_id,\n        message_text,\n        created_at,\n        read_by_user_ids,\n        profiles!sender_profile:sender_id(\n          id,\n          username,\n          full_name,\n          avatar_url\n        )\n      `)\n      .eq('conversation_id', conversationId)\n      .order('created_at', { ascending: true });\n      \n    if (error) {\n      console.error('Error fetching messages:', error);\n      throw new Error('Failed to fetch messages');\n    }\n    \n    return data || [];\n  } catch (error) {\n    console.error('Error in getMessages:', error);\n    throw error;\n  }\n};\n\n/**\n * Send a new message in a conversation\n * @param senderId The ID of the sender\n * @param recipientId The ID of the recipient (for direct messages)\n * @param messageText The message content\n * @param conversationId The existing conversation ID (optional)\n * @returns The newly created message\n */\nexport const sendMessage = async (\n  senderId: string,\n  recipientId: string,\n  messageText: string,\n  conversationId?: string\n): Promise<Message> => {\n  try {\n    /* ------------------------------------------------------------------\n     * Role-based permission checks\n     * ------------------------------------------------------------------ */\n    if (!userRoleService.IS_TEST_MODE) {\n      const [senderRole, recipientRole] = await Promise.all([\n        userRoleService.getUserRole(senderId),\n        userRoleService.getUserRole(recipientId),\n      ]);\n\n      if (!senderRole || !recipientRole) {\n        throw new Error('Unable to determine user roles');\n      }\n\n      // If conversation already exists the sender might just be replying\n      // – apply `canReply` check in that case.\n      if (conversationId) {\n        if (!userRoleService.canReplyToMessage(senderRole)) {\n          throw new Error('Your role does not allow replying to messages');\n        }\n      } else {\n        // New DM – validate sender→recipient rule\n        if (\n          !userRoleService.canSendDirectMessage(\n            senderRole,\n            recipientRole,\n          )\n        ) {\n          throw new Error('You are not allowed to start a conversation with this user');\n        }\n      }\n    }\n\n    // Ensure we have a conversation ID\n    const finalConversationId = conversationId || await createDirectConversation(senderId, recipientId);\n    \n    // Insert the message\n    const { data: newMessage, error: messageError } = await supabase\n      .from('messages')\n      .insert({\n        conversation_id: finalConversationId,\n        sender_id: senderId,\n        message_text: messageText,\n        read_by_user_ids: [senderId] // Sender has automatically read their own message\n      })\n      .select()\n      .single();\n      \n    if (messageError) {\n      console.error('Error sending message:', messageError);\n      throw new Error('Failed to send message');\n    }\n    \n    // The conversation last message update and participant unread count\n    // update should happen via database triggers, but we'll update manually\n    // as a fallback in case the trigger fails\n    try {\n      // Update the conversation's last message info\n      await supabase\n        .from('conversations')\n        .update({\n          last_message_text: messageText,\n          last_message_timestamp: new Date().toISOString()\n        })\n        .eq('id', finalConversationId);\n        \n      // Increment unread count for recipients\n      await supabase\n        .from('conversation_participants')\n        .update({ unread_count: supabase.rpc('increment_unread') })\n        .eq('conversation_id', finalConversationId)\n        .neq('user_id', senderId);\n    } catch (updateError) {\n      console.error('Failed to update conversation metadata:', updateError);\n      // Continue since the message was sent successfully\n    }\n    \n    return newMessage;\n  } catch (error) {\n    console.error('Error in sendMessage:', error);\n    throw error;\n  }\n};\n\n/**\n * Send a message to a group conversation\n * @param senderId The ID of the sender\n * @param conversationId The ID of the group conversation\n * @param messageText The message content\n * @returns The newly created message\n */\nexport const sendGroupMessage = async (\n  senderId: string,\n  conversationId: string,\n  messageText: string\n): Promise<Message> => {\n  try {\n    // Check if the user is part of this conversation\n    const { data: participantCheck, error: participantCheckError } = await supabase\n      .from('conversation_participants')\n      .select('user_id')\n      .eq('conversation_id', conversationId)\n      .eq('user_id', senderId)\n      .single();\n    \n    if (participantCheckError || !participantCheck) {\n      throw new Error('You are not a participant in this conversation');\n    }\n    \n    // Insert the message\n    const { data: newMessage, error: messageError } = await supabase\n      .from('messages')\n      .insert({\n        conversation_id: conversationId,\n        sender_id: senderId,\n        message_text: messageText,\n        read_by_user_ids: [senderId] // Sender has automatically read their own message\n      })\n      .select()\n      .single();\n      \n    if (messageError) {\n      console.error('Error sending group message:', messageError);\n      throw new Error('Failed to send message');\n    }\n    \n    // Update the conversation's last message info\n    await supabase\n      .from('conversations')\n      .update({\n        last_message_text: messageText,\n        last_message_timestamp: new Date().toISOString()\n      })\n      .eq('id', conversationId);\n      \n    // Increment unread count for all other participants\n    await supabase\n      .from('conversation_participants')\n      .update({ unread_count: supabase.rpc('increment_unread') })\n      .eq('conversation_id', conversationId)\n      .neq('user_id', senderId);\n    \n    return newMessage;\n  } catch (error) {\n    console.error('Error in sendGroupMessage:', error);\n    throw error;\n  }\n};\n\n/**\n * Send a broadcast message to multiple recipients based on their roles.\n * This creates a group conversation and sends the initial message.\n * \n * @param params Object containing senderId, message, recipientRoles, and optional showId\n * @returns The conversation ID of the newly created group\n */\nexport const sendBroadcastMessage = async (\n  params: BroadcastMessageParams\n): Promise<string> => {\n  const { senderId, message, recipientRoles, showId } = params;\n  \n  try {\n    // ------------------------------------------------------------------\n    // 1. Call the edge function which performs all permission / quota work\n    // ------------------------------------------------------------------\n\n    const { data, error } = await supabase.functions.invoke(\n      'send-broadcast',\n      {\n        body: {\n          sender_id: senderId,\n          message,\n          recipient_roles: recipientRoles,\n          show_id: showId,\n          is_pre_show: params.isPreShow,\n        },\n      },\n    );\n\n    if (error) {\n      console.error('[messagingService/sendBroadcastMessage] edge-function error', error);\n      throw new Error(error.message || 'Failed to send broadcast message');\n    }\n\n    if (!data?.conversation_id) {\n      throw new Error('Unexpected response from broadcast service');\n    }\n\n    return data.conversation_id as string;\n  } catch (error) {\n    console.error('Error in sendBroadcastMessage:', error);\n    throw error;\n  }\n};\n\n// ---------------------------------------------------------------------------\n//  Moderation helpers\n// ---------------------------------------------------------------------------\n\n/**\n * Soft delete / moderate a message.  Only show organisers (their shows)\n * or admins can perform this action (enforced server-side).\n */\nexport const moderateMessage = async (\n  moderatorId: string,\n  messageId: string,\n  reason = 'Content violation',\n): Promise<boolean> => {\n  try {\n    const { data, error } = await supabase.rpc(\n      'moderate_delete_message',\n      {\n        p_message_id: messageId,\n        p_moderator_id: moderatorId,\n        p_reason: reason,\n      },\n    );\n    if (error) throw error;\n    return data as boolean;\n  } catch (err) {\n    console.error('[messagingService/moderateMessage]', err);\n    return false;\n  }\n};\n\n/**\n * Report a message as inappropriate.  Anyone in the conversation can report.\n */\nexport const reportMessage = async (\n  reporterId: string,\n  messageId: string,\n  reason: string,\n): Promise<boolean> => {\n  try {\n    const { data, error } = await supabase.rpc(\n      'report_message',\n      {\n        p_message_id: messageId,\n        p_reporter_id: reporterId,\n        p_reason: reason,\n      },\n    );\n    if (error) throw error;\n    return data as boolean;\n  } catch (err) {\n    console.error('[messagingService/reportMessage]', err);\n    return false;\n  }\n};\n\n/**\n * Mark a single message as read\n * @param messageId The ID of the message\n * @param userId The ID of the current user\n * @returns Boolean indicating success\n */\nexport const markMessageAsRead = async (\n  messageId: string,\n  userId: string\n): Promise<boolean> => {\n  try {\n    // Check if the user is already in read_by_user_ids\n    const { data: message } = await supabase\n      .from('messages')\n      .select('read_by_user_ids')\n      .eq('id', messageId)\n      .single();\n      \n    if (!message) {\n      return false;\n    }\n    \n    if (message.read_by_user_ids && message.read_by_user_ids.includes(userId)) {\n      // Already marked as read\n      return true;\n    }\n    \n    // Update read_by_user_ids\n    const { error } = await supabase\n      .from('messages')\n      .update({\n        read_by_user_ids: [...(message.read_by_user_ids || []), userId]\n      })\n      .eq('id', messageId);\n      \n    if (error) {\n      console.error('Error marking message as read:', error);\n      return false;\n    }\n    \n    // Try to update unread count in conversation_participants\n    try {\n      const { data: msgData } = await supabase\n        .from('messages')\n        .select('conversation_id')\n        .eq('id', messageId)\n        .single();\n        \n      if (msgData) {\n        await decrementUnreadCount(msgData.conversation_id, userId);\n      }\n    } catch (error) {\n      console.error('Error updating unread count:', error);\n      // Continue since the message was marked as read\n    }\n    \n    return true;\n  } catch (error) {\n    console.error('Error in markMessageAsRead:', error);\n    return false;\n  }\n};\n\n/**\n * Mark all messages in a conversation as read\n * @param conversationId The ID of the conversation\n * @param userId The ID of the current user\n * @returns Number of messages marked as read\n */\nexport const markConversationAsRead = async (\n  conversationId: string,\n  userId: string\n): Promise<number> => {\n  try {\n    // First get all unread messages in the conversation\n    const { data: messages } = await supabase\n      .from('messages')\n      .select('id, read_by_user_ids')\n      .eq('conversation_id', conversationId)\n      .not('read_by_user_ids', 'cs', `{${userId}}`);\n      \n    if (!messages || messages.length === 0) {\n      return 0;\n    }\n    \n    // Update each message\n    let updatedCount = 0;\n    \n    for (const message of messages) {\n      const { error } = await supabase\n        .from('messages')\n        .update({\n          read_by_user_ids: [...(message.read_by_user_ids || []), userId]\n        })\n        .eq('id', message.id);\n        \n      if (!error) {\n        updatedCount++;\n      }\n    }\n    \n    // Reset unread count in conversation_participants\n    if (updatedCount > 0) {\n      await supabase\n        .from('conversation_participants')\n        .update({ unread_count: 0 })\n        .eq('conversation_id', conversationId)\n        .eq('user_id', userId);\n    }\n    \n    return updatedCount;\n  } catch (error) {\n    console.error('Error in markConversationAsRead:', error);\n    throw error;\n  }\n};\n\n/**\n * Helper function to decrement unread count for a user in a conversation\n */\nconst decrementUnreadCount = async (conversationId: string, userId: string): Promise<void> => {\n  try {\n    await supabase\n      .from('conversation_participants')\n      .update({ \n        unread_count: supabase.rpc('decrement_unread') \n      })\n      .eq('conversation_id', conversationId)\n      .eq('user_id', userId);\n  } catch (error) {\n    console.error('Error decrementing unread count:', error);\n  }\n};\n\n/**\n * Subscribe to realtime messages for a conversation\n * @param conversationId The conversation to monitor\n * @param onNewMessage Callback function when new messages arrive\n * @returns Supabase channel subscription that caller should unsubscribe from\n */\nexport const subscribeToMessages = (\n  conversationId: string,\n  onNewMessage: (message: Message) => void\n) => {\n  const channel = supabase\n    .channel(`messages:${conversationId}`)\n    .on('postgres_changes', {\n      event: 'INSERT',\n      schema: 'public',\n      table: 'messages',\n      filter: `conversation_id=eq.${conversationId}`\n    }, (payload) => {\n      onNewMessage(payload.new as unknown as Message);\n    })\n    .subscribe();\n    \n  return channel;\n};\n\n/**\n * Get total unread message count across all conversations\n * @param userId User ID to check for\n * @returns Total number of unread messages\n */\nexport const getTotalUnreadCount = async (userId: string): Promise<number> => {\n  try {\n    const { data, error } = await supabase\n      .from('conversation_participants')\n      .select('unread_count')\n      .eq('user_id', userId);\n      \n    if (error) {\n      console.error('Error fetching unread count:', error);\n      return 0;\n    }\n    \n    return data.reduce((total, item) => total + (item.unread_count || 0), 0);\n  } catch (error) {\n    console.error('Error in getTotalUnreadCount:', error);\n    return 0;\n  }\n};\n"],"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","ignoreList":[]}