{"version":3,"names":["cov_ok4zfbnid","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","supabase_1","require","refreshUserSession","error","supabase","auth","refreshSession","console","success","err","exports","isSessionValid","data","getSession","session","getCurrentUserId","user","id"],"sources":["/Users/kevin/card-show-finder/src/services/sessionService.ts"],"sourcesContent":["// src/services/sessionService.ts\n\nimport { supabase } from '../supabase';\n\n/**\n * Forces Supabase to refresh the current JWT/session so that any recent\n * changes to the user's profile (e.g., role upgrades) are immediately\n * reflected in `supabase.auth`.\n * \n * This function is extracted to its own service to avoid circular dependencies\n * between AuthContext, userRoleService, and supabaseAuthService.\n */\nexport const refreshUserSession = async (): Promise<{ success: boolean; error?: any }> => {\n  try {\n    const { error } = await supabase.auth.refreshSession();\n    if (error) {\n      console.error('Error refreshing Supabase session:', error);\n      return { success: false, error };\n    }\n    return { success: true };\n  } catch (err) {\n    console.error('Unexpected error in refreshUserSession:', err);\n    return { success: false, error: err };\n  }\n};\n\n/**\n * Checks if the current user session is valid\n * @returns Boolean indicating if the session is valid\n */\nexport const isSessionValid = async (): Promise<boolean> => {\n  try {\n    const { data } = await supabase.auth.getSession();\n    return !!data.session;\n  } catch (err) {\n    console.error('Error checking session validity:', err);\n    return false;\n  }\n};\n\n/**\n * Gets the current user ID from the session\n * @returns User ID string or null if not authenticated\n */\nexport const getCurrentUserId = async (): Promise<string | null> => {\n  try {\n    const { data } = await supabase.auth.getSession();\n    return data.session?.user?.id || null;\n  } catch (err) {\n    console.error('Error getting current user ID:', err);\n    return null;\n  }\n};\n"],"mappings":";;AAAA;AAAA;AAAA,SAAAA,cAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,I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","ignoreList":[]}