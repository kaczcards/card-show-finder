bbf4ce80e310a55aa4ceeb428fa65737
"use strict";

// src/services/sessionService.ts
/* istanbul ignore next */
function cov_ok4zfbnid() {
  var path = "/Users/kevin/card-show-finder/src/services/sessionService.ts";
  var hash = "c42c15a1a58da5797921b7d7cc7a11bc3c0d8635";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kevin/card-show-finder/src/services/sessionService.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "1": {
        start: {
          line: 4,
          column: 0
        },
        end: {
          line: 4,
          column: 88
        }
      },
      "2": {
        start: {
          line: 5,
          column: 19
        },
        end: {
          line: 5,
          column: 41
        }
      },
      "3": {
        start: {
          line: 14,
          column: 27
        },
        end: {
          line: 27,
          column: 1
        }
      },
      "4": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 26,
          column: 5
        }
      },
      "5": {
        start: {
          line: 16,
          column: 26
        },
        end: {
          line: 16,
          column: 73
        }
      },
      "6": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 20,
          column: 9
        }
      },
      "7": {
        start: {
          line: 18,
          column: 12
        },
        end: {
          line: 18,
          column: 71
        }
      },
      "8": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 19,
          column: 45
        }
      },
      "9": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 33
        }
      },
      "10": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 70
        }
      },
      "11": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 46
        }
      },
      "12": {
        start: {
          line: 28,
          column: 0
        },
        end: {
          line: 28,
          column: 48
        }
      },
      "13": {
        start: {
          line: 33,
          column: 23
        },
        end: {
          line: 42,
          column: 1
        }
      },
      "14": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 41,
          column: 5
        }
      },
      "15": {
        start: {
          line: 35,
          column: 25
        },
        end: {
          line: 35,
          column: 68
        }
      },
      "16": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 30
        }
      },
      "17": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 63
        }
      },
      "18": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 21
        }
      },
      "19": {
        start: {
          line: 43,
          column: 0
        },
        end: {
          line: 43,
          column: 40
        }
      },
      "20": {
        start: {
          line: 48,
          column: 25
        },
        end: {
          line: 57,
          column: 1
        }
      },
      "21": {
        start: {
          line: 49,
          column: 4
        },
        end: {
          line: 56,
          column: 5
        }
      },
      "22": {
        start: {
          line: 50,
          column: 25
        },
        end: {
          line: 50,
          column: 68
        }
      },
      "23": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 46
        }
      },
      "24": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 54,
          column: 61
        }
      },
      "25": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 20
        }
      },
      "26": {
        start: {
          line: 58,
          column: 0
        },
        end: {
          line: 58,
          column: 44
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 14,
            column: 27
          },
          end: {
            line: 14,
            column: 28
          }
        },
        loc: {
          start: {
            line: 14,
            column: 39
          },
          end: {
            line: 27,
            column: 1
          }
        },
        line: 14
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 33,
            column: 23
          },
          end: {
            line: 33,
            column: 24
          }
        },
        loc: {
          start: {
            line: 33,
            column: 35
          },
          end: {
            line: 42,
            column: 1
          }
        },
        line: 33
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 48,
            column: 25
          },
          end: {
            line: 48,
            column: 26
          }
        },
        loc: {
          start: {
            line: 48,
            column: 37
          },
          end: {
            line: 57,
            column: 1
          }
        },
        line: 48
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 20,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 20,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 17
      },
      "1": {
        loc: {
          start: {
            line: 51,
            column: 15
          },
          end: {
            line: 51,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 51,
            column: 15
          },
          end: {
            line: 51,
            column: 37
          }
        }, {
          start: {
            line: 51,
            column: 41
          },
          end: {
            line: 51,
            column: 45
          }
        }],
        line: 51
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/kevin/card-show-finder/src/services/sessionService.ts",
      mappings: ";AAAA,iCAAiC;;;AAEjC,0CAAuC;AAEvC;;;;;;;GAOG;AACI,MAAM,kBAAkB,GAAG,KAAK,IAAgD,EAAE;IACvF,IAAI,CAAC;QACH,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,mBAAQ,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;QACvD,IAAI,KAAK,EAAE,CAAC;YACV,OAAO,CAAC,KAAK,CAAC,oCAAoC,EAAE,KAAK,CAAC,CAAC;YAC3D,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;QACnC,CAAC;QACD,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;IAC3B,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,OAAO,CAAC,KAAK,CAAC,yCAAyC,EAAE,GAAG,CAAC,CAAC;QAC9D,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC;IACxC,CAAC;AACH,CAAC,CAAC;AAZW,QAAA,kBAAkB,sBAY7B;AAEF;;;GAGG;AACI,MAAM,cAAc,GAAG,KAAK,IAAsB,EAAE;IACzD,IAAI,CAAC;QACH,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,mBAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;QAClD,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;IACxB,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,OAAO,CAAC,KAAK,CAAC,kCAAkC,EAAE,GAAG,CAAC,CAAC;QACvD,OAAO,KAAK,CAAC;IACf,CAAC;AACH,CAAC,CAAC;AARW,QAAA,cAAc,kBAQzB;AAEF;;;GAGG;AACI,MAAM,gBAAgB,GAAG,KAAK,IAA4B,EAAE;IACjE,IAAI,CAAC;QACH,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,mBAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;QAClD,OAAO,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,EAAE,IAAI,IAAI,CAAC;IACxC,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,OAAO,CAAC,KAAK,CAAC,gCAAgC,EAAE,GAAG,CAAC,CAAC;QACrD,OAAO,IAAI,CAAC;IACd,CAAC;AACH,CAAC,CAAC;AARW,QAAA,gBAAgB,oBAQ3B",
      names: [],
      sources: ["/Users/kevin/card-show-finder/src/services/sessionService.ts"],
      sourcesContent: ["// src/services/sessionService.ts\n\nimport { supabase } from '../supabase';\n\n/**\n * Forces Supabase to refresh the current JWT/session so that any recent\n * changes to the user's profile (e.g., role upgrades) are immediately\n * reflected in `supabase.auth`.\n * \n * This function is extracted to its own service to avoid circular dependencies\n * between AuthContext, userRoleService, and supabaseAuthService.\n */\nexport const refreshUserSession = async (): Promise<{ success: boolean; error?: any }> => {\n  try {\n    const { error } = await supabase.auth.refreshSession();\n    if (error) {\n      console.error('Error refreshing Supabase session:', error);\n      return { success: false, error };\n    }\n    return { success: true };\n  } catch (err) {\n    console.error('Unexpected error in refreshUserSession:', err);\n    return { success: false, error: err };\n  }\n};\n\n/**\n * Checks if the current user session is valid\n * @returns Boolean indicating if the session is valid\n */\nexport const isSessionValid = async (): Promise<boolean> => {\n  try {\n    const { data } = await supabase.auth.getSession();\n    return !!data.session;\n  } catch (err) {\n    console.error('Error checking session validity:', err);\n    return false;\n  }\n};\n\n/**\n * Gets the current user ID from the session\n * @returns User ID string or null if not authenticated\n */\nexport const getCurrentUserId = async (): Promise<string | null> => {\n  try {\n    const { data } = await supabase.auth.getSession();\n    return data.session?.user?.id || null;\n  } catch (err) {\n    console.error('Error getting current user ID:', err);\n    return null;\n  }\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c42c15a1a58da5797921b7d7cc7a11bc3c0d8635"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_ok4zfbnid = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_ok4zfbnid();
cov_ok4zfbnid().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_ok4zfbnid().s[1]++;
exports.getCurrentUserId = exports.isSessionValid = exports.refreshUserSession = void 0;
const supabase_1 =
/* istanbul ignore next */
(cov_ok4zfbnid().s[2]++, require("../supabase"));
/**
 * Forces Supabase to refresh the current JWT/session so that any recent
 * changes to the user's profile (e.g., role upgrades) are immediately
 * reflected in `supabase.auth`.
 *
 * This function is extracted to its own service to avoid circular dependencies
 * between AuthContext, userRoleService, and supabaseAuthService.
 */
/* istanbul ignore next */
cov_ok4zfbnid().s[3]++;
const refreshUserSession = async () => {
  /* istanbul ignore next */
  cov_ok4zfbnid().f[0]++;
  cov_ok4zfbnid().s[4]++;
  try {
    const {
      error
    } =
    /* istanbul ignore next */
    (cov_ok4zfbnid().s[5]++, await supabase_1.supabase.auth.refreshSession());
    /* istanbul ignore next */
    cov_ok4zfbnid().s[6]++;
    if (error) {
      /* istanbul ignore next */
      cov_ok4zfbnid().b[0][0]++;
      cov_ok4zfbnid().s[7]++;
      console.error('Error refreshing Supabase session:', error);
      /* istanbul ignore next */
      cov_ok4zfbnid().s[8]++;
      return {
        success: false,
        error
      };
    } else
    /* istanbul ignore next */
    {
      cov_ok4zfbnid().b[0][1]++;
    }
    cov_ok4zfbnid().s[9]++;
    return {
      success: true
    };
  } catch (err) {
    /* istanbul ignore next */
    cov_ok4zfbnid().s[10]++;
    console.error('Unexpected error in refreshUserSession:', err);
    /* istanbul ignore next */
    cov_ok4zfbnid().s[11]++;
    return {
      success: false,
      error: err
    };
  }
};
/* istanbul ignore next */
cov_ok4zfbnid().s[12]++;
exports.refreshUserSession = refreshUserSession;
/**
 * Checks if the current user session is valid
 * @returns Boolean indicating if the session is valid
 */
/* istanbul ignore next */
cov_ok4zfbnid().s[13]++;
const isSessionValid = async () => {
  /* istanbul ignore next */
  cov_ok4zfbnid().f[1]++;
  cov_ok4zfbnid().s[14]++;
  try {
    const {
      data
    } =
    /* istanbul ignore next */
    (cov_ok4zfbnid().s[15]++, await supabase_1.supabase.auth.getSession());
    /* istanbul ignore next */
    cov_ok4zfbnid().s[16]++;
    return !!data.session;
  } catch (err) {
    /* istanbul ignore next */
    cov_ok4zfbnid().s[17]++;
    console.error('Error checking session validity:', err);
    /* istanbul ignore next */
    cov_ok4zfbnid().s[18]++;
    return false;
  }
};
/* istanbul ignore next */
cov_ok4zfbnid().s[19]++;
exports.isSessionValid = isSessionValid;
/**
 * Gets the current user ID from the session
 * @returns User ID string or null if not authenticated
 */
/* istanbul ignore next */
cov_ok4zfbnid().s[20]++;
const getCurrentUserId = async () => {
  /* istanbul ignore next */
  cov_ok4zfbnid().f[2]++;
  cov_ok4zfbnid().s[21]++;
  try {
    const {
      data
    } =
    /* istanbul ignore next */
    (cov_ok4zfbnid().s[22]++, await supabase_1.supabase.auth.getSession());
    /* istanbul ignore next */
    cov_ok4zfbnid().s[23]++;
    return /* istanbul ignore next */(cov_ok4zfbnid().b[1][0]++, data.session?.user?.id) ||
    /* istanbul ignore next */
    (cov_ok4zfbnid().b[1][1]++, null);
  } catch (err) {
    /* istanbul ignore next */
    cov_ok4zfbnid().s[24]++;
    console.error('Error getting current user ID:', err);
    /* istanbul ignore next */
    cov_ok4zfbnid().s[25]++;
    return null;
  }
};
/* istanbul ignore next */
cov_ok4zfbnid().s[26]++;
exports.getCurrentUserId = getCurrentUserId;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,