6cff65b101fa67e29a332b6940b4fa9d
function cov_1fs1ma1w45() {
  var path = "/Users/kevin/card-show-finder/src/components/ui/ErrorDisplay.tsx";
  var hash = "c457df4d0a737883cc456808c1369e4cc4dbd93e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kevin/card-show-finder/src/components/ui/ErrorDisplay.tsx",
    statementMap: {
      "0": {
        start: {
          line: 45,
          column: 50
        },
        end: {
          line: 110,
          column: 1
        }
      },
      "1": {
        start: {
          line: 54,
          column: 20
        },
        end: {
          line: 54,
          column: 30
        }
      },
      "2": {
        start: {
          line: 65,
          column: 32
        },
        end: {
          line: 78,
          column: 3
        }
      },
      "3": {
        start: {
          line: 66,
          column: 24
        },
        end: {
          line: 66,
          column: 59
        }
      },
      "4": {
        start: {
          line: 68,
          column: 4
        },
        end: {
          line: 77,
          column: 6
        }
      },
      "5": {
        start: {
          line: 83,
          column: 36
        },
        end: {
          line: 106,
          column: 3
        }
      },
      "6": {
        start: {
          line: 84,
          column: 28
        },
        end: {
          line: 84,
          column: 67
        }
      },
      "7": {
        start: {
          line: 86,
          column: 4
        },
        end: {
          line: 105,
          column: 6
        }
      },
      "8": {
        start: {
          line: 109,
          column: 2
        },
        end: {
          line: 109,
          column: 71
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 45,
            column: 50
          },
          end: {
            line: 45,
            column: 51
          }
        },
        loc: {
          start: {
            line: 52,
            column: 6
          },
          end: {
            line: 110,
            column: 1
          }
        },
        line: 52
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 65,
            column: 32
          },
          end: {
            line: 65,
            column: 33
          }
        },
        loc: {
          start: {
            line: 65,
            column: 38
          },
          end: {
            line: 78,
            column: 3
          }
        },
        line: 65
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 83,
            column: 36
          },
          end: {
            line: 83,
            column: 37
          }
        },
        loc: {
          start: {
            line: 83,
            column: 42
          },
          end: {
            line: 106,
            column: 3
          }
        },
        line: 83
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 46,
            column: 2
          },
          end: {
            line: 46,
            column: 17
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 46,
            column: 9
          },
          end: {
            line: 46,
            column: 17
          }
        }],
        line: 46
      },
      "1": {
        loc: {
          start: {
            line: 47,
            column: 2
          },
          end: {
            line: 47,
            column: 17
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 47,
            column: 10
          },
          end: {
            line: 47,
            column: 17
          }
        }],
        line: 47
      },
      "2": {
        loc: {
          start: {
            line: 50,
            column: 2
          },
          end: {
            line: 50,
            column: 21
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 50,
            column: 14
          },
          end: {
            line: 50,
            column: 21
          }
        }],
        line: 50
      },
      "3": {
        loc: {
          start: {
            line: 96,
            column: 9
          },
          end: {
            line: 103,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 96,
            column: 9
          },
          end: {
            line: 96,
            column: 16
          }
        }, {
          start: {
            line: 97,
            column: 10
          },
          end: {
            line: 102,
            column: 29
          }
        }],
        line: 96
      },
      "4": {
        loc: {
          start: {
            line: 109,
            column: 9
          },
          end: {
            line: 109,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 109,
            column: 33
          },
          end: {
            line: 109,
            column: 52
          }
        }, {
          start: {
            line: 109,
            column: 55
          },
          end: {
            line: 109,
            column: 70
          }
        }],
        line: 109
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0],
      "1": [0],
      "2": [0],
      "3": [0, 0],
      "4": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c457df4d0a737883cc456808c1369e4cc4dbd93e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_1fs1ma1w45 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1fs1ma1w45();
import React from 'react';
import { View, Text, TouchableOpacity } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useTheme } from '../../contexts/ThemeContext';
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
cov_1fs1ma1w45().s[0]++;
var ErrorDisplay = function ErrorDisplay(_ref) {
  var _ref$type = _ref.type,
    type = _ref$type === void 0 ? (cov_1fs1ma1w45().b[0][0]++, 'inline') : _ref$type,
    _ref$title = _ref.title,
    title = _ref$title === void 0 ? (cov_1fs1ma1w45().b[1][0]++, 'Error') : _ref$title,
    message = _ref.message,
    onRetry = _ref.onRetry,
    _ref$retryText = _ref.retryText,
    retryText = _ref$retryText === void 0 ? (cov_1fs1ma1w45().b[2][0]++, 'Retry') : _ref$retryText,
    style = _ref.style;
  cov_1fs1ma1w45().f[0]++;
  var _ref2 = (cov_1fs1ma1w45().s[1]++, useTheme()),
    theme = _ref2.theme;
  cov_1fs1ma1w45().s[2]++;
  var InlineError = function InlineError() {
    cov_1fs1ma1w45().f[1]++;
    var inlineStyle = (cov_1fs1ma1w45().s[3]++, theme.components.errorStates.inline);
    cov_1fs1ma1w45().s[4]++;
    return _jsxs(View, {
      style: [inlineStyle.container, style],
      children: [_jsx(Ionicons, {
        name: "alert-circle",
        size: 20,
        style: inlineStyle.icon
      }), _jsx(Text, {
        style: inlineStyle.text,
        children: message
      })]
    });
  };
  cov_1fs1ma1w45().s[5]++;
  var FullScreenError = function FullScreenError() {
    cov_1fs1ma1w45().f[2]++;
    var fullScreenStyle = (cov_1fs1ma1w45().s[6]++, theme.components.errorStates.fullScreen);
    cov_1fs1ma1w45().s[7]++;
    return _jsxs(View, {
      style: [fullScreenStyle.container, style],
      children: [_jsx(Ionicons, {
        name: "alert-circle-outline",
        size: 60,
        style: fullScreenStyle.icon
      }), _jsx(Text, {
        style: fullScreenStyle.title,
        children: title
      }), _jsx(Text, {
        style: fullScreenStyle.message,
        children: message
      }), (cov_1fs1ma1w45().b[3][0]++, onRetry) && (cov_1fs1ma1w45().b[3][1]++, _jsx(TouchableOpacity, {
        style: fullScreenStyle.button.container,
        onPress: onRetry,
        children: _jsx(Text, {
          style: fullScreenStyle.button.text,
          children: retryText
        })
      }))]
    });
  };
  cov_1fs1ma1w45().s[8]++;
  return type === 'fullScreen' ? (cov_1fs1ma1w45().b[4][0]++, _jsx(FullScreenError, {})) : (cov_1fs1ma1w45().b[4][1]++, _jsx(InlineError, {}));
};
export default ErrorDisplay;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,