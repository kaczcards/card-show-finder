8478434ddf613e5aa0fd38cfb7a3756f
"use strict";

/* istanbul ignore next */
function cov_15z3stinmo() {
  var path = "/Users/kevin/card-show-finder/src/services/subscriptionService.ts";
  var hash = "5f05b20bc6dcb3da70f0bda50faa10094191a613";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kevin/card-show-finder/src/services/subscriptionService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 434
        }
      },
      "2": {
        start: {
          line: 5,
          column: 19
        },
        end: {
          line: 5,
          column: 41
        }
      },
      "3": {
        start: {
          line: 6,
          column: 31
        },
        end: {
          line: 6,
          column: 64
        }
      },
      "4": {
        start: {
          line: 7,
          column: 28
        },
        end: {
          line: 7,
          column: 58
        }
      },
      "5": {
        start: {
          line: 13,
          column: 30
        },
        end: {
          line: 28,
          column: 1
        }
      },
      "6": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 15,
          column: 21
        }
      },
      "7": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 21
        }
      },
      "8": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 18,
          column: 21
        }
      },
      "9": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 21
        }
      },
      "10": {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 21,
          column: 21
        }
      },
      "11": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 21
        }
      },
      "12": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 26,
          column: 5
        }
      },
      "13": {
        start: {
          line: 24,
          column: 27
        },
        end: {
          line: 24,
          column: 60
        }
      },
      "14": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 39
        }
      },
      "15": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 27,
          column: 17
        }
      },
      "16": {
        start: {
          line: 29,
          column: 0
        },
        end: {
          line: 29,
          column: 54
        }
      },
      "17": {
        start: {
          line: 35,
          column: 24
        },
        end: {
          line: 51,
          column: 1
        }
      },
      "18": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 37,
          column: 21
        }
      },
      "19": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 21
        }
      },
      "20": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 40,
          column: 20
        }
      },
      "21": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 20
        }
      },
      "22": {
        start: {
          line: 44,
          column: 4
        },
        end: {
          line: 49,
          column: 5
        }
      },
      "23": {
        start: {
          line: 45,
          column: 30
        },
        end: {
          line: 45,
          column: 77
        }
      },
      "24": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 48,
          column: 9
        }
      },
      "25": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 47,
          column: 24
        }
      },
      "26": {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 50,
          column: 17
        }
      },
      "27": {
        start: {
          line: 52,
          column: 0
        },
        end: {
          line: 52,
          column: 42
        }
      },
      "28": {
        start: {
          line: 58,
          column: 37
        },
        end: {
          line: 71,
          column: 1
        }
      },
      "29": {
        start: {
          line: 59,
          column: 4
        },
        end: {
          line: 61,
          column: 5
        }
      },
      "30": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 60,
          column: 20
        }
      },
      "31": {
        start: {
          line: 62,
          column: 16
        },
        end: {
          line: 62,
          column: 26
        }
      },
      "32": {
        start: {
          line: 63,
          column: 23
        },
        end: {
          line: 63,
          column: 56
        }
      },
      "33": {
        start: {
          line: 64,
          column: 19
        },
        end: {
          line: 64,
          column: 55
        }
      },
      "34": {
        start: {
          line: 66,
          column: 4
        },
        end: {
          line: 67,
          column: 37
        }
      },
      "35": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 37
        }
      },
      "36": {
        start: {
          line: 68,
          column: 17
        },
        end: {
          line: 68,
          column: 59
        }
      },
      "37": {
        start: {
          line: 69,
          column: 18
        },
        end: {
          line: 69,
          column: 81
        }
      },
      "38": {
        start: {
          line: 70,
          column: 4
        },
        end: {
          line: 70,
          column: 27
        }
      },
      "39": {
        start: {
          line: 72,
          column: 0
        },
        end: {
          line: 72,
          column: 68
        }
      },
      "40": {
        start: {
          line: 78,
          column: 30
        },
        end: {
          line: 88,
          column: 1
        }
      },
      "41": {
        start: {
          line: 79,
          column: 4
        },
        end: {
          line: 80,
          column: 21
        }
      },
      "42": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 21
        }
      },
      "43": {
        start: {
          line: 81,
          column: 4
        },
        end: {
          line: 82,
          column: 20
        }
      },
      "44": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 20
        }
      },
      "45": {
        start: {
          line: 83,
          column: 4
        },
        end: {
          line: 86,
          column: 5
        }
      },
      "46": {
        start: {
          line: 84,
          column: 27
        },
        end: {
          line: 84,
          column: 60
        }
      },
      "47": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 85,
          column: 40
        }
      },
      "48": {
        start: {
          line: 87,
          column: 4
        },
        end: {
          line: 87,
          column: 17
        }
      },
      "49": {
        start: {
          line: 89,
          column: 0
        },
        end: {
          line: 89,
          column: 54
        }
      },
      "50": {
        start: {
          line: 95,
          column: 31
        },
        end: {
          line: 120,
          column: 1
        }
      },
      "51": {
        start: {
          line: 96,
          column: 4
        },
        end: {
          line: 98,
          column: 5
        }
      },
      "52": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 97,
          column: 20
        }
      },
      "53": {
        start: {
          line: 100,
          column: 21
        },
        end: {
          line: 102,
          column: 60
        }
      },
      "54": {
        start: {
          line: 104,
          column: 17
        },
        end: {
          line: 104,
          column: 160
        }
      },
      "55": {
        start: {
          line: 104,
          column: 66
        },
        end: {
          line: 104,
          column: 151
        }
      },
      "56": {
        start: {
          line: 106,
          column: 26
        },
        end: {
          line: 106,
          column: 60
        }
      },
      "57": {
        start: {
          line: 108,
          column: 19
        },
        end: {
          line: 109,
          column: 68
        }
      },
      "58": {
        start: {
          line: 110,
          column: 4
        },
        end: {
          line: 119,
          column: 6
        }
      },
      "59": {
        start: {
          line: 121,
          column: 0
        },
        end: {
          line: 121,
          column: 56
        }
      },
      "60": {
        start: {
          line: 131,
          column: 37
        },
        end: {
          line: 211,
          column: 1
        }
      },
      "61": {
        start: {
          line: 132,
          column: 4
        },
        end: {
          line: 210,
          column: 5
        }
      },
      "62": {
        start: {
          line: 134,
          column: 21
        },
        end: {
          line: 134,
          column: 86
        }
      },
      "63": {
        start: {
          line: 134,
          column: 70
        },
        end: {
          line: 134,
          column: 85
        }
      },
      "64": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 140,
          column: 9
        }
      },
      "65": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 139,
          column: 14
        }
      },
      "66": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 172,
          column: 9
        }
      },
      "67": {
        start: {
          line: 145,
          column: 33
        },
        end: {
          line: 145,
          column: 175
        }
      },
      "68": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 151,
          column: 13
        }
      },
      "69": {
        start: {
          line: 147,
          column: 16
        },
        end: {
          line: 150,
          column: 18
        }
      },
      "70": {
        start: {
          line: 156,
          column: 58
        },
        end: {
          line: 161,
          column: 25
        }
      },
      "71": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 164,
          column: 13
        }
      },
      "72": {
        start: {
          line: 163,
          column: 16
        },
        end: {
          line: 163,
          column: 77
        }
      },
      "73": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 171,
          column: 14
        }
      },
      "74": {
        start: {
          line: 177,
          column: 34
        },
        end: {
          line: 177,
          column: 88
        }
      },
      "75": {
        start: {
          line: 179,
          column: 27
        },
        end: {
          line: 179,
          column: 77
        }
      },
      "76": {
        start: {
          line: 181,
          column: 26
        },
        end: {
          line: 190,
          column: 29
        }
      },
      "77": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 197,
          column: 9
        }
      },
      "78": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 192,
          column: 72
        }
      },
      "79": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 196,
          column: 14
        }
      },
      "80": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 202,
          column: 10
        }
      },
      "81": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 205,
          column: 72
        }
      },
      "82": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 209,
          column: 10
        }
      },
      "83": {
        start: {
          line: 212,
          column: 0
        },
        end: {
          line: 212,
          column: 68
        }
      },
      "84": {
        start: {
          line: 219,
          column: 26
        },
        end: {
          line: 222,
          column: 1
        }
      },
      "85": {
        start: {
          line: 221,
          column: 4
        },
        end: {
          line: 221,
          column: 69
        }
      },
      "86": {
        start: {
          line: 223,
          column: 0
        },
        end: {
          line: 223,
          column: 46
        }
      },
      "87": {
        start: {
          line: 229,
          column: 27
        },
        end: {
          line: 264,
          column: 1
        }
      },
      "88": {
        start: {
          line: 230,
          column: 4
        },
        end: {
          line: 263,
          column: 5
        }
      },
      "89": {
        start: {
          line: 232,
          column: 54
        },
        end: {
          line: 236,
          column: 21
        }
      },
      "90": {
        start: {
          line: 237,
          column: 8
        },
        end: {
          line: 239,
          column: 9
        }
      },
      "91": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 238,
          column: 29
        }
      },
      "92": {
        start: {
          line: 242,
          column: 26
        },
        end: {
          line: 251,
          column: 29
        }
      },
      "93": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 254,
          column: 9
        }
      },
      "94": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 253,
          column: 24
        }
      },
      "95": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 255,
          column: 33
        }
      },
      "96": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 258,
          column: 63
        }
      },
      "97": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 262,
          column: 10
        }
      },
      "98": {
        start: {
          line: 265,
          column: 0
        },
        end: {
          line: 265,
          column: 48
        }
      },
      "99": {
        start: {
          line: 273,
          column: 41
        },
        end: {
          line: 315,
          column: 1
        }
      },
      "100": {
        start: {
          line: 274,
          column: 4
        },
        end: {
          line: 314,
          column: 5
        }
      },
      "101": {
        start: {
          line: 276,
          column: 54
        },
        end: {
          line: 280,
          column: 21
        }
      },
      "102": {
        start: {
          line: 281,
          column: 8
        },
        end: {
          line: 283,
          column: 9
        }
      },
      "103": {
        start: {
          line: 282,
          column: 12
        },
        end: {
          line: 282,
          column: 25
        }
      },
      "104": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 289,
          column: 9
        }
      },
      "105": {
        start: {
          line: 288,
          column: 12
        },
        end: {
          line: 288,
          column: 25
        }
      },
      "106": {
        start: {
          line: 291,
          column: 8
        },
        end: {
          line: 308,
          column: 9
        }
      },
      "107": {
        start: {
          line: 292,
          column: 31
        },
        end: {
          line: 292,
          column: 69
        }
      },
      "108": {
        start: {
          line: 293,
          column: 24
        },
        end: {
          line: 293,
          column: 34
        }
      },
      "109": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 307,
          column: 13
        }
      },
      "110": {
        start: {
          line: 296,
          column: 34
        },
        end: {
          line: 303,
          column: 37
        }
      },
      "111": {
        start: {
          line: 304,
          column: 16
        },
        end: {
          line: 306,
          column: 17
        }
      },
      "112": {
        start: {
          line: 305,
          column: 20
        },
        end: {
          line: 305,
          column: 32
        }
      },
      "113": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 309,
          column: 21
        }
      },
      "114": {
        start: {
          line: 312,
          column: 8
        },
        end: {
          line: 312,
          column: 68
        }
      },
      "115": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 313,
          column: 21
        }
      },
      "116": {
        start: {
          line: 316,
          column: 0
        },
        end: {
          line: 316,
          column: 76
        }
      },
      "117": {
        start: {
          line: 322,
          column: 26
        },
        end: {
          line: 327,
          column: 1
        }
      },
      "118": {
        start: {
          line: 323,
          column: 21
        },
        end: {
          line: 325,
          column: 60
        }
      },
      "119": {
        start: {
          line: 326,
          column: 4
        },
        end: {
          line: 326,
          column: 89
        }
      },
      "120": {
        start: {
          line: 326,
          column: 65
        },
        end: {
          line: 326,
          column: 87
        }
      },
      "121": {
        start: {
          line: 328,
          column: 0
        },
        end: {
          line: 328,
          column: 46
        }
      },
      "122": {
        start: {
          line: 334,
          column: 25
        },
        end: {
          line: 343,
          column: 1
        }
      },
      "123": {
        start: {
          line: 335,
          column: 4
        },
        end: {
          line: 336,
          column: 36
        }
      },
      "124": {
        start: {
          line: 336,
          column: 8
        },
        end: {
          line: 336,
          column: 36
        }
      },
      "125": {
        start: {
          line: 337,
          column: 17
        },
        end: {
          line: 337,
          column: 83
        }
      },
      "126": {
        start: {
          line: 338,
          column: 4
        },
        end: {
          line: 342,
          column: 7
        }
      },
      "127": {
        start: {
          line: 344,
          column: 0
        },
        end: {
          line: 344,
          column: 44
        }
      },
      "128": {
        start: {
          line: 350,
          column: 32
        },
        end: {
          line: 357,
          column: 1
        }
      },
      "129": {
        start: {
          line: 351,
          column: 4
        },
        end: {
          line: 352,
          column: 21
        }
      },
      "130": {
        start: {
          line: 352,
          column: 8
        },
        end: {
          line: 352,
          column: 21
        }
      },
      "131": {
        start: {
          line: 354,
          column: 4
        },
        end: {
          line: 355,
          column: 56
        }
      },
      "132": {
        start: {
          line: 355,
          column: 8
        },
        end: {
          line: 355,
          column: 56
        }
      },
      "133": {
        start: {
          line: 356,
          column: 4
        },
        end: {
          line: 356,
          column: 85
        }
      },
      "134": {
        start: {
          line: 358,
          column: 0
        },
        end: {
          line: 358,
          column: 58
        }
      },
      "135": {
        start: {
          line: 364,
          column: 35
        },
        end: {
          line: 368,
          column: 1
        }
      },
      "136": {
        start: {
          line: 365,
          column: 4
        },
        end: {
          line: 366,
          column: 21
        }
      },
      "137": {
        start: {
          line: 366,
          column: 8
        },
        end: {
          line: 366,
          column: 21
        }
      },
      "138": {
        start: {
          line: 367,
          column: 4
        },
        end: {
          line: 367,
          column: 88
        }
      },
      "139": {
        start: {
          line: 369,
          column: 0
        },
        end: {
          line: 369,
          column: 64
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 13,
            column: 30
          },
          end: {
            line: 13,
            column: 31
          }
        },
        loc: {
          start: {
            line: 13,
            column: 40
          },
          end: {
            line: 28,
            column: 1
          }
        },
        line: 13
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 35,
            column: 24
          },
          end: {
            line: 35,
            column: 25
          }
        },
        loc: {
          start: {
            line: 35,
            column: 34
          },
          end: {
            line: 51,
            column: 1
          }
        },
        line: 35
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 58,
            column: 37
          },
          end: {
            line: 58,
            column: 38
          }
        },
        loc: {
          start: {
            line: 58,
            column: 47
          },
          end: {
            line: 71,
            column: 1
          }
        },
        line: 58
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 78,
            column: 30
          },
          end: {
            line: 78,
            column: 31
          }
        },
        loc: {
          start: {
            line: 78,
            column: 40
          },
          end: {
            line: 88,
            column: 1
          }
        },
        line: 78
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 95,
            column: 31
          },
          end: {
            line: 95,
            column: 32
          }
        },
        loc: {
          start: {
            line: 95,
            column: 41
          },
          end: {
            line: 120,
            column: 1
          }
        },
        line: 95
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 104,
            column: 61
          },
          end: {
            line: 104,
            column: 62
          }
        },
        loc: {
          start: {
            line: 104,
            column: 66
          },
          end: {
            line: 104,
            column: 151
          }
        },
        line: 104
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 131,
            column: 37
          },
          end: {
            line: 131,
            column: 38
          }
        },
        loc: {
          start: {
            line: 131,
            column: 74
          },
          end: {
            line: 211,
            column: 1
          }
        },
        line: 131
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 134,
            column: 65
          },
          end: {
            line: 134,
            column: 66
          }
        },
        loc: {
          start: {
            line: 134,
            column: 70
          },
          end: {
            line: 134,
            column: 85
          }
        },
        line: 134
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 219,
            column: 26
          },
          end: {
            line: 219,
            column: 27
          }
        },
        loc: {
          start: {
            line: 219,
            column: 52
          },
          end: {
            line: 222,
            column: 1
          }
        },
        line: 219
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 229,
            column: 27
          },
          end: {
            line: 229,
            column: 28
          }
        },
        loc: {
          start: {
            line: 229,
            column: 45
          },
          end: {
            line: 264,
            column: 1
          }
        },
        line: 229
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 273,
            column: 41
          },
          end: {
            line: 273,
            column: 42
          }
        },
        loc: {
          start: {
            line: 273,
            column: 59
          },
          end: {
            line: 315,
            column: 1
          }
        },
        line: 273
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 322,
            column: 26
          },
          end: {
            line: 322,
            column: 27
          }
        },
        loc: {
          start: {
            line: 322,
            column: 43
          },
          end: {
            line: 327,
            column: 1
          }
        },
        line: 322
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 326,
            column: 57
          },
          end: {
            line: 326,
            column: 58
          }
        },
        loc: {
          start: {
            line: 326,
            column: 65
          },
          end: {
            line: 326,
            column: 87
          }
        },
        line: 326
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 334,
            column: 25
          },
          end: {
            line: 334,
            column: 26
          }
        },
        loc: {
          start: {
            line: 334,
            column: 41
          },
          end: {
            line: 343,
            column: 1
          }
        },
        line: 334
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 350,
            column: 32
          },
          end: {
            line: 350,
            column: 33
          }
        },
        loc: {
          start: {
            line: 350,
            column: 42
          },
          end: {
            line: 357,
            column: 1
          }
        },
        line: 350
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 364,
            column: 35
          },
          end: {
            line: 364,
            column: 36
          }
        },
        loc: {
          start: {
            line: 364,
            column: 45
          },
          end: {
            line: 368,
            column: 1
          }
        },
        line: 364
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 14,
            column: 4
          },
          end: {
            line: 15,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 14,
            column: 4
          },
          end: {
            line: 15,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 14
      },
      "1": {
        loc: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 18,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 18,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 17
      },
      "2": {
        loc: {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 21,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 21,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 20
      },
      "3": {
        loc: {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 23
      },
      "4": {
        loc: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 37,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 37,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "5": {
        loc: {
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 36,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 36,
            column: 13
          }
        }, {
          start: {
            line: 36,
            column: 17
          },
          end: {
            line: 36,
            column: 58
          }
        }],
        line: 36
      },
      "6": {
        loc: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 40,
            column: 20
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 40,
            column: 20
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "7": {
        loc: {
          start: {
            line: 44,
            column: 4
          },
          end: {
            line: 49,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 4
          },
          end: {
            line: 49,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "8": {
        loc: {
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 44,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 44,
            column: 27
          }
        }, {
          start: {
            line: 44,
            column: 31
          },
          end: {
            line: 44,
            column: 60
          }
        }],
        line: 44
      },
      "9": {
        loc: {
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 48,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 48,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "10": {
        loc: {
          start: {
            line: 46,
            column: 12
          },
          end: {
            line: 46,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 46,
            column: 12
          },
          end: {
            line: 46,
            column: 25
          }
        }, {
          start: {
            line: 46,
            column: 29
          },
          end: {
            line: 46,
            column: 51
          }
        }],
        line: 46
      },
      "11": {
        loc: {
          start: {
            line: 59,
            column: 4
          },
          end: {
            line: 61,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 4
          },
          end: {
            line: 61,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "12": {
        loc: {
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 59,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 59,
            column: 49
          }
        }, {
          start: {
            line: 59,
            column: 53
          },
          end: {
            line: 59,
            column: 77
          }
        }],
        line: 59
      },
      "13": {
        loc: {
          start: {
            line: 66,
            column: 4
          },
          end: {
            line: 67,
            column: 37
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 4
          },
          end: {
            line: 67,
            column: 37
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 66
      },
      "14": {
        loc: {
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 80,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 80,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "15": {
        loc: {
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 79,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 79,
            column: 13
          }
        }, {
          start: {
            line: 79,
            column: 17
          },
          end: {
            line: 79,
            column: 49
          }
        }],
        line: 79
      },
      "16": {
        loc: {
          start: {
            line: 81,
            column: 4
          },
          end: {
            line: 82,
            column: 20
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 81,
            column: 4
          },
          end: {
            line: 82,
            column: 20
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 81
      },
      "17": {
        loc: {
          start: {
            line: 83,
            column: 4
          },
          end: {
            line: 86,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 4
          },
          end: {
            line: 86,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "18": {
        loc: {
          start: {
            line: 96,
            column: 4
          },
          end: {
            line: 98,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 4
          },
          end: {
            line: 98,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "19": {
        loc: {
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 96,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 96,
            column: 13
          }
        }, {
          start: {
            line: 96,
            column: 17
          },
          end: {
            line: 96,
            column: 49
          }
        }],
        line: 96
      },
      "20": {
        loc: {
          start: {
            line: 100,
            column: 21
          },
          end: {
            line: 102,
            column: 60
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 101,
            column: 10
          },
          end: {
            line: 101,
            column: 57
          }
        }, {
          start: {
            line: 102,
            column: 10
          },
          end: {
            line: 102,
            column: 60
          }
        }],
        line: 100
      },
      "21": {
        loc: {
          start: {
            line: 104,
            column: 17
          },
          end: {
            line: 104,
            column: 160
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 104,
            column: 17
          },
          end: {
            line: 104,
            column: 152
          }
        }, {
          start: {
            line: 104,
            column: 156
          },
          end: {
            line: 104,
            column: 160
          }
        }],
        line: 104
      },
      "22": {
        loc: {
          start: {
            line: 104,
            column: 66
          },
          end: {
            line: 104,
            column: 151
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 104,
            column: 66
          },
          end: {
            line: 104,
            column: 85
          }
        }, {
          start: {
            line: 104,
            column: 89
          },
          end: {
            line: 104,
            column: 151
          }
        }],
        line: 104
      },
      "23": {
        loc: {
          start: {
            line: 108,
            column: 19
          },
          end: {
            line: 109,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 108,
            column: 19
          },
          end: {
            line: 108,
            column: 48
          }
        }, {
          start: {
            line: 109,
            column: 9
          },
          end: {
            line: 109,
            column: 49
          }
        }, {
          start: {
            line: 109,
            column: 53
          },
          end: {
            line: 109,
            column: 67
          }
        }],
        line: 108
      },
      "24": {
        loc: {
          start: {
            line: 113,
            column: 16
          },
          end: {
            line: 113,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 113,
            column: 42
          },
          end: {
            line: 113,
            column: 75
          }
        }, {
          start: {
            line: 113,
            column: 78
          },
          end: {
            line: 113,
            column: 82
          }
        }],
        line: 113
      },
      "25": {
        loc: {
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 140,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 140,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 135
      },
      "26": {
        loc: {
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 172,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 172,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 144
      },
      "27": {
        loc: {
          start: {
            line: 146,
            column: 12
          },
          end: {
            line: 151,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 146,
            column: 12
          },
          end: {
            line: 151,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 146
      },
      "28": {
        loc: {
          start: {
            line: 149,
            column: 27
          },
          end: {
            line: 149,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 149,
            column: 27
          },
          end: {
            line: 149,
            column: 45
          }
        }, {
          start: {
            line: 149,
            column: 49
          },
          end: {
            line: 149,
            column: 72
          }
        }],
        line: 149
      },
      "29": {
        loc: {
          start: {
            line: 162,
            column: 12
          },
          end: {
            line: 164,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 162,
            column: 12
          },
          end: {
            line: 164,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 162
      },
      "30": {
        loc: {
          start: {
            line: 168,
            column: 36
          },
          end: {
            line: 170,
            column: 31
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 169,
            column: 22
          },
          end: {
            line: 169,
            column: 59
          }
        }, {
          start: {
            line: 170,
            column: 22
          },
          end: {
            line: 170,
            column: 31
          }
        }],
        line: 168
      },
      "31": {
        loc: {
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 197,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 197,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "32": {
        loc: {
          start: {
            line: 208,
            column: 19
          },
          end: {
            line: 208,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 208,
            column: 19
          },
          end: {
            line: 208,
            column: 32
          }
        }, {
          start: {
            line: 208,
            column: 36
          },
          end: {
            line: 208,
            column: 63
          }
        }],
        line: 208
      },
      "33": {
        loc: {
          start: {
            line: 237,
            column: 8
          },
          end: {
            line: 239,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 237,
            column: 8
          },
          end: {
            line: 239,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 237
      },
      "34": {
        loc: {
          start: {
            line: 248,
            column: 28
          },
          end: {
            line: 248,
            column: 98
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 248,
            column: 66
          },
          end: {
            line: 248,
            column: 72
          }
        }, {
          start: {
            line: 248,
            column: 75
          },
          end: {
            line: 248,
            column: 98
          }
        }],
        line: 248
      },
      "35": {
        loc: {
          start: {
            line: 252,
            column: 8
          },
          end: {
            line: 254,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 252,
            column: 8
          },
          end: {
            line: 254,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 252
      },
      "36": {
        loc: {
          start: {
            line: 261,
            column: 19
          },
          end: {
            line: 261,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 261,
            column: 19
          },
          end: {
            line: 261,
            column: 32
          }
        }, {
          start: {
            line: 261,
            column: 36
          },
          end: {
            line: 261,
            column: 67
          }
        }],
        line: 261
      },
      "37": {
        loc: {
          start: {
            line: 281,
            column: 8
          },
          end: {
            line: 283,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 281,
            column: 8
          },
          end: {
            line: 283,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 281
      },
      "38": {
        loc: {
          start: {
            line: 281,
            column: 12
          },
          end: {
            line: 281,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 281,
            column: 12
          },
          end: {
            line: 281,
            column: 22
          }
        }, {
          start: {
            line: 281,
            column: 26
          },
          end: {
            line: 281,
            column: 35
          }
        }],
        line: 281
      },
      "39": {
        loc: {
          start: {
            line: 285,
            column: 8
          },
          end: {
            line: 289,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 285,
            column: 8
          },
          end: {
            line: 289,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 285
      },
      "40": {
        loc: {
          start: {
            line: 285,
            column: 12
          },
          end: {
            line: 287,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 285,
            column: 12
          },
          end: {
            line: 285,
            column: 49
          }
        }, {
          start: {
            line: 286,
            column: 12
          },
          end: {
            line: 286,
            column: 51
          }
        }, {
          start: {
            line: 287,
            column: 12
          },
          end: {
            line: 287,
            column: 54
          }
        }],
        line: 285
      },
      "41": {
        loc: {
          start: {
            line: 291,
            column: 8
          },
          end: {
            line: 308,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 291,
            column: 8
          },
          end: {
            line: 308,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 291
      },
      "42": {
        loc: {
          start: {
            line: 294,
            column: 12
          },
          end: {
            line: 307,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 294,
            column: 12
          },
          end: {
            line: 307,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 294
      },
      "43": {
        loc: {
          start: {
            line: 294,
            column: 16
          },
          end: {
            line: 294,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 294,
            column: 16
          },
          end: {
            line: 294,
            column: 33
          }
        }, {
          start: {
            line: 294,
            column: 37
          },
          end: {
            line: 294,
            column: 78
          }
        }],
        line: 294
      },
      "44": {
        loc: {
          start: {
            line: 304,
            column: 16
          },
          end: {
            line: 306,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 304,
            column: 16
          },
          end: {
            line: 306,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 304
      },
      "45": {
        loc: {
          start: {
            line: 323,
            column: 21
          },
          end: {
            line: 325,
            column: 60
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 324,
            column: 10
          },
          end: {
            line: 324,
            column: 57
          }
        }, {
          start: {
            line: 325,
            column: 10
          },
          end: {
            line: 325,
            column: 60
          }
        }],
        line: 323
      },
      "46": {
        loc: {
          start: {
            line: 335,
            column: 4
          },
          end: {
            line: 336,
            column: 36
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 335,
            column: 4
          },
          end: {
            line: 336,
            column: 36
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 335
      },
      "47": {
        loc: {
          start: {
            line: 337,
            column: 17
          },
          end: {
            line: 337,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 337,
            column: 50
          },
          end: {
            line: 337,
            column: 70
          }
        }, {
          start: {
            line: 337,
            column: 73
          },
          end: {
            line: 337,
            column: 83
          }
        }],
        line: 337
      },
      "48": {
        loc: {
          start: {
            line: 351,
            column: 4
          },
          end: {
            line: 352,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 351,
            column: 4
          },
          end: {
            line: 352,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 351
      },
      "49": {
        loc: {
          start: {
            line: 354,
            column: 4
          },
          end: {
            line: 355,
            column: 56
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 354,
            column: 4
          },
          end: {
            line: 355,
            column: 56
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 354
      },
      "50": {
        loc: {
          start: {
            line: 356,
            column: 11
          },
          end: {
            line: 356,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 356,
            column: 11
          },
          end: {
            line: 356,
            column: 40
          }
        }, {
          start: {
            line: 356,
            column: 44
          },
          end: {
            line: 356,
            column: 84
          }
        }],
        line: 356
      },
      "51": {
        loc: {
          start: {
            line: 365,
            column: 4
          },
          end: {
            line: 366,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 365,
            column: 4
          },
          end: {
            line: 366,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 365
      },
      "52": {
        loc: {
          start: {
            line: 367,
            column: 11
          },
          end: {
            line: 367,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 367,
            column: 11
          },
          end: {
            line: 367,
            column: 43
          }
        }, {
          start: {
            line: 367,
            column: 47
          },
          end: {
            line: 367,
            column: 87
          }
        }],
        line: 367
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/kevin/card-show-finder/src/services/subscriptionService.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/kevin/card-show-finder/src/services/subscriptionService.ts"],
      sourcesContent: ["// src/services/subscriptionService.ts\nimport { supabase } from '../supabase';\nimport { User } from '../types';\nimport { createPaymentSheetForSubscription } from './stripePaymentService';\nimport {\n  SubscriptionPlan,\n  SubscriptionPlanType,\n  SubscriptionDuration,\n  SUBSCRIPTION_PLANS,\n  StripePaymentResult,\n  calculateExpiryDate\n} from './subscriptionTypes';\n\n/**\n * Result of a payment operation\n */\nexport interface PaymentResult {\n  success: boolean;\n  transactionId?: string;\n  error?: string;\n  subscriptionExpiry?: Date;\n}\n\n/**\n * Check if a user has an active subscription\n * @param user The user to check\n * @returns Boolean indicating if the subscription is active\n */\nexport const hasActiveSubscription = (user: User): boolean => {\n  if (!user) return false;\n  \n  // Free collector accounts don't have subscriptions\n  if (user.accountType === 'collector') return false;\n  \n  // Check if the subscription status is active\n  if (user.subscriptionStatus !== 'active') return false;\n  \n  // Check if the subscription has expired\n  if (user.subscriptionExpiry) {\n    const expiryDate = new Date(user.subscriptionExpiry);\n    return expiryDate > new Date();\n  }\n  \n  return false;\n};\n\n/**\n * Check if a user is in their trial period\n * @param user The user to check\n * @returns Boolean indicating if the user is in trial period\n */\nexport const isInTrialPeriod = (user: User): boolean => {\n  if (!user || !hasActiveSubscription(user)) return false;\n  \n  // Check if payment_status is explicitly set to 'trial'\n  if (user.paymentStatus === 'trial') return true;\n  \n  // Legacy check for users without payment_status field\n  // If they have less than 7 days remaining and no payment_status,\n  // they're likely in a trial period\n  if (!user.paymentStatus || user.paymentStatus === 'none') {\n    const timeRemaining = getSubscriptionTimeRemaining(user);\n    if (timeRemaining && timeRemaining.days < 7) {\n      return true;\n    }\n  }\n  \n  return false;\n};\n\n/**\n * Get the time remaining in a user's subscription\n * @param user The user to check\n * @returns Object with days, hours remaining or null if no active subscription\n */\nexport const getSubscriptionTimeRemaining = (user: User): { days: number, hours: number } | null => {\n  if (!hasActiveSubscription(user) || !user.subscriptionExpiry) {\n    return null;\n  }\n  \n  const now = new Date();\n  const expiryDate = new Date(user.subscriptionExpiry);\n  const diffMs = expiryDate.getTime() - now.getTime();\n  \n  // If already expired\n  if (diffMs <= 0) return { days: 0, hours: 0 };\n  \n  const days = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n  const hours = Math.floor((diffMs % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n  \n  return { days, hours };\n};\n\n/**\n * Check if a user's subscription has expired\n * @param user The user to check\n * @returns Boolean indicating if the subscription is expired\n */\nexport const isSubscriptionExpired = (user: User): boolean => {\n  if (!user || user.accountType === 'collector') return false;\n  \n  if (user.subscriptionStatus === 'expired') return true;\n  \n  if (user.subscriptionExpiry) {\n    const expiryDate = new Date(user.subscriptionExpiry);\n    return expiryDate <= new Date();\n  }\n  \n  return false;\n};\n\n/**\n * Get subscription details for a user\n * @param user The user to get subscription details for\n * @returns Object with subscription details or null if no subscription\n */\nexport const getSubscriptionDetails = (user: User): {\n  accountType: string;\n  status: string;\n  expiry: Date | null;\n  isActive: boolean;\n  timeRemaining: { days: number, hours: number } | null;\n  plan: SubscriptionPlan | null;\n  isPaid: boolean;\n  isTrialPeriod: boolean;\n} | null => {\n  if (!user || user.accountType === 'collector') {\n    return null;\n  }\n  \n  // Find the plan that matches the user's account type\n  const planType = user.accountType === 'dealer' \n    ? SubscriptionPlanType.DEALER \n    : SubscriptionPlanType.ORGANIZER;\n    \n  // Default to the annual plan as it's the most common\n  const plan = SUBSCRIPTION_PLANS.find(p => \n    p.type === planType && p.duration === SubscriptionDuration.ANNUAL\n  ) || null;\n  \n  // Check if user is in trial period\n  const isTrialPeriod = isInTrialPeriod(user);\n  \n  // Check if user has paid (either explicitly marked as paid or has active subscription but not in trial)\n  const isPaid = user.paymentStatus === 'paid' || \n                (hasActiveSubscription(user) && !isTrialPeriod);\n  \n  return {\n    accountType: user.accountType,\n    status: user.subscriptionStatus,\n    expiry: user.subscriptionExpiry ? new Date(user.subscriptionExpiry) : null,\n    isActive: hasActiveSubscription(user),\n    timeRemaining: getSubscriptionTimeRemaining(user),\n    plan,\n    isPaid,\n    isTrialPeriod\n  };\n};\n\n/**\n * Initiate a subscription purchase\n * @param userId The ID of the user making the purchase\n * @param planId The ID of the plan being purchased\n * @param stripeCtx Optional Stripe helpers (initPaymentSheet, presentPaymentSheet) \u2013\n *                  if provided we run the real payment flow, otherwise we fall back\n *                  to the legacy mock implementation (useful for unit tests / Storybook).\n * @returns Promise with the payment result\n */\nexport const initiateSubscriptionPurchase = async (\n  userId: string,\n  planId: string,\n  stripeCtx?: {\n    initPaymentSheet: (params: any) => Promise<any>;\n    presentPaymentSheet: () => Promise<any>;\n  }\n): Promise<PaymentResult> => {\n  try {\n    // Find the selected plan\n    const plan = SUBSCRIPTION_PLANS.find(p => p.id === planId);\n    if (!plan) {\n      return {\n        success: false,\n        error: 'Invalid subscription plan selected'\n      };\n    }\n    \n    /* ------------------------------------------------------------------\n     * 1. Real payment flow via Stripe (preferred)\n     * ------------------------------------------------------------------ */\n    if (stripeCtx) {\n      const stripeResult: StripePaymentResult =\n        await createPaymentSheetForSubscription(\n          userId,\n          planId,\n          stripeCtx.initPaymentSheet,\n          stripeCtx.presentPaymentSheet\n        );\n\n      if (!stripeResult.success) {\n        return {\n          success: false,\n          error: stripeResult.error || 'Stripe payment failed',\n        };\n      }\n\n      /* After a successful payment, the stripePaymentService already\n       * updates the user profile with the correct expiry date and role.\n       * We need to also update the payment_status to 'paid'\n       */\n      const { data: profile, error: updateError } = await supabase\n        .from('profiles')\n        .update({ payment_status: 'paid' })\n        .eq('id', userId)\n        .select('subscription_expiry')\n        .single();\n\n      if (updateError) {\n        console.error('Error updating payment status:', updateError);\n      }\n\n      return {\n        success: true,\n        transactionId: stripeResult.transactionId,\n        subscriptionExpiry: profile?.subscription_expiry\n          ? new Date(profile.subscription_expiry)\n          : undefined,\n      };\n    }\n    \n    /* ------------------------------------------------------------------\n     * 2. Legacy mock payment (development fallback)\n     * ------------------------------------------------------------------ */\n    // For demonstration purposes, we'll simulate a successful payment\n    const mockTransactionId = `tx_${Date.now()}_${Math.floor(Math.random() * 1000)}`;\n    \n    // Calculate when the subscription will expire\n    const expiryDate = calculateExpiryDate(plan);\n    \n    // Update the user's profile with the new subscription information\n    const { error } = await supabase\n      .from('profiles')\n      .update({\n        account_type: plan.type,\n        subscription_status: 'active',\n        payment_status: 'paid', // Mark as paid immediately for prepaid subscriptions\n        subscription_expiry: expiryDate.toISOString(),\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', userId);\n    \n    if (error) {\n      console.error('Error updating subscription status:', error);\n      return {\n        success: false,\n        error: 'Failed to update subscription status'\n      };\n    }\n    \n    return {\n      success: true,\n      transactionId: mockTransactionId,\n      subscriptionExpiry: expiryDate\n    };\n  } catch (error: any) {\n    console.error('Error processing subscription purchase:', error);\n    return {\n      success: false,\n      error: error.message || 'Failed to process payment'\n    };\n  }\n};\n\n/**\n * Renew an existing subscription\n * @param userId The ID of the user renewing their subscription\n * @param planId The ID of the plan being renewed\n * @returns Promise with the payment result\n */\nexport const renewSubscription = async (\n  userId: string,\n  planId: string\n): Promise<PaymentResult> => {\n  // Forward to initiateSubscriptionPurchase so we keep one code-path\n  return initiateSubscriptionPurchase(userId, planId);\n};\n\n/**\n * Cancel a user's subscription\n * @param userId The ID of the user cancelling their subscription\n * @returns Promise with the result of the cancellation\n */\nexport const cancelSubscription = async (\n  userId: string\n): Promise<{ success: boolean, error?: string }> => {\n  try {\n    // Get the user's current subscription details\n    const { data: userData, error: fetchError } = await supabase\n      .from('profiles')\n      .select('subscription_expiry, account_type, payment_status')\n      .eq('id', userId)\n      .single();\n    \n    if (fetchError) {\n      throw fetchError;\n    }\n    \n    // Update the subscription status to indicate it's cancelled\n    // but allow the user to continue using it until the expiry date\n    const { error } = await supabase\n      .from('profiles')\n      .update({\n        subscription_status: 'expired',\n        // If they're in trial and cancel, reset payment_status to 'none'\n        // If they've paid, keep their payment_status as 'paid' until expiry\n        payment_status: userData.payment_status === 'trial' ? 'none' : userData.payment_status,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', userId);\n    \n    if (error) {\n      throw error;\n    }\n    \n    return { success: true };\n  } catch (error: any) {\n    console.error('Error cancelling subscription:', error);\n    return {\n      success: false,\n      error: error.message || 'Failed to cancel subscription'\n    };\n  }\n};\n\n/**\n * Check for and update expired subscriptions\n * This would typically be called by a server-side cron job,\n * but can be checked on app startup as well\n * @param userId The ID of the user to check\n * @returns Promise indicating if any update was made\n */\nexport const checkAndUpdateSubscriptionStatus = async (\n  userId: string\n): Promise<boolean> => {\n  try {\n    // Get the user's current subscription details\n    const { data: userData, error: fetchError } = await supabase\n      .from('profiles')\n      .select('subscription_expiry, subscription_status, account_type, payment_status')\n      .eq('id', userId)\n      .single();\n    \n    if (fetchError || !userData) {\n      return false;\n    }\n    \n    // If the user doesn't have a subscription or it's already marked as expired, do nothing\n    if (\n      userData.account_type === 'collector' || \n      userData.subscription_status === 'none' ||\n      userData.subscription_status === 'expired'\n    ) {\n      return false;\n    }\n    \n    // Check if the subscription has expired\n    if (userData.subscription_expiry) {\n      const expiryDate = new Date(userData.subscription_expiry);\n      const now = new Date();\n      \n      if (expiryDate <= now && userData.subscription_status === 'active') {\n        // Update the subscription status to expired\n        const { error } = await supabase\n          .from('profiles')\n          .update({\n            subscription_status: 'expired',\n            payment_status: 'none', // Reset payment status when subscription expires\n            updated_at: now.toISOString()\n          })\n          .eq('id', userId);\n        \n        if (!error) {\n          return true; // Status was updated\n        }\n      }\n    }\n    \n    return false; // No update was needed\n  } catch (error) {\n    console.error('Error checking subscription status:', error);\n    return false;\n  }\n};\n\n/**\n * Get available subscription plans for a specific account type\n * @param accountType The account type to get plans for\n * @returns Array of subscription plans\n */\nexport const getAvailablePlans = (\n  accountType: 'dealer' | 'organizer'\n): SubscriptionPlan[] => {\n  const planType = accountType === 'dealer' \n    ? SubscriptionPlanType.DEALER \n    : SubscriptionPlanType.ORGANIZER;\n  \n  return SUBSCRIPTION_PLANS.filter(plan => plan.type === planType);\n};\n\n/**\n * Format the subscription expiry date for display\n * @param expiryDate The expiry date to format\n * @returns Formatted date string\n */\nexport const formatExpiryDate = (expiryDate: Date | string | null): string => {\n  if (!expiryDate) return 'No expiration date';\n  \n  const date = typeof expiryDate === 'string' ? new Date(expiryDate) : expiryDate;\n  \n  return date.toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n};\n\n/**\n * Check if a user can access dealer features\n * @param user The user to check\n * @returns Boolean indicating if the user can access dealer features\n */\nexport const canAccessDealerFeatures = (user: User | null): boolean => {\n  if (!user) return false;\n  \n  // Organizers also have dealer privileges\n  if (user.accountType === 'organizer') return hasActiveSubscription(user);\n  \n  return user.accountType === 'dealer' && hasActiveSubscription(user);\n};\n\n/**\n * Check if a user can access organizer features\n * @param user The user to check\n * @returns Boolean indicating if the user can access organizer features\n */\nexport const canAccessOrganizerFeatures = (user: User | null): boolean => {\n  if (!user) return false;\n  \n  return user.accountType === 'organizer' && hasActiveSubscription(user);\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5f05b20bc6dcb3da70f0bda50faa10094191a613"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_15z3stinmo = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_15z3stinmo();
cov_15z3stinmo().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_15z3stinmo().s[1]++;
exports.canAccessOrganizerFeatures = exports.canAccessDealerFeatures = exports.formatExpiryDate = exports.getAvailablePlans = exports.checkAndUpdateSubscriptionStatus = exports.cancelSubscription = exports.renewSubscription = exports.initiateSubscriptionPurchase = exports.getSubscriptionDetails = exports.isSubscriptionExpired = exports.getSubscriptionTimeRemaining = exports.isInTrialPeriod = exports.hasActiveSubscription = void 0;
// src/services/subscriptionService.ts
const supabase_1 =
/* istanbul ignore next */
(cov_15z3stinmo().s[2]++, require("../supabase"));
const stripePaymentService_1 =
/* istanbul ignore next */
(cov_15z3stinmo().s[3]++, require("./stripePaymentService"));
const subscriptionTypes_1 =
/* istanbul ignore next */
(cov_15z3stinmo().s[4]++, require("./subscriptionTypes"));
/**
 * Check if a user has an active subscription
 * @param user The user to check
 * @returns Boolean indicating if the subscription is active
 */
/* istanbul ignore next */
cov_15z3stinmo().s[5]++;
const hasActiveSubscription = user => {
  /* istanbul ignore next */
  cov_15z3stinmo().f[0]++;
  cov_15z3stinmo().s[6]++;
  if (!user) {
    /* istanbul ignore next */
    cov_15z3stinmo().b[0][0]++;
    cov_15z3stinmo().s[7]++;
    return false;
  } else
  /* istanbul ignore next */
  {
    cov_15z3stinmo().b[0][1]++;
  }
  // Free collector accounts don't have subscriptions
  cov_15z3stinmo().s[8]++;
  if (user.accountType === 'collector') {
    /* istanbul ignore next */
    cov_15z3stinmo().b[1][0]++;
    cov_15z3stinmo().s[9]++;
    return false;
  } else
  /* istanbul ignore next */
  {
    cov_15z3stinmo().b[1][1]++;
  }
  // Check if the subscription status is active
  cov_15z3stinmo().s[10]++;
  if (user.subscriptionStatus !== 'active') {
    /* istanbul ignore next */
    cov_15z3stinmo().b[2][0]++;
    cov_15z3stinmo().s[11]++;
    return false;
  } else
  /* istanbul ignore next */
  {
    cov_15z3stinmo().b[2][1]++;
  }
  // Check if the subscription has expired
  cov_15z3stinmo().s[12]++;
  if (user.subscriptionExpiry) {
    /* istanbul ignore next */
    cov_15z3stinmo().b[3][0]++;
    const expiryDate =
    /* istanbul ignore next */
    (cov_15z3stinmo().s[13]++, new Date(user.subscriptionExpiry));
    /* istanbul ignore next */
    cov_15z3stinmo().s[14]++;
    return expiryDate > new Date();
  } else
  /* istanbul ignore next */
  {
    cov_15z3stinmo().b[3][1]++;
  }
  cov_15z3stinmo().s[15]++;
  return false;
};
/* istanbul ignore next */
cov_15z3stinmo().s[16]++;
exports.hasActiveSubscription = hasActiveSubscription;
/**
 * Check if a user is in their trial period
 * @param user The user to check
 * @returns Boolean indicating if the user is in trial period
 */
/* istanbul ignore next */
cov_15z3stinmo().s[17]++;
const isInTrialPeriod = user => {
  /* istanbul ignore next */
  cov_15z3stinmo().f[1]++;
  cov_15z3stinmo().s[18]++;
  if (
  /* istanbul ignore next */
  (cov_15z3stinmo().b[5][0]++, !user) ||
  /* istanbul ignore next */
  (cov_15z3stinmo().b[5][1]++, !(0, exports.hasActiveSubscription)(user))) {
    /* istanbul ignore next */
    cov_15z3stinmo().b[4][0]++;
    cov_15z3stinmo().s[19]++;
    return false;
  } else
  /* istanbul ignore next */
  {
    cov_15z3stinmo().b[4][1]++;
  }
  // Check if payment_status is explicitly set to 'trial'
  cov_15z3stinmo().s[20]++;
  if (user.paymentStatus === 'trial') {
    /* istanbul ignore next */
    cov_15z3stinmo().b[6][0]++;
    cov_15z3stinmo().s[21]++;
    return true;
  } else
  /* istanbul ignore next */
  {
    cov_15z3stinmo().b[6][1]++;
  }
  // Legacy check for users without payment_status field
  // If they have less than 7 days remaining and no payment_status,
  // they're likely in a trial period
  cov_15z3stinmo().s[22]++;
  if (
  /* istanbul ignore next */
  (cov_15z3stinmo().b[8][0]++, !user.paymentStatus) ||
  /* istanbul ignore next */
  (cov_15z3stinmo().b[8][1]++, user.paymentStatus === 'none')) {
    /* istanbul ignore next */
    cov_15z3stinmo().b[7][0]++;
    const timeRemaining =
    /* istanbul ignore next */
    (cov_15z3stinmo().s[23]++, (0, exports.getSubscriptionTimeRemaining)(user));
    /* istanbul ignore next */
    cov_15z3stinmo().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_15z3stinmo().b[10][0]++, timeRemaining) &&
    /* istanbul ignore next */
    (cov_15z3stinmo().b[10][1]++, timeRemaining.days < 7)) {
      /* istanbul ignore next */
      cov_15z3stinmo().b[9][0]++;
      cov_15z3stinmo().s[25]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_15z3stinmo().b[9][1]++;
    }
  } else
  /* istanbul ignore next */
  {
    cov_15z3stinmo().b[7][1]++;
  }
  cov_15z3stinmo().s[26]++;
  return false;
};
/* istanbul ignore next */
cov_15z3stinmo().s[27]++;
exports.isInTrialPeriod = isInTrialPeriod;
/**
 * Get the time remaining in a user's subscription
 * @param user The user to check
 * @returns Object with days, hours remaining or null if no active subscription
 */
/* istanbul ignore next */
cov_15z3stinmo().s[28]++;
const getSubscriptionTimeRemaining = user => {
  /* istanbul ignore next */
  cov_15z3stinmo().f[2]++;
  cov_15z3stinmo().s[29]++;
  if (
  /* istanbul ignore next */
  (cov_15z3stinmo().b[12][0]++, !(0, exports.hasActiveSubscription)(user)) ||
  /* istanbul ignore next */
  (cov_15z3stinmo().b[12][1]++, !user.subscriptionExpiry)) {
    /* istanbul ignore next */
    cov_15z3stinmo().b[11][0]++;
    cov_15z3stinmo().s[30]++;
    return null;
  } else
  /* istanbul ignore next */
  {
    cov_15z3stinmo().b[11][1]++;
  }
  const now =
  /* istanbul ignore next */
  (cov_15z3stinmo().s[31]++, new Date());
  const expiryDate =
  /* istanbul ignore next */
  (cov_15z3stinmo().s[32]++, new Date(user.subscriptionExpiry));
  const diffMs =
  /* istanbul ignore next */
  (cov_15z3stinmo().s[33]++, expiryDate.getTime() - now.getTime());
  // If already expired
  /* istanbul ignore next */
  cov_15z3stinmo().s[34]++;
  if (diffMs <= 0) {
    /* istanbul ignore next */
    cov_15z3stinmo().b[13][0]++;
    cov_15z3stinmo().s[35]++;
    return {
      days: 0,
      hours: 0
    };
  } else
  /* istanbul ignore next */
  {
    cov_15z3stinmo().b[13][1]++;
  }
  const days =
  /* istanbul ignore next */
  (cov_15z3stinmo().s[36]++, Math.floor(diffMs / (1000 * 60 * 60 * 24)));
  const hours =
  /* istanbul ignore next */
  (cov_15z3stinmo().s[37]++, Math.floor(diffMs % (1000 * 60 * 60 * 24) / (1000 * 60 * 60)));
  /* istanbul ignore next */
  cov_15z3stinmo().s[38]++;
  return {
    days,
    hours
  };
};
/* istanbul ignore next */
cov_15z3stinmo().s[39]++;
exports.getSubscriptionTimeRemaining = getSubscriptionTimeRemaining;
/**
 * Check if a user's subscription has expired
 * @param user The user to check
 * @returns Boolean indicating if the subscription is expired
 */
/* istanbul ignore next */
cov_15z3stinmo().s[40]++;
const isSubscriptionExpired = user => {
  /* istanbul ignore next */
  cov_15z3stinmo().f[3]++;
  cov_15z3stinmo().s[41]++;
  if (
  /* istanbul ignore next */
  (cov_15z3stinmo().b[15][0]++, !user) ||
  /* istanbul ignore next */
  (cov_15z3stinmo().b[15][1]++, user.accountType === 'collector')) {
    /* istanbul ignore next */
    cov_15z3stinmo().b[14][0]++;
    cov_15z3stinmo().s[42]++;
    return false;
  } else
  /* istanbul ignore next */
  {
    cov_15z3stinmo().b[14][1]++;
  }
  cov_15z3stinmo().s[43]++;
  if (user.subscriptionStatus === 'expired') {
    /* istanbul ignore next */
    cov_15z3stinmo().b[16][0]++;
    cov_15z3stinmo().s[44]++;
    return true;
  } else
  /* istanbul ignore next */
  {
    cov_15z3stinmo().b[16][1]++;
  }
  cov_15z3stinmo().s[45]++;
  if (user.subscriptionExpiry) {
    /* istanbul ignore next */
    cov_15z3stinmo().b[17][0]++;
    const expiryDate =
    /* istanbul ignore next */
    (cov_15z3stinmo().s[46]++, new Date(user.subscriptionExpiry));
    /* istanbul ignore next */
    cov_15z3stinmo().s[47]++;
    return expiryDate <= new Date();
  } else
  /* istanbul ignore next */
  {
    cov_15z3stinmo().b[17][1]++;
  }
  cov_15z3stinmo().s[48]++;
  return false;
};
/* istanbul ignore next */
cov_15z3stinmo().s[49]++;
exports.isSubscriptionExpired = isSubscriptionExpired;
/**
 * Get subscription details for a user
 * @param user The user to get subscription details for
 * @returns Object with subscription details or null if no subscription
 */
/* istanbul ignore next */
cov_15z3stinmo().s[50]++;
const getSubscriptionDetails = user => {
  /* istanbul ignore next */
  cov_15z3stinmo().f[4]++;
  cov_15z3stinmo().s[51]++;
  if (
  /* istanbul ignore next */
  (cov_15z3stinmo().b[19][0]++, !user) ||
  /* istanbul ignore next */
  (cov_15z3stinmo().b[19][1]++, user.accountType === 'collector')) {
    /* istanbul ignore next */
    cov_15z3stinmo().b[18][0]++;
    cov_15z3stinmo().s[52]++;
    return null;
  } else
  /* istanbul ignore next */
  {
    cov_15z3stinmo().b[18][1]++;
  }
  // Find the plan that matches the user's account type
  const planType =
  /* istanbul ignore next */
  (cov_15z3stinmo().s[53]++, user.accountType === 'dealer' ?
  /* istanbul ignore next */
  (cov_15z3stinmo().b[20][0]++, subscriptionTypes_1.SubscriptionPlanType.DEALER) :
  /* istanbul ignore next */
  (cov_15z3stinmo().b[20][1]++, subscriptionTypes_1.SubscriptionPlanType.ORGANIZER));
  // Default to the annual plan as it's the most common
  const plan =
  /* istanbul ignore next */
  (cov_15z3stinmo().s[54]++,
  /* istanbul ignore next */
  (cov_15z3stinmo().b[21][0]++, subscriptionTypes_1.SUBSCRIPTION_PLANS.find(p => {
    /* istanbul ignore next */
    cov_15z3stinmo().f[5]++;
    cov_15z3stinmo().s[55]++;
    return /* istanbul ignore next */(cov_15z3stinmo().b[22][0]++, p.type === planType) &&
    /* istanbul ignore next */
    (cov_15z3stinmo().b[22][1]++, p.duration === subscriptionTypes_1.SubscriptionDuration.ANNUAL);
  })) ||
  /* istanbul ignore next */
  (cov_15z3stinmo().b[21][1]++, null));
  // Check if user is in trial period
  const isTrialPeriod =
  /* istanbul ignore next */
  (cov_15z3stinmo().s[56]++, (0, exports.isInTrialPeriod)(user));
  // Check if user has paid (either explicitly marked as paid or has active subscription but not in trial)
  const isPaid =
  /* istanbul ignore next */
  (cov_15z3stinmo().s[57]++,
  /* istanbul ignore next */
  (cov_15z3stinmo().b[23][0]++, user.paymentStatus === 'paid') ||
  /* istanbul ignore next */
  (cov_15z3stinmo().b[23][1]++, (0, exports.hasActiveSubscription)(user)) &&
  /* istanbul ignore next */
  (cov_15z3stinmo().b[23][2]++, !isTrialPeriod));
  /* istanbul ignore next */
  cov_15z3stinmo().s[58]++;
  return {
    accountType: user.accountType,
    status: user.subscriptionStatus,
    expiry: user.subscriptionExpiry ?
    /* istanbul ignore next */
    (cov_15z3stinmo().b[24][0]++, new Date(user.subscriptionExpiry)) :
    /* istanbul ignore next */
    (cov_15z3stinmo().b[24][1]++, null),
    isActive: (0, exports.hasActiveSubscription)(user),
    timeRemaining: (0, exports.getSubscriptionTimeRemaining)(user),
    plan,
    isPaid,
    isTrialPeriod
  };
};
/* istanbul ignore next */
cov_15z3stinmo().s[59]++;
exports.getSubscriptionDetails = getSubscriptionDetails;
/**
 * Initiate a subscription purchase
 * @param userId The ID of the user making the purchase
 * @param planId The ID of the plan being purchased
 * @param stripeCtx Optional Stripe helpers (initPaymentSheet, presentPaymentSheet) –
 *                  if provided we run the real payment flow, otherwise we fall back
 *                  to the legacy mock implementation (useful for unit tests / Storybook).
 * @returns Promise with the payment result
 */
/* istanbul ignore next */
cov_15z3stinmo().s[60]++;
const initiateSubscriptionPurchase = async (userId, planId, stripeCtx) => {
  /* istanbul ignore next */
  cov_15z3stinmo().f[6]++;
  cov_15z3stinmo().s[61]++;
  try {
    // Find the selected plan
    const plan =
    /* istanbul ignore next */
    (cov_15z3stinmo().s[62]++, subscriptionTypes_1.SUBSCRIPTION_PLANS.find(p => {
      /* istanbul ignore next */
      cov_15z3stinmo().f[7]++;
      cov_15z3stinmo().s[63]++;
      return p.id === planId;
    }));
    /* istanbul ignore next */
    cov_15z3stinmo().s[64]++;
    if (!plan) {
      /* istanbul ignore next */
      cov_15z3stinmo().b[25][0]++;
      cov_15z3stinmo().s[65]++;
      return {
        success: false,
        error: 'Invalid subscription plan selected'
      };
    } else
    /* istanbul ignore next */
    {
      cov_15z3stinmo().b[25][1]++;
    }
    /* ------------------------------------------------------------------
     * 1. Real payment flow via Stripe (preferred)
     * ------------------------------------------------------------------ */
    cov_15z3stinmo().s[66]++;
    if (stripeCtx) {
      /* istanbul ignore next */
      cov_15z3stinmo().b[26][0]++;
      const stripeResult =
      /* istanbul ignore next */
      (cov_15z3stinmo().s[67]++, await (0, stripePaymentService_1.createPaymentSheetForSubscription)(userId, planId, stripeCtx.initPaymentSheet, stripeCtx.presentPaymentSheet));
      /* istanbul ignore next */
      cov_15z3stinmo().s[68]++;
      if (!stripeResult.success) {
        /* istanbul ignore next */
        cov_15z3stinmo().b[27][0]++;
        cov_15z3stinmo().s[69]++;
        return {
          success: false,
          error:
          /* istanbul ignore next */
          (cov_15z3stinmo().b[28][0]++, stripeResult.error) ||
          /* istanbul ignore next */
          (cov_15z3stinmo().b[28][1]++, 'Stripe payment failed')
        };
      } else
      /* istanbul ignore next */
      {
        cov_15z3stinmo().b[27][1]++;
      }
      /* After a successful payment, the stripePaymentService already
       * updates the user profile with the correct expiry date and role.
       * We need to also update the payment_status to 'paid'
       */
      const {
        data: profile,
        error: updateError
      } =
      /* istanbul ignore next */
      (cov_15z3stinmo().s[70]++, await supabase_1.supabase.from('profiles').update({
        payment_status: 'paid'
      }).eq('id', userId).select('subscription_expiry').single());
      /* istanbul ignore next */
      cov_15z3stinmo().s[71]++;
      if (updateError) {
        /* istanbul ignore next */
        cov_15z3stinmo().b[29][0]++;
        cov_15z3stinmo().s[72]++;
        console.error('Error updating payment status:', updateError);
      } else
      /* istanbul ignore next */
      {
        cov_15z3stinmo().b[29][1]++;
      }
      cov_15z3stinmo().s[73]++;
      return {
        success: true,
        transactionId: stripeResult.transactionId,
        subscriptionExpiry: profile?.subscription_expiry ?
        /* istanbul ignore next */
        (cov_15z3stinmo().b[30][0]++, new Date(profile.subscription_expiry)) :
        /* istanbul ignore next */
        (cov_15z3stinmo().b[30][1]++, undefined)
      };
    } else
    /* istanbul ignore next */
    {
      cov_15z3stinmo().b[26][1]++;
    }
    /* ------------------------------------------------------------------
     * 2. Legacy mock payment (development fallback)
     * ------------------------------------------------------------------ */
    // For demonstration purposes, we'll simulate a successful payment
    const mockTransactionId =
    /* istanbul ignore next */
    (cov_15z3stinmo().s[74]++, `tx_${Date.now()}_${Math.floor(Math.random() * 1000)}`);
    // Calculate when the subscription will expire
    const expiryDate =
    /* istanbul ignore next */
    (cov_15z3stinmo().s[75]++, (0, subscriptionTypes_1.calculateExpiryDate)(plan));
    // Update the user's profile with the new subscription information
    const {
      error
    } =
    /* istanbul ignore next */
    (cov_15z3stinmo().s[76]++, await supabase_1.supabase.from('profiles').update({
      account_type: plan.type,
      subscription_status: 'active',
      payment_status: 'paid',
      // Mark as paid immediately for prepaid subscriptions
      subscription_expiry: expiryDate.toISOString(),
      updated_at: new Date().toISOString()
    }).eq('id', userId));
    /* istanbul ignore next */
    cov_15z3stinmo().s[77]++;
    if (error) {
      /* istanbul ignore next */
      cov_15z3stinmo().b[31][0]++;
      cov_15z3stinmo().s[78]++;
      console.error('Error updating subscription status:', error);
      /* istanbul ignore next */
      cov_15z3stinmo().s[79]++;
      return {
        success: false,
        error: 'Failed to update subscription status'
      };
    } else
    /* istanbul ignore next */
    {
      cov_15z3stinmo().b[31][1]++;
    }
    cov_15z3stinmo().s[80]++;
    return {
      success: true,
      transactionId: mockTransactionId,
      subscriptionExpiry: expiryDate
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_15z3stinmo().s[81]++;
    console.error('Error processing subscription purchase:', error);
    /* istanbul ignore next */
    cov_15z3stinmo().s[82]++;
    return {
      success: false,
      error:
      /* istanbul ignore next */
      (cov_15z3stinmo().b[32][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_15z3stinmo().b[32][1]++, 'Failed to process payment')
    };
  }
};
/* istanbul ignore next */
cov_15z3stinmo().s[83]++;
exports.initiateSubscriptionPurchase = initiateSubscriptionPurchase;
/**
 * Renew an existing subscription
 * @param userId The ID of the user renewing their subscription
 * @param planId The ID of the plan being renewed
 * @returns Promise with the payment result
 */
/* istanbul ignore next */
cov_15z3stinmo().s[84]++;
const renewSubscription = async (userId, planId) => {
  /* istanbul ignore next */
  cov_15z3stinmo().f[8]++;
  cov_15z3stinmo().s[85]++;
  // Forward to initiateSubscriptionPurchase so we keep one code-path
  return (0, exports.initiateSubscriptionPurchase)(userId, planId);
};
/* istanbul ignore next */
cov_15z3stinmo().s[86]++;
exports.renewSubscription = renewSubscription;
/**
 * Cancel a user's subscription
 * @param userId The ID of the user cancelling their subscription
 * @returns Promise with the result of the cancellation
 */
/* istanbul ignore next */
cov_15z3stinmo().s[87]++;
const cancelSubscription = async userId => {
  /* istanbul ignore next */
  cov_15z3stinmo().f[9]++;
  cov_15z3stinmo().s[88]++;
  try {
    // Get the user's current subscription details
    const {
      data: userData,
      error: fetchError
    } =
    /* istanbul ignore next */
    (cov_15z3stinmo().s[89]++, await supabase_1.supabase.from('profiles').select('subscription_expiry, account_type, payment_status').eq('id', userId).single());
    /* istanbul ignore next */
    cov_15z3stinmo().s[90]++;
    if (fetchError) {
      /* istanbul ignore next */
      cov_15z3stinmo().b[33][0]++;
      cov_15z3stinmo().s[91]++;
      throw fetchError;
    } else
    /* istanbul ignore next */
    {
      cov_15z3stinmo().b[33][1]++;
    }
    // Update the subscription status to indicate it's cancelled
    // but allow the user to continue using it until the expiry date
    const {
      error
    } =
    /* istanbul ignore next */
    (cov_15z3stinmo().s[92]++, await supabase_1.supabase.from('profiles').update({
      subscription_status: 'expired',
      // If they're in trial and cancel, reset payment_status to 'none'
      // If they've paid, keep their payment_status as 'paid' until expiry
      payment_status: userData.payment_status === 'trial' ?
      /* istanbul ignore next */
      (cov_15z3stinmo().b[34][0]++, 'none') :
      /* istanbul ignore next */
      (cov_15z3stinmo().b[34][1]++, userData.payment_status),
      updated_at: new Date().toISOString()
    }).eq('id', userId));
    /* istanbul ignore next */
    cov_15z3stinmo().s[93]++;
    if (error) {
      /* istanbul ignore next */
      cov_15z3stinmo().b[35][0]++;
      cov_15z3stinmo().s[94]++;
      throw error;
    } else
    /* istanbul ignore next */
    {
      cov_15z3stinmo().b[35][1]++;
    }
    cov_15z3stinmo().s[95]++;
    return {
      success: true
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_15z3stinmo().s[96]++;
    console.error('Error cancelling subscription:', error);
    /* istanbul ignore next */
    cov_15z3stinmo().s[97]++;
    return {
      success: false,
      error:
      /* istanbul ignore next */
      (cov_15z3stinmo().b[36][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_15z3stinmo().b[36][1]++, 'Failed to cancel subscription')
    };
  }
};
/* istanbul ignore next */
cov_15z3stinmo().s[98]++;
exports.cancelSubscription = cancelSubscription;
/**
 * Check for and update expired subscriptions
 * This would typically be called by a server-side cron job,
 * but can be checked on app startup as well
 * @param userId The ID of the user to check
 * @returns Promise indicating if any update was made
 */
/* istanbul ignore next */
cov_15z3stinmo().s[99]++;
const checkAndUpdateSubscriptionStatus = async userId => {
  /* istanbul ignore next */
  cov_15z3stinmo().f[10]++;
  cov_15z3stinmo().s[100]++;
  try {
    // Get the user's current subscription details
    const {
      data: userData,
      error: fetchError
    } =
    /* istanbul ignore next */
    (cov_15z3stinmo().s[101]++, await supabase_1.supabase.from('profiles').select('subscription_expiry, subscription_status, account_type, payment_status').eq('id', userId).single());
    /* istanbul ignore next */
    cov_15z3stinmo().s[102]++;
    if (
    /* istanbul ignore next */
    (cov_15z3stinmo().b[38][0]++, fetchError) ||
    /* istanbul ignore next */
    (cov_15z3stinmo().b[38][1]++, !userData)) {
      /* istanbul ignore next */
      cov_15z3stinmo().b[37][0]++;
      cov_15z3stinmo().s[103]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_15z3stinmo().b[37][1]++;
    }
    // If the user doesn't have a subscription or it's already marked as expired, do nothing
    cov_15z3stinmo().s[104]++;
    if (
    /* istanbul ignore next */
    (cov_15z3stinmo().b[40][0]++, userData.account_type === 'collector') ||
    /* istanbul ignore next */
    (cov_15z3stinmo().b[40][1]++, userData.subscription_status === 'none') ||
    /* istanbul ignore next */
    (cov_15z3stinmo().b[40][2]++, userData.subscription_status === 'expired')) {
      /* istanbul ignore next */
      cov_15z3stinmo().b[39][0]++;
      cov_15z3stinmo().s[105]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_15z3stinmo().b[39][1]++;
    }
    // Check if the subscription has expired
    cov_15z3stinmo().s[106]++;
    if (userData.subscription_expiry) {
      /* istanbul ignore next */
      cov_15z3stinmo().b[41][0]++;
      const expiryDate =
      /* istanbul ignore next */
      (cov_15z3stinmo().s[107]++, new Date(userData.subscription_expiry));
      const now =
      /* istanbul ignore next */
      (cov_15z3stinmo().s[108]++, new Date());
      /* istanbul ignore next */
      cov_15z3stinmo().s[109]++;
      if (
      /* istanbul ignore next */
      (cov_15z3stinmo().b[43][0]++, expiryDate <= now) &&
      /* istanbul ignore next */
      (cov_15z3stinmo().b[43][1]++, userData.subscription_status === 'active')) {
        /* istanbul ignore next */
        cov_15z3stinmo().b[42][0]++;
        // Update the subscription status to expired
        const {
          error
        } =
        /* istanbul ignore next */
        (cov_15z3stinmo().s[110]++, await supabase_1.supabase.from('profiles').update({
          subscription_status: 'expired',
          payment_status: 'none',
          // Reset payment status when subscription expires
          updated_at: now.toISOString()
        }).eq('id', userId));
        /* istanbul ignore next */
        cov_15z3stinmo().s[111]++;
        if (!error) {
          /* istanbul ignore next */
          cov_15z3stinmo().b[44][0]++;
          cov_15z3stinmo().s[112]++;
          return true; // Status was updated
        } else
        /* istanbul ignore next */
        {
          cov_15z3stinmo().b[44][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_15z3stinmo().b[42][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_15z3stinmo().b[41][1]++;
    }
    cov_15z3stinmo().s[113]++;
    return false; // No update was needed
  } catch (error) {
    /* istanbul ignore next */
    cov_15z3stinmo().s[114]++;
    console.error('Error checking subscription status:', error);
    /* istanbul ignore next */
    cov_15z3stinmo().s[115]++;
    return false;
  }
};
/* istanbul ignore next */
cov_15z3stinmo().s[116]++;
exports.checkAndUpdateSubscriptionStatus = checkAndUpdateSubscriptionStatus;
/**
 * Get available subscription plans for a specific account type
 * @param accountType The account type to get plans for
 * @returns Array of subscription plans
 */
/* istanbul ignore next */
cov_15z3stinmo().s[117]++;
const getAvailablePlans = accountType => {
  /* istanbul ignore next */
  cov_15z3stinmo().f[11]++;
  const planType =
  /* istanbul ignore next */
  (cov_15z3stinmo().s[118]++, accountType === 'dealer' ?
  /* istanbul ignore next */
  (cov_15z3stinmo().b[45][0]++, subscriptionTypes_1.SubscriptionPlanType.DEALER) :
  /* istanbul ignore next */
  (cov_15z3stinmo().b[45][1]++, subscriptionTypes_1.SubscriptionPlanType.ORGANIZER));
  /* istanbul ignore next */
  cov_15z3stinmo().s[119]++;
  return subscriptionTypes_1.SUBSCRIPTION_PLANS.filter(plan => {
    /* istanbul ignore next */
    cov_15z3stinmo().f[12]++;
    cov_15z3stinmo().s[120]++;
    return plan.type === planType;
  });
};
/* istanbul ignore next */
cov_15z3stinmo().s[121]++;
exports.getAvailablePlans = getAvailablePlans;
/**
 * Format the subscription expiry date for display
 * @param expiryDate The expiry date to format
 * @returns Formatted date string
 */
/* istanbul ignore next */
cov_15z3stinmo().s[122]++;
const formatExpiryDate = expiryDate => {
  /* istanbul ignore next */
  cov_15z3stinmo().f[13]++;
  cov_15z3stinmo().s[123]++;
  if (!expiryDate) {
    /* istanbul ignore next */
    cov_15z3stinmo().b[46][0]++;
    cov_15z3stinmo().s[124]++;
    return 'No expiration date';
  } else
  /* istanbul ignore next */
  {
    cov_15z3stinmo().b[46][1]++;
  }
  const date =
  /* istanbul ignore next */
  (cov_15z3stinmo().s[125]++, typeof expiryDate === 'string' ?
  /* istanbul ignore next */
  (cov_15z3stinmo().b[47][0]++, new Date(expiryDate)) :
  /* istanbul ignore next */
  (cov_15z3stinmo().b[47][1]++, expiryDate));
  /* istanbul ignore next */
  cov_15z3stinmo().s[126]++;
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
};
/* istanbul ignore next */
cov_15z3stinmo().s[127]++;
exports.formatExpiryDate = formatExpiryDate;
/**
 * Check if a user can access dealer features
 * @param user The user to check
 * @returns Boolean indicating if the user can access dealer features
 */
/* istanbul ignore next */
cov_15z3stinmo().s[128]++;
const canAccessDealerFeatures = user => {
  /* istanbul ignore next */
  cov_15z3stinmo().f[14]++;
  cov_15z3stinmo().s[129]++;
  if (!user) {
    /* istanbul ignore next */
    cov_15z3stinmo().b[48][0]++;
    cov_15z3stinmo().s[130]++;
    return false;
  } else
  /* istanbul ignore next */
  {
    cov_15z3stinmo().b[48][1]++;
  }
  // Organizers also have dealer privileges
  cov_15z3stinmo().s[131]++;
  if (user.accountType === 'organizer') {
    /* istanbul ignore next */
    cov_15z3stinmo().b[49][0]++;
    cov_15z3stinmo().s[132]++;
    return (0, exports.hasActiveSubscription)(user);
  } else
  /* istanbul ignore next */
  {
    cov_15z3stinmo().b[49][1]++;
  }
  cov_15z3stinmo().s[133]++;
  return /* istanbul ignore next */(cov_15z3stinmo().b[50][0]++, user.accountType === 'dealer') &&
  /* istanbul ignore next */
  (cov_15z3stinmo().b[50][1]++, (0, exports.hasActiveSubscription)(user));
};
/* istanbul ignore next */
cov_15z3stinmo().s[134]++;
exports.canAccessDealerFeatures = canAccessDealerFeatures;
/**
 * Check if a user can access organizer features
 * @param user The user to check
 * @returns Boolean indicating if the user can access organizer features
 */
/* istanbul ignore next */
cov_15z3stinmo().s[135]++;
const canAccessOrganizerFeatures = user => {
  /* istanbul ignore next */
  cov_15z3stinmo().f[15]++;
  cov_15z3stinmo().s[136]++;
  if (!user) {
    /* istanbul ignore next */
    cov_15z3stinmo().b[51][0]++;
    cov_15z3stinmo().s[137]++;
    return false;
  } else
  /* istanbul ignore next */
  {
    cov_15z3stinmo().b[51][1]++;
  }
  cov_15z3stinmo().s[138]++;
  return /* istanbul ignore next */(cov_15z3stinmo().b[52][0]++, user.accountType === 'organizer') &&
  /* istanbul ignore next */
  (cov_15z3stinmo().b[52][1]++, (0, exports.hasActiveSubscription)(user));
};
/* istanbul ignore next */
cov_15z3stinmo().s[139]++;
exports.canAccessOrganizerFeatures = canAccessOrganizerFeatures;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,