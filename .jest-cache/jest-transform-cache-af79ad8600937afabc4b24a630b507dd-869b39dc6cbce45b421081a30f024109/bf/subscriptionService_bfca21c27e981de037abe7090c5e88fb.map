{"version":3,"names":["cov_15z3stinmo","actualCoverage","s","supabase_1","require","stripePaymentService_1","subscriptionTypes_1","hasActiveSubscription","user","f","b","accountType","subscriptionStatus","subscriptionExpiry","expiryDate","Date","exports","isInTrialPeriod","paymentStatus","timeRemaining","getSubscriptionTimeRemaining","days","now","diffMs","getTime","hours","Math","floor","isSubscriptionExpired","getSubscriptionDetails","planType","SubscriptionPlanType","DEALER","ORGANIZER","plan","SUBSCRIPTION_PLANS","find","p","type","duration","SubscriptionDuration","ANNUAL","isTrialPeriod","isPaid","status","expiry","isActive","initiateSubscriptionPurchase","userId","planId","stripeCtx","id","success","error","stripeResult","createPaymentSheetForSubscription","initPaymentSheet","presentPaymentSheet","data","profile","updateError","supabase","from","update","payment_status","eq","select","single","console","transactionId","subscription_expiry","undefined","mockTransactionId","random","calculateExpiryDate","account_type","subscription_status","toISOString","updated_at","message","renewSubscription","cancelSubscription","userData","fetchError","checkAndUpdateSubscriptionStatus","getAvailablePlans","filter","formatExpiryDate","date","toLocaleDateString","year","month","day","canAccessDealerFeatures","canAccessOrganizerFeatures"],"sources":["/Users/kevin/card-show-finder/src/services/subscriptionService.ts"],"sourcesContent":["// src/services/subscriptionService.ts\nimport { supabase } from '../supabase';\nimport { User } from '../types';\nimport { createPaymentSheetForSubscription } from './stripePaymentService';\nimport {\n  SubscriptionPlan,\n  SubscriptionPlanType,\n  SubscriptionDuration,\n  SUBSCRIPTION_PLANS,\n  StripePaymentResult,\n  calculateExpiryDate\n} from './subscriptionTypes';\n\n/**\n * Result of a payment operation\n */\nexport interface PaymentResult {\n  success: boolean;\n  transactionId?: string;\n  error?: string;\n  subscriptionExpiry?: Date;\n}\n\n/**\n * Check if a user has an active subscription\n * @param user The user to check\n * @returns Boolean indicating if the subscription is active\n */\nexport const hasActiveSubscription = (user: User): boolean => {\n  if (!user) return false;\n  \n  // Free collector accounts don't have subscriptions\n  if (user.accountType === 'collector') return false;\n  \n  // Check if the subscription status is active\n  if (user.subscriptionStatus !== 'active') return false;\n  \n  // Check if the subscription has expired\n  if (user.subscriptionExpiry) {\n    const expiryDate = new Date(user.subscriptionExpiry);\n    return expiryDate > new Date();\n  }\n  \n  return false;\n};\n\n/**\n * Check if a user is in their trial period\n * @param user The user to check\n * @returns Boolean indicating if the user is in trial period\n */\nexport const isInTrialPeriod = (user: User): boolean => {\n  if (!user || !hasActiveSubscription(user)) return false;\n  \n  // Check if payment_status is explicitly set to 'trial'\n  if (user.paymentStatus === 'trial') return true;\n  \n  // Legacy check for users without payment_status field\n  // If they have less than 7 days remaining and no payment_status,\n  // they're likely in a trial period\n  if (!user.paymentStatus || user.paymentStatus === 'none') {\n    const timeRemaining = getSubscriptionTimeRemaining(user);\n    if (timeRemaining && timeRemaining.days < 7) {\n      return true;\n    }\n  }\n  \n  return false;\n};\n\n/**\n * Get the time remaining in a user's subscription\n * @param user The user to check\n * @returns Object with days, hours remaining or null if no active subscription\n */\nexport const getSubscriptionTimeRemaining = (user: User): { days: number, hours: number } | null => {\n  if (!hasActiveSubscription(user) || !user.subscriptionExpiry) {\n    return null;\n  }\n  \n  const now = new Date();\n  const expiryDate = new Date(user.subscriptionExpiry);\n  const diffMs = expiryDate.getTime() - now.getTime();\n  \n  // If already expired\n  if (diffMs <= 0) return { days: 0, hours: 0 };\n  \n  const days = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n  const hours = Math.floor((diffMs % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n  \n  return { days, hours };\n};\n\n/**\n * Check if a user's subscription has expired\n * @param user The user to check\n * @returns Boolean indicating if the subscription is expired\n */\nexport const isSubscriptionExpired = (user: User): boolean => {\n  if (!user || user.accountType === 'collector') return false;\n  \n  if (user.subscriptionStatus === 'expired') return true;\n  \n  if (user.subscriptionExpiry) {\n    const expiryDate = new Date(user.subscriptionExpiry);\n    return expiryDate <= new Date();\n  }\n  \n  return false;\n};\n\n/**\n * Get subscription details for a user\n * @param user The user to get subscription details for\n * @returns Object with subscription details or null if no subscription\n */\nexport const getSubscriptionDetails = (user: User): {\n  accountType: string;\n  status: string;\n  expiry: Date | null;\n  isActive: boolean;\n  timeRemaining: { days: number, hours: number } | null;\n  plan: SubscriptionPlan | null;\n  isPaid: boolean;\n  isTrialPeriod: boolean;\n} | null => {\n  if (!user || user.accountType === 'collector') {\n    return null;\n  }\n  \n  // Find the plan that matches the user's account type\n  const planType = user.accountType === 'dealer' \n    ? SubscriptionPlanType.DEALER \n    : SubscriptionPlanType.ORGANIZER;\n    \n  // Default to the annual plan as it's the most common\n  const plan = SUBSCRIPTION_PLANS.find(p => \n    p.type === planType && p.duration === SubscriptionDuration.ANNUAL\n  ) || null;\n  \n  // Check if user is in trial period\n  const isTrialPeriod = isInTrialPeriod(user);\n  \n  // Check if user has paid (either explicitly marked as paid or has active subscription but not in trial)\n  const isPaid = user.paymentStatus === 'paid' || \n                (hasActiveSubscription(user) && !isTrialPeriod);\n  \n  return {\n    accountType: user.accountType,\n    status: user.subscriptionStatus,\n    expiry: user.subscriptionExpiry ? new Date(user.subscriptionExpiry) : null,\n    isActive: hasActiveSubscription(user),\n    timeRemaining: getSubscriptionTimeRemaining(user),\n    plan,\n    isPaid,\n    isTrialPeriod\n  };\n};\n\n/**\n * Initiate a subscription purchase\n * @param userId The ID of the user making the purchase\n * @param planId The ID of the plan being purchased\n * @param stripeCtx Optional Stripe helpers (initPaymentSheet, presentPaymentSheet) â€“\n *                  if provided we run the real payment flow, otherwise we fall back\n *                  to the legacy mock implementation (useful for unit tests / Storybook).\n * @returns Promise with the payment result\n */\nexport const initiateSubscriptionPurchase = async (\n  userId: string,\n  planId: string,\n  stripeCtx?: {\n    initPaymentSheet: (params: any) => Promise<any>;\n    presentPaymentSheet: () => Promise<any>;\n  }\n): Promise<PaymentResult> => {\n  try {\n    // Find the selected plan\n    const plan = SUBSCRIPTION_PLANS.find(p => p.id === planId);\n    if (!plan) {\n      return {\n        success: false,\n        error: 'Invalid subscription plan selected'\n      };\n    }\n    \n    /* ------------------------------------------------------------------\n     * 1. Real payment flow via Stripe (preferred)\n     * ------------------------------------------------------------------ */\n    if (stripeCtx) {\n      const stripeResult: StripePaymentResult =\n        await createPaymentSheetForSubscription(\n          userId,\n          planId,\n          stripeCtx.initPaymentSheet,\n          stripeCtx.presentPaymentSheet\n        );\n\n      if (!stripeResult.success) {\n        return {\n          success: false,\n          error: stripeResult.error || 'Stripe payment failed',\n        };\n      }\n\n      /* After a successful payment, the stripePaymentService already\n       * updates the user profile with the correct expiry date and role.\n       * We need to also update the payment_status to 'paid'\n       */\n      const { data: profile, error: updateError } = await supabase\n        .from('profiles')\n        .update({ payment_status: 'paid' })\n        .eq('id', userId)\n        .select('subscription_expiry')\n        .single();\n\n      if (updateError) {\n        console.error('Error updating payment status:', updateError);\n      }\n\n      return {\n        success: true,\n        transactionId: stripeResult.transactionId,\n        subscriptionExpiry: profile?.subscription_expiry\n          ? new Date(profile.subscription_expiry)\n          : undefined,\n      };\n    }\n    \n    /* ------------------------------------------------------------------\n     * 2. Legacy mock payment (development fallback)\n     * ------------------------------------------------------------------ */\n    // For demonstration purposes, we'll simulate a successful payment\n    const mockTransactionId = `tx_${Date.now()}_${Math.floor(Math.random() * 1000)}`;\n    \n    // Calculate when the subscription will expire\n    const expiryDate = calculateExpiryDate(plan);\n    \n    // Update the user's profile with the new subscription information\n    const { error } = await supabase\n      .from('profiles')\n      .update({\n        account_type: plan.type,\n        subscription_status: 'active',\n        payment_status: 'paid', // Mark as paid immediately for prepaid subscriptions\n        subscription_expiry: expiryDate.toISOString(),\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', userId);\n    \n    if (error) {\n      console.error('Error updating subscription status:', error);\n      return {\n        success: false,\n        error: 'Failed to update subscription status'\n      };\n    }\n    \n    return {\n      success: true,\n      transactionId: mockTransactionId,\n      subscriptionExpiry: expiryDate\n    };\n  } catch (error: any) {\n    console.error('Error processing subscription purchase:', error);\n    return {\n      success: false,\n      error: error.message || 'Failed to process payment'\n    };\n  }\n};\n\n/**\n * Renew an existing subscription\n * @param userId The ID of the user renewing their subscription\n * @param planId The ID of the plan being renewed\n * @returns Promise with the payment result\n */\nexport const renewSubscription = async (\n  userId: string,\n  planId: string\n): Promise<PaymentResult> => {\n  // Forward to initiateSubscriptionPurchase so we keep one code-path\n  return initiateSubscriptionPurchase(userId, planId);\n};\n\n/**\n * Cancel a user's subscription\n * @param userId The ID of the user cancelling their subscription\n * @returns Promise with the result of the cancellation\n */\nexport const cancelSubscription = async (\n  userId: string\n): Promise<{ success: boolean, error?: string }> => {\n  try {\n    // Get the user's current subscription details\n    const { data: userData, error: fetchError } = await supabase\n      .from('profiles')\n      .select('subscription_expiry, account_type, payment_status')\n      .eq('id', userId)\n      .single();\n    \n    if (fetchError) {\n      throw fetchError;\n    }\n    \n    // Update the subscription status to indicate it's cancelled\n    // but allow the user to continue using it until the expiry date\n    const { error } = await supabase\n      .from('profiles')\n      .update({\n        subscription_status: 'expired',\n        // If they're in trial and cancel, reset payment_status to 'none'\n        // If they've paid, keep their payment_status as 'paid' until expiry\n        payment_status: userData.payment_status === 'trial' ? 'none' : userData.payment_status,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', userId);\n    \n    if (error) {\n      throw error;\n    }\n    \n    return { success: true };\n  } catch (error: any) {\n    console.error('Error cancelling subscription:', error);\n    return {\n      success: false,\n      error: error.message || 'Failed to cancel subscription'\n    };\n  }\n};\n\n/**\n * Check for and update expired subscriptions\n * This would typically be called by a server-side cron job,\n * but can be checked on app startup as well\n * @param userId The ID of the user to check\n * @returns Promise indicating if any update was made\n */\nexport const checkAndUpdateSubscriptionStatus = async (\n  userId: string\n): Promise<boolean> => {\n  try {\n    // Get the user's current subscription details\n    const { data: userData, error: fetchError } = await supabase\n      .from('profiles')\n      .select('subscription_expiry, subscription_status, account_type, payment_status')\n      .eq('id', userId)\n      .single();\n    \n    if (fetchError || !userData) {\n      return false;\n    }\n    \n    // If the user doesn't have a subscription or it's already marked as expired, do nothing\n    if (\n      userData.account_type === 'collector' || \n      userData.subscription_status === 'none' ||\n      userData.subscription_status === 'expired'\n    ) {\n      return false;\n    }\n    \n    // Check if the subscription has expired\n    if (userData.subscription_expiry) {\n      const expiryDate = new Date(userData.subscription_expiry);\n      const now = new Date();\n      \n      if (expiryDate <= now && userData.subscription_status === 'active') {\n        // Update the subscription status to expired\n        const { error } = await supabase\n          .from('profiles')\n          .update({\n            subscription_status: 'expired',\n            payment_status: 'none', // Reset payment status when subscription expires\n            updated_at: now.toISOString()\n          })\n          .eq('id', userId);\n        \n        if (!error) {\n          return true; // Status was updated\n        }\n      }\n    }\n    \n    return false; // No update was needed\n  } catch (error) {\n    console.error('Error checking subscription status:', error);\n    return false;\n  }\n};\n\n/**\n * Get available subscription plans for a specific account type\n * @param accountType The account type to get plans for\n * @returns Array of subscription plans\n */\nexport const getAvailablePlans = (\n  accountType: 'dealer' | 'organizer'\n): SubscriptionPlan[] => {\n  const planType = accountType === 'dealer' \n    ? SubscriptionPlanType.DEALER \n    : SubscriptionPlanType.ORGANIZER;\n  \n  return SUBSCRIPTION_PLANS.filter(plan => plan.type === planType);\n};\n\n/**\n * Format the subscription expiry date for display\n * @param expiryDate The expiry date to format\n * @returns Formatted date string\n */\nexport const formatExpiryDate = (expiryDate: Date | string | null): string => {\n  if (!expiryDate) return 'No expiration date';\n  \n  const date = typeof expiryDate === 'string' ? new Date(expiryDate) : expiryDate;\n  \n  return date.toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n};\n\n/**\n * Check if a user can access dealer features\n * @param user The user to check\n * @returns Boolean indicating if the user can access dealer features\n */\nexport const canAccessDealerFeatures = (user: User | null): boolean => {\n  if (!user) return false;\n  \n  // Organizers also have dealer privileges\n  if (user.accountType === 'organizer') return hasActiveSubscription(user);\n  \n  return user.accountType === 'dealer' && hasActiveSubscription(user);\n};\n\n/**\n * Check if a user can access organizer features\n * @param user The user to check\n * @returns Boolean indicating if the user can access organizer features\n */\nexport const canAccessOrganizerFeatures = (user: User | null): boolean => {\n  if (!user) return false;\n  \n  return user.accountType === 'organizer' && hasActiveSubscription(user);\n};\n"],"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","ignoreList":[]}