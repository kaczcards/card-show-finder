{"version":3,"names":["supabase","cov_1wytfnkf42","s","findDirectConversation","_ref","_asyncToGenerator","userA","userB","f","_ref2","rpc","user_a","user_b","data","error","b","console","_x","_x2","apply","arguments","createDirectConversation","_ref3","_ref4","Error","message","_x3","_x4","createGroupConversation","_ref5","creatorId","participants","showId","_ref6","creator_id","participant_ids","show_id","_x5","_x6","_x7","markConversationAsRead","_ref7","conversationId","userId","_ref8","conversation_id","user_id","_x8","_x9","getConversationDetails","_ref9","_ref0","current_user_id","_x0","_x1","sendMessage","_ref1","senderId","messageText","_ref10","from","insert","sender_id","message_text","read_by_user_ids","select","single","update","updated_at","Date","toISOString","eq","_x10","_x11","_x12","getMessages","_ref11","limit","length","undefined","page","offset","_ref12","order","ascending","range","map","item","id","created_at","sender_profile","sender","_x13","getConversations","_ref13","_ref14","convo","type","participant_count","conversation_participants","unread_count","last_message_text","last_message_timestamp","_x14","sendBroadcastMessage","_ref15","params","_ref16","functions","invoke","body","success","_x15"],"sources":["messagingService.rpc.ts"],"sourcesContent":["import { supabase } from '../supabase';\nimport * as userRoleService from './userRoleService';\nimport { UserRole } from './userRoleService';\n\n// TypeScript interfaces for Messages and Conversations\nexport interface Message {\n  id: string;\n  conversation_id: string;\n  sender_id: string;\n  message_text: string;\n  created_at: string;\n  read_by_user_ids: string[];\n  sender_profile?: {\n    id: string;\n    username?: string;\n    full_name?: string;\n    avatar_url?: string;\n  };\n}\n\nexport interface Conversation {\n  id: string;\n  type: 'direct' | 'group' | 'show';\n  show_id?: string;\n  participant_count: number;\n  last_message_text?: string;\n  last_message_timestamp?: string;\n  unread_count: number;\n  participants: {\n    user_id: string;\n    display_name?: string;\n    photo_url?: string;\n  }[];\n}\n\n// Broadcast message parameters\nexport interface BroadcastMessageParams {\n  senderId: string;\n  message: string;\n  recipientRoles: UserRole[];\n  showId?: string;\n  /**\n   * Optional override to explicitly mark the broadcast\n   * as pre-show (TRUE) or post-show (FALSE).  When omitted\n   * the edge-function infers this from current date vs show date.\n   */\n  isPreShow?: boolean;\n}\n\n// ---------------------------------------------------------------------------\n//  Conversation functions\n// ---------------------------------------------------------------------------\n\n/**\n * Try to find an existing one-to-one (direct) conversation between two users.\n * Uses the RPC function 'find_direct_conversation' for efficient database query.\n * \n * @param userA First user id\n * @param userB Second user id\n * @returns conversation id or null if none exists\n */\nexport const findDirectConversation = async (\n  userA: string,\n  userB: string\n): Promise<string | null> => {\n  try {\n    // Call the RPC function to find direct conversation\n    const { data, error } = await supabase\n      .rpc('find_direct_conversation', { \n        user_a: userA, \n        user_b: userB \n      });\n\n    if (error) {\n      console.error('[messagingService/findDirectConversation] RPC error:', error);\n      return null;\n    }\n\n    // The RPC function returns the conversation ID or null\n    return data;\n  } catch (error) {\n    console.error('[messagingService/findDirectConversation] exception:', error);\n    return null;\n  }\n};\n\n/**\n * Create a direct conversation between two users.\n * Uses the RPC function 'create_direct_conversation' to handle the complex transaction.\n * \n * @param userA First user id\n * @param userB Second user id\n * @returns The new conversation id\n */\nexport const createDirectConversation = async (\n  userA: string,\n  userB: string\n): Promise<string> => {\n  try {\n    // Call the RPC function to create direct conversation\n    const { data, error } = await supabase\n      .rpc('create_direct_conversation', {\n        user_a: userA,\n        user_b: userB\n      });\n\n    if (error) {\n      console.error('[messagingService/createDirectConversation] RPC error:', error);\n      throw new Error(`Failed to create conversation: ${error.message}`);\n    }\n\n    if (!data) {\n      throw new Error('Failed to create conversation: No ID returned');\n    }\n\n    return data;\n  } catch (error) {\n    console.error('[messagingService/createDirectConversation] exception:', error);\n    throw error;\n  }\n};\n\n/**\n * Creates a group conversation for broadcasting messages.\n * Uses the RPC function 'create_group_conversation' to handle the complex transaction.\n * \n * @param creatorId The ID of the user creating the group\n * @param participants Array of user IDs to include in the group \n * @param showId Optional Show ID if this is a show-specific group\n * @returns The conversation ID\n */\nexport const createGroupConversation = async (\n  creatorId: string,\n  participants: string[],\n  showId?: string\n): Promise<string> => {\n  try {\n    // Call the RPC function to create group conversation\n    const { data, error } = await supabase\n      .rpc('create_group_conversation', {\n        creator_id: creatorId,\n        participant_ids: participants,\n        show_id: showId || null\n      });\n\n    if (error) {\n      console.error('[messagingService/createGroupConversation] RPC error:', error);\n      throw new Error(`Failed to create group conversation: ${error.message}`);\n    }\n\n    if (!data) {\n      throw new Error('Failed to create group conversation: No ID returned');\n    }\n\n    return data;\n  } catch (error) {\n    console.error('[messagingService/createGroupConversation] exception:', error);\n    throw error;\n  }\n};\n\n/**\n * Mark all messages in a conversation as read by a specific user.\n * Uses the RPC function 'mark_conversation_read' for efficient updates.\n * \n * @param conversationId The conversation ID\n * @param userId The user ID marking messages as read\n * @returns Number of messages marked as read\n */\nexport const markConversationAsRead = async (\n  conversationId: string,\n  userId: string\n): Promise<number> => {\n  try {\n    // Call the RPC function to mark conversation as read\n    const { data, error } = await supabase\n      .rpc('mark_conversation_read', {\n        conversation_id: conversationId,\n        user_id: userId\n      });\n\n    if (error) {\n      console.error('[messagingService/markConversationAsRead] RPC error:', error);\n      return 0;\n    }\n\n    return data || 0;\n  } catch (error) {\n    console.error('[messagingService/markConversationAsRead] exception:', error);\n    return 0;\n  }\n};\n\n/**\n * Get detailed information about a conversation including participants and latest message.\n * Uses the RPC function 'get_conversation_with_participants' for efficient data retrieval.\n * \n * @param conversationId The conversation ID\n * @param userId The current user ID requesting the details\n * @returns Conversation details or null if not found\n */\nexport const getConversationDetails = async (\n  conversationId: string,\n  userId: string\n): Promise<Conversation | null> => {\n  try {\n    // Call the RPC function to get conversation details\n    const { data, error } = await supabase\n      .rpc('get_conversation_with_participants', {\n        conversation_id: conversationId,\n        current_user_id: userId\n      });\n\n    if (error) {\n      console.error('[messagingService/getConversationDetails] RPC error:', error);\n      return null;\n    }\n\n    if (!data || data.error) {\n      console.error('[messagingService/getConversationDetails] Data error:', data?.error || 'No data returned');\n      return null;\n    }\n\n    // Convert the JSONB response to our Conversation interface\n    return data as Conversation;\n  } catch (error) {\n    console.error('[messagingService/getConversationDetails] exception:', error);\n    return null;\n  }\n};\n\n/**\n * Send a message in a conversation.\n * Uses query builder for simple insert operation.\n * \n * @param conversationId The conversation ID\n * @param senderId The sender's user ID\n * @param messageText The message content\n * @returns The created message or null if failed\n */\nexport const sendMessage = async (\n  conversationId: string,\n  senderId: string,\n  messageText: string\n): Promise<Message | null> => {\n  try {\n    // Create a new message\n    const { data, error } = await supabase\n      .from('messages')\n      .insert({\n        conversation_id: conversationId,\n        sender_id: senderId,\n        message_text: messageText,\n        read_by_user_ids: [senderId]\n      })\n      .select('*')\n      .single();\n\n    if (error) {\n      console.error('[messagingService/sendMessage] error:', error);\n      return null;\n    }\n\n    // Update the conversation's updated_at timestamp\n    await supabase\n      .from('conversations')\n      .update({ updated_at: new Date().toISOString() })\n      .eq('id', conversationId);\n\n    return data as Message;\n  } catch (error) {\n    console.error('[messagingService/sendMessage] exception:', error);\n    return null;\n  }\n};\n\n/**\n * Get messages for a specific conversation.\n * Uses query builder for simple select operation with pagination.\n * \n * @param conversationId The conversation ID\n * @param limit Maximum number of messages to return\n * @param page Page number (1-based)\n * @returns Array of messages\n */\nexport const getMessages = async (\n  conversationId: string,\n  limit: number = 20,\n  page: number = 1\n): Promise<Message[]> => {\n  try {\n    const offset = (page - 1) * limit;\n    \n    const { data, error } = await supabase\n      .from('messages')\n      .select(`\n        *,\n        sender:sender_id (\n          id,\n          username,\n          full_name,\n          avatar_url\n        )\n      `)\n      .eq('conversation_id', conversationId)\n      .order('created_at', { ascending: false })\n      .range(offset, offset + limit - 1);\n\n    if (error) {\n      console.error('[messagingService/getMessages] error:', error);\n      return [];\n    }\n\n    // Map the result to our Message interface\n    return data.map(item => ({\n      id: item.id,\n      conversation_id: item.conversation_id,\n      sender_id: item.sender_id,\n      message_text: item.message_text,\n      created_at: item.created_at,\n      read_by_user_ids: item.read_by_user_ids || [],\n      sender_profile: item.sender\n    }));\n  } catch (error) {\n    console.error('[messagingService/getMessages] exception:', error);\n    return [];\n  }\n};\n\n/**\n * Get all conversations for a user.\n * Uses query builder for simple select operation.\n * \n * @param userId The user ID\n * @returns Array of conversations\n */\nexport const getConversations = async (\n  userId: string\n): Promise<Conversation[]> => {\n  try {\n    // This is a fallback if the RPC method fails\n    // Normally, you should use the useConversationsQuery hook which uses the RPC function\n    const { data, error } = await supabase\n      .from('conversations')\n      .select(`\n        *,\n        conversation_participants!inner (\n          user_id,\n          display_name,\n          photo_url\n        )\n      `)\n      .eq('conversation_participants.user_id', userId);\n\n    if (error) {\n      console.error('[messagingService/getConversations] error:', error);\n      return [];\n    }\n\n    // Process conversations to match our interface\n    return data.map(convo => ({\n      id: convo.id,\n      type: convo.type,\n      show_id: convo.show_id,\n      participant_count: convo.conversation_participants.length,\n      unread_count: 0, // Would need another query to get this accurately\n      participants: convo.conversation_participants,\n      last_message_text: '', // Would need another query to get this\n      last_message_timestamp: convo.updated_at\n    }));\n  } catch (error) {\n    console.error('[messagingService/getConversations] exception:', error);\n    return [];\n  }\n};\n\n/**\n * Send a broadcast message to multiple users based on their roles.\n * Uses edge function for complex processing.\n * \n * @param params Broadcast message parameters\n * @returns Success status\n */\nexport const sendBroadcastMessage = async (\n  params: BroadcastMessageParams\n): Promise<boolean> => {\n  try {\n    // Call the edge function to handle broadcast message\n    const { data, error } = await supabase.functions.invoke('broadcast-message', {\n      body: params\n    });\n\n    if (error) {\n      console.error('[messagingService/sendBroadcastMessage] error:', error);\n      return false;\n    }\n\n    return data?.success || false;\n  } catch (error) {\n    console.error('[messagingService/sendBroadcastMessage] exception:', error);\n    return false;\n  }\n};\n"],"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","ignoreList":[]}