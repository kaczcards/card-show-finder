{"version":3,"names":["cov_7p9bcyhz4","actualCoverage","s","supabase_1","require","MFAService","baseUrl","constructor","f","supabaseUrl","b","supabase","auth","url","replace","startEnrollment","data","error","callMFAEndpoint","Error","message","console","verifySetup","code","challengeId","authenticate","userId","sessionId","validateRecoveryCode","disableMFA","getMFAStatus","regenerateRecoveryCodes","isMFARequired","profile","from","select","eq","single","mfa_enabled","mfa_verified","endpoint","body","method","session","getSession","headers","access_token","response","fetch","JSON","stringify","ok","errorData","json","status","exports","mfaService"],"sources":["/Users/kevin/card-show-finder/src/services/mfaService.ts"],"sourcesContent":["import { supabase } from \"../lib/supabase\";\n\n/**\n * MFA enrollment response\n */\nexport interface MFAEnrollmentResponse {\n  secret: string;\n  qrCode: string;\n  challengeId: string;\n  algorithm: string;\n  digits: number;\n  period: number;\n}\n\n/**\n * MFA verification response\n */\nexport interface MFAVerificationResponse {\n  success: boolean;\n  recoveryCodes: string[];\n  message: string;\n}\n\n/**\n * MFA authentication response\n */\nexport interface MFAAuthenticationResponse {\n  success: boolean;\n  message: string;\n  sessionId?: string;\n}\n\n/**\n * MFA recovery code validation response\n */\nexport interface MFARecoveryResponse {\n  success: boolean;\n  message: string;\n  sessionId?: string;\n  recoveryCodesRemaining: number;\n}\n\n/**\n * MFA status response\n */\nexport interface MFAStatusResponse {\n  mfaEnabled: boolean;\n  mfaVerified: boolean;\n  enrollmentTime: string | null;\n  recoveryCodesRemaining: number;\n}\n\n/**\n * MFA service for managing Multi-Factor Authentication\n */\nexport class MFAService {\n  private readonly baseUrl: string;\n\n  /**\n   * Constructor\n   */\n  constructor() {\n    // Get the Supabase URL from the client\n    const supabaseUrl = supabase.auth.url() || \"\";\n    // Replace the auth part with functions\n    this.baseUrl = supabaseUrl.replace(\"/auth/v1\", \"/functions/v1/mfa\");\n  }\n\n  /**\n   * Start MFA enrollment process\n   * @returns MFA enrollment data including secret and QR code\n   */\n  async startEnrollment(): Promise<MFAEnrollmentResponse> {\n    try {\n      const { data, error } = await this.callMFAEndpoint<MFAEnrollmentResponse>(\"enroll\", {}, \"GET\");\n      \n      if (error) {\n        throw new Error(error.message);\n      }\n      \n      return data;\n    } catch (error) {\n      console.error(\"Failed to start MFA enrollment:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Verify MFA setup with a TOTP code\n   * @param code - The TOTP code from the authenticator app\n   * @param challengeId - The challenge ID from enrollment\n   * @returns Verification result with recovery codes\n   */\n  async verifySetup(code: string, challengeId: string): Promise<MFAVerificationResponse> {\n    try {\n      const { data, error } = await this.callMFAEndpoint<MFAVerificationResponse>(\"verify\", {\n        code,\n        challengeId\n      });\n      \n      if (error) {\n        throw new Error(error.message);\n      }\n      \n      return data;\n    } catch (error) {\n      console.error(\"Failed to verify MFA setup:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Authenticate with MFA during login\n   * @param code - The TOTP code from the authenticator app\n   * @param userId - The user ID to authenticate\n   * @param sessionId - Optional session ID for tracking\n   * @returns Authentication result\n   */\n  async authenticate(code: string, userId: string, sessionId?: string): Promise<MFAAuthenticationResponse> {\n    try {\n      const { data, error } = await this.callMFAEndpoint<MFAAuthenticationResponse>(\"authenticate\", {\n        code,\n        userId,\n        sessionId\n      });\n      \n      if (error) {\n        throw new Error(error.message);\n      }\n      \n      return data;\n    } catch (error) {\n      console.error(\"Failed to authenticate with MFA:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Validate a recovery code\n   * @param code - The recovery code\n   * @param userId - The user ID\n   * @param sessionId - Optional session ID for tracking\n   * @returns Validation result\n   */\n  async validateRecoveryCode(code: string, userId: string, sessionId?: string): Promise<MFARecoveryResponse> {\n    try {\n      const { data, error } = await this.callMFAEndpoint<MFARecoveryResponse>(\"validate-recovery\", {\n        code,\n        userId,\n        sessionId\n      });\n      \n      if (error) {\n        throw new Error(error.message);\n      }\n      \n      return data;\n    } catch (error) {\n      console.error(\"Failed to validate recovery code:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Disable MFA for the current user\n   * @param code - Optional TOTP code for verification (required for non-admin users)\n   * @returns Result of the operation\n   */\n  async disableMFA(code?: string): Promise<{ success: boolean; message: string }> {\n    try {\n      const { data, error } = await this.callMFAEndpoint<{ success: boolean; message: string }>(\"disable\", {\n        code\n      });\n      \n      if (error) {\n        throw new Error(error.message);\n      }\n      \n      return data;\n    } catch (error) {\n      console.error(\"Failed to disable MFA:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get the current MFA status\n   * @returns MFA status information\n   */\n  async getMFAStatus(): Promise<MFAStatusResponse> {\n    try {\n      const { data, error } = await this.callMFAEndpoint<MFAStatusResponse>(\"status\", {}, \"GET\");\n      \n      if (error) {\n        throw new Error(error.message);\n      }\n      \n      return data;\n    } catch (error) {\n      console.error(\"Failed to get MFA status:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Regenerate recovery codes\n   * @param code - TOTP code for verification\n   * @returns New recovery codes\n   */\n  async regenerateRecoveryCodes(code: string): Promise<MFAVerificationResponse> {\n    try {\n      const { data, error } = await this.callMFAEndpoint<MFAVerificationResponse>(\"regenerate-recovery-codes\", {\n        code\n      });\n      \n      if (error) {\n        throw new Error(error.message);\n      }\n      \n      return data;\n    } catch (error) {\n      console.error(\"Failed to regenerate recovery codes:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Check if MFA is required for a user\n   * @param userId - User ID to check\n   * @returns Whether MFA is required\n   */\n  async isMFARequired(userId: string): Promise<boolean> {\n    try {\n      // Get user profile to check if MFA is enabled\n      const { data: profile, error } = await supabase\n        .from(\"profiles\")\n        .select(\"mfa_enabled, mfa_verified\")\n        .eq(\"id\", userId)\n        .single();\n      \n      if (error) {\n        throw new Error(error.message);\n      }\n      \n      return profile?.mfa_enabled && profile?.mfa_verified;\n    } catch (error) {\n      console.error(\"Failed to check if MFA is required:\", error);\n      return false; // Default to not requiring MFA on error\n    }\n  }\n\n  /**\n   * Call an MFA endpoint\n   * @param endpoint - Endpoint to call\n   * @param body - Request body\n   * @param method - HTTP method\n   * @returns Response data and error\n   */\n  private async callMFAEndpoint<T>(\n    endpoint: string,\n    body: Record<string, any> = {},\n    method: \"GET\" | \"POST\" = \"POST\"\n  ): Promise<{ data: T; error: Error | null }> {\n    try {\n      // Get the current session\n      const { data: { session } } = await supabase.auth.getSession();\n      \n      if (!session) {\n        throw new Error(\"No active session\");\n      }\n      \n      const url = `${this.baseUrl}/${endpoint}`;\n      const headers = {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${session.access_token}`\n      };\n      \n      let response;\n      if (method === \"GET\") {\n        response = await fetch(url, { headers, method });\n      } else {\n        response = await fetch(url, {\n          method,\n          headers,\n          body: JSON.stringify(body)\n        });\n      }\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `HTTP error ${response.status}`);\n      }\n      \n      const data = await response.json();\n      return { data: data as T, error: null };\n    } catch (error) {\n      return { data: {} as T, error: error as Error };\n    }\n  }\n}\n\n// Export a singleton instance\nexport const mfaService = new MFAService();\n"],"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","ignoreList":[]}