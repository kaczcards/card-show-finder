cf60a7812a31d4489c87d05ab3ccc976
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _errorService = require("../../src/services/errorService");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('errorService', function () {
  var consoleErrorSpy;
  var consoleWarnSpy;
  var consoleInfoSpy;
  beforeEach(function () {
    jest.clearAllMocks();
    consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation(function () {});
    consoleWarnSpy = jest.spyOn(console, 'warn').mockImplementation(function () {});
    consoleInfoSpy = jest.spyOn(console, 'info').mockImplementation(function () {});
    (0, _errorService.configureErrorService)({
      enableConsoleLogging: true,
      enableRemoteLogging: false,
      enableStorageLogging: true,
      maxStoredErrors: 100
    });
    _asyncStorage.default.getItem.mockResolvedValue(null);
    _asyncStorage.default.setItem.mockResolvedValue(undefined);
  });
  afterEach(function () {
    consoleErrorSpy.mockRestore();
    consoleWarnSpy.mockRestore();
    consoleInfoSpy.mockRestore();
  });
  describe('Error Configuration', function () {
    test('should apply partial configuration changes', (0, _asyncToGenerator2.default)(function* () {
      (0, _errorService.configureErrorService)({
        enableConsoleLogging: false,
        maxStoredErrors: 50
      });
      var error = (0, _errorService.createValidationError)('Test validation error');
      (0, _errorService.logError)(error);
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 10);
      });
      expect(consoleErrorSpy).not.toHaveBeenCalled();
      expect(_asyncStorage.default.setItem).toHaveBeenCalled();
    }));
    test('should disable all logging when configured', function () {
      (0, _errorService.configureErrorService)({
        enableConsoleLogging: false,
        enableRemoteLogging: false,
        enableStorageLogging: false
      });
      var error = (0, _errorService.createValidationError)('Test validation error');
      (0, _errorService.logError)(error);
      expect(consoleErrorSpy).not.toHaveBeenCalled();
      expect(_asyncStorage.default.setItem).not.toHaveBeenCalled();
    });
    test('should apply maximum stored errors limit', (0, _asyncToGenerator2.default)(function* () {
      var maxErrors = 5;
      (0, _errorService.configureErrorService)({
        maxStoredErrors: maxErrors
      });
      var existingErrors = Array(10).fill(null).map(function (_, i) {
        return {
          message: `Existing error ${i}`,
          category: _errorService.ErrorCategory.UNKNOWN,
          severity: _errorService.ErrorSeverity.ERROR,
          timestamp: new Date()
        };
      });
      _asyncStorage.default.getItem.mockResolvedValue(JSON.stringify(existingErrors));
      var newError = (0, _errorService.createValidationError)('New validation error');
      yield (0, _errorService.logError)(newError);
      expect(_asyncStorage.default.setItem).toHaveBeenCalled();
      var storedErrorsJson = _asyncStorage.default.setItem.mock.calls[0][1];
      var storedErrors = JSON.parse(storedErrorsJson);
      expect(storedErrors.length).toBe(maxErrors);
      expect(storedErrors[maxErrors - 1].message).toBe('New validation error');
      expect(storedErrors[0].message).toBe(`Existing error ${10 - maxErrors + 1}`);
    }));
  });
  describe('Error Handling Functions', function () {
    describe('handleSupabaseError', function () {
      test('should handle PostgrestError correctly', function () {
        var postgrestError = {
          message: 'Database error',
          details: 'Constraint violation',
          hint: 'Check your input',
          code: '23505'
        };
        var appError = (0, _errorService.handleSupabaseError)(postgrestError);
        expect(appError).toEqual(expect.objectContaining({
          message: 'Database error',
          code: '23505',
          category: _errorService.ErrorCategory.VALIDATION,
          severity: _errorService.ErrorSeverity.ERROR,
          originalError: postgrestError
        }));
      });
      test('should handle PostgrestError with permission code', function () {
        var postgrestError = {
          message: 'Permission denied',
          details: 'Insufficient privileges',
          hint: 'Check your permissions',
          code: '42501'
        };
        var appError = (0, _errorService.handleSupabaseError)(postgrestError);
        expect(appError).toEqual(expect.objectContaining({
          message: 'Permission denied',
          code: '42501',
          category: _errorService.ErrorCategory.PERMISSION,
          severity: _errorService.ErrorSeverity.ERROR
        }));
      });
      test('should handle PostgrestError with RLS policy violation', function () {
        var postgrestError = {
          message: 'RLS policy violation',
          details: 'Access denied',
          hint: 'Check your permissions',
          code: 'PGRST301'
        };
        var appError = (0, _errorService.handleSupabaseError)(postgrestError);
        expect(appError).toEqual(expect.objectContaining({
          message: 'RLS policy violation',
          code: 'PGRST301',
          category: _errorService.ErrorCategory.PERMISSION,
          severity: _errorService.ErrorSeverity.ERROR
        }));
      });
      test('should handle standard Error objects', function () {
        var standardError = new Error('Standard error');
        var appError = (0, _errorService.handleSupabaseError)(standardError);
        expect(appError).toEqual(expect.objectContaining({
          message: 'Standard error',
          category: _errorService.ErrorCategory.UNKNOWN,
          severity: _errorService.ErrorSeverity.ERROR,
          originalError: standardError
        }));
      });
      test('should handle unknown error types', function () {
        var unknownError = 'Just a string error';
        var appError = (0, _errorService.handleSupabaseError)(unknownError);
        expect(appError).toEqual(expect.objectContaining({
          message: 'An unknown error occurred',
          category: _errorService.ErrorCategory.UNKNOWN,
          severity: _errorService.ErrorSeverity.ERROR,
          originalError: unknownError
        }));
      });
      test('should handle null/undefined errors', function () {
        expect((0, _errorService.handleSupabaseError)(null)).toEqual(expect.objectContaining({
          message: 'An unknown error occurred',
          category: _errorService.ErrorCategory.UNKNOWN
        }));
        expect((0, _errorService.handleSupabaseError)(undefined)).toEqual(expect.objectContaining({
          message: 'An unknown error occurred',
          category: _errorService.ErrorCategory.UNKNOWN
        }));
      });
      test('should handle custom severity level', function () {
        var error = new Error('Critical error');
        var appError = (0, _errorService.handleSupabaseError)(error, {}, _errorService.ErrorSeverity.CRITICAL);
        expect(appError.severity).toBe(_errorService.ErrorSeverity.CRITICAL);
      });
      test('should include context data', function () {
        var error = new Error('Error with context');
        var context = {
          userId: '123',
          action: 'update'
        };
        var appError = (0, _errorService.handleSupabaseError)(error, context);
        expect(appError.context).toEqual(context);
      });
    });
    describe('handleNetworkError', function () {
      test('should process network errors correctly', function () {
        var networkError = new Error('Network connection failed');
        var appError = (0, _errorService.handleNetworkError)(networkError);
        expect(appError).toEqual(expect.objectContaining({
          message: 'Network connection failed',
          category: _errorService.ErrorCategory.NETWORK,
          severity: _errorService.ErrorSeverity.ERROR,
          originalError: networkError
        }));
        expect(consoleErrorSpy).toHaveBeenCalled();
      });
      test('should handle non-Error network failures', function () {
        var nonErrorFailure = {
          status: 0,
          statusText: 'Network error'
        };
        var appError = (0, _errorService.handleNetworkError)(nonErrorFailure);
        expect(appError).toEqual(expect.objectContaining({
          message: 'Network connection failed',
          category: _errorService.ErrorCategory.NETWORK,
          originalError: nonErrorFailure
        }));
      });
    });
    describe('handleAuthError', function () {
      test('should process authentication errors correctly', function () {
        var authError = new Error('Invalid credentials');
        var appError = (0, _errorService.handleAuthError)(authError);
        expect(appError).toEqual(expect.objectContaining({
          message: 'Invalid credentials',
          category: _errorService.ErrorCategory.AUTHENTICATION,
          severity: _errorService.ErrorSeverity.ERROR,
          originalError: authError
        }));
        expect(consoleErrorSpy).toHaveBeenCalled();
      });
      test('should handle non-Error auth failures', function () {
        var nonErrorFailure = {
          code: 'auth/invalid-email'
        };
        var appError = (0, _errorService.handleAuthError)(nonErrorFailure);
        expect(appError).toEqual(expect.objectContaining({
          message: 'Authentication failed',
          category: _errorService.ErrorCategory.AUTHENTICATION,
          originalError: nonErrorFailure
        }));
      });
    });
    describe('createValidationError', function () {
      test('should create validation errors correctly', function () {
        var message = 'Invalid input data';
        var context = {
          field: 'email',
          value: 'invalid'
        };
        var appError = (0, _errorService.createValidationError)(message, context);
        expect(appError).toEqual(expect.objectContaining({
          message: message,
          category: _errorService.ErrorCategory.VALIDATION,
          severity: _errorService.ErrorSeverity.WARNING,
          context: context
        }));
        expect(consoleErrorSpy).toHaveBeenCalled();
      });
    });
    describe('createPermissionError', function () {
      test('should create permission errors correctly', function () {
        var message = 'Access denied to this resource';
        var context = {
          resource: 'payments',
          action: 'create'
        };
        var appError = (0, _errorService.createPermissionError)(message, context);
        expect(appError).toEqual(expect.objectContaining({
          message: message,
          category: _errorService.ErrorCategory.PERMISSION,
          severity: _errorService.ErrorSeverity.WARNING,
          context: context
        }));
        expect(consoleErrorSpy).toHaveBeenCalled();
      });
      test('should use default message when none provided', function () {
        var appError = (0, _errorService.createPermissionError)();
        expect(appError.message).toBe('You do not have permission to perform this action');
      });
    });
  });
  describe('Error Storage', function () {
    test('should store errors in AsyncStorage', (0, _asyncToGenerator2.default)(function* () {
      var error = (0, _errorService.createValidationError)('Test error');
      yield (0, _errorService.logError)(error);
      expect(_asyncStorage.default.getItem).toHaveBeenCalledWith('app_errors');
      expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('app_errors', expect.any(String));
      var storedData = JSON.parse(_asyncStorage.default.setItem.mock.calls[0][1]);
      expect(Array.isArray(storedData)).toBe(true);
      expect(storedData[0]).toEqual(expect.objectContaining({
        message: 'Test error',
        category: _errorService.ErrorCategory.VALIDATION
      }));
    }));
    test('should append new errors to existing ones', (0, _asyncToGenerator2.default)(function* () {
      var existingErrors = [{
        message: 'Existing error',
        category: _errorService.ErrorCategory.UNKNOWN,
        severity: _errorService.ErrorSeverity.ERROR,
        timestamp: new Date().toISOString()
      }];
      _asyncStorage.default.getItem.mockResolvedValue(JSON.stringify(existingErrors));
      var newError = (0, _errorService.createValidationError)('New error');
      yield (0, _errorService.logError)(newError);
      expect(_asyncStorage.default.setItem).toHaveBeenCalled();
      var storedData = JSON.parse(_asyncStorage.default.setItem.mock.calls[0][1]);
      expect(storedData.length).toBe(2);
      expect(storedData[0].message).toBe('Existing error');
      expect(storedData[1].message).toBe('New error');
    }));
    test('should handle AsyncStorage getItem failure', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockRejectedValue(new Error('Storage read error'));
      var error = (0, _errorService.createValidationError)('Test error');
      yield (0, _errorService.logError)(error);
      expect(consoleErrorSpy).toHaveBeenCalledWith('Error storing error in AsyncStorage:', expect.any(Error));
    }));
    test('should handle AsyncStorage setItem failure', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.setItem.mockRejectedValue(new Error('Storage write error'));
      var error = (0, _errorService.createValidationError)('Test error');
      yield (0, _errorService.logError)(error);
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 10);
      });
      expect(consoleErrorSpy).toHaveBeenCalledWith('Error storing error in AsyncStorage:', expect.any(Error));
    }));
    test('should handle corrupted JSON in AsyncStorage', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockResolvedValue('{"corrupted:json');
      var error = (0, _errorService.createValidationError)('Test error');
      yield (0, _errorService.logError)(error);
      expect(consoleErrorSpy).toHaveBeenCalledWith('Error storing error in AsyncStorage:', expect.any(Error));
    }));
    test('should enforce maximum error storage limit', (0, _asyncToGenerator2.default)(function* () {
      var maxErrors = 10;
      (0, _errorService.configureErrorService)({
        maxStoredErrors: maxErrors
      });
      var existingErrors = Array(maxErrors + 5).fill(null).map(function (_, i) {
        return {
          message: `Error ${i}`,
          category: _errorService.ErrorCategory.UNKNOWN,
          severity: _errorService.ErrorSeverity.ERROR,
          timestamp: new Date(Date.now() - i * 1000).toISOString()
        };
      });
      _asyncStorage.default.getItem.mockResolvedValue(JSON.stringify(existingErrors));
      var newError = (0, _errorService.createValidationError)('New error');
      yield (0, _errorService.logError)(newError);
      expect(_asyncStorage.default.setItem).toHaveBeenCalled();
      var storedData = JSON.parse(_asyncStorage.default.setItem.mock.calls[0][1]);
      expect(storedData.length).toBe(maxErrors);
      expect(storedData[maxErrors - 1].message).toBe('New error');
    }));
    test('should retrieve stored errors', (0, _asyncToGenerator2.default)(function* () {
      var mockErrors = [{
        message: 'Stored error 1',
        category: _errorService.ErrorCategory.DATABASE,
        severity: _errorService.ErrorSeverity.ERROR,
        timestamp: new Date().toISOString()
      }, {
        message: 'Stored error 2',
        category: _errorService.ErrorCategory.NETWORK,
        severity: _errorService.ErrorSeverity.WARNING,
        timestamp: new Date().toISOString()
      }];
      _asyncStorage.default.getItem.mockResolvedValue(JSON.stringify(mockErrors));
      var retrievedErrors = yield (0, _errorService.getStoredErrors)();
      expect(_asyncStorage.default.getItem).toHaveBeenCalledWith('app_errors');
      expect(retrievedErrors).toEqual(mockErrors);
    }));
    test('should handle getStoredErrors failure', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.getItem.mockRejectedValue(new Error('Storage read error'));
      var retrievedErrors = yield (0, _errorService.getStoredErrors)();
      expect(consoleErrorSpy).toHaveBeenCalledWith('Error retrieving errors from AsyncStorage:', expect.any(Error));
      expect(retrievedErrors).toEqual([]);
    }));
    test('should clear stored errors', (0, _asyncToGenerator2.default)(function* () {
      yield (0, _errorService.clearStoredErrors)();
      expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('app_errors', '[]');
    }));
    test('should handle clearStoredErrors failure', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.setItem.mockRejectedValue(new Error('Storage write error'));
      yield (0, _errorService.clearStoredErrors)();
      expect(consoleErrorSpy).toHaveBeenCalledWith('Error clearing errors from AsyncStorage:', expect.any(Error));
    }));
  });
  describe('Error Logging', function () {
    test('should log errors to console when enabled', function () {
      (0, _errorService.configureErrorService)({
        enableConsoleLogging: true
      });
      var error = {
        message: 'Test error',
        category: _errorService.ErrorCategory.DATABASE,
        severity: _errorService.ErrorSeverity.ERROR,
        timestamp: new Date()
      };
      (0, _errorService.logError)(error);
      expect(consoleErrorSpy).toHaveBeenCalledWith(`[ERROR] [database] Test error`, expect.objectContaining({
        context: undefined,
        timestamp: error.timestamp
      }));
    });
    test('should not log errors to console when disabled', function () {
      (0, _errorService.configureErrorService)({
        enableConsoleLogging: false
      });
      var error = {
        message: 'Test error',
        category: _errorService.ErrorCategory.DATABASE,
        severity: _errorService.ErrorSeverity.ERROR,
        timestamp: new Date()
      };
      (0, _errorService.logError)(error);
      expect(consoleErrorSpy).not.toHaveBeenCalled();
    });
    test('should not store errors when storage logging is disabled', (0, _asyncToGenerator2.default)(function* () {
      (0, _errorService.configureErrorService)({
        enableStorageLogging: false
      });
      var error = {
        message: 'Test error',
        category: _errorService.ErrorCategory.DATABASE,
        severity: _errorService.ErrorSeverity.ERROR,
        timestamp: new Date()
      };
      yield (0, _errorService.logError)(error);
      expect(_asyncStorage.default.setItem).not.toHaveBeenCalled();
    }));
  });
  describe('getUserFriendlyMessage', function () {
    test('should return specific message for PostgreSQL unique violation', function () {
      var error = {
        message: 'duplicate key value violates unique constraint',
        code: '23505',
        category: _errorService.ErrorCategory.DATABASE,
        severity: _errorService.ErrorSeverity.ERROR,
        timestamp: new Date()
      };
      var friendlyMessage = (0, _errorService.getUserFriendlyMessage)(error);
      expect(friendlyMessage).toBe('This information already exists in our system.');
    });
    test('should return specific message for PostgreSQL undefined table', function () {
      var error = {
        message: 'relation "non_existent_table" does not exist',
        code: '42P01',
        category: _errorService.ErrorCategory.DATABASE,
        severity: _errorService.ErrorSeverity.ERROR,
        timestamp: new Date()
      };
      var friendlyMessage = (0, _errorService.getUserFriendlyMessage)(error);
      expect(friendlyMessage).toBe('We encountered a database configuration issue. Please contact support.');
    });
    test('should return specific message for auth errors', function () {
      var error = {
        message: 'Invalid email or password',
        code: 'auth/wrong-password',
        category: _errorService.ErrorCategory.AUTHENTICATION,
        severity: _errorService.ErrorSeverity.ERROR,
        timestamp: new Date()
      };
      var friendlyMessage = (0, _errorService.getUserFriendlyMessage)(error);
      expect(friendlyMessage).toBe('Invalid login credentials. Please check your email and password.');
    });
    test('should return specific message for HTTP status codes', function () {
      var error404 = {
        message: 'Not found',
        code: '404',
        category: _errorService.ErrorCategory.NETWORK,
        severity: _errorService.ErrorSeverity.ERROR,
        timestamp: new Date()
      };
      var error500 = {
        message: 'Internal server error',
        code: '500',
        category: _errorService.ErrorCategory.NETWORK,
        severity: _errorService.ErrorSeverity.ERROR,
        timestamp: new Date()
      };
      var friendlyMessage404 = (0, _errorService.getUserFriendlyMessage)(error404);
      var friendlyMessage500 = (0, _errorService.getUserFriendlyMessage)(error500);
      expect(friendlyMessage404).toBe('The requested resource was not found.');
      expect(friendlyMessage500).toBe('Server error. Please try again later.');
    });
    test('should use original message if it is user-friendly', function () {
      var error = {
        message: 'Your password must be at least 8 characters long',
        category: _errorService.ErrorCategory.VALIDATION,
        severity: _errorService.ErrorSeverity.WARNING,
        timestamp: new Date()
      };
      var friendlyMessage = (0, _errorService.getUserFriendlyMessage)(error);
      expect(friendlyMessage).toBe('Your password must be at least 8 characters long');
    });
    test('should fall back to category default if message is technical', function () {
      var error = {
        message: 'TypeError: Cannot read property "id" of undefined',
        category: _errorService.ErrorCategory.VALIDATION,
        severity: _errorService.ErrorSeverity.WARNING,
        timestamp: new Date()
      };
      var friendlyMessage = (0, _errorService.getUserFriendlyMessage)(error);
      expect(friendlyMessage).toBe('Some information you entered is not valid.');
    });
    test('should handle errors with no message', function () {
      var error = {
        message: '',
        category: _errorService.ErrorCategory.UNKNOWN,
        severity: _errorService.ErrorSeverity.ERROR,
        timestamp: new Date()
      };
      var friendlyMessage = (0, _errorService.getUserFriendlyMessage)(error);
      expect(friendlyMessage).toBe('An unexpected error occurred. Please try again later.');
    });
  });
  describe('withErrorHandling', function () {
    test('should wrap function and return result on success', (0, _asyncToGenerator2.default)(function* () {
      var successFn = jest.fn().mockResolvedValue('success result');
      var wrappedFn = (0, _errorService.withErrorHandling)(successFn);
      var result = yield wrappedFn('arg1', 'arg2');
      expect(successFn).toHaveBeenCalledWith('arg1', 'arg2');
      expect(result).toBe('success result');
    }));
    test('should catch and handle errors', (0, _asyncToGenerator2.default)(function* () {
      var errorFn = jest.fn().mockRejectedValue(new Error('Test error'));
      var wrappedFn = (0, _errorService.withErrorHandling)(errorFn);
      yield expect(wrappedFn('arg1')).rejects.toMatchObject({
        message: 'Test error',
        category: _errorService.ErrorCategory.UNKNOWN
      });
      expect(consoleErrorSpy).toHaveBeenCalled();
    }));
    test('should use custom error handler if provided', (0, _asyncToGenerator2.default)(function* () {
      var errorFn = jest.fn().mockRejectedValue(new Error('Test error'));
      var customErrorHandler = jest.fn();
      var wrappedFn = (0, _errorService.withErrorHandling)(errorFn, customErrorHandler);
      try {
        yield wrappedFn('arg1');
      } catch (_unused) {}
      expect(customErrorHandler).toHaveBeenCalledWith(expect.objectContaining({
        message: 'Test error',
        category: _errorService.ErrorCategory.UNKNOWN
      }));
      expect(consoleErrorSpy).not.toHaveBeenCalled();
    }));
    test('should include function name and args in error context', (0, _asyncToGenerator2.default)(function* () {
      function namedFunction() {
        return Promise.reject(new Error('Named function error'));
      }
      var wrappedFn = (0, _errorService.withErrorHandling)(namedFunction);
      try {
        yield wrappedFn();
      } catch (error) {
        expect(error).toMatchObject({
          context: {
            functionName: 'namedFunction',
            args: []
          }
        });
      }
    }));
  });
  describe('Edge Cases', function () {
    test('should handle circular reference errors', (0, _asyncToGenerator2.default)(function* () {
      var circularObj = {
        name: 'circular'
      };
      circularObj.self = circularObj;
      var error = new Error('Circular reference error');
      error.cause = circularObj;
      var appError = (0, _errorService.handleSupabaseError)(error);
      yield (0, _errorService.logError)(appError);
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 50);
      });
      expect(_asyncStorage.default.setItem.mock.calls.length).toBeGreaterThanOrEqual(1);
    }));
    test('should handle very large error objects', (0, _asyncToGenerator2.default)(function* () {
      var largeData = Array(10000).fill('x').join('');
      var largeError = new Error('Large error');
      largeError.largeData = largeData;
      var appError = (0, _errorService.handleSupabaseError)(largeError);
      yield (0, _errorService.logError)(appError);
      expect(_asyncStorage.default.setItem).toHaveBeenCalled();
    }));
    test('should handle errors with Unicode characters', (0, _asyncToGenerator2.default)(function* () {
      var unicodeError = new Error('Unicode error: 你好, مرحبا, привет, こんにちは');
      var appError = (0, _errorService.handleSupabaseError)(unicodeError);
      yield (0, _errorService.logError)(appError);
      expect(_asyncStorage.default.setItem).toHaveBeenCalled();
      var storedData = JSON.parse(_asyncStorage.default.setItem.mock.calls[0][1]);
      expect(storedData[0].message).toBe('Unicode error: 你好, مرحبا, привет, こんにちは');
    }));
    test('should handle AsyncStorage quota exceeded', (0, _asyncToGenerator2.default)(function* () {
      _asyncStorage.default.setItem.mockRejectedValue(new Error('Quota exceeded'));
      var error = (0, _errorService.createValidationError)('Test error');
      yield (0, _errorService.logError)(error);
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 10);
      });
      expect(consoleErrorSpy).toHaveBeenCalledWith('Error storing error in AsyncStorage:', expect.any(Error));
    }));
    test('should handle errors with unusual properties', (0, _asyncToGenerator2.default)(function* () {
      var unusualError = new Error('Unusual error');
      unusualError.domNode = {
        nodeType: 1,
        nodeName: 'DIV'
      };
      unusualError.function = function () {
        return 'cannot serialize';
      };
      var appError = (0, _errorService.handleSupabaseError)(unusualError);
      yield (0, _errorService.logError)(appError);
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 10);
      });
      expect(_asyncStorage.default.setItem).toHaveBeenCalled();
    }));
  });
  describe('Performance Tests', function () {
    test('should handle large volumes of errors efficiently', (0, _asyncToGenerator2.default)(function* () {
      var errorCount = 1000;
      var errors = Array(errorCount).fill(null).map(function (_, i) {
        return {
          message: `Error ${i}`,
          category: _errorService.ErrorCategory.UNKNOWN,
          severity: _errorService.ErrorSeverity.ERROR,
          timestamp: new Date()
        };
      });
      (0, _errorService.configureErrorService)({
        maxStoredErrors: errorCount + 1
      });
      _asyncStorage.default.getItem.mockResolvedValue(JSON.stringify(errors));
      var startTime = performance.now();
      var newError = (0, _errorService.createValidationError)('Performance test error');
      yield (0, _errorService.logError)(newError);
      var endTime = performance.now();
      var duration = endTime - startTime;
      expect(_asyncStorage.default.setItem).toHaveBeenCalled();
      expect(duration).toBeLessThan(1000);
      var storedData = JSON.parse(_asyncStorage.default.setItem.mock.calls[0][1]);
      expect(storedData.length).toBe(errorCount + 1);
    }));
    test('should efficiently process and store 100 errors in sequence', (0, _asyncToGenerator2.default)(function* () {
      var errorCount = 100;
      (0, _errorService.configureErrorService)({
        maxStoredErrors: errorCount + 10
      });
      _asyncStorage.default.getItem.mockResolvedValue(null);
      var startTime = performance.now();
      for (var i = 0; i < errorCount; i++) {
        var error = (0, _errorService.createValidationError)(`Sequential error ${i}`);
        var currentErrors = Array(i).fill(null).map(function (_, j) {
          return {
            message: `Sequential error ${j}`,
            category: _errorService.ErrorCategory.VALIDATION,
            severity: _errorService.ErrorSeverity.WARNING,
            timestamp: new Date()
          };
        });
        _asyncStorage.default.getItem.mockResolvedValueOnce(i === 0 ? null : JSON.stringify(currentErrors));
        yield (0, _errorService.logError)(error);
        yield new Promise(function (resolve) {
          return setTimeout(resolve, 10);
        });
      }
      var endTime = performance.now();
      var duration = endTime - startTime;
      expect(_asyncStorage.default.setItem.mock.calls.length).toBeGreaterThanOrEqual(errorCount);
      expect(duration).toBeLessThan(5000);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,