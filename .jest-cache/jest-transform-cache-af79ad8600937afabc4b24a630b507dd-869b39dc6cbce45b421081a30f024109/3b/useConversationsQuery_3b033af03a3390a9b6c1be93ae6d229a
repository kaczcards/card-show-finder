c6c8d31fcaa0c9f207458def686d6e66
"use strict";

/* istanbul ignore next */
function cov_2nz1gc2shw() {
  var path = "/Users/kevin/card-show-finder/src/hooks/useConversationsQuery.ts";
  var hash = "bb565eaf9e74df4f0b8e3ad9cda45e1f19f005ca";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kevin/card-show-finder/src/hooks/useConversationsQuery.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 12,
          column: 3
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "2": {
        start: {
          line: 3,
          column: 26
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "3": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 52
        }
      },
      "4": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 7,
          column: 5
        }
      },
      "5": {
        start: {
          line: 6,
          column: 6
        },
        end: {
          line: 6,
          column: 68
        }
      },
      "6": {
        start: {
          line: 6,
          column: 51
        },
        end: {
          line: 6,
          column: 63
        }
      },
      "7": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 39
        }
      },
      "8": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "9": {
        start: {
          line: 10,
          column: 26
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "10": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 17
        }
      },
      "11": {
        start: {
          line: 13,
          column: 25
        },
        end: {
          line: 17,
          column: 2
        }
      },
      "12": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 72
        }
      },
      "13": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 21
        }
      },
      "14": {
        start: {
          line: 18,
          column: 19
        },
        end: {
          line: 34,
          column: 4
        }
      },
      "15": {
        start: {
          line: 19,
          column: 18
        },
        end: {
          line: 26,
          column: 5
        }
      },
      "16": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 24,
          column: 10
        }
      },
      "17": {
        start: {
          line: 21,
          column: 21
        },
        end: {
          line: 21,
          column: 23
        }
      },
      "18": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "19": {
        start: {
          line: 22,
          column: 29
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "20": {
        start: {
          line: 22,
          column: 77
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "21": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 22
        }
      },
      "22": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 26
        }
      },
      "23": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 33,
          column: 6
        }
      },
      "24": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "25": {
        start: {
          line: 28,
          column: 35
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "26": {
        start: {
          line: 29,
          column: 21
        },
        end: {
          line: 29,
          column: 23
        }
      },
      "27": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "28": {
        start: {
          line: 30,
          column: 25
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "29": {
        start: {
          line: 30,
          column: 38
        },
        end: {
          line: 30,
          column: 50
        }
      },
      "30": {
        start: {
          line: 30,
          column: 56
        },
        end: {
          line: 30,
          column: 57
        }
      },
      "31": {
        start: {
          line: 30,
          column: 78
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "32": {
        start: {
          line: 30,
          column: 102
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "33": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 40
        }
      },
      "34": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 22
        }
      },
      "35": {
        start: {
          line: 35,
          column: 0
        },
        end: {
          line: 35,
          column: 62
        }
      },
      "36": {
        start: {
          line: 36,
          column: 0
        },
        end: {
          line: 36,
          column: 39
        }
      },
      "37": {
        start: {
          line: 37,
          column: 22
        },
        end: {
          line: 37,
          column: 54
        }
      },
      "38": {
        start: {
          line: 38,
          column: 16
        },
        end: {
          line: 38,
          column: 32
        }
      },
      "39": {
        start: {
          line: 39,
          column: 19
        },
        end: {
          line: 39,
          column: 41
        }
      },
      "40": {
        start: {
          line: 40,
          column: 25
        },
        end: {
          line: 40,
          column: 78
        }
      },
      "41": {
        start: {
          line: 50,
          column: 30
        },
        end: {
          line: 241,
          column: 1
        }
      },
      "42": {
        start: {
          line: 51,
          column: 24
        },
        end: {
          line: 51,
          column: 59
        }
      },
      "43": {
        start: {
          line: 52,
          column: 44
        },
        end: {
          line: 52,
          column: 72
        }
      },
      "44": {
        start: {
          line: 54,
          column: 73
        },
        end: {
          line: 105,
          column: 6
        }
      },
      "45": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 58,
          column: 26
        }
      },
      "46": {
        start: {
          line: 58,
          column: 16
        },
        end: {
          line: 58,
          column: 26
        }
      },
      "47": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 91,
          column: 13
        }
      },
      "48": {
        start: {
          line: 63,
          column: 40
        },
        end: {
          line: 67,
          column: 18
        }
      },
      "49": {
        start: {
          line: 68,
          column: 16
        },
        end: {
          line: 71,
          column: 17
        }
      },
      "50": {
        start: {
          line: 69,
          column: 20
        },
        end: {
          line: 69,
          column: 86
        }
      },
      "51": {
        start: {
          line: 70,
          column: 20
        },
        end: {
          line: 70,
          column: 32
        }
      },
      "52": {
        start: {
          line: 73,
          column: 16
        },
        end: {
          line: 80,
          column: 17
        }
      },
      "53": {
        start: {
          line: 75,
          column: 20
        },
        end: {
          line: 78,
          column: 21
        }
      },
      "54": {
        start: {
          line: 76,
          column: 24
        },
        end: {
          line: 76,
          column: 113
        }
      },
      "55": {
        start: {
          line: 77,
          column: 24
        },
        end: {
          line: 77,
          column: 84
        }
      },
      "56": {
        start: {
          line: 79,
          column: 20
        },
        end: {
          line: 79,
          column: 32
        }
      },
      "57": {
        start: {
          line: 82,
          column: 16
        },
        end: {
          line: 82,
          column: 102
        }
      },
      "58": {
        start: {
          line: 83,
          column: 16
        },
        end: {
          line: 83,
          column: 71
        }
      },
      "59": {
        start: {
          line: 88,
          column: 16
        },
        end: {
          line: 88,
          column: 98
        }
      },
      "60": {
        start: {
          line: 90,
          column: 16
        },
        end: {
          line: 90,
          column: 71
        }
      },
      "61": {
        start: {
          line: 98,
          column: 31
        },
        end: {
          line: 98,
          column: 68
        }
      },
      "62": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 71
        }
      },
      "63": {
        start: {
          line: 110,
          column: 27
        },
        end: {
          line: 115,
          column: 14
        }
      },
      "64": {
        start: {
          line: 113,
          column: 25
        },
        end: {
          line: 113,
          column: 34
        }
      },
      "65": {
        start: {
          line: 117,
          column: 4
        },
        end: {
          line: 145,
          column: 44
        }
      },
      "66": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 119,
          column: 19
        }
      },
      "67": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 119,
          column: 19
        }
      },
      "68": {
        start: {
          line: 121,
          column: 29
        },
        end: {
          line: 138,
          column: 24
        }
      },
      "69": {
        start: {
          line: 128,
          column: 31
        },
        end: {
          line: 128,
          column: 42
        }
      },
      "70": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 132,
          column: 15
        }
      },
      "71": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 136,
          column: 15
        }
      },
      "72": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 139,
          column: 30
        }
      },
      "73": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 144,
          column: 10
        }
      },
      "74": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 142,
          column: 60
        }
      },
      "75": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 35
        }
      },
      "76": {
        start: {
          line: 147,
          column: 31
        },
        end: {
          line: 169,
          column: 6
        }
      },
      "77": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 150,
          column: 58
        }
      },
      "78": {
        start: {
          line: 150,
          column: 16
        },
        end: {
          line: 150,
          column: 58
        }
      },
      "79": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 151,
          column: 89
        }
      },
      "80": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 167,
          column: 15
        }
      },
      "81": {
        start: {
          line: 156,
          column: 16
        },
        end: {
          line: 157,
          column: 30
        }
      },
      "82": {
        start: {
          line: 157,
          column: 20
        },
        end: {
          line: 157,
          column: 30
        }
      },
      "83": {
        start: {
          line: 158,
          column: 16
        },
        end: {
          line: 166,
          column: 19
        }
      },
      "84": {
        start: {
          line: 159,
          column: 20
        },
        end: {
          line: 164,
          column: 21
        }
      },
      "85": {
        start: {
          line: 160,
          column: 24
        },
        end: {
          line: 163,
          column: 26
        }
      },
      "86": {
        start: {
          line: 165,
          column: 20
        },
        end: {
          line: 165,
          column: 40
        }
      },
      "87": {
        start: {
          line: 171,
          column: 32
        },
        end: {
          line: 214,
          column: 6
        }
      },
      "88": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 174,
          column: 58
        }
      },
      "89": {
        start: {
          line: 174,
          column: 16
        },
        end: {
          line: 174,
          column: 58
        }
      },
      "90": {
        start: {
          line: 176,
          column: 33
        },
        end: {
          line: 176,
          column: 82
        }
      },
      "91": {
        start: {
          line: 176,
          column: 58
        },
        end: {
          line: 176,
          column: 81
        }
      },
      "92": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 178,
          column: 58
        }
      },
      "93": {
        start: {
          line: 178,
          column: 16
        },
        end: {
          line: 178,
          column: 58
        }
      },
      "94": {
        start: {
          line: 180,
          column: 32
        },
        end: {
          line: 180,
          column: 77
        }
      },
      "95": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 186,
          column: 13
        }
      },
      "96": {
        start: {
          line: 182,
          column: 16
        },
        end: {
          line: 182,
          column: 108
        }
      },
      "97": {
        start: {
          line: 185,
          column: 16
        },
        end: {
          line: 185,
          column: 100
        }
      },
      "98": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 208,
          column: 15
        }
      },
      "99": {
        start: {
          line: 191,
          column: 16
        },
        end: {
          line: 192,
          column: 30
        }
      },
      "100": {
        start: {
          line: 192,
          column: 20
        },
        end: {
          line: 192,
          column: 30
        }
      },
      "101": {
        start: {
          line: 193,
          column: 16
        },
        end: {
          line: 207,
          column: 19
        }
      },
      "102": {
        start: {
          line: 194,
          column: 20
        },
        end: {
          line: 200,
          column: 21
        }
      },
      "103": {
        start: {
          line: 195,
          column: 24
        },
        end: {
          line: 199,
          column: 26
        }
      },
      "104": {
        start: {
          line: 201,
          column: 20
        },
        end: {
          line: 201,
          column: 40
        }
      },
      "105": {
        start: {
          line: 204,
          column: 34
        },
        end: {
          line: 204,
          column: 109
        }
      },
      "106": {
        start: {
          line: 205,
          column: 34
        },
        end: {
          line: 205,
          column: 109
        }
      },
      "107": {
        start: {
          line: 206,
          column: 20
        },
        end: {
          line: 206,
          column: 41
        }
      },
      "108": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 212,
          column: 15
        }
      },
      "109": {
        start: {
          line: 216,
          column: 39
        },
        end: {
          line: 226,
          column: 6
        }
      },
      "110": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 219,
          column: 58
        }
      },
      "111": {
        start: {
          line: 219,
          column: 16
        },
        end: {
          line: 219,
          column: 58
        }
      },
      "112": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 220,
          column: 108
        }
      },
      "113": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 224,
          column: 22
        }
      },
      "114": {
        start: {
          line: 228,
          column: 29
        },
        end: {
          line: 228,
          column: 125
        }
      },
      "115": {
        start: {
          line: 228,
          column: 76
        },
        end: {
          line: 228,
          column: 116
        }
      },
      "116": {
        start: {
          line: 229,
          column: 4
        },
        end: {
          line: 240,
          column: 6
        }
      },
      "117": {
        start: {
          line: 235,
          column: 52
        },
        end: {
          line: 235,
          column: 97
        }
      },
      "118": {
        start: {
          line: 236,
          column: 54
        },
        end: {
          line: 236,
          column: 113
        }
      },
      "119": {
        start: {
          line: 237,
          column: 61
        },
        end: {
          line: 237,
          column: 127
        }
      },
      "120": {
        start: {
          line: 242,
          column: 0
        },
        end: {
          line: 242,
          column: 54
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 2,
            column: 75
          }
        },
        loc: {
          start: {
            line: 2,
            column: 96
          },
          end: {
            line: 9,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 6,
            column: 38
          },
          end: {
            line: 6,
            column: 39
          }
        },
        loc: {
          start: {
            line: 6,
            column: 49
          },
          end: {
            line: 6,
            column: 65
          }
        },
        line: 6
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 9,
            column: 7
          }
        },
        loc: {
          start: {
            line: 9,
            column: 28
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 9
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 13,
            column: 81
          }
        },
        loc: {
          start: {
            line: 13,
            column: 95
          },
          end: {
            line: 15,
            column: 1
          }
        },
        line: 13
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 15,
            column: 6
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 15
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 18,
            column: 51
          },
          end: {
            line: 18,
            column: 52
          }
        },
        loc: {
          start: {
            line: 18,
            column: 63
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 18
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 19,
            column: 18
          },
          end: {
            line: 19,
            column: 19
          }
        },
        loc: {
          start: {
            line: 19,
            column: 30
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 19
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 20,
            column: 49
          }
        },
        loc: {
          start: {
            line: 20,
            column: 61
          },
          end: {
            line: 24,
            column: 9
          }
        },
        line: 20
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 27,
            column: 12
          }
        },
        loc: {
          start: {
            line: 27,
            column: 26
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 27
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 50,
            column: 30
          },
          end: {
            line: 50,
            column: 31
          }
        },
        loc: {
          start: {
            line: 50,
            column: 42
          },
          end: {
            line: 241,
            column: 1
          }
        },
        line: 50
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 56,
            column: 17
          },
          end: {
            line: 56,
            column: 18
          }
        },
        loc: {
          start: {
            line: 56,
            column: 29
          },
          end: {
            line: 92,
            column: 9
          }
        },
        line: 56
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 98,
            column: 20
          },
          end: {
            line: 98,
            column: 21
          }
        },
        loc: {
          start: {
            line: 98,
            column: 31
          },
          end: {
            line: 98,
            column: 68
          }
        },
        line: 98
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 100,
            column: 17
          },
          end: {
            line: 100,
            column: 18
          }
        },
        loc: {
          start: {
            line: 100,
            column: 26
          },
          end: {
            line: 104,
            column: 9
          }
        },
        line: 100
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 113,
            column: 19
          },
          end: {
            line: 113,
            column: 20
          }
        },
        loc: {
          start: {
            line: 113,
            column: 25
          },
          end: {
            line: 113,
            column: 34
          }
        },
        line: 113
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 117,
            column: 27
          },
          end: {
            line: 117,
            column: 28
          }
        },
        loc: {
          start: {
            line: 117,
            column: 33
          },
          end: {
            line: 145,
            column: 5
          }
        },
        line: 117
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 127,
            column: 11
          },
          end: {
            line: 127,
            column: 12
          }
        },
        loc: {
          start: {
            line: 127,
            column: 24
          },
          end: {
            line: 137,
            column: 9
          }
        },
        line: 127
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 141,
            column: 15
          },
          end: {
            line: 141,
            column: 16
          }
        },
        loc: {
          start: {
            line: 141,
            column: 21
          },
          end: {
            line: 144,
            column: 9
          }
        },
        line: 141
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 148,
            column: 20
          },
          end: {
            line: 148,
            column: 21
          }
        },
        loc: {
          start: {
            line: 148,
            column: 50
          },
          end: {
            line: 152,
            column: 9
          }
        },
        line: 148
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 153,
            column: 19
          },
          end: {
            line: 153,
            column: 20
          }
        },
        loc: {
          start: {
            line: 153,
            column: 37
          },
          end: {
            line: 168,
            column: 9
          }
        },
        line: 153
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 155,
            column: 64
          },
          end: {
            line: 155,
            column: 65
          }
        },
        loc: {
          start: {
            line: 155,
            column: 77
          },
          end: {
            line: 167,
            column: 13
          }
        },
        line: 155
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 158,
            column: 35
          },
          end: {
            line: 158,
            column: 36
          }
        },
        loc: {
          start: {
            line: 158,
            column: 51
          },
          end: {
            line: 166,
            column: 17
          }
        },
        line: 158
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 172,
            column: 20
          },
          end: {
            line: 172,
            column: 21
          }
        },
        loc: {
          start: {
            line: 172,
            column: 63
          },
          end: {
            line: 187,
            column: 9
          }
        },
        line: 172
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 176,
            column: 53
          },
          end: {
            line: 176,
            column: 54
          }
        },
        loc: {
          start: {
            line: 176,
            column: 58
          },
          end: {
            line: 176,
            column: 81
          }
        },
        line: 176
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 188,
            column: 19
          },
          end: {
            line: 188,
            column: 20
          }
        },
        loc: {
          start: {
            line: 188,
            column: 37
          },
          end: {
            line: 213,
            column: 9
          }
        },
        line: 188
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 190,
            column: 64
          },
          end: {
            line: 190,
            column: 65
          }
        },
        loc: {
          start: {
            line: 190,
            column: 77
          },
          end: {
            line: 208,
            column: 13
          }
        },
        line: 190
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 193,
            column: 35
          },
          end: {
            line: 193,
            column: 36
          }
        },
        loc: {
          start: {
            line: 193,
            column: 51
          },
          end: {
            line: 202,
            column: 17
          }
        },
        line: 193
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 202,
            column: 24
          },
          end: {
            line: 202,
            column: 25
          }
        },
        loc: {
          start: {
            line: 202,
            column: 34
          },
          end: {
            line: 207,
            column: 17
          }
        },
        line: 202
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 217,
            column: 20
          },
          end: {
            line: 217,
            column: 21
          }
        },
        loc: {
          start: {
            line: 217,
            column: 63
          },
          end: {
            line: 221,
            column: 9
          }
        },
        line: 217
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 222,
            column: 19
          },
          end: {
            line: 222,
            column: 20
          }
        },
        loc: {
          start: {
            line: 222,
            column: 25
          },
          end: {
            line: 225,
            column: 9
          }
        },
        line: 222
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 228,
            column: 51
          },
          end: {
            line: 228,
            column: 52
          }
        },
        loc: {
          start: {
            line: 228,
            column: 76
          },
          end: {
            line: 228,
            column: 116
          }
        },
        line: 228
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 235,
            column: 32
          },
          end: {
            line: 235,
            column: 33
          }
        },
        loc: {
          start: {
            line: 235,
            column: 52
          },
          end: {
            line: 235,
            column: 97
          }
        },
        line: 235
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 236,
            column: 21
          },
          end: {
            line: 236,
            column: 22
          }
        },
        loc: {
          start: {
            line: 236,
            column: 54
          },
          end: {
            line: 236,
            column: 113
          }
        },
        line: 236
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 237,
            column: 28
          },
          end: {
            line: 237,
            column: 29
          }
        },
        loc: {
          start: {
            line: 237,
            column: 61
          },
          end: {
            line: 237,
            column: 127
          }
        },
        line: 237
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 12,
            column: 3
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 9,
            column: 1
          }
        }, {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 12,
            column: 1
          }
        }],
        line: 2
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 5
      },
      "4": {
        loc: {
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 13
          }
        }, {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "5": {
        loc: {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 34
          },
          end: {
            line: 5,
            column: 47
          }
        }, {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "6": {
        loc: {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 63
          }
        }, {
          start: {
            line: 5,
            column: 67
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "7": {
        loc: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 10
      },
      "8": {
        loc: {
          start: {
            line: 13,
            column: 25
          },
          end: {
            line: 17,
            column: 2
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 26
          },
          end: {
            line: 13,
            column: 30
          }
        }, {
          start: {
            line: 13,
            column: 34
          },
          end: {
            line: 13,
            column: 57
          }
        }, {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "9": {
        loc: {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 15,
            column: 1
          }
        }, {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "10": {
        loc: {
          start: {
            line: 18,
            column: 19
          },
          end: {
            line: 34,
            column: 4
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 18,
            column: 24
          }
        }, {
          start: {
            line: 18,
            column: 28
          },
          end: {
            line: 18,
            column: 45
          }
        }, {
          start: {
            line: 18,
            column: 50
          },
          end: {
            line: 34,
            column: 4
          }
        }],
        line: 18
      },
      "11": {
        loc: {
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 20,
            column: 44
          }
        }, {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 24,
            column: 9
          }
        }],
        line: 20
      },
      "12": {
        loc: {
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "13": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "14": {
        loc: {
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 15
          }
        }, {
          start: {
            line: 28,
            column: 19
          },
          end: {
            line: 28,
            column: 33
          }
        }],
        line: 28
      },
      "15": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "16": {
        loc: {
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "17": {
        loc: {
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 58,
            column: 26
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 58,
            column: 26
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "18": {
        loc: {
          start: {
            line: 68,
            column: 16
          },
          end: {
            line: 71,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 16
          },
          end: {
            line: 71,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 68
      },
      "19": {
        loc: {
          start: {
            line: 73,
            column: 16
          },
          end: {
            line: 80,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 16
          },
          end: {
            line: 80,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      },
      "20": {
        loc: {
          start: {
            line: 73,
            column: 20
          },
          end: {
            line: 73,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 73,
            column: 20
          },
          end: {
            line: 73,
            column: 24
          }
        }, {
          start: {
            line: 73,
            column: 28
          },
          end: {
            line: 73,
            column: 47
          }
        }],
        line: 73
      },
      "21": {
        loc: {
          start: {
            line: 75,
            column: 20
          },
          end: {
            line: 78,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 20
          },
          end: {
            line: 78,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 75
      },
      "22": {
        loc: {
          start: {
            line: 75,
            column: 24
          },
          end: {
            line: 75,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 75,
            column: 24
          },
          end: {
            line: 75,
            column: 39
          }
        }, {
          start: {
            line: 75,
            column: 43
          },
          end: {
            line: 75,
            column: 54
          }
        }],
        line: 75
      },
      "23": {
        loc: {
          start: {
            line: 110,
            column: 27
          },
          end: {
            line: 115,
            column: 14
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 111,
            column: 10
          },
          end: {
            line: 114,
            column: 9
          }
        }, {
          start: {
            line: 115,
            column: 10
          },
          end: {
            line: 115,
            column: 14
          }
        }],
        line: 110
      },
      "24": {
        loc: {
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 119,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 119,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 118
      },
      "25": {
        loc: {
          start: {
            line: 118,
            column: 12
          },
          end: {
            line: 118,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 118,
            column: 12
          },
          end: {
            line: 118,
            column: 19
          }
        }, {
          start: {
            line: 118,
            column: 23
          },
          end: {
            line: 118,
            column: 35
          }
        }],
        line: 118
      },
      "26": {
        loc: {
          start: {
            line: 149,
            column: 12
          },
          end: {
            line: 150,
            column: 58
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 149,
            column: 12
          },
          end: {
            line: 150,
            column: 58
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 149
      },
      "27": {
        loc: {
          start: {
            line: 156,
            column: 16
          },
          end: {
            line: 157,
            column: 30
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 156,
            column: 16
          },
          end: {
            line: 157,
            column: 30
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 156
      },
      "28": {
        loc: {
          start: {
            line: 159,
            column: 20
          },
          end: {
            line: 164,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 159,
            column: 20
          },
          end: {
            line: 164,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 159
      },
      "29": {
        loc: {
          start: {
            line: 173,
            column: 12
          },
          end: {
            line: 174,
            column: 58
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 173,
            column: 12
          },
          end: {
            line: 174,
            column: 58
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 173
      },
      "30": {
        loc: {
          start: {
            line: 177,
            column: 12
          },
          end: {
            line: 178,
            column: 58
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 177,
            column: 12
          },
          end: {
            line: 178,
            column: 58
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 177
      },
      "31": {
        loc: {
          start: {
            line: 180,
            column: 32
          },
          end: {
            line: 180,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 180,
            column: 32
          },
          end: {
            line: 180,
            column: 71
          }
        }, {
          start: {
            line: 180,
            column: 75
          },
          end: {
            line: 180,
            column: 77
          }
        }],
        line: 180
      },
      "32": {
        loc: {
          start: {
            line: 181,
            column: 12
          },
          end: {
            line: 186,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 181,
            column: 12
          },
          end: {
            line: 186,
            column: 13
          }
        }, {
          start: {
            line: 184,
            column: 17
          },
          end: {
            line: 186,
            column: 13
          }
        }],
        line: 181
      },
      "33": {
        loc: {
          start: {
            line: 191,
            column: 16
          },
          end: {
            line: 192,
            column: 30
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 16
          },
          end: {
            line: 192,
            column: 30
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "34": {
        loc: {
          start: {
            line: 194,
            column: 20
          },
          end: {
            line: 200,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 194,
            column: 20
          },
          end: {
            line: 200,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 194
      },
      "35": {
        loc: {
          start: {
            line: 204,
            column: 34
          },
          end: {
            line: 204,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 204,
            column: 61
          },
          end: {
            line: 204,
            column: 105
          }
        }, {
          start: {
            line: 204,
            column: 108
          },
          end: {
            line: 204,
            column: 109
          }
        }],
        line: 204
      },
      "36": {
        loc: {
          start: {
            line: 205,
            column: 34
          },
          end: {
            line: 205,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 205,
            column: 61
          },
          end: {
            line: 205,
            column: 105
          }
        }, {
          start: {
            line: 205,
            column: 108
          },
          end: {
            line: 205,
            column: 109
          }
        }],
        line: 205
      },
      "37": {
        loc: {
          start: {
            line: 218,
            column: 12
          },
          end: {
            line: 219,
            column: 58
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 218,
            column: 12
          },
          end: {
            line: 219,
            column: 58
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 218
      },
      "38": {
        loc: {
          start: {
            line: 228,
            column: 29
          },
          end: {
            line: 228,
            column: 125
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 228,
            column: 29
          },
          end: {
            line: 228,
            column: 120
          }
        }, {
          start: {
            line: 228,
            column: 124
          },
          end: {
            line: 228,
            column: 125
          }
        }],
        line: 228
      },
      "39": {
        loc: {
          start: {
            line: 228,
            column: 85
          },
          end: {
            line: 228,
            column: 115
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 228,
            column: 85
          },
          end: {
            line: 228,
            column: 110
          }
        }, {
          start: {
            line: 228,
            column: 114
          },
          end: {
            line: 228,
            column: 115
          }
        }],
        line: 228
      },
      "40": {
        loc: {
          start: {
            line: 230,
            column: 23
          },
          end: {
            line: 230,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 230,
            column: 23
          },
          end: {
            line: 230,
            column: 36
          }
        }, {
          start: {
            line: 230,
            column: 40
          },
          end: {
            line: 230,
            column: 42
          }
        }],
        line: 230
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/kevin/card-show-finder/src/hooks/useConversationsQuery.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/kevin/card-show-finder/src/hooks/useConversationsQuery.ts"],
      sourcesContent: ["import { useQuery, useQueryClient, useMutation } from '@tanstack/react-query';\nimport { useEffect, useState } from 'react';\nimport { supabase } from '../supabase';\nimport * as messagingService from '../services/messagingService';\nimport { Conversation, Message } from '../services/messagingService';\n\n/**\n * Custom hook for fetching and managing user conversations with React Query\n * Includes real-time updates and optimized data fetching\n * \n * Integration with PostgreSQL RPC functions:\n * - Uses 'get_user_conversations' RPC function with 'input_user_id' parameter\n * - Defined in migration: 20250711121000_create_conversations_rpc.sql\n * - Falls back to messagingService.getConversations() if RPC fails\n */\nexport const useConversationsQuery = (userId: string | null) => {\n  const queryClient = useQueryClient();\n  const [isSubscribed, setIsSubscribed] = useState(false);\n\n  // Main query to fetch conversations\n  const {\n    data: conversations,\n    isLoading,\n    error: rawError,\n    refetch\n  } = useQuery<Conversation[], Error>({\n    queryKey: ['conversations', userId],\n    queryFn: async () => {\n      if (!userId) return [];\n      try {\n        // 1. Attempt optimized RPC\n        // This calls the PostgreSQL function 'get_user_conversations' defined in\n        // migration 20250711121000_create_conversations_rpc.sql\n        const { data, error } = await supabase\n          .rpc('get_user_conversations', { \n            // Parameter name must match the SQL function parameter\n            input_user_id: userId \n          });\n\n        if (error) {\n          console.warn('[useConversationsQuery] RPC error:', error.message);\n          throw error;\n        }\n\n        // Validate returned data structure\n        if (data && Array.isArray(data)) {\n          // Verify the data has the expected structure\n          if (data.length > 0 && !data[0].id) {\n            console.warn('[useConversationsQuery] RPC returned unexpected data structure:', data[0]);\n            throw new Error('Invalid data structure returned from RPC');\n          }\n          return data as Conversation[];\n        }\n\n        // Defensive fallback (should not typically run)\n        console.warn('[useConversationsQuery] RPC returned no data, falling back to service');\n        return await messagingService.getConversations(userId);\n      } catch (err) {\n        // Log and fallback to legacy service\n        /* eslint-disable no-console */\n        console.warn(\n          '[useConversationsQuery] RPC failed, falling back to service:',\n          err,\n        );\n        /* eslint-enable no-console */\n        return await messagingService.getConversations(userId);\n      }\n    },\n    enabled: !!userId,\n    staleTime: 1000 * 60 * 5, // Consider data fresh for 5 minutes\n    cacheTime: 1000 * 60 * 30, // Keep in cache for 30 minutes\n    // Automatically retry (with exponential back-off) a few times\n    retry: 3,\n    retryDelay: attempt => Math.min(1000 * 2 ** attempt, 30_000),\n    // Log the error for observability\n    onError: (err) => {\n      /* eslint-disable no-console */\n      console.error('[useConversationsQuery] fetch error:', err);\n      /* eslint-enable no-console */\n    },\n  });\n\n  /**\n   * Provide a simplified / structured error for consumers\n   * while also allowing access to the raw Error object.\n   */\n  const formattedError = rawError\n    ? {\n        message: rawError.message,\n        retry: () => refetch(),\n      }\n    : null;\n\n  // Setup real-time subscription for new messages\n  useEffect(() => {\n    if (!userId || isSubscribed) return;\n\n    // Subscribe to messages table for real-time updates\n    const subscription = supabase\n      .channel('public:messages')\n      .on('postgres_changes', {\n        event: 'INSERT',\n        schema: 'public',\n        table: 'messages',\n      }, (payload) => {\n        const newMessage = payload.new as unknown as Message;\n        \n        // Update the conversations cache when a new message arrives\n        queryClient.invalidateQueries({\n          queryKey: ['conversations', userId],\n        });\n        \n        // If we're viewing a specific conversation, also update its messages\n        queryClient.invalidateQueries({\n          queryKey: ['messages', newMessage.conversation_id],\n        });\n      })\n      .subscribe();\n\n    setIsSubscribed(true);\n\n    // Cleanup subscription on unmount\n    return () => {\n      supabase.removeChannel(subscription);\n      setIsSubscribed(false);\n    };\n  }, [userId, queryClient, isSubscribed]);\n\n  // Mutation for marking a conversation as read\n  const markAsReadMutation = useMutation({\n    mutationFn: async ({ conversationId }: { conversationId: string }) => {\n      if (!userId) throw new Error('User not authenticated');\n      return await messagingService.markConversationAsRead(conversationId, userId);\n    },\n    onSuccess: (_, variables) => {\n      // Update the conversations cache to reflect read status\n      queryClient.setQueryData(['conversations', userId], (oldData: Conversation[] | undefined) => {\n        if (!oldData) return [];\n        \n        return oldData.map(conversation => {\n          if (conversation.id === variables.conversationId) {\n            return {\n              ...conversation,\n              unread_count: 0\n            };\n          }\n          return conversation;\n        });\n      });\n    }\n  });\n\n  // Mutation for sending a new message\n  const sendMessageMutation = useMutation({\n    mutationFn: async ({\n      conversationId,\n      messageText\n    }: {\n      conversationId: string;\n      messageText: string;\n    }) => {\n      if (!userId) throw new Error('User not authenticated');\n      \n      // Get the conversation to find the recipient\n      const conversation = conversations?.find(c => c.id === conversationId);\n      if (!conversation) throw new Error('Conversation not found');\n      \n      // For direct messages, find the other participant\n      const recipientId = conversation.participants?.[0]?.user_id || '';\n      \n      if (conversation.type === 'direct') {\n        return await messagingService.sendMessage(userId, recipientId, messageText, conversationId);\n      } else {\n        return await messagingService.sendGroupMessage(userId, conversationId, messageText);\n      }\n    },\n    onSuccess: (_, variables) => {\n      // Optimistically update the conversations list with the new message\n      queryClient.setQueryData(['conversations', userId], (oldData: Conversation[] | undefined) => {\n        if (!oldData) return [];\n        \n        return oldData.map(conversation => {\n          if (conversation.id === variables.conversationId) {\n            return {\n              ...conversation,\n              last_message_text: variables.messageText,\n              last_message_timestamp: new Date().toISOString()\n            };\n          }\n          return conversation;\n        }).sort((a, b) => {\n          // Sort by most recent message\n          const timeA = a.last_message_timestamp ? new Date(a.last_message_timestamp).getTime() : 0;\n          const timeB = b.last_message_timestamp ? new Date(b.last_message_timestamp).getTime() : 0;\n          return timeB - timeA;\n        });\n      });\n      \n      // Also update the messages for this conversation\n      queryClient.invalidateQueries({\n        queryKey: ['messages', variables.conversationId],\n      });\n    }\n  });\n\n  // Mutation for creating a new conversation\n  const createConversationMutation = useMutation({\n    mutationFn: async ({\n      recipientId,\n      initialMessage\n    }: {\n      recipientId: string;\n      initialMessage: string;\n    }) => {\n      if (!userId) throw new Error('User not authenticated');\n      return await messagingService.startConversationFromProfile(userId, recipientId, initialMessage);\n    },\n    onSuccess: () => {\n      // Refresh the conversations list\n      refetch();\n    }\n  });\n\n  // Get total unread count across all conversations\n  const totalUnreadCount = conversations?.reduce(\n    (total, conversation) => total + (conversation.unread_count || 0),\n    0\n  ) || 0;\n\n  return {\n    conversations: conversations || [],\n    isLoading,\n    error: formattedError,\n    refetch,\n    totalUnreadCount,\n    markConversationAsRead: (conversationId: string) => \n      markAsReadMutation.mutate({ conversationId }),\n    sendMessage: (conversationId: string, messageText: string) => \n      sendMessageMutation.mutate({ conversationId, messageText }),\n    createConversation: (recipientId: string, initialMessage: string) => \n      createConversationMutation.mutate({ recipientId, initialMessage }),\n    isSending: sendMessageMutation.isPending,\n    isCreating: createConversationMutation.isPending\n  };\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "bb565eaf9e74df4f0b8e3ad9cda45e1f19f005ca"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2nz1gc2shw = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2nz1gc2shw();
var __createBinding =
/* istanbul ignore next */
(cov_2nz1gc2shw().s[0]++,
/* istanbul ignore next */
(cov_2nz1gc2shw().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_2nz1gc2shw().b[0][1]++, this.__createBinding) ||
/* istanbul ignore next */
(cov_2nz1gc2shw().b[0][2]++, Object.create ?
/* istanbul ignore next */
(cov_2nz1gc2shw().b[1][0]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_2nz1gc2shw().f[0]++;
  cov_2nz1gc2shw().s[1]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_2nz1gc2shw().b[2][0]++;
    cov_2nz1gc2shw().s[2]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_2nz1gc2shw().b[2][1]++;
  }
  var desc =
  /* istanbul ignore next */
  (cov_2nz1gc2shw().s[3]++, Object.getOwnPropertyDescriptor(m, k));
  /* istanbul ignore next */
  cov_2nz1gc2shw().s[4]++;
  if (
  /* istanbul ignore next */
  (cov_2nz1gc2shw().b[4][0]++, !desc) ||
  /* istanbul ignore next */
  (cov_2nz1gc2shw().b[4][1]++, "get" in desc ?
  /* istanbul ignore next */
  (cov_2nz1gc2shw().b[5][0]++, !m.__esModule) :
  /* istanbul ignore next */
  (cov_2nz1gc2shw().b[5][1]++,
  /* istanbul ignore next */
  (cov_2nz1gc2shw().b[6][0]++, desc.writable) ||
  /* istanbul ignore next */
  (cov_2nz1gc2shw().b[6][1]++, desc.configurable)))) {
    /* istanbul ignore next */
    cov_2nz1gc2shw().b[3][0]++;
    cov_2nz1gc2shw().s[5]++;
    desc = {
      enumerable: true,
      get: function () {
        /* istanbul ignore next */
        cov_2nz1gc2shw().f[1]++;
        cov_2nz1gc2shw().s[6]++;
        return m[k];
      }
    };
  } else
  /* istanbul ignore next */
  {
    cov_2nz1gc2shw().b[3][1]++;
  }
  cov_2nz1gc2shw().s[7]++;
  Object.defineProperty(o, k2, desc);
}) :
/* istanbul ignore next */
(cov_2nz1gc2shw().b[1][1]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_2nz1gc2shw().f[2]++;
  cov_2nz1gc2shw().s[8]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_2nz1gc2shw().b[7][0]++;
    cov_2nz1gc2shw().s[9]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_2nz1gc2shw().b[7][1]++;
  }
  cov_2nz1gc2shw().s[10]++;
  o[k2] = m[k];
})));
var __setModuleDefault =
/* istanbul ignore next */
(cov_2nz1gc2shw().s[11]++,
/* istanbul ignore next */
(cov_2nz1gc2shw().b[8][0]++, this) &&
/* istanbul ignore next */
(cov_2nz1gc2shw().b[8][1]++, this.__setModuleDefault) ||
/* istanbul ignore next */
(cov_2nz1gc2shw().b[8][2]++, Object.create ?
/* istanbul ignore next */
(cov_2nz1gc2shw().b[9][0]++, function (o, v) {
  /* istanbul ignore next */
  cov_2nz1gc2shw().f[3]++;
  cov_2nz1gc2shw().s[12]++;
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
}) :
/* istanbul ignore next */
(cov_2nz1gc2shw().b[9][1]++, function (o, v) {
  /* istanbul ignore next */
  cov_2nz1gc2shw().f[4]++;
  cov_2nz1gc2shw().s[13]++;
  o["default"] = v;
})));
var __importStar =
/* istanbul ignore next */
(cov_2nz1gc2shw().s[14]++,
/* istanbul ignore next */
(cov_2nz1gc2shw().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_2nz1gc2shw().b[10][1]++, this.__importStar) ||
/* istanbul ignore next */
(cov_2nz1gc2shw().b[10][2]++, function () {
  /* istanbul ignore next */
  cov_2nz1gc2shw().f[5]++;
  cov_2nz1gc2shw().s[15]++;
  var ownKeys = function (o) {
    /* istanbul ignore next */
    cov_2nz1gc2shw().f[6]++;
    cov_2nz1gc2shw().s[16]++;
    ownKeys =
    /* istanbul ignore next */
    (cov_2nz1gc2shw().b[11][0]++, Object.getOwnPropertyNames) ||
    /* istanbul ignore next */
    (cov_2nz1gc2shw().b[11][1]++, function (o) {
      /* istanbul ignore next */
      cov_2nz1gc2shw().f[7]++;
      var ar =
      /* istanbul ignore next */
      (cov_2nz1gc2shw().s[17]++, []);
      /* istanbul ignore next */
      cov_2nz1gc2shw().s[18]++;
      for (var k in o) {
        /* istanbul ignore next */
        cov_2nz1gc2shw().s[19]++;
        if (Object.prototype.hasOwnProperty.call(o, k)) {
          /* istanbul ignore next */
          cov_2nz1gc2shw().b[12][0]++;
          cov_2nz1gc2shw().s[20]++;
          ar[ar.length] = k;
        } else
        /* istanbul ignore next */
        {
          cov_2nz1gc2shw().b[12][1]++;
        }
      }
      /* istanbul ignore next */
      cov_2nz1gc2shw().s[21]++;
      return ar;
    });
    /* istanbul ignore next */
    cov_2nz1gc2shw().s[22]++;
    return ownKeys(o);
  };
  /* istanbul ignore next */
  cov_2nz1gc2shw().s[23]++;
  return function (mod) {
    /* istanbul ignore next */
    cov_2nz1gc2shw().f[8]++;
    cov_2nz1gc2shw().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_2nz1gc2shw().b[14][0]++, mod) &&
    /* istanbul ignore next */
    (cov_2nz1gc2shw().b[14][1]++, mod.__esModule)) {
      /* istanbul ignore next */
      cov_2nz1gc2shw().b[13][0]++;
      cov_2nz1gc2shw().s[25]++;
      return mod;
    } else
    /* istanbul ignore next */
    {
      cov_2nz1gc2shw().b[13][1]++;
    }
    var result =
    /* istanbul ignore next */
    (cov_2nz1gc2shw().s[26]++, {});
    /* istanbul ignore next */
    cov_2nz1gc2shw().s[27]++;
    if (mod != null) {
      /* istanbul ignore next */
      cov_2nz1gc2shw().b[15][0]++;
      cov_2nz1gc2shw().s[28]++;
      for (var k =
        /* istanbul ignore next */
        (cov_2nz1gc2shw().s[29]++, ownKeys(mod)), i =
        /* istanbul ignore next */
        (cov_2nz1gc2shw().s[30]++, 0); i < k.length; i++) {
        /* istanbul ignore next */
        cov_2nz1gc2shw().s[31]++;
        if (k[i] !== "default") {
          /* istanbul ignore next */
          cov_2nz1gc2shw().b[16][0]++;
          cov_2nz1gc2shw().s[32]++;
          __createBinding(result, mod, k[i]);
        } else
        /* istanbul ignore next */
        {
          cov_2nz1gc2shw().b[16][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_2nz1gc2shw().b[15][1]++;
    }
    cov_2nz1gc2shw().s[33]++;
    __setModuleDefault(result, mod);
    /* istanbul ignore next */
    cov_2nz1gc2shw().s[34]++;
    return result;
  };
}()));
/* istanbul ignore next */
cov_2nz1gc2shw().s[35]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2nz1gc2shw().s[36]++;
exports.useConversationsQuery = void 0;
const react_query_1 =
/* istanbul ignore next */
(cov_2nz1gc2shw().s[37]++, require("@tanstack/react-query"));
const react_1 =
/* istanbul ignore next */
(cov_2nz1gc2shw().s[38]++, require("react"));
const supabase_1 =
/* istanbul ignore next */
(cov_2nz1gc2shw().s[39]++, require("../supabase"));
const messagingService =
/* istanbul ignore next */
(cov_2nz1gc2shw().s[40]++, __importStar(require("../services/messagingService")));
/**
 * Custom hook for fetching and managing user conversations with React Query
 * Includes real-time updates and optimized data fetching
 *
 * Integration with PostgreSQL RPC functions:
 * - Uses 'get_user_conversations' RPC function with 'input_user_id' parameter
 * - Defined in migration: 20250711121000_create_conversations_rpc.sql
 * - Falls back to messagingService.getConversations() if RPC fails
 */
/* istanbul ignore next */
cov_2nz1gc2shw().s[41]++;
const useConversationsQuery = userId => {
  /* istanbul ignore next */
  cov_2nz1gc2shw().f[9]++;
  const queryClient =
  /* istanbul ignore next */
  (cov_2nz1gc2shw().s[42]++, (0, react_query_1.useQueryClient)());
  const [isSubscribed, setIsSubscribed] =
  /* istanbul ignore next */
  (cov_2nz1gc2shw().s[43]++, (0, react_1.useState)(false));
  // Main query to fetch conversations
  const {
    data: conversations,
    isLoading,
    error: rawError,
    refetch
  } =
  /* istanbul ignore next */
  (cov_2nz1gc2shw().s[44]++, (0, react_query_1.useQuery)({
    queryKey: ['conversations', userId],
    queryFn: async () => {
      /* istanbul ignore next */
      cov_2nz1gc2shw().f[10]++;
      cov_2nz1gc2shw().s[45]++;
      if (!userId) {
        /* istanbul ignore next */
        cov_2nz1gc2shw().b[17][0]++;
        cov_2nz1gc2shw().s[46]++;
        return [];
      } else
      /* istanbul ignore next */
      {
        cov_2nz1gc2shw().b[17][1]++;
      }
      cov_2nz1gc2shw().s[47]++;
      try {
        // 1. Attempt optimized RPC
        // This calls the PostgreSQL function 'get_user_conversations' defined in
        // migration 20250711121000_create_conversations_rpc.sql
        const {
          data,
          error
        } =
        /* istanbul ignore next */
        (cov_2nz1gc2shw().s[48]++, await supabase_1.supabase.rpc('get_user_conversations', {
          // Parameter name must match the SQL function parameter
          input_user_id: userId
        }));
        /* istanbul ignore next */
        cov_2nz1gc2shw().s[49]++;
        if (error) {
          /* istanbul ignore next */
          cov_2nz1gc2shw().b[18][0]++;
          cov_2nz1gc2shw().s[50]++;
          console.warn('[useConversationsQuery] RPC error:', error.message);
          /* istanbul ignore next */
          cov_2nz1gc2shw().s[51]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_2nz1gc2shw().b[18][1]++;
        }
        // Validate returned data structure
        cov_2nz1gc2shw().s[52]++;
        if (
        /* istanbul ignore next */
        (cov_2nz1gc2shw().b[20][0]++, data) &&
        /* istanbul ignore next */
        (cov_2nz1gc2shw().b[20][1]++, Array.isArray(data))) {
          /* istanbul ignore next */
          cov_2nz1gc2shw().b[19][0]++;
          cov_2nz1gc2shw().s[53]++;
          // Verify the data has the expected structure
          if (
          /* istanbul ignore next */
          (cov_2nz1gc2shw().b[22][0]++, data.length > 0) &&
          /* istanbul ignore next */
          (cov_2nz1gc2shw().b[22][1]++, !data[0].id)) {
            /* istanbul ignore next */
            cov_2nz1gc2shw().b[21][0]++;
            cov_2nz1gc2shw().s[54]++;
            console.warn('[useConversationsQuery] RPC returned unexpected data structure:', data[0]);
            /* istanbul ignore next */
            cov_2nz1gc2shw().s[55]++;
            throw new Error('Invalid data structure returned from RPC');
          } else
          /* istanbul ignore next */
          {
            cov_2nz1gc2shw().b[21][1]++;
          }
          cov_2nz1gc2shw().s[56]++;
          return data;
        } else
        /* istanbul ignore next */
        {
          cov_2nz1gc2shw().b[19][1]++;
        }
        // Defensive fallback (should not typically run)
        cov_2nz1gc2shw().s[57]++;
        console.warn('[useConversationsQuery] RPC returned no data, falling back to service');
        /* istanbul ignore next */
        cov_2nz1gc2shw().s[58]++;
        return await messagingService.getConversations(userId);
      } catch (err) {
        /* istanbul ignore next */
        cov_2nz1gc2shw().s[59]++;
        // Log and fallback to legacy service
        /* eslint-disable no-console */
        console.warn('[useConversationsQuery] RPC failed, falling back to service:', err);
        /* eslint-enable no-console */
        /* istanbul ignore next */
        cov_2nz1gc2shw().s[60]++;
        return await messagingService.getConversations(userId);
      }
    },
    enabled: !!userId,
    staleTime: 1000 * 60 * 5,
    // Consider data fresh for 5 minutes
    cacheTime: 1000 * 60 * 30,
    // Keep in cache for 30 minutes
    // Automatically retry (with exponential back-off) a few times
    retry: 3,
    retryDelay: attempt => {
      /* istanbul ignore next */
      cov_2nz1gc2shw().f[11]++;
      cov_2nz1gc2shw().s[61]++;
      return Math.min(1000 * 2 ** attempt, 30_000);
    },
    // Log the error for observability
    onError: err => {
      /* istanbul ignore next */
      cov_2nz1gc2shw().f[12]++;
      cov_2nz1gc2shw().s[62]++;
      /* eslint-disable no-console */
      console.error('[useConversationsQuery] fetch error:', err);
      /* eslint-enable no-console */
    }
  }));
  /**
   * Provide a simplified / structured error for consumers
   * while also allowing access to the raw Error object.
   */
  const formattedError =
  /* istanbul ignore next */
  (cov_2nz1gc2shw().s[63]++, rawError ?
  /* istanbul ignore next */
  (cov_2nz1gc2shw().b[23][0]++, {
    message: rawError.message,
    retry: () => {
      /* istanbul ignore next */
      cov_2nz1gc2shw().f[13]++;
      cov_2nz1gc2shw().s[64]++;
      return refetch();
    }
  }) :
  /* istanbul ignore next */
  (cov_2nz1gc2shw().b[23][1]++, null));
  // Setup real-time subscription for new messages
  /* istanbul ignore next */
  cov_2nz1gc2shw().s[65]++;
  (0, react_1.useEffect)(() => {
    /* istanbul ignore next */
    cov_2nz1gc2shw().f[14]++;
    cov_2nz1gc2shw().s[66]++;
    if (
    /* istanbul ignore next */
    (cov_2nz1gc2shw().b[25][0]++, !userId) ||
    /* istanbul ignore next */
    (cov_2nz1gc2shw().b[25][1]++, isSubscribed)) {
      /* istanbul ignore next */
      cov_2nz1gc2shw().b[24][0]++;
      cov_2nz1gc2shw().s[67]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2nz1gc2shw().b[24][1]++;
    }
    // Subscribe to messages table for real-time updates
    const subscription =
    /* istanbul ignore next */
    (cov_2nz1gc2shw().s[68]++, supabase_1.supabase.channel('public:messages').on('postgres_changes', {
      event: 'INSERT',
      schema: 'public',
      table: 'messages'
    }, payload => {
      /* istanbul ignore next */
      cov_2nz1gc2shw().f[15]++;
      const newMessage =
      /* istanbul ignore next */
      (cov_2nz1gc2shw().s[69]++, payload.new);
      // Update the conversations cache when a new message arrives
      /* istanbul ignore next */
      cov_2nz1gc2shw().s[70]++;
      queryClient.invalidateQueries({
        queryKey: ['conversations', userId]
      });
      // If we're viewing a specific conversation, also update its messages
      /* istanbul ignore next */
      cov_2nz1gc2shw().s[71]++;
      queryClient.invalidateQueries({
        queryKey: ['messages', newMessage.conversation_id]
      });
    }).subscribe());
    /* istanbul ignore next */
    cov_2nz1gc2shw().s[72]++;
    setIsSubscribed(true);
    // Cleanup subscription on unmount
    /* istanbul ignore next */
    cov_2nz1gc2shw().s[73]++;
    return () => {
      /* istanbul ignore next */
      cov_2nz1gc2shw().f[16]++;
      cov_2nz1gc2shw().s[74]++;
      supabase_1.supabase.removeChannel(subscription);
      /* istanbul ignore next */
      cov_2nz1gc2shw().s[75]++;
      setIsSubscribed(false);
    };
  }, [userId, queryClient, isSubscribed]);
  // Mutation for marking a conversation as read
  const markAsReadMutation =
  /* istanbul ignore next */
  (cov_2nz1gc2shw().s[76]++, (0, react_query_1.useMutation)({
    mutationFn: async ({
      conversationId
    }) => {
      /* istanbul ignore next */
      cov_2nz1gc2shw().f[17]++;
      cov_2nz1gc2shw().s[77]++;
      if (!userId) {
        /* istanbul ignore next */
        cov_2nz1gc2shw().b[26][0]++;
        cov_2nz1gc2shw().s[78]++;
        throw new Error('User not authenticated');
      } else
      /* istanbul ignore next */
      {
        cov_2nz1gc2shw().b[26][1]++;
      }
      cov_2nz1gc2shw().s[79]++;
      return await messagingService.markConversationAsRead(conversationId, userId);
    },
    onSuccess: (_, variables) => {
      /* istanbul ignore next */
      cov_2nz1gc2shw().f[18]++;
      cov_2nz1gc2shw().s[80]++;
      // Update the conversations cache to reflect read status
      queryClient.setQueryData(['conversations', userId], oldData => {
        /* istanbul ignore next */
        cov_2nz1gc2shw().f[19]++;
        cov_2nz1gc2shw().s[81]++;
        if (!oldData) {
          /* istanbul ignore next */
          cov_2nz1gc2shw().b[27][0]++;
          cov_2nz1gc2shw().s[82]++;
          return [];
        } else
        /* istanbul ignore next */
        {
          cov_2nz1gc2shw().b[27][1]++;
        }
        cov_2nz1gc2shw().s[83]++;
        return oldData.map(conversation => {
          /* istanbul ignore next */
          cov_2nz1gc2shw().f[20]++;
          cov_2nz1gc2shw().s[84]++;
          if (conversation.id === variables.conversationId) {
            /* istanbul ignore next */
            cov_2nz1gc2shw().b[28][0]++;
            cov_2nz1gc2shw().s[85]++;
            return {
              ...conversation,
              unread_count: 0
            };
          } else
          /* istanbul ignore next */
          {
            cov_2nz1gc2shw().b[28][1]++;
          }
          cov_2nz1gc2shw().s[86]++;
          return conversation;
        });
      });
    }
  }));
  // Mutation for sending a new message
  const sendMessageMutation =
  /* istanbul ignore next */
  (cov_2nz1gc2shw().s[87]++, (0, react_query_1.useMutation)({
    mutationFn: async ({
      conversationId,
      messageText
    }) => {
      /* istanbul ignore next */
      cov_2nz1gc2shw().f[21]++;
      cov_2nz1gc2shw().s[88]++;
      if (!userId) {
        /* istanbul ignore next */
        cov_2nz1gc2shw().b[29][0]++;
        cov_2nz1gc2shw().s[89]++;
        throw new Error('User not authenticated');
      } else
      /* istanbul ignore next */
      {
        cov_2nz1gc2shw().b[29][1]++;
      }
      // Get the conversation to find the recipient
      const conversation =
      /* istanbul ignore next */
      (cov_2nz1gc2shw().s[90]++, conversations?.find(c => {
        /* istanbul ignore next */
        cov_2nz1gc2shw().f[22]++;
        cov_2nz1gc2shw().s[91]++;
        return c.id === conversationId;
      }));
      /* istanbul ignore next */
      cov_2nz1gc2shw().s[92]++;
      if (!conversation) {
        /* istanbul ignore next */
        cov_2nz1gc2shw().b[30][0]++;
        cov_2nz1gc2shw().s[93]++;
        throw new Error('Conversation not found');
      } else
      /* istanbul ignore next */
      {
        cov_2nz1gc2shw().b[30][1]++;
      }
      // For direct messages, find the other participant
      const recipientId =
      /* istanbul ignore next */
      (cov_2nz1gc2shw().s[94]++,
      /* istanbul ignore next */
      (cov_2nz1gc2shw().b[31][0]++, conversation.participants?.[0]?.user_id) ||
      /* istanbul ignore next */
      (cov_2nz1gc2shw().b[31][1]++, ''));
      /* istanbul ignore next */
      cov_2nz1gc2shw().s[95]++;
      if (conversation.type === 'direct') {
        /* istanbul ignore next */
        cov_2nz1gc2shw().b[32][0]++;
        cov_2nz1gc2shw().s[96]++;
        return await messagingService.sendMessage(userId, recipientId, messageText, conversationId);
      } else {
        /* istanbul ignore next */
        cov_2nz1gc2shw().b[32][1]++;
        cov_2nz1gc2shw().s[97]++;
        return await messagingService.sendGroupMessage(userId, conversationId, messageText);
      }
    },
    onSuccess: (_, variables) => {
      /* istanbul ignore next */
      cov_2nz1gc2shw().f[23]++;
      cov_2nz1gc2shw().s[98]++;
      // Optimistically update the conversations list with the new message
      queryClient.setQueryData(['conversations', userId], oldData => {
        /* istanbul ignore next */
        cov_2nz1gc2shw().f[24]++;
        cov_2nz1gc2shw().s[99]++;
        if (!oldData) {
          /* istanbul ignore next */
          cov_2nz1gc2shw().b[33][0]++;
          cov_2nz1gc2shw().s[100]++;
          return [];
        } else
        /* istanbul ignore next */
        {
          cov_2nz1gc2shw().b[33][1]++;
        }
        cov_2nz1gc2shw().s[101]++;
        return oldData.map(conversation => {
          /* istanbul ignore next */
          cov_2nz1gc2shw().f[25]++;
          cov_2nz1gc2shw().s[102]++;
          if (conversation.id === variables.conversationId) {
            /* istanbul ignore next */
            cov_2nz1gc2shw().b[34][0]++;
            cov_2nz1gc2shw().s[103]++;
            return {
              ...conversation,
              last_message_text: variables.messageText,
              last_message_timestamp: new Date().toISOString()
            };
          } else
          /* istanbul ignore next */
          {
            cov_2nz1gc2shw().b[34][1]++;
          }
          cov_2nz1gc2shw().s[104]++;
          return conversation;
        }).sort((a, b) => {
          /* istanbul ignore next */
          cov_2nz1gc2shw().f[26]++;
          // Sort by most recent message
          const timeA =
          /* istanbul ignore next */
          (cov_2nz1gc2shw().s[105]++, a.last_message_timestamp ?
          /* istanbul ignore next */
          (cov_2nz1gc2shw().b[35][0]++, new Date(a.last_message_timestamp).getTime()) :
          /* istanbul ignore next */
          (cov_2nz1gc2shw().b[35][1]++, 0));
          const timeB =
          /* istanbul ignore next */
          (cov_2nz1gc2shw().s[106]++, b.last_message_timestamp ?
          /* istanbul ignore next */
          (cov_2nz1gc2shw().b[36][0]++, new Date(b.last_message_timestamp).getTime()) :
          /* istanbul ignore next */
          (cov_2nz1gc2shw().b[36][1]++, 0));
          /* istanbul ignore next */
          cov_2nz1gc2shw().s[107]++;
          return timeB - timeA;
        });
      });
      // Also update the messages for this conversation
      /* istanbul ignore next */
      cov_2nz1gc2shw().s[108]++;
      queryClient.invalidateQueries({
        queryKey: ['messages', variables.conversationId]
      });
    }
  }));
  // Mutation for creating a new conversation
  const createConversationMutation =
  /* istanbul ignore next */
  (cov_2nz1gc2shw().s[109]++, (0, react_query_1.useMutation)({
    mutationFn: async ({
      recipientId,
      initialMessage
    }) => {
      /* istanbul ignore next */
      cov_2nz1gc2shw().f[27]++;
      cov_2nz1gc2shw().s[110]++;
      if (!userId) {
        /* istanbul ignore next */
        cov_2nz1gc2shw().b[37][0]++;
        cov_2nz1gc2shw().s[111]++;
        throw new Error('User not authenticated');
      } else
      /* istanbul ignore next */
      {
        cov_2nz1gc2shw().b[37][1]++;
      }
      cov_2nz1gc2shw().s[112]++;
      return await messagingService.startConversationFromProfile(userId, recipientId, initialMessage);
    },
    onSuccess: () => {
      /* istanbul ignore next */
      cov_2nz1gc2shw().f[28]++;
      cov_2nz1gc2shw().s[113]++;
      // Refresh the conversations list
      refetch();
    }
  }));
  // Get total unread count across all conversations
  const totalUnreadCount =
  /* istanbul ignore next */
  (cov_2nz1gc2shw().s[114]++,
  /* istanbul ignore next */
  (cov_2nz1gc2shw().b[38][0]++, conversations?.reduce((total, conversation) => {
    /* istanbul ignore next */
    cov_2nz1gc2shw().f[29]++;
    cov_2nz1gc2shw().s[115]++;
    return total + (
    /* istanbul ignore next */
    (cov_2nz1gc2shw().b[39][0]++, conversation.unread_count) ||
    /* istanbul ignore next */
    (cov_2nz1gc2shw().b[39][1]++, 0));
  }, 0)) ||
  /* istanbul ignore next */
  (cov_2nz1gc2shw().b[38][1]++, 0));
  /* istanbul ignore next */
  cov_2nz1gc2shw().s[116]++;
  return {
    conversations:
    /* istanbul ignore next */
    (cov_2nz1gc2shw().b[40][0]++, conversations) ||
    /* istanbul ignore next */
    (cov_2nz1gc2shw().b[40][1]++, []),
    isLoading,
    error: formattedError,
    refetch,
    totalUnreadCount,
    markConversationAsRead: conversationId => {
      /* istanbul ignore next */
      cov_2nz1gc2shw().f[30]++;
      cov_2nz1gc2shw().s[117]++;
      return markAsReadMutation.mutate({
        conversationId
      });
    },
    sendMessage: (conversationId, messageText) => {
      /* istanbul ignore next */
      cov_2nz1gc2shw().f[31]++;
      cov_2nz1gc2shw().s[118]++;
      return sendMessageMutation.mutate({
        conversationId,
        messageText
      });
    },
    createConversation: (recipientId, initialMessage) => {
      /* istanbul ignore next */
      cov_2nz1gc2shw().f[32]++;
      cov_2nz1gc2shw().s[119]++;
      return createConversationMutation.mutate({
        recipientId,
        initialMessage
      });
    },
    isSending: sendMessageMutation.isPending,
    isCreating: createConversationMutation.isPending
  };
};
/* istanbul ignore next */
cov_2nz1gc2shw().s[120]++;
exports.useConversationsQuery = useConversationsQuery;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF9xdWVyeV8xIiwiY292XzJuejFnYzJzaHciLCJzIiwicmVxdWlyZSIsInJlYWN0XzEiLCJzdXBhYmFzZV8xIiwibWVzc2FnaW5nU2VydmljZSIsIl9faW1wb3J0U3RhciIsInVzZUNvbnZlcnNhdGlvbnNRdWVyeSIsInVzZXJJZCIsImYiLCJxdWVyeUNsaWVudCIsInVzZVF1ZXJ5Q2xpZW50IiwiaXNTdWJzY3JpYmVkIiwic2V0SXNTdWJzY3JpYmVkIiwidXNlU3RhdGUiLCJkYXRhIiwiY29udmVyc2F0aW9ucyIsImlzTG9hZGluZyIsImVycm9yIiwicmF3RXJyb3IiLCJyZWZldGNoIiwidXNlUXVlcnkiLCJxdWVyeUtleSIsInF1ZXJ5Rm4iLCJiIiwic3VwYWJhc2UiLCJycGMiLCJpbnB1dF91c2VyX2lkIiwiY29uc29sZSIsIndhcm4iLCJtZXNzYWdlIiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwiaWQiLCJFcnJvciIsImdldENvbnZlcnNhdGlvbnMiLCJlcnIiLCJlbmFibGVkIiwic3RhbGVUaW1lIiwiY2FjaGVUaW1lIiwicmV0cnkiLCJyZXRyeURlbGF5IiwiYXR0ZW1wdCIsIk1hdGgiLCJtaW4iLCJvbkVycm9yIiwiZm9ybWF0dGVkRXJyb3IiLCJ1c2VFZmZlY3QiLCJzdWJzY3JpcHRpb24iLCJjaGFubmVsIiwib24iLCJldmVudCIsInNjaGVtYSIsInRhYmxlIiwicGF5bG9hZCIsIm5ld01lc3NhZ2UiLCJuZXciLCJpbnZhbGlkYXRlUXVlcmllcyIsImNvbnZlcnNhdGlvbl9pZCIsInN1YnNjcmliZSIsInJlbW92ZUNoYW5uZWwiLCJtYXJrQXNSZWFkTXV0YXRpb24iLCJ1c2VNdXRhdGlvbiIsIm11dGF0aW9uRm4iLCJjb252ZXJzYXRpb25JZCIsIm1hcmtDb252ZXJzYXRpb25Bc1JlYWQiLCJvblN1Y2Nlc3MiLCJfIiwidmFyaWFibGVzIiwic2V0UXVlcnlEYXRhIiwib2xkRGF0YSIsIm1hcCIsImNvbnZlcnNhdGlvbiIsInVucmVhZF9jb3VudCIsInNlbmRNZXNzYWdlTXV0YXRpb24iLCJtZXNzYWdlVGV4dCIsImZpbmQiLCJjIiwicmVjaXBpZW50SWQiLCJwYXJ0aWNpcGFudHMiLCJ1c2VyX2lkIiwidHlwZSIsInNlbmRNZXNzYWdlIiwic2VuZEdyb3VwTWVzc2FnZSIsImxhc3RfbWVzc2FnZV90ZXh0IiwibGFzdF9tZXNzYWdlX3RpbWVzdGFtcCIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsInNvcnQiLCJhIiwidGltZUEiLCJnZXRUaW1lIiwidGltZUIiLCJjcmVhdGVDb252ZXJzYXRpb25NdXRhdGlvbiIsImluaXRpYWxNZXNzYWdlIiwic3RhcnRDb252ZXJzYXRpb25Gcm9tUHJvZmlsZSIsInRvdGFsVW5yZWFkQ291bnQiLCJyZWR1Y2UiLCJ0b3RhbCIsIm11dGF0ZSIsImNyZWF0ZUNvbnZlcnNhdGlvbiIsImlzU2VuZGluZyIsImlzUGVuZGluZyIsImlzQ3JlYXRpbmciLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiL1VzZXJzL2tldmluL2NhcmQtc2hvdy1maW5kZXIvc3JjL2hvb2tzL3VzZUNvbnZlcnNhdGlvbnNRdWVyeS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VRdWVyeSwgdXNlUXVlcnlDbGllbnQsIHVzZU11dGF0aW9uIH0gZnJvbSAnQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5JztcbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBzdXBhYmFzZSB9IGZyb20gJy4uL3N1cGFiYXNlJztcbmltcG9ydCAqIGFzIG1lc3NhZ2luZ1NlcnZpY2UgZnJvbSAnLi4vc2VydmljZXMvbWVzc2FnaW5nU2VydmljZSc7XG5pbXBvcnQgeyBDb252ZXJzYXRpb24sIE1lc3NhZ2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9tZXNzYWdpbmdTZXJ2aWNlJztcblxuLyoqXG4gKiBDdXN0b20gaG9vayBmb3IgZmV0Y2hpbmcgYW5kIG1hbmFnaW5nIHVzZXIgY29udmVyc2F0aW9ucyB3aXRoIFJlYWN0IFF1ZXJ5XG4gKiBJbmNsdWRlcyByZWFsLXRpbWUgdXBkYXRlcyBhbmQgb3B0aW1pemVkIGRhdGEgZmV0Y2hpbmdcbiAqIFxuICogSW50ZWdyYXRpb24gd2l0aCBQb3N0Z3JlU1FMIFJQQyBmdW5jdGlvbnM6XG4gKiAtIFVzZXMgJ2dldF91c2VyX2NvbnZlcnNhdGlvbnMnIFJQQyBmdW5jdGlvbiB3aXRoICdpbnB1dF91c2VyX2lkJyBwYXJhbWV0ZXJcbiAqIC0gRGVmaW5lZCBpbiBtaWdyYXRpb246IDIwMjUwNzExMTIxMDAwX2NyZWF0ZV9jb252ZXJzYXRpb25zX3JwYy5zcWxcbiAqIC0gRmFsbHMgYmFjayB0byBtZXNzYWdpbmdTZXJ2aWNlLmdldENvbnZlcnNhdGlvbnMoKSBpZiBSUEMgZmFpbHNcbiAqL1xuZXhwb3J0IGNvbnN0IHVzZUNvbnZlcnNhdGlvbnNRdWVyeSA9ICh1c2VySWQ6IHN0cmluZyB8IG51bGwpID0+IHtcbiAgY29uc3QgcXVlcnlDbGllbnQgPSB1c2VRdWVyeUNsaWVudCgpO1xuICBjb25zdCBbaXNTdWJzY3JpYmVkLCBzZXRJc1N1YnNjcmliZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIC8vIE1haW4gcXVlcnkgdG8gZmV0Y2ggY29udmVyc2F0aW9uc1xuICBjb25zdCB7XG4gICAgZGF0YTogY29udmVyc2F0aW9ucyxcbiAgICBpc0xvYWRpbmcsXG4gICAgZXJyb3I6IHJhd0Vycm9yLFxuICAgIHJlZmV0Y2hcbiAgfSA9IHVzZVF1ZXJ5PENvbnZlcnNhdGlvbltdLCBFcnJvcj4oe1xuICAgIHF1ZXJ5S2V5OiBbJ2NvbnZlcnNhdGlvbnMnLCB1c2VySWRdLFxuICAgIHF1ZXJ5Rm46IGFzeW5jICgpID0+IHtcbiAgICAgIGlmICghdXNlcklkKSByZXR1cm4gW107XG4gICAgICB0cnkge1xuICAgICAgICAvLyAxLiBBdHRlbXB0IG9wdGltaXplZCBSUENcbiAgICAgICAgLy8gVGhpcyBjYWxscyB0aGUgUG9zdGdyZVNRTCBmdW5jdGlvbiAnZ2V0X3VzZXJfY29udmVyc2F0aW9ucycgZGVmaW5lZCBpblxuICAgICAgICAvLyBtaWdyYXRpb24gMjAyNTA3MTExMjEwMDBfY3JlYXRlX2NvbnZlcnNhdGlvbnNfcnBjLnNxbFxuICAgICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAgIC5ycGMoJ2dldF91c2VyX2NvbnZlcnNhdGlvbnMnLCB7IFxuICAgICAgICAgICAgLy8gUGFyYW1ldGVyIG5hbWUgbXVzdCBtYXRjaCB0aGUgU1FMIGZ1bmN0aW9uIHBhcmFtZXRlclxuICAgICAgICAgICAgaW5wdXRfdXNlcl9pZDogdXNlcklkIFxuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUud2FybignW3VzZUNvbnZlcnNhdGlvbnNRdWVyeV0gUlBDIGVycm9yOicsIGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVmFsaWRhdGUgcmV0dXJuZWQgZGF0YSBzdHJ1Y3R1cmVcbiAgICAgICAgaWYgKGRhdGEgJiYgQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgIC8vIFZlcmlmeSB0aGUgZGF0YSBoYXMgdGhlIGV4cGVjdGVkIHN0cnVjdHVyZVxuICAgICAgICAgIGlmIChkYXRhLmxlbmd0aCA+IDAgJiYgIWRhdGFbMF0uaWQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignW3VzZUNvbnZlcnNhdGlvbnNRdWVyeV0gUlBDIHJldHVybmVkIHVuZXhwZWN0ZWQgZGF0YSBzdHJ1Y3R1cmU6JywgZGF0YVswXSk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZGF0YSBzdHJ1Y3R1cmUgcmV0dXJuZWQgZnJvbSBSUEMnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGRhdGEgYXMgQ29udmVyc2F0aW9uW107XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEZWZlbnNpdmUgZmFsbGJhY2sgKHNob3VsZCBub3QgdHlwaWNhbGx5IHJ1bilcbiAgICAgICAgY29uc29sZS53YXJuKCdbdXNlQ29udmVyc2F0aW9uc1F1ZXJ5XSBSUEMgcmV0dXJuZWQgbm8gZGF0YSwgZmFsbGluZyBiYWNrIHRvIHNlcnZpY2UnKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IG1lc3NhZ2luZ1NlcnZpY2UuZ2V0Q29udmVyc2F0aW9ucyh1c2VySWQpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIC8vIExvZyBhbmQgZmFsbGJhY2sgdG8gbGVnYWN5IHNlcnZpY2VcbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgJ1t1c2VDb252ZXJzYXRpb25zUXVlcnldIFJQQyBmYWlsZWQsIGZhbGxpbmcgYmFjayB0byBzZXJ2aWNlOicsXG4gICAgICAgICAgZXJyLFxuICAgICAgICApO1xuICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cbiAgICAgICAgcmV0dXJuIGF3YWl0IG1lc3NhZ2luZ1NlcnZpY2UuZ2V0Q29udmVyc2F0aW9ucyh1c2VySWQpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZW5hYmxlZDogISF1c2VySWQsXG4gICAgc3RhbGVUaW1lOiAxMDAwICogNjAgKiA1LCAvLyBDb25zaWRlciBkYXRhIGZyZXNoIGZvciA1IG1pbnV0ZXNcbiAgICBjYWNoZVRpbWU6IDEwMDAgKiA2MCAqIDMwLCAvLyBLZWVwIGluIGNhY2hlIGZvciAzMCBtaW51dGVzXG4gICAgLy8gQXV0b21hdGljYWxseSByZXRyeSAod2l0aCBleHBvbmVudGlhbCBiYWNrLW9mZikgYSBmZXcgdGltZXNcbiAgICByZXRyeTogMyxcbiAgICByZXRyeURlbGF5OiBhdHRlbXB0ID0+IE1hdGgubWluKDEwMDAgKiAyICoqIGF0dGVtcHQsIDMwXzAwMCksXG4gICAgLy8gTG9nIHRoZSBlcnJvciBmb3Igb2JzZXJ2YWJpbGl0eVxuICAgIG9uRXJyb3I6IChlcnIpID0+IHtcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1t1c2VDb252ZXJzYXRpb25zUXVlcnldIGZldGNoIGVycm9yOicsIGVycik7XG4gICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cbiAgICB9LFxuICB9KTtcblxuICAvKipcbiAgICogUHJvdmlkZSBhIHNpbXBsaWZpZWQgLyBzdHJ1Y3R1cmVkIGVycm9yIGZvciBjb25zdW1lcnNcbiAgICogd2hpbGUgYWxzbyBhbGxvd2luZyBhY2Nlc3MgdG8gdGhlIHJhdyBFcnJvciBvYmplY3QuXG4gICAqL1xuICBjb25zdCBmb3JtYXR0ZWRFcnJvciA9IHJhd0Vycm9yXG4gICAgPyB7XG4gICAgICAgIG1lc3NhZ2U6IHJhd0Vycm9yLm1lc3NhZ2UsXG4gICAgICAgIHJldHJ5OiAoKSA9PiByZWZldGNoKCksXG4gICAgICB9XG4gICAgOiBudWxsO1xuXG4gIC8vIFNldHVwIHJlYWwtdGltZSBzdWJzY3JpcHRpb24gZm9yIG5ldyBtZXNzYWdlc1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghdXNlcklkIHx8IGlzU3Vic2NyaWJlZCkgcmV0dXJuO1xuXG4gICAgLy8gU3Vic2NyaWJlIHRvIG1lc3NhZ2VzIHRhYmxlIGZvciByZWFsLXRpbWUgdXBkYXRlc1xuICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IHN1cGFiYXNlXG4gICAgICAuY2hhbm5lbCgncHVibGljOm1lc3NhZ2VzJylcbiAgICAgIC5vbigncG9zdGdyZXNfY2hhbmdlcycsIHtcbiAgICAgICAgZXZlbnQ6ICdJTlNFUlQnLFxuICAgICAgICBzY2hlbWE6ICdwdWJsaWMnLFxuICAgICAgICB0YWJsZTogJ21lc3NhZ2VzJyxcbiAgICAgIH0sIChwYXlsb2FkKSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld01lc3NhZ2UgPSBwYXlsb2FkLm5ldyBhcyB1bmtub3duIGFzIE1lc3NhZ2U7XG4gICAgICAgIFxuICAgICAgICAvLyBVcGRhdGUgdGhlIGNvbnZlcnNhdGlvbnMgY2FjaGUgd2hlbiBhIG5ldyBtZXNzYWdlIGFycml2ZXNcbiAgICAgICAgcXVlcnlDbGllbnQuaW52YWxpZGF0ZVF1ZXJpZXMoe1xuICAgICAgICAgIHF1ZXJ5S2V5OiBbJ2NvbnZlcnNhdGlvbnMnLCB1c2VySWRdLFxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIElmIHdlJ3JlIHZpZXdpbmcgYSBzcGVjaWZpYyBjb252ZXJzYXRpb24sIGFsc28gdXBkYXRlIGl0cyBtZXNzYWdlc1xuICAgICAgICBxdWVyeUNsaWVudC5pbnZhbGlkYXRlUXVlcmllcyh7XG4gICAgICAgICAgcXVlcnlLZXk6IFsnbWVzc2FnZXMnLCBuZXdNZXNzYWdlLmNvbnZlcnNhdGlvbl9pZF0sXG4gICAgICAgIH0pO1xuICAgICAgfSlcbiAgICAgIC5zdWJzY3JpYmUoKTtcblxuICAgIHNldElzU3Vic2NyaWJlZCh0cnVlKTtcblxuICAgIC8vIENsZWFudXAgc3Vic2NyaXB0aW9uIG9uIHVubW91bnRcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgc3VwYWJhc2UucmVtb3ZlQ2hhbm5lbChzdWJzY3JpcHRpb24pO1xuICAgICAgc2V0SXNTdWJzY3JpYmVkKGZhbHNlKTtcbiAgICB9O1xuICB9LCBbdXNlcklkLCBxdWVyeUNsaWVudCwgaXNTdWJzY3JpYmVkXSk7XG5cbiAgLy8gTXV0YXRpb24gZm9yIG1hcmtpbmcgYSBjb252ZXJzYXRpb24gYXMgcmVhZFxuICBjb25zdCBtYXJrQXNSZWFkTXV0YXRpb24gPSB1c2VNdXRhdGlvbih7XG4gICAgbXV0YXRpb25GbjogYXN5bmMgKHsgY29udmVyc2F0aW9uSWQgfTogeyBjb252ZXJzYXRpb25JZDogc3RyaW5nIH0pID0+IHtcbiAgICAgIGlmICghdXNlcklkKSB0aHJvdyBuZXcgRXJyb3IoJ1VzZXIgbm90IGF1dGhlbnRpY2F0ZWQnKTtcbiAgICAgIHJldHVybiBhd2FpdCBtZXNzYWdpbmdTZXJ2aWNlLm1hcmtDb252ZXJzYXRpb25Bc1JlYWQoY29udmVyc2F0aW9uSWQsIHVzZXJJZCk7XG4gICAgfSxcbiAgICBvblN1Y2Nlc3M6IChfLCB2YXJpYWJsZXMpID0+IHtcbiAgICAgIC8vIFVwZGF0ZSB0aGUgY29udmVyc2F0aW9ucyBjYWNoZSB0byByZWZsZWN0IHJlYWQgc3RhdHVzXG4gICAgICBxdWVyeUNsaWVudC5zZXRRdWVyeURhdGEoWydjb252ZXJzYXRpb25zJywgdXNlcklkXSwgKG9sZERhdGE6IENvbnZlcnNhdGlvbltdIHwgdW5kZWZpbmVkKSA9PiB7XG4gICAgICAgIGlmICghb2xkRGF0YSkgcmV0dXJuIFtdO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIG9sZERhdGEubWFwKGNvbnZlcnNhdGlvbiA9PiB7XG4gICAgICAgICAgaWYgKGNvbnZlcnNhdGlvbi5pZCA9PT0gdmFyaWFibGVzLmNvbnZlcnNhdGlvbklkKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAuLi5jb252ZXJzYXRpb24sXG4gICAgICAgICAgICAgIHVucmVhZF9jb3VudDogMFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGNvbnZlcnNhdGlvbjtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIE11dGF0aW9uIGZvciBzZW5kaW5nIGEgbmV3IG1lc3NhZ2VcbiAgY29uc3Qgc2VuZE1lc3NhZ2VNdXRhdGlvbiA9IHVzZU11dGF0aW9uKHtcbiAgICBtdXRhdGlvbkZuOiBhc3luYyAoe1xuICAgICAgY29udmVyc2F0aW9uSWQsXG4gICAgICBtZXNzYWdlVGV4dFxuICAgIH06IHtcbiAgICAgIGNvbnZlcnNhdGlvbklkOiBzdHJpbmc7XG4gICAgICBtZXNzYWdlVGV4dDogc3RyaW5nO1xuICAgIH0pID0+IHtcbiAgICAgIGlmICghdXNlcklkKSB0aHJvdyBuZXcgRXJyb3IoJ1VzZXIgbm90IGF1dGhlbnRpY2F0ZWQnKTtcbiAgICAgIFxuICAgICAgLy8gR2V0IHRoZSBjb252ZXJzYXRpb24gdG8gZmluZCB0aGUgcmVjaXBpZW50XG4gICAgICBjb25zdCBjb252ZXJzYXRpb24gPSBjb252ZXJzYXRpb25zPy5maW5kKGMgPT4gYy5pZCA9PT0gY29udmVyc2F0aW9uSWQpO1xuICAgICAgaWYgKCFjb252ZXJzYXRpb24pIHRocm93IG5ldyBFcnJvcignQ29udmVyc2F0aW9uIG5vdCBmb3VuZCcpO1xuICAgICAgXG4gICAgICAvLyBGb3IgZGlyZWN0IG1lc3NhZ2VzLCBmaW5kIHRoZSBvdGhlciBwYXJ0aWNpcGFudFxuICAgICAgY29uc3QgcmVjaXBpZW50SWQgPSBjb252ZXJzYXRpb24ucGFydGljaXBhbnRzPy5bMF0/LnVzZXJfaWQgfHwgJyc7XG4gICAgICBcbiAgICAgIGlmIChjb252ZXJzYXRpb24udHlwZSA9PT0gJ2RpcmVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IG1lc3NhZ2luZ1NlcnZpY2Uuc2VuZE1lc3NhZ2UodXNlcklkLCByZWNpcGllbnRJZCwgbWVzc2FnZVRleHQsIGNvbnZlcnNhdGlvbklkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBhd2FpdCBtZXNzYWdpbmdTZXJ2aWNlLnNlbmRHcm91cE1lc3NhZ2UodXNlcklkLCBjb252ZXJzYXRpb25JZCwgbWVzc2FnZVRleHQpO1xuICAgICAgfVxuICAgIH0sXG4gICAgb25TdWNjZXNzOiAoXywgdmFyaWFibGVzKSA9PiB7XG4gICAgICAvLyBPcHRpbWlzdGljYWxseSB1cGRhdGUgdGhlIGNvbnZlcnNhdGlvbnMgbGlzdCB3aXRoIHRoZSBuZXcgbWVzc2FnZVxuICAgICAgcXVlcnlDbGllbnQuc2V0UXVlcnlEYXRhKFsnY29udmVyc2F0aW9ucycsIHVzZXJJZF0sIChvbGREYXRhOiBDb252ZXJzYXRpb25bXSB8IHVuZGVmaW5lZCkgPT4ge1xuICAgICAgICBpZiAoIW9sZERhdGEpIHJldHVybiBbXTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBvbGREYXRhLm1hcChjb252ZXJzYXRpb24gPT4ge1xuICAgICAgICAgIGlmIChjb252ZXJzYXRpb24uaWQgPT09IHZhcmlhYmxlcy5jb252ZXJzYXRpb25JZCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgLi4uY29udmVyc2F0aW9uLFxuICAgICAgICAgICAgICBsYXN0X21lc3NhZ2VfdGV4dDogdmFyaWFibGVzLm1lc3NhZ2VUZXh0LFxuICAgICAgICAgICAgICBsYXN0X21lc3NhZ2VfdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBjb252ZXJzYXRpb247XG4gICAgICAgIH0pLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgICAvLyBTb3J0IGJ5IG1vc3QgcmVjZW50IG1lc3NhZ2VcbiAgICAgICAgICBjb25zdCB0aW1lQSA9IGEubGFzdF9tZXNzYWdlX3RpbWVzdGFtcCA/IG5ldyBEYXRlKGEubGFzdF9tZXNzYWdlX3RpbWVzdGFtcCkuZ2V0VGltZSgpIDogMDtcbiAgICAgICAgICBjb25zdCB0aW1lQiA9IGIubGFzdF9tZXNzYWdlX3RpbWVzdGFtcCA/IG5ldyBEYXRlKGIubGFzdF9tZXNzYWdlX3RpbWVzdGFtcCkuZ2V0VGltZSgpIDogMDtcbiAgICAgICAgICByZXR1cm4gdGltZUIgLSB0aW1lQTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgLy8gQWxzbyB1cGRhdGUgdGhlIG1lc3NhZ2VzIGZvciB0aGlzIGNvbnZlcnNhdGlvblxuICAgICAgcXVlcnlDbGllbnQuaW52YWxpZGF0ZVF1ZXJpZXMoe1xuICAgICAgICBxdWVyeUtleTogWydtZXNzYWdlcycsIHZhcmlhYmxlcy5jb252ZXJzYXRpb25JZF0sXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIE11dGF0aW9uIGZvciBjcmVhdGluZyBhIG5ldyBjb252ZXJzYXRpb25cbiAgY29uc3QgY3JlYXRlQ29udmVyc2F0aW9uTXV0YXRpb24gPSB1c2VNdXRhdGlvbih7XG4gICAgbXV0YXRpb25GbjogYXN5bmMgKHtcbiAgICAgIHJlY2lwaWVudElkLFxuICAgICAgaW5pdGlhbE1lc3NhZ2VcbiAgICB9OiB7XG4gICAgICByZWNpcGllbnRJZDogc3RyaW5nO1xuICAgICAgaW5pdGlhbE1lc3NhZ2U6IHN0cmluZztcbiAgICB9KSA9PiB7XG4gICAgICBpZiAoIXVzZXJJZCkgdGhyb3cgbmV3IEVycm9yKCdVc2VyIG5vdCBhdXRoZW50aWNhdGVkJyk7XG4gICAgICByZXR1cm4gYXdhaXQgbWVzc2FnaW5nU2VydmljZS5zdGFydENvbnZlcnNhdGlvbkZyb21Qcm9maWxlKHVzZXJJZCwgcmVjaXBpZW50SWQsIGluaXRpYWxNZXNzYWdlKTtcbiAgICB9LFxuICAgIG9uU3VjY2VzczogKCkgPT4ge1xuICAgICAgLy8gUmVmcmVzaCB0aGUgY29udmVyc2F0aW9ucyBsaXN0XG4gICAgICByZWZldGNoKCk7XG4gICAgfVxuICB9KTtcblxuICAvLyBHZXQgdG90YWwgdW5yZWFkIGNvdW50IGFjcm9zcyBhbGwgY29udmVyc2F0aW9uc1xuICBjb25zdCB0b3RhbFVucmVhZENvdW50ID0gY29udmVyc2F0aW9ucz8ucmVkdWNlKFxuICAgICh0b3RhbCwgY29udmVyc2F0aW9uKSA9PiB0b3RhbCArIChjb252ZXJzYXRpb24udW5yZWFkX2NvdW50IHx8IDApLFxuICAgIDBcbiAgKSB8fCAwO1xuXG4gIHJldHVybiB7XG4gICAgY29udmVyc2F0aW9uczogY29udmVyc2F0aW9ucyB8fCBbXSxcbiAgICBpc0xvYWRpbmcsXG4gICAgZXJyb3I6IGZvcm1hdHRlZEVycm9yLFxuICAgIHJlZmV0Y2gsXG4gICAgdG90YWxVbnJlYWRDb3VudCxcbiAgICBtYXJrQ29udmVyc2F0aW9uQXNSZWFkOiAoY29udmVyc2F0aW9uSWQ6IHN0cmluZykgPT4gXG4gICAgICBtYXJrQXNSZWFkTXV0YXRpb24ubXV0YXRlKHsgY29udmVyc2F0aW9uSWQgfSksXG4gICAgc2VuZE1lc3NhZ2U6IChjb252ZXJzYXRpb25JZDogc3RyaW5nLCBtZXNzYWdlVGV4dDogc3RyaW5nKSA9PiBcbiAgICAgIHNlbmRNZXNzYWdlTXV0YXRpb24ubXV0YXRlKHsgY29udmVyc2F0aW9uSWQsIG1lc3NhZ2VUZXh0IH0pLFxuICAgIGNyZWF0ZUNvbnZlcnNhdGlvbjogKHJlY2lwaWVudElkOiBzdHJpbmcsIGluaXRpYWxNZXNzYWdlOiBzdHJpbmcpID0+IFxuICAgICAgY3JlYXRlQ29udmVyc2F0aW9uTXV0YXRpb24ubXV0YXRlKHsgcmVjaXBpZW50SWQsIGluaXRpYWxNZXNzYWdlIH0pLFxuICAgIGlzU2VuZGluZzogc2VuZE1lc3NhZ2VNdXRhdGlvbi5pc1BlbmRpbmcsXG4gICAgaXNDcmVhdGluZzogY3JlYXRlQ29udmVyc2F0aW9uTXV0YXRpb24uaXNQZW5kaW5nXG4gIH07XG59O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsTUFBQUEsYUFBQTtBQUFBO0FBQUEsQ0FBQUMsY0FBQSxHQUFBQyxDQUFBLFFBQUFDLE9BQUE7QUFDQSxNQUFBQyxPQUFBO0FBQUE7QUFBQSxDQUFBSCxjQUFBLEdBQUFDLENBQUEsUUFBQUMsT0FBQTtBQUNBLE1BQUFFLFVBQUE7QUFBQTtBQUFBLENBQUFKLGNBQUEsR0FBQUMsQ0FBQSxRQUFBQyxPQUFBO0FBQ0EsTUFBQUcsZ0JBQUE7QUFBQTtBQUFBLENBQUFMLGNBQUEsR0FBQUMsQ0FBQSxRQUFBSyxZQUFBLENBQUFKLE9BQUE7QUFHQTs7Ozs7Ozs7O0FBQUE7QUFBQUYsY0FBQSxHQUFBQyxDQUFBO0FBU08sTUFBTU0scUJBQXFCLEdBQUlDLE1BQXFCLElBQUk7RUFBQTtFQUFBUixjQUFBLEdBQUFTLENBQUE7RUFDN0QsTUFBTUMsV0FBVztFQUFBO0VBQUEsQ0FBQVYsY0FBQSxHQUFBQyxDQUFBLFFBQUcsSUFBQUYsYUFBQSxDQUFBWSxjQUFjLEdBQUU7RUFDcEMsTUFBTSxDQUFDQyxZQUFZLEVBQUVDLGVBQWUsQ0FBQztFQUFBO0VBQUEsQ0FBQWIsY0FBQSxHQUFBQyxDQUFBLFFBQUcsSUFBQUUsT0FBQSxDQUFBVyxRQUFRLEVBQUMsS0FBSyxDQUFDO0VBRXZEO0VBQ0EsTUFBTTtJQUNKQyxJQUFJLEVBQUVDLGFBQWE7SUFDbkJDLFNBQVM7SUFDVEMsS0FBSyxFQUFFQyxRQUFRO0lBQ2ZDO0VBQU8sQ0FDUjtFQUFBO0VBQUEsQ0FBQXBCLGNBQUEsR0FBQUMsQ0FBQSxRQUFHLElBQUFGLGFBQUEsQ0FBQXNCLFFBQVEsRUFBd0I7SUFDbENDLFFBQVEsRUFBRSxDQUFDLGVBQWUsRUFBRWQsTUFBTSxDQUFDO0lBQ25DZSxPQUFPLEVBQUUsTUFBQUEsQ0FBQSxLQUFXO01BQUE7TUFBQXZCLGNBQUEsR0FBQVMsQ0FBQTtNQUFBVCxjQUFBLEdBQUFDLENBQUE7TUFDbEIsSUFBSSxDQUFDTyxNQUFNLEVBQUU7UUFBQTtRQUFBUixjQUFBLEdBQUF3QixDQUFBO1FBQUF4QixjQUFBLEdBQUFDLENBQUE7UUFBQSxPQUFPLEVBQUU7TUFBQSxDQUFDO01BQUE7TUFBQTtRQUFBRCxjQUFBLEdBQUF3QixDQUFBO01BQUE7TUFBQXhCLGNBQUEsR0FBQUMsQ0FBQTtNQUN2QixJQUFJO1FBQ0Y7UUFDQTtRQUNBO1FBQ0EsTUFBTTtVQUFFYyxJQUFJO1VBQUVHO1FBQUssQ0FBRTtRQUFBO1FBQUEsQ0FBQWxCLGNBQUEsR0FBQUMsQ0FBQSxRQUFHLE1BQU1HLFVBQUEsQ0FBQXFCLFFBQVEsQ0FDbkNDLEdBQUcsQ0FBQyx3QkFBd0IsRUFBRTtVQUM3QjtVQUNBQyxhQUFhLEVBQUVuQjtTQUNoQixDQUFDO1FBQUM7UUFBQVIsY0FBQSxHQUFBQyxDQUFBO1FBRUwsSUFBSWlCLEtBQUssRUFBRTtVQUFBO1VBQUFsQixjQUFBLEdBQUF3QixDQUFBO1VBQUF4QixjQUFBLEdBQUFDLENBQUE7VUFDVDJCLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLG9DQUFvQyxFQUFFWCxLQUFLLENBQUNZLE9BQU8sQ0FBQztVQUFDO1VBQUE5QixjQUFBLEdBQUFDLENBQUE7VUFDbEUsTUFBTWlCLEtBQUs7UUFDYixDQUFDO1FBQUE7UUFBQTtVQUFBbEIsY0FBQSxHQUFBd0IsQ0FBQTtRQUFBO1FBRUQ7UUFBQXhCLGNBQUEsR0FBQUMsQ0FBQTtRQUNBO1FBQUk7UUFBQSxDQUFBRCxjQUFBLEdBQUF3QixDQUFBLFdBQUFULElBQUk7UUFBQTtRQUFBLENBQUFmLGNBQUEsR0FBQXdCLENBQUEsV0FBSU8sS0FBSyxDQUFDQyxPQUFPLENBQUNqQixJQUFJLENBQUMsR0FBRTtVQUFBO1VBQUFmLGNBQUEsR0FBQXdCLENBQUE7VUFBQXhCLGNBQUEsR0FBQUMsQ0FBQTtVQUMvQjtVQUNBO1VBQUk7VUFBQSxDQUFBRCxjQUFBLEdBQUF3QixDQUFBLFdBQUFULElBQUksQ0FBQ2tCLE1BQU0sR0FBRyxDQUFDO1VBQUE7VUFBQSxDQUFBakMsY0FBQSxHQUFBd0IsQ0FBQSxXQUFJLENBQUNULElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQ21CLEVBQUUsR0FBRTtZQUFBO1lBQUFsQyxjQUFBLEdBQUF3QixDQUFBO1lBQUF4QixjQUFBLEdBQUFDLENBQUE7WUFDbEMyQixPQUFPLENBQUNDLElBQUksQ0FBQyxpRUFBaUUsRUFBRWQsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQUM7WUFBQWYsY0FBQSxHQUFBQyxDQUFBO1lBQ3pGLE1BQU0sSUFBSWtDLEtBQUssQ0FBQywwQ0FBMEMsQ0FBQztVQUM3RCxDQUFDO1VBQUE7VUFBQTtZQUFBbkMsY0FBQSxHQUFBd0IsQ0FBQTtVQUFBO1VBQUF4QixjQUFBLEdBQUFDLENBQUE7VUFDRCxPQUFPYyxJQUFzQjtRQUMvQixDQUFDO1FBQUE7UUFBQTtVQUFBZixjQUFBLEdBQUF3QixDQUFBO1FBQUE7UUFFRDtRQUFBeEIsY0FBQSxHQUFBQyxDQUFBO1FBQ0EyQixPQUFPLENBQUNDLElBQUksQ0FBQyx1RUFBdUUsQ0FBQztRQUFDO1FBQUE3QixjQUFBLEdBQUFDLENBQUE7UUFDdEYsT0FBTyxNQUFNSSxnQkFBZ0IsQ0FBQytCLGdCQUFnQixDQUFDNUIsTUFBTSxDQUFDO01BQ3hELENBQUMsQ0FBQyxPQUFPNkIsR0FBRyxFQUFFO1FBQUE7UUFBQXJDLGNBQUEsR0FBQUMsQ0FBQTtRQUNaO1FBQ0E7UUFDQTJCLE9BQU8sQ0FBQ0MsSUFBSSxDQUNWLDhEQUE4RCxFQUM5RFEsR0FBRyxDQUNKO1FBQ0Q7UUFBQTtRQUFBckMsY0FBQSxHQUFBQyxDQUFBO1FBQ0EsT0FBTyxNQUFNSSxnQkFBZ0IsQ0FBQytCLGdCQUFnQixDQUFDNUIsTUFBTSxDQUFDO01BQ3hEO0lBQ0YsQ0FBQztJQUNEOEIsT0FBTyxFQUFFLENBQUMsQ0FBQzlCLE1BQU07SUFDakIrQixTQUFTLEVBQUUsSUFBSSxHQUFHLEVBQUUsR0FBRyxDQUFDO0lBQUU7SUFDMUJDLFNBQVMsRUFBRSxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUU7SUFBRTtJQUMzQjtJQUNBQyxLQUFLLEVBQUUsQ0FBQztJQUNSQyxVQUFVLEVBQUVDLE9BQU8sSUFBSTtNQUFBO01BQUEzQyxjQUFBLEdBQUFTLENBQUE7TUFBQVQsY0FBQSxHQUFBQyxDQUFBO01BQUEsT0FBQTJDLElBQUksQ0FBQ0MsR0FBRyxDQUFDLElBQUksR0FBRyxDQUFDLElBQUlGLE9BQU8sRUFBRSxNQUFNLENBQUM7SUFBRCxDQUFDO0lBQzVEO0lBQ0FHLE9BQU8sRUFBR1QsR0FBRyxJQUFJO01BQUE7TUFBQXJDLGNBQUEsR0FBQVMsQ0FBQTtNQUFBVCxjQUFBLEdBQUFDLENBQUE7TUFDZjtNQUNBMkIsT0FBTyxDQUFDVixLQUFLLENBQUMsc0NBQXNDLEVBQUVtQixHQUFHLENBQUM7TUFDMUQ7SUFDRjtHQUNELENBQUM7RUFFRjs7OztFQUlBLE1BQU1VLGNBQWM7RUFBQTtFQUFBLENBQUEvQyxjQUFBLEdBQUFDLENBQUEsUUFBR2tCLFFBQVE7RUFBQTtFQUFBLENBQUFuQixjQUFBLEdBQUF3QixDQUFBLFdBQzNCO0lBQ0VNLE9BQU8sRUFBRVgsUUFBUSxDQUFDVyxPQUFPO0lBQ3pCVyxLQUFLLEVBQUVBLENBQUEsS0FBTTtNQUFBO01BQUF6QyxjQUFBLEdBQUFTLENBQUE7TUFBQVQsY0FBQSxHQUFBQyxDQUFBO01BQUEsT0FBQW1CLE9BQU8sRUFBRTtJQUFGO0dBQ3JCO0VBQUE7RUFBQSxDQUFBcEIsY0FBQSxHQUFBd0IsQ0FBQSxXQUNELElBQUk7RUFFUjtFQUFBO0VBQUF4QixjQUFBLEdBQUFDLENBQUE7RUFDQSxJQUFBRSxPQUFBLENBQUE2QyxTQUFTLEVBQUMsTUFBSztJQUFBO0lBQUFoRCxjQUFBLEdBQUFTLENBQUE7SUFBQVQsY0FBQSxHQUFBQyxDQUFBO0lBQ2I7SUFBSTtJQUFBLENBQUFELGNBQUEsR0FBQXdCLENBQUEsWUFBQ2hCLE1BQU07SUFBQTtJQUFBLENBQUFSLGNBQUEsR0FBQXdCLENBQUEsV0FBSVosWUFBWSxHQUFFO01BQUE7TUFBQVosY0FBQSxHQUFBd0IsQ0FBQTtNQUFBeEIsY0FBQSxHQUFBQyxDQUFBO01BQUE7SUFBQSxDQUFPO0lBQUE7SUFBQTtNQUFBRCxjQUFBLEdBQUF3QixDQUFBO0lBQUE7SUFFcEM7SUFDQSxNQUFNeUIsWUFBWTtJQUFBO0lBQUEsQ0FBQWpELGNBQUEsR0FBQUMsQ0FBQSxRQUFHRyxVQUFBLENBQUFxQixRQUFRLENBQzFCeUIsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQzFCQyxFQUFFLENBQUMsa0JBQWtCLEVBQUU7TUFDdEJDLEtBQUssRUFBRSxRQUFRO01BQ2ZDLE1BQU0sRUFBRSxRQUFRO01BQ2hCQyxLQUFLLEVBQUU7S0FDUixFQUFHQyxPQUFPLElBQUk7TUFBQTtNQUFBdkQsY0FBQSxHQUFBUyxDQUFBO01BQ2IsTUFBTStDLFVBQVU7TUFBQTtNQUFBLENBQUF4RCxjQUFBLEdBQUFDLENBQUEsUUFBR3NELE9BQU8sQ0FBQ0UsR0FBeUI7TUFFcEQ7TUFBQTtNQUFBekQsY0FBQSxHQUFBQyxDQUFBO01BQ0FTLFdBQVcsQ0FBQ2dELGlCQUFpQixDQUFDO1FBQzVCcEMsUUFBUSxFQUFFLENBQUMsZUFBZSxFQUFFZCxNQUFNO09BQ25DLENBQUM7TUFFRjtNQUFBO01BQUFSLGNBQUEsR0FBQUMsQ0FBQTtNQUNBUyxXQUFXLENBQUNnRCxpQkFBaUIsQ0FBQztRQUM1QnBDLFFBQVEsRUFBRSxDQUFDLFVBQVUsRUFBRWtDLFVBQVUsQ0FBQ0csZUFBZTtPQUNsRCxDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQ0RDLFNBQVMsRUFBRTtJQUFDO0lBQUE1RCxjQUFBLEdBQUFDLENBQUE7SUFFZlksZUFBZSxDQUFDLElBQUksQ0FBQztJQUVyQjtJQUFBO0lBQUFiLGNBQUEsR0FBQUMsQ0FBQTtJQUNBLE9BQU8sTUFBSztNQUFBO01BQUFELGNBQUEsR0FBQVMsQ0FBQTtNQUFBVCxjQUFBLEdBQUFDLENBQUE7TUFDVkcsVUFBQSxDQUFBcUIsUUFBUSxDQUFDb0MsYUFBYSxDQUFDWixZQUFZLENBQUM7TUFBQztNQUFBakQsY0FBQSxHQUFBQyxDQUFBO01BQ3JDWSxlQUFlLENBQUMsS0FBSyxDQUFDO0lBQ3hCLENBQUM7RUFDSCxDQUFDLEVBQUUsQ0FBQ0wsTUFBTSxFQUFFRSxXQUFXLEVBQUVFLFlBQVksQ0FBQyxDQUFDO0VBRXZDO0VBQ0EsTUFBTWtELGtCQUFrQjtFQUFBO0VBQUEsQ0FBQTlELGNBQUEsR0FBQUMsQ0FBQSxRQUFHLElBQUFGLGFBQUEsQ0FBQWdFLFdBQVcsRUFBQztJQUNyQ0MsVUFBVSxFQUFFLE1BQUFBLENBQU87TUFBRUM7SUFBYyxDQUE4QixLQUFJO01BQUE7TUFBQWpFLGNBQUEsR0FBQVMsQ0FBQTtNQUFBVCxjQUFBLEdBQUFDLENBQUE7TUFDbkUsSUFBSSxDQUFDTyxNQUFNLEVBQUU7UUFBQTtRQUFBUixjQUFBLEdBQUF3QixDQUFBO1FBQUF4QixjQUFBLEdBQUFDLENBQUE7UUFBQSxNQUFNLElBQUlrQyxLQUFLLENBQUMsd0JBQXdCLENBQUM7TUFBQSxDQUFDO01BQUE7TUFBQTtRQUFBbkMsY0FBQSxHQUFBd0IsQ0FBQTtNQUFBO01BQUF4QixjQUFBLEdBQUFDLENBQUE7TUFDdkQsT0FBTyxNQUFNSSxnQkFBZ0IsQ0FBQzZELHNCQUFzQixDQUFDRCxjQUFjLEVBQUV6RCxNQUFNLENBQUM7SUFDOUUsQ0FBQztJQUNEMkQsU0FBUyxFQUFFQSxDQUFDQyxDQUFDLEVBQUVDLFNBQVMsS0FBSTtNQUFBO01BQUFyRSxjQUFBLEdBQUFTLENBQUE7TUFBQVQsY0FBQSxHQUFBQyxDQUFBO01BQzFCO01BQ0FTLFdBQVcsQ0FBQzRELFlBQVksQ0FBQyxDQUFDLGVBQWUsRUFBRTlELE1BQU0sQ0FBQyxFQUFHK0QsT0FBbUMsSUFBSTtRQUFBO1FBQUF2RSxjQUFBLEdBQUFTLENBQUE7UUFBQVQsY0FBQSxHQUFBQyxDQUFBO1FBQzFGLElBQUksQ0FBQ3NFLE9BQU8sRUFBRTtVQUFBO1VBQUF2RSxjQUFBLEdBQUF3QixDQUFBO1VBQUF4QixjQUFBLEdBQUFDLENBQUE7VUFBQSxPQUFPLEVBQUU7UUFBQSxDQUFDO1FBQUE7UUFBQTtVQUFBRCxjQUFBLEdBQUF3QixDQUFBO1FBQUE7UUFBQXhCLGNBQUEsR0FBQUMsQ0FBQTtRQUV4QixPQUFPc0UsT0FBTyxDQUFDQyxHQUFHLENBQUNDLFlBQVksSUFBRztVQUFBO1VBQUF6RSxjQUFBLEdBQUFTLENBQUE7VUFBQVQsY0FBQSxHQUFBQyxDQUFBO1VBQ2hDLElBQUl3RSxZQUFZLENBQUN2QyxFQUFFLEtBQUttQyxTQUFTLENBQUNKLGNBQWMsRUFBRTtZQUFBO1lBQUFqRSxjQUFBLEdBQUF3QixDQUFBO1lBQUF4QixjQUFBLEdBQUFDLENBQUE7WUFDaEQsT0FBTztjQUNMLEdBQUd3RSxZQUFZO2NBQ2ZDLFlBQVksRUFBRTthQUNmO1VBQ0gsQ0FBQztVQUFBO1VBQUE7WUFBQTFFLGNBQUEsR0FBQXdCLENBQUE7VUFBQTtVQUFBeEIsY0FBQSxHQUFBQyxDQUFBO1VBQ0QsT0FBT3dFLFlBQVk7UUFDckIsQ0FBQyxDQUFDO01BQ0osQ0FBQyxDQUFDO0lBQ0o7R0FDRCxDQUFDO0VBRUY7RUFDQSxNQUFNRSxtQkFBbUI7RUFBQTtFQUFBLENBQUEzRSxjQUFBLEdBQUFDLENBQUEsUUFBRyxJQUFBRixhQUFBLENBQUFnRSxXQUFXLEVBQUM7SUFDdENDLFVBQVUsRUFBRSxNQUFBQSxDQUFPO01BQ2pCQyxjQUFjO01BQ2RXO0lBQVcsQ0FJWixLQUFJO01BQUE7TUFBQTVFLGNBQUEsR0FBQVMsQ0FBQTtNQUFBVCxjQUFBLEdBQUFDLENBQUE7TUFDSCxJQUFJLENBQUNPLE1BQU0sRUFBRTtRQUFBO1FBQUFSLGNBQUEsR0FBQXdCLENBQUE7UUFBQXhCLGNBQUEsR0FBQUMsQ0FBQTtRQUFBLE1BQU0sSUFBSWtDLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQztNQUFBLENBQUM7TUFBQTtNQUFBO1FBQUFuQyxjQUFBLEdBQUF3QixDQUFBO01BQUE7TUFFdkQ7TUFDQSxNQUFNaUQsWUFBWTtNQUFBO01BQUEsQ0FBQXpFLGNBQUEsR0FBQUMsQ0FBQSxRQUFHZSxhQUFhLEVBQUU2RCxJQUFJLENBQUNDLENBQUMsSUFBSTtRQUFBO1FBQUE5RSxjQUFBLEdBQUFTLENBQUE7UUFBQVQsY0FBQSxHQUFBQyxDQUFBO1FBQUEsT0FBQTZFLENBQUMsQ0FBQzVDLEVBQUUsS0FBSytCLGNBQWM7TUFBZCxDQUFjLENBQUM7TUFBQztNQUFBakUsY0FBQSxHQUFBQyxDQUFBO01BQ3ZFLElBQUksQ0FBQ3dFLFlBQVksRUFBRTtRQUFBO1FBQUF6RSxjQUFBLEdBQUF3QixDQUFBO1FBQUF4QixjQUFBLEdBQUFDLENBQUE7UUFBQSxNQUFNLElBQUlrQyxLQUFLLENBQUMsd0JBQXdCLENBQUM7TUFBQSxDQUFDO01BQUE7TUFBQTtRQUFBbkMsY0FBQSxHQUFBd0IsQ0FBQTtNQUFBO01BRTdEO01BQ0EsTUFBTXVELFdBQVc7TUFBQTtNQUFBLENBQUEvRSxjQUFBLEdBQUFDLENBQUE7TUFBRztNQUFBLENBQUFELGNBQUEsR0FBQXdCLENBQUEsV0FBQWlELFlBQVksQ0FBQ08sWUFBWSxHQUFHLENBQUMsQ0FBQyxFQUFFQyxPQUFPO01BQUE7TUFBQSxDQUFBakYsY0FBQSxHQUFBd0IsQ0FBQSxXQUFJLEVBQUU7TUFBQztNQUFBeEIsY0FBQSxHQUFBQyxDQUFBO01BRWxFLElBQUl3RSxZQUFZLENBQUNTLElBQUksS0FBSyxRQUFRLEVBQUU7UUFBQTtRQUFBbEYsY0FBQSxHQUFBd0IsQ0FBQTtRQUFBeEIsY0FBQSxHQUFBQyxDQUFBO1FBQ2xDLE9BQU8sTUFBTUksZ0JBQWdCLENBQUM4RSxXQUFXLENBQUMzRSxNQUFNLEVBQUV1RSxXQUFXLEVBQUVILFdBQVcsRUFBRVgsY0FBYyxDQUFDO01BQzdGLENBQUMsTUFBTTtRQUFBO1FBQUFqRSxjQUFBLEdBQUF3QixDQUFBO1FBQUF4QixjQUFBLEdBQUFDLENBQUE7UUFDTCxPQUFPLE1BQU1JLGdCQUFnQixDQUFDK0UsZ0JBQWdCLENBQUM1RSxNQUFNLEVBQUV5RCxjQUFjLEVBQUVXLFdBQVcsQ0FBQztNQUNyRjtJQUNGLENBQUM7SUFDRFQsU0FBUyxFQUFFQSxDQUFDQyxDQUFDLEVBQUVDLFNBQVMsS0FBSTtNQUFBO01BQUFyRSxjQUFBLEdBQUFTLENBQUE7TUFBQVQsY0FBQSxHQUFBQyxDQUFBO01BQzFCO01BQ0FTLFdBQVcsQ0FBQzRELFlBQVksQ0FBQyxDQUFDLGVBQWUsRUFBRTlELE1BQU0sQ0FBQyxFQUFHK0QsT0FBbUMsSUFBSTtRQUFBO1FBQUF2RSxjQUFBLEdBQUFTLENBQUE7UUFBQVQsY0FBQSxHQUFBQyxDQUFBO1FBQzFGLElBQUksQ0FBQ3NFLE9BQU8sRUFBRTtVQUFBO1VBQUF2RSxjQUFBLEdBQUF3QixDQUFBO1VBQUF4QixjQUFBLEdBQUFDLENBQUE7VUFBQSxPQUFPLEVBQUU7UUFBQSxDQUFDO1FBQUE7UUFBQTtVQUFBRCxjQUFBLEdBQUF3QixDQUFBO1FBQUE7UUFBQXhCLGNBQUEsR0FBQUMsQ0FBQTtRQUV4QixPQUFPc0UsT0FBTyxDQUFDQyxHQUFHLENBQUNDLFlBQVksSUFBRztVQUFBO1VBQUF6RSxjQUFBLEdBQUFTLENBQUE7VUFBQVQsY0FBQSxHQUFBQyxDQUFBO1VBQ2hDLElBQUl3RSxZQUFZLENBQUN2QyxFQUFFLEtBQUttQyxTQUFTLENBQUNKLGNBQWMsRUFBRTtZQUFBO1lBQUFqRSxjQUFBLEdBQUF3QixDQUFBO1lBQUF4QixjQUFBLEdBQUFDLENBQUE7WUFDaEQsT0FBTztjQUNMLEdBQUd3RSxZQUFZO2NBQ2ZZLGlCQUFpQixFQUFFaEIsU0FBUyxDQUFDTyxXQUFXO2NBQ3hDVSxzQkFBc0IsRUFBRSxJQUFJQyxJQUFJLEVBQUUsQ0FBQ0MsV0FBVzthQUMvQztVQUNILENBQUM7VUFBQTtVQUFBO1lBQUF4RixjQUFBLEdBQUF3QixDQUFBO1VBQUE7VUFBQXhCLGNBQUEsR0FBQUMsQ0FBQTtVQUNELE9BQU93RSxZQUFZO1FBQ3JCLENBQUMsQ0FBQyxDQUFDZ0IsSUFBSSxDQUFDLENBQUNDLENBQUMsRUFBRWxFLENBQUMsS0FBSTtVQUFBO1VBQUF4QixjQUFBLEdBQUFTLENBQUE7VUFDZjtVQUNBLE1BQU1rRixLQUFLO1VBQUE7VUFBQSxDQUFBM0YsY0FBQSxHQUFBQyxDQUFBLFNBQUd5RixDQUFDLENBQUNKLHNCQUFzQjtVQUFBO1VBQUEsQ0FBQXRGLGNBQUEsR0FBQXdCLENBQUEsV0FBRyxJQUFJK0QsSUFBSSxDQUFDRyxDQUFDLENBQUNKLHNCQUFzQixDQUFDLENBQUNNLE9BQU8sRUFBRTtVQUFBO1VBQUEsQ0FBQTVGLGNBQUEsR0FBQXdCLENBQUEsV0FBRyxDQUFDO1VBQ3pGLE1BQU1xRSxLQUFLO1VBQUE7VUFBQSxDQUFBN0YsY0FBQSxHQUFBQyxDQUFBLFNBQUd1QixDQUFDLENBQUM4RCxzQkFBc0I7VUFBQTtVQUFBLENBQUF0RixjQUFBLEdBQUF3QixDQUFBLFdBQUcsSUFBSStELElBQUksQ0FBQy9ELENBQUMsQ0FBQzhELHNCQUFzQixDQUFDLENBQUNNLE9BQU8sRUFBRTtVQUFBO1VBQUEsQ0FBQTVGLGNBQUEsR0FBQXdCLENBQUEsV0FBRyxDQUFDO1VBQUM7VUFBQXhCLGNBQUEsR0FBQUMsQ0FBQTtVQUMxRixPQUFPNEYsS0FBSyxHQUFHRixLQUFLO1FBQ3RCLENBQUMsQ0FBQztNQUNKLENBQUMsQ0FBQztNQUVGO01BQUE7TUFBQTNGLGNBQUEsR0FBQUMsQ0FBQTtNQUNBUyxXQUFXLENBQUNnRCxpQkFBaUIsQ0FBQztRQUM1QnBDLFFBQVEsRUFBRSxDQUFDLFVBQVUsRUFBRStDLFNBQVMsQ0FBQ0osY0FBYztPQUNoRCxDQUFDO0lBQ0o7R0FDRCxDQUFDO0VBRUY7RUFDQSxNQUFNNkIsMEJBQTBCO0VBQUE7RUFBQSxDQUFBOUYsY0FBQSxHQUFBQyxDQUFBLFNBQUcsSUFBQUYsYUFBQSxDQUFBZ0UsV0FBVyxFQUFDO0lBQzdDQyxVQUFVLEVBQUUsTUFBQUEsQ0FBTztNQUNqQmUsV0FBVztNQUNYZ0I7SUFBYyxDQUlmLEtBQUk7TUFBQTtNQUFBL0YsY0FBQSxHQUFBUyxDQUFBO01BQUFULGNBQUEsR0FBQUMsQ0FBQTtNQUNILElBQUksQ0FBQ08sTUFBTSxFQUFFO1FBQUE7UUFBQVIsY0FBQSxHQUFBd0IsQ0FBQTtRQUFBeEIsY0FBQSxHQUFBQyxDQUFBO1FBQUEsTUFBTSxJQUFJa0MsS0FBSyxDQUFDLHdCQUF3QixDQUFDO01BQUEsQ0FBQztNQUFBO01BQUE7UUFBQW5DLGNBQUEsR0FBQXdCLENBQUE7TUFBQTtNQUFBeEIsY0FBQSxHQUFBQyxDQUFBO01BQ3ZELE9BQU8sTUFBTUksZ0JBQWdCLENBQUMyRiw0QkFBNEIsQ0FBQ3hGLE1BQU0sRUFBRXVFLFdBQVcsRUFBRWdCLGNBQWMsQ0FBQztJQUNqRyxDQUFDO0lBQ0Q1QixTQUFTLEVBQUVBLENBQUEsS0FBSztNQUFBO01BQUFuRSxjQUFBLEdBQUFTLENBQUE7TUFBQVQsY0FBQSxHQUFBQyxDQUFBO01BQ2Q7TUFDQW1CLE9BQU8sRUFBRTtJQUNYO0dBQ0QsQ0FBQztFQUVGO0VBQ0EsTUFBTTZFLGdCQUFnQjtFQUFBO0VBQUEsQ0FBQWpHLGNBQUEsR0FBQUMsQ0FBQTtFQUFHO0VBQUEsQ0FBQUQsY0FBQSxHQUFBd0IsQ0FBQSxXQUFBUixhQUFhLEVBQUVrRixNQUFNLENBQzVDLENBQUNDLEtBQUssRUFBRTFCLFlBQVksS0FBSztJQUFBO0lBQUF6RSxjQUFBLEdBQUFTLENBQUE7SUFBQVQsY0FBQSxHQUFBQyxDQUFBO0lBQUEsT0FBQWtHLEtBQUs7SUFBSTtJQUFBLENBQUFuRyxjQUFBLEdBQUF3QixDQUFBLFdBQUFpRCxZQUFZLENBQUNDLFlBQVk7SUFBQTtJQUFBLENBQUExRSxjQUFBLEdBQUF3QixDQUFBLFdBQUksQ0FBQyxFQUFDO0VBQUQsQ0FBQyxFQUNqRSxDQUFDLENBQ0Y7RUFBQTtFQUFBLENBQUF4QixjQUFBLEdBQUF3QixDQUFBLFdBQUksQ0FBQztFQUFDO0VBQUF4QixjQUFBLEdBQUFDLENBQUE7RUFFUCxPQUFPO0lBQ0xlLGFBQWE7SUFBRTtJQUFBLENBQUFoQixjQUFBLEdBQUF3QixDQUFBLFdBQUFSLGFBQWE7SUFBQTtJQUFBLENBQUFoQixjQUFBLEdBQUF3QixDQUFBLFdBQUksRUFBRTtJQUNsQ1AsU0FBUztJQUNUQyxLQUFLLEVBQUU2QixjQUFjO0lBQ3JCM0IsT0FBTztJQUNQNkUsZ0JBQWdCO0lBQ2hCL0Isc0JBQXNCLEVBQUdELGNBQXNCLElBQzdDO01BQUE7TUFBQWpFLGNBQUEsR0FBQVMsQ0FBQTtNQUFBVCxjQUFBLEdBQUFDLENBQUE7TUFBQSxPQUFBNkQsa0JBQWtCLENBQUNzQyxNQUFNLENBQUM7UUFBRW5DO01BQWMsQ0FBRSxDQUFDO0lBQUQsQ0FBQztJQUMvQ2tCLFdBQVcsRUFBRUEsQ0FBQ2xCLGNBQXNCLEVBQUVXLFdBQW1CLEtBQ3ZEO01BQUE7TUFBQTVFLGNBQUEsR0FBQVMsQ0FBQTtNQUFBVCxjQUFBLEdBQUFDLENBQUE7TUFBQSxPQUFBMEUsbUJBQW1CLENBQUN5QixNQUFNLENBQUM7UUFBRW5DLGNBQWM7UUFBRVc7TUFBVyxDQUFFLENBQUM7SUFBRCxDQUFDO0lBQzdEeUIsa0JBQWtCLEVBQUVBLENBQUN0QixXQUFtQixFQUFFZ0IsY0FBc0IsS0FDOUQ7TUFBQTtNQUFBL0YsY0FBQSxHQUFBUyxDQUFBO01BQUFULGNBQUEsR0FBQUMsQ0FBQTtNQUFBLE9BQUE2RiwwQkFBMEIsQ0FBQ00sTUFBTSxDQUFDO1FBQUVyQixXQUFXO1FBQUVnQjtNQUFjLENBQUUsQ0FBQztJQUFELENBQUM7SUFDcEVPLFNBQVMsRUFBRTNCLG1CQUFtQixDQUFDNEIsU0FBUztJQUN4Q0MsVUFBVSxFQUFFViwwQkFBMEIsQ0FBQ1M7R0FDeEM7QUFDSCxDQUFDO0FBQUM7QUFBQXZHLGNBQUEsR0FBQUMsQ0FBQTtBQXJPV3dHLE9BQUEsQ0FBQWxHLHFCQUFxQixHQUFBQSxxQkFBQSIsImlnbm9yZUxpc3QiOltdfQ==