{"version":3,"names":["react_query_1","cov_2nz1gc2shw","s","require","react_1","supabase_1","messagingService","__importStar","useConversationsQuery","userId","f","queryClient","useQueryClient","isSubscribed","setIsSubscribed","useState","data","conversations","isLoading","error","rawError","refetch","useQuery","queryKey","queryFn","b","supabase","rpc","input_user_id","console","warn","message","Array","isArray","length","id","Error","getConversations","err","enabled","staleTime","cacheTime","retry","retryDelay","attempt","Math","min","onError","formattedError","useEffect","subscription","channel","on","event","schema","table","payload","newMessage","new","invalidateQueries","conversation_id","subscribe","removeChannel","markAsReadMutation","useMutation","mutationFn","conversationId","markConversationAsRead","onSuccess","_","variables","setQueryData","oldData","map","conversation","unread_count","sendMessageMutation","messageText","find","c","recipientId","participants","user_id","type","sendMessage","sendGroupMessage","last_message_text","last_message_timestamp","Date","toISOString","sort","a","timeA","getTime","timeB","createConversationMutation","initialMessage","startConversationFromProfile","totalUnreadCount","reduce","total","mutate","createConversation","isSending","isPending","isCreating","exports"],"sources":["/Users/kevin/card-show-finder/src/hooks/useConversationsQuery.ts"],"sourcesContent":["import { useQuery, useQueryClient, useMutation } from '@tanstack/react-query';\nimport { useEffect, useState } from 'react';\nimport { supabase } from '../supabase';\nimport * as messagingService from '../services/messagingService';\nimport { Conversation, Message } from '../services/messagingService';\n\n/**\n * Custom hook for fetching and managing user conversations with React Query\n * Includes real-time updates and optimized data fetching\n * \n * Integration with PostgreSQL RPC functions:\n * - Uses 'get_user_conversations' RPC function with 'input_user_id' parameter\n * - Defined in migration: 20250711121000_create_conversations_rpc.sql\n * - Falls back to messagingService.getConversations() if RPC fails\n */\nexport const useConversationsQuery = (userId: string | null) => {\n  const queryClient = useQueryClient();\n  const [isSubscribed, setIsSubscribed] = useState(false);\n\n  // Main query to fetch conversations\n  const {\n    data: conversations,\n    isLoading,\n    error: rawError,\n    refetch\n  } = useQuery<Conversation[], Error>({\n    queryKey: ['conversations', userId],\n    queryFn: async () => {\n      if (!userId) return [];\n      try {\n        // 1. Attempt optimized RPC\n        // This calls the PostgreSQL function 'get_user_conversations' defined in\n        // migration 20250711121000_create_conversations_rpc.sql\n        const { data, error } = await supabase\n          .rpc('get_user_conversations', { \n            // Parameter name must match the SQL function parameter\n            input_user_id: userId \n          });\n\n        if (error) {\n          console.warn('[useConversationsQuery] RPC error:', error.message);\n          throw error;\n        }\n\n        // Validate returned data structure\n        if (data && Array.isArray(data)) {\n          // Verify the data has the expected structure\n          if (data.length > 0 && !data[0].id) {\n            console.warn('[useConversationsQuery] RPC returned unexpected data structure:', data[0]);\n            throw new Error('Invalid data structure returned from RPC');\n          }\n          return data as Conversation[];\n        }\n\n        // Defensive fallback (should not typically run)\n        console.warn('[useConversationsQuery] RPC returned no data, falling back to service');\n        return await messagingService.getConversations(userId);\n      } catch (err) {\n        // Log and fallback to legacy service\n        /* eslint-disable no-console */\n        console.warn(\n          '[useConversationsQuery] RPC failed, falling back to service:',\n          err,\n        );\n        /* eslint-enable no-console */\n        return await messagingService.getConversations(userId);\n      }\n    },\n    enabled: !!userId,\n    staleTime: 1000 * 60 * 5, // Consider data fresh for 5 minutes\n    cacheTime: 1000 * 60 * 30, // Keep in cache for 30 minutes\n    // Automatically retry (with exponential back-off) a few times\n    retry: 3,\n    retryDelay: attempt => Math.min(1000 * 2 ** attempt, 30_000),\n    // Log the error for observability\n    onError: (err) => {\n      /* eslint-disable no-console */\n      console.error('[useConversationsQuery] fetch error:', err);\n      /* eslint-enable no-console */\n    },\n  });\n\n  /**\n   * Provide a simplified / structured error for consumers\n   * while also allowing access to the raw Error object.\n   */\n  const formattedError = rawError\n    ? {\n        message: rawError.message,\n        retry: () => refetch(),\n      }\n    : null;\n\n  // Setup real-time subscription for new messages\n  useEffect(() => {\n    if (!userId || isSubscribed) return;\n\n    // Subscribe to messages table for real-time updates\n    const subscription = supabase\n      .channel('public:messages')\n      .on('postgres_changes', {\n        event: 'INSERT',\n        schema: 'public',\n        table: 'messages',\n      }, (payload) => {\n        const newMessage = payload.new as unknown as Message;\n        \n        // Update the conversations cache when a new message arrives\n        queryClient.invalidateQueries({\n          queryKey: ['conversations', userId],\n        });\n        \n        // If we're viewing a specific conversation, also update its messages\n        queryClient.invalidateQueries({\n          queryKey: ['messages', newMessage.conversation_id],\n        });\n      })\n      .subscribe();\n\n    setIsSubscribed(true);\n\n    // Cleanup subscription on unmount\n    return () => {\n      supabase.removeChannel(subscription);\n      setIsSubscribed(false);\n    };\n  }, [userId, queryClient, isSubscribed]);\n\n  // Mutation for marking a conversation as read\n  const markAsReadMutation = useMutation({\n    mutationFn: async ({ conversationId }: { conversationId: string }) => {\n      if (!userId) throw new Error('User not authenticated');\n      return await messagingService.markConversationAsRead(conversationId, userId);\n    },\n    onSuccess: (_, variables) => {\n      // Update the conversations cache to reflect read status\n      queryClient.setQueryData(['conversations', userId], (oldData: Conversation[] | undefined) => {\n        if (!oldData) return [];\n        \n        return oldData.map(conversation => {\n          if (conversation.id === variables.conversationId) {\n            return {\n              ...conversation,\n              unread_count: 0\n            };\n          }\n          return conversation;\n        });\n      });\n    }\n  });\n\n  // Mutation for sending a new message\n  const sendMessageMutation = useMutation({\n    mutationFn: async ({\n      conversationId,\n      messageText\n    }: {\n      conversationId: string;\n      messageText: string;\n    }) => {\n      if (!userId) throw new Error('User not authenticated');\n      \n      // Get the conversation to find the recipient\n      const conversation = conversations?.find(c => c.id === conversationId);\n      if (!conversation) throw new Error('Conversation not found');\n      \n      // For direct messages, find the other participant\n      const recipientId = conversation.participants?.[0]?.user_id || '';\n      \n      if (conversation.type === 'direct') {\n        return await messagingService.sendMessage(userId, recipientId, messageText, conversationId);\n      } else {\n        return await messagingService.sendGroupMessage(userId, conversationId, messageText);\n      }\n    },\n    onSuccess: (_, variables) => {\n      // Optimistically update the conversations list with the new message\n      queryClient.setQueryData(['conversations', userId], (oldData: Conversation[] | undefined) => {\n        if (!oldData) return [];\n        \n        return oldData.map(conversation => {\n          if (conversation.id === variables.conversationId) {\n            return {\n              ...conversation,\n              last_message_text: variables.messageText,\n              last_message_timestamp: new Date().toISOString()\n            };\n          }\n          return conversation;\n        }).sort((a, b) => {\n          // Sort by most recent message\n          const timeA = a.last_message_timestamp ? new Date(a.last_message_timestamp).getTime() : 0;\n          const timeB = b.last_message_timestamp ? new Date(b.last_message_timestamp).getTime() : 0;\n          return timeB - timeA;\n        });\n      });\n      \n      // Also update the messages for this conversation\n      queryClient.invalidateQueries({\n        queryKey: ['messages', variables.conversationId],\n      });\n    }\n  });\n\n  // Mutation for creating a new conversation\n  const createConversationMutation = useMutation({\n    mutationFn: async ({\n      recipientId,\n      initialMessage\n    }: {\n      recipientId: string;\n      initialMessage: string;\n    }) => {\n      if (!userId) throw new Error('User not authenticated');\n      return await messagingService.startConversationFromProfile(userId, recipientId, initialMessage);\n    },\n    onSuccess: () => {\n      // Refresh the conversations list\n      refetch();\n    }\n  });\n\n  // Get total unread count across all conversations\n  const totalUnreadCount = conversations?.reduce(\n    (total, conversation) => total + (conversation.unread_count || 0),\n    0\n  ) || 0;\n\n  return {\n    conversations: conversations || [],\n    isLoading,\n    error: formattedError,\n    refetch,\n    totalUnreadCount,\n    markConversationAsRead: (conversationId: string) => \n      markAsReadMutation.mutate({ conversationId }),\n    sendMessage: (conversationId: string, messageText: string) => \n      sendMessageMutation.mutate({ conversationId, messageText }),\n    createConversation: (recipientId: string, initialMessage: string) => \n      createConversationMutation.mutate({ recipientId, initialMessage }),\n    isSending: sendMessageMutation.isPending,\n    isCreating: createConversationMutation.isPending\n  };\n};\n"],"mappingsaAAA;AAAA;AAAA,CAAAC,cAAA,GAAAC,CAAA,QAAAC,OAAA;AACA,MAAAC,OAAA;AAAA;AAAA,CAAAH,cAAA,GAAAC,CAAA,QAAAC,OAAA;AACA,MAAAE,UAAA;AAAA;AAAA,CAAAJ,cAAA,GAAAC,CAAA,QAAAC,OAAA;AACA,MAAAG,gBAAA;AAAA;AAAA,CAAAL,cAAA,GAAAC,CAAA,QAAAK,YAAA,CAAAJ,OAAA;AAGA;;;;;;;;;AAAA;AAAAF,cAAA,GAAAC,CAAA;AASO,MAAMM,qBAAqB,GAAIC,MAAqB,IAAI;EAAA;EAAAR,cAAA,GAAAS,CAAA;EAC7D,MAAMC,WAAW;EAAA;EAAA,CAAAV,cAAA,GAAAC,CAAA,QAAG,IAAAF,aAAA,CAAAY,cAAc,GAAE;EACpC,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC;EAAA;EAAA,CAAAb,cAAA,GAAAC,CAAA,QAAG,IAAAE,OAAA,CAAAW,QAAQ,EAAC,KAAK,CAAC;EAEvD;EACA,MAAM;IACJC,IAAI,EAAEC,aAAa;IACnBC,SAAS;IACTC,KAAK,EAAEC,QAAQ;IACfC;EAAO,CACR;EAAA;EAAA,CAAApB,cAAA,GAAAC,CAAA,QAAG,IAAAF,aAAA,CAAAsB,QAAQ,EAAwB;IAClCC,QAAQ,EAAE,CAAC,eAAe,EAAEd,MAAM,CAAC;IACnCe,OAAO,EAAE,MAAAA,CAAA,KAAW;MAAA;MAAAvB,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAC,CAAA;MAClB,IAAI,CAACO,MAAM,EAAE;QAAA;QAAAR,cAAA,GAAAwB,CAAA;QAAAxB,cAAA,GAAAC,CAAA;QAAA,OAAO,EAAE;MAAA,CAAC;MAAA;MAAA;QAAAD,cAAA,GAAAwB,CAAA;MAAA;MAAAxB,cAAA,GAAAC,CAAA;MACvB,IAAI;QACF;QACA;QACA;QACA,MAAM;UAAEc,IAAI;UAAEG;QAAK,CAAE;QAAA;QAAA,CAAAlB,cAAA,GAAAC,CAAA,QAAG,MAAMG,UAAA,CAAAqB,QAAQ,CACnCC,GAAG,CAAC,wBAAwB,EAAE;UAC7B;UACAC,aAAa,EAAEnB;SAChB,CAAC;QAAC;QAAAR,cAAA,GAAAC,CAAA;QAEL,IAAIiB,KAAK,EAAE;UAAA;UAAAlB,cAAA,GAAAwB,CAAA;UAAAxB,cAAA,GAAAC,CAAA;UACT2B,OAAO,CAACC,IAAI,CAAC,oCAAoC,EAAEX,KAAK,CAACY,OAAO,CAAC;UAAC;UAAA9B,cAAA,GAAAC,CAAA;UAClE,MAAMiB,KAAK;QACb,CAAC;QAAA;QAAA;UAAAlB,cAAA,GAAAwB,CAAA;QAAA;QAED;QAAAxB,cAAA,GAAAC,CAAA;QACA;QAAI;QAAA,CAAAD,cAAA,GAAAwB,CAAA,WAAAT,IAAI;QAAA;QAAA,CAAAf,cAAA,GAAAwB,CAAA,WAAIO,KAAK,CAACC,OAAO,CAACjB,IAAI,CAAC,GAAE;UAAA;UAAAf,cAAA,GAAAwB,CAAA;UAAAxB,cAAA,GAAAC,CAAA;UAC/B;UACA;UAAI;UAAA,CAAAD,cAAA,GAAAwB,CAAA,WAAAT,IAAI,CAACkB,MAAM,GAAG,CAAC;UAAA;UAAA,CAAAjC,cAAA,GAAAwB,CAAA,WAAI,CAACT,IAAI,CAAC,CAAC,CAAC,CAACmB,EAAE,GAAE;YAAA;YAAAlC,cAAA,GAAAwB,CAAA;YAAAxB,cAAA,GAAAC,CAAA;YAClC2B,OAAO,CAACC,IAAI,CAAC,iEAAiE,EAAEd,IAAI,CAAC,CAAC,CAAC,CAAC;YAAC;YAAAf,cAAA,GAAAC,CAAA;YACzF,MAAM,IAAIkC,KAAK,CAAC,0CAA0C,CAAC;UAC7D,CAAC;UAAA;UAAA;YAAAnC,cAAA,GAAAwB,CAAA;UAAA;UAAAxB,cAAA,GAAAC,CAAA;UACD,OAAOc,IAAsB;QAC/B,CAAC;QAAA;QAAA;UAAAf,cAAA,GAAAwB,CAAA;QAAA;QAED;QAAAxB,cAAA,GAAAC,CAAA;QACA2B,OAAO,CAACC,IAAI,CAAC,uEAAuE,CAAC;QAAC;QAAA7B,cAAA,GAAAC,CAAA;QACtF,OAAO,MAAMI,gBAAgB,CAAC+B,gBAAgB,CAAC5B,MAAM,CAAC;MACxD,CAAC,CAAC,OAAO6B,GAAG,EAAE;QAAA;QAAArC,cAAA,GAAAC,CAAA;QACZ;QACA;QACA2B,OAAO,CAACC,IAAI,CACV,8DAA8D,EAC9DQ,GAAG,CACJ;QACD;QAAA;QAAArC,cAAA,GAAAC,CAAA;QACA,OAAO,MAAMI,gBAAgB,CAAC+B,gBAAgB,CAAC5B,MAAM,CAAC;MACxD;IACF,CAAC;IACD8B,OAAO,EAAE,CAAC,CAAC9B,MAAM;IACjB+B,SAAS,EAAE,IAAI,GAAG,EAAE,GAAG,CAAC;IAAE;IAC1BC,SAAS,EAAE,IAAI,GAAG,EAAE,GAAG,EAAE;IAAE;IAC3B;IACAC,KAAK,EAAE,CAAC;IACRC,UAAU,EAAEC,OAAO,IAAI;MAAA;MAAA3C,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAC,CAAA;MAAA,OAAA2C,IAAI,CAACC,GAAG,CAAC,IAAI,GAAG,CAAC,IAAIF,OAAO,EAAE,MAAM,CAAC;IAAD,CAAC;IAC5D;IACAG,OAAO,EAAGT,GAAG,IAAI;MAAA;MAAArC,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAC,CAAA;MACf;MACA2B,OAAO,CAACV,KAAK,CAAC,sCAAsC,EAAEmB,GAAG,CAAC;MAC1D;IACF;GACD,CAAC;EAEF;;;;EAIA,MAAMU,cAAc;EAAA;EAAA,CAAA/C,cAAA,GAAAC,CAAA,QAAGkB,QAAQ;EAAA;EAAA,CAAAnB,cAAA,GAAAwB,CAAA,WAC3B;IACEM,OAAO,EAAEX,QAAQ,CAACW,OAAO;IACzBW,KAAK,EAAEA,CAAA,KAAM;MAAA;MAAAzC,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAC,CAAA;MAAA,OAAAmB,OAAO,EAAE;IAAF;GACrB;EAAA;EAAA,CAAApB,cAAA,GAAAwB,CAAA,WACD,IAAI;EAER;EAAA;EAAAxB,cAAA,GAAAC,CAAA;EACA,IAAAE,OAAA,CAAA6C,SAAS,EAAC,MAAK;IAAA;IAAAhD,cAAA,GAAAS,CAAA;IAAAT,cAAA,GAAAC,CAAA;IACb;IAAI;IAAA,CAAAD,cAAA,GAAAwB,CAAA,YAAChB,MAAM;IAAA;IAAA,CAAAR,cAAA,GAAAwB,CAAA,WAAIZ,YAAY,GAAE;MAAA;MAAAZ,cAAA,GAAAwB,CAAA;MAAAxB,cAAA,GAAAC,CAAA;MAAA;IAAA,CAAO;IAAA;IAAA;MAAAD,cAAA,GAAAwB,CAAA;IAAA;IAEpC;IACA,MAAMyB,YAAY;IAAA;IAAA,CAAAjD,cAAA,GAAAC,CAAA,QAAGG,UAAA,CAAAqB,QAAQ,CAC1ByB,OAAO,CAAC,iBAAiB,CAAC,CAC1BC,EAAE,CAAC,kBAAkB,EAAE;MACtBC,KAAK,EAAE,QAAQ;MACfC,MAAM,EAAE,QAAQ;MAChBC,KAAK,EAAE;KACR,EAAGC,OAAO,IAAI;MAAA;MAAAvD,cAAA,GAAAS,CAAA;MACb,MAAM+C,UAAU;MAAA;MAAA,CAAAxD,cAAA,GAAAC,CAAA,QAAGsD,OAAO,CAACE,GAAyB;MAEpD;MAAA;MAAAzD,cAAA,GAAAC,CAAA;MACAS,WAAW,CAACgD,iBAAiB,CAAC;QAC5BpC,QAAQ,EAAE,CAAC,eAAe,EAAEd,MAAM;OACnC,CAAC;MAEF;MAAA;MAAAR,cAAA,GAAAC,CAAA;MACAS,WAAW,CAACgD,iBAAiB,CAAC;QAC5BpC,QAAQ,EAAE,CAAC,UAAU,EAAEkC,UAAU,CAACG,eAAe;OAClD,CAAC;IACJ,CAAC,CAAC,CACDC,SAAS,EAAE;IAAC;IAAA5D,cAAA,GAAAC,CAAA;IAEfY,eAAe,CAAC,IAAI,CAAC;IAErB;IAAA;IAAAb,cAAA,GAAAC,CAAA;IACA,OAAO,MAAK;MAAA;MAAAD,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAC,CAAA;MACVG,UAAA,CAAAqB,QAAQ,CAACoC,aAAa,CAACZ,YAAY,CAAC;MAAC;MAAAjD,cAAA,GAAAC,CAAA;MACrCY,eAAe,CAAC,KAAK,CAAC;IACxB,CAAC;EACH,CAAC,EAAE,CAACL,MAAM,EAAEE,WAAW,EAAEE,YAAY,CAAC,CAAC;EAEvC;EACA,MAAMkD,kBAAkB;EAAA;EAAA,CAAA9D,cAAA,GAAAC,CAAA,QAAG,IAAAF,aAAA,CAAAgE,WAAW,EAAC;IACrCC,UAAU,EAAE,MAAAA,CAAO;MAAEC;IAAc,CAA8B,KAAI;MAAA;MAAAjE,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAC,CAAA;MACnE,IAAI,CAACO,MAAM,EAAE;QAAA;QAAAR,cAAA,GAAAwB,CAAA;QAAAxB,cAAA,GAAAC,CAAA;QAAA,MAAM,IAAIkC,KAAK,CAAC,wBAAwB,CAAC;MAAA,CAAC;MAAA;MAAA;QAAAnC,cAAA,GAAAwB,CAAA;MAAA;MAAAxB,cAAA,GAAAC,CAAA;MACvD,OAAO,MAAMI,gBAAgB,CAAC6D,sBAAsB,CAACD,cAAc,EAAEzD,MAAM,CAAC;IAC9E,CAAC;IACD2D,SAAS,EAAEA,CAACC,CAAC,EAAEC,SAAS,KAAI;MAAA;MAAArE,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAC,CAAA;MAC1B;MACAS,WAAW,CAAC4D,YAAY,CAAC,CAAC,eAAe,EAAE9D,MAAM,CAAC,EAAG+D,OAAmC,IAAI;QAAA;QAAAvE,cAAA,GAAAS,CAAA;QAAAT,cAAA,GAAAC,CAAA;QAC1F,IAAI,CAACsE,OAAO,EAAE;UAAA;UAAAvE,cAAA,GAAAwB,CAAA;UAAAxB,cAAA,GAAAC,CAAA;UAAA,OAAO,EAAE;QAAA,CAAC;QAAA;QAAA;UAAAD,cAAA,GAAAwB,CAAA;QAAA;QAAAxB,cAAA,GAAAC,CAAA;QAExB,OAAOsE,OAAO,CAACC,GAAG,CAACC,YAAY,IAAG;UAAA;UAAAzE,cAAA,GAAAS,CAAA;UAAAT,cAAA,GAAAC,CAAA;UAChC,IAAIwE,YAAY,CAACvC,EAAE,KAAKmC,SAAS,CAACJ,cAAc,EAAE;YAAA;YAAAjE,cAAA,GAAAwB,CAAA;YAAAxB,cAAA,GAAAC,CAAA;YAChD,OAAO;cACL,GAAGwE,YAAY;cACfC,YAAY,EAAE;aACf;UACH,CAAC;UAAA;UAAA;YAAA1E,cAAA,GAAAwB,CAAA;UAAA;UAAAxB,cAAA,GAAAC,CAAA;UACD,OAAOwE,YAAY;QACrB,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ;GACD,CAAC;EAEF;EACA,MAAME,mBAAmB;EAAA;EAAA,CAAA3E,cAAA,GAAAC,CAAA,QAAG,IAAAF,aAAA,CAAAgE,WAAW,EAAC;IACtCC,UAAU,EAAE,MAAAA,CAAO;MACjBC,cAAc;MACdW;IAAW,CAIZ,KAAI;MAAA;MAAA5E,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAC,CAAA;MACH,IAAI,CAACO,MAAM,EAAE;QAAA;QAAAR,cAAA,GAAAwB,CAAA;QAAAxB,cAAA,GAAAC,CAAA;QAAA,MAAM,IAAIkC,KAAK,CAAC,wBAAwB,CAAC;MAAA,CAAC;MAAA;MAAA;QAAAnC,cAAA,GAAAwB,CAAA;MAAA;MAEvD;MACA,MAAMiD,YAAY;MAAA;MAAA,CAAAzE,cAAA,GAAAC,CAAA,QAAGe,aAAa,EAAE6D,IAAI,CAACC,CAAC,IAAI;QAAA;QAAA9E,cAAA,GAAAS,CAAA;QAAAT,cAAA,GAAAC,CAAA;QAAA,OAAA6E,CAAC,CAAC5C,EAAE,KAAK+B,cAAc;MAAd,CAAc,CAAC;MAAC;MAAAjE,cAAA,GAAAC,CAAA;MACvE,IAAI,CAACwE,YAAY,EAAE;QAAA;QAAAzE,cAAA,GAAAwB,CAAA;QAAAxB,cAAA,GAAAC,CAAA;QAAA,MAAM,IAAIkC,KAAK,CAAC,wBAAwB,CAAC;MAAA,CAAC;MAAA;MAAA;QAAAnC,cAAA,GAAAwB,CAAA;MAAA;MAE7D;MACA,MAAMuD,WAAW;MAAA;MAAA,CAAA/E,cAAA,GAAAC,CAAA;MAAG;MAAA,CAAAD,cAAA,GAAAwB,CAAA,WAAAiD,YAAY,CAACO,YAAY,GAAG,CAAC,CAAC,EAAEC,OAAO;MAAA;MAAA,CAAAjF,cAAA,GAAAwB,CAAA,WAAI,EAAE;MAAC;MAAAxB,cAAA,GAAAC,CAAA;MAElE,IAAIwE,YAAY,CAACS,IAAI,KAAK,QAAQ,EAAE;QAAA;QAAAlF,cAAA,GAAAwB,CAAA;QAAAxB,cAAA,GAAAC,CAAA;QAClC,OAAO,MAAMI,gBAAgB,CAAC8E,WAAW,CAAC3E,MAAM,EAAEuE,WAAW,EAAEH,WAAW,EAAEX,cAAc,CAAC;MAC7F,CAAC,MAAM;QAAA;QAAAjE,cAAA,GAAAwB,CAAA;QAAAxB,cAAA,GAAAC,CAAA;QACL,OAAO,MAAMI,gBAAgB,CAAC+E,gBAAgB,CAAC5E,MAAM,EAAEyD,cAAc,EAAEW,WAAW,CAAC;MACrF;IACF,CAAC;IACDT,SAAS,EAAEA,CAACC,CAAC,EAAEC,SAAS,KAAI;MAAA;MAAArE,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAC,CAAA;MAC1B;MACAS,WAAW,CAAC4D,YAAY,CAAC,CAAC,eAAe,EAAE9D,MAAM,CAAC,EAAG+D,OAAmC,IAAI;QAAA;QAAAvE,cAAA,GAAAS,CAAA;QAAAT,cAAA,GAAAC,CAAA;QAC1F,IAAI,CAACsE,OAAO,EAAE;UAAA;UAAAvE,cAAA,GAAAwB,CAAA;UAAAxB,cAAA,GAAAC,CAAA;UAAA,OAAO,EAAE;QAAA,CAAC;QAAA;QAAA;UAAAD,cAAA,GAAAwB,CAAA;QAAA;QAAAxB,cAAA,GAAAC,CAAA;QAExB,OAAOsE,OAAO,CAACC,GAAG,CAACC,YAAY,IAAG;UAAA;UAAAzE,cAAA,GAAAS,CAAA;UAAAT,cAAA,GAAAC,CAAA;UAChC,IAAIwE,YAAY,CAACvC,EAAE,KAAKmC,SAAS,CAACJ,cAAc,EAAE;YAAA;YAAAjE,cAAA,GAAAwB,CAAA;YAAAxB,cAAA,GAAAC,CAAA;YAChD,OAAO;cACL,GAAGwE,YAAY;cACfY,iBAAiB,EAAEhB,SAAS,CAACO,WAAW;cACxCU,sBAAsB,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW;aAC/C;UACH,CAAC;UAAA;UAAA;YAAAxF,cAAA,GAAAwB,CAAA;UAAA;UAAAxB,cAAA,GAAAC,CAAA;UACD,OAAOwE,YAAY;QACrB,CAAC,CAAC,CAACgB,IAAI,CAAC,CAACC,CAAC,EAAElE,CAAC,KAAI;UAAA;UAAAxB,cAAA,GAAAS,CAAA;UACf;UACA,MAAMkF,KAAK;UAAA;UAAA,CAAA3F,cAAA,GAAAC,CAAA,SAAGyF,CAAC,CAACJ,sBAAsB;UAAA;UAAA,CAAAtF,cAAA,GAAAwB,CAAA,WAAG,IAAI+D,IAAI,CAACG,CAAC,CAACJ,sBAAsB,CAAC,CAACM,OAAO,EAAE;UAAA;UAAA,CAAA5F,cAAA,GAAAwB,CAAA,WAAG,CAAC;UACzF,MAAMqE,KAAK;UAAA;UAAA,CAAA7F,cAAA,GAAAC,CAAA,SAAGuB,CAAC,CAAC8D,sBAAsB;UAAA;UAAA,CAAAtF,cAAA,GAAAwB,CAAA,WAAG,IAAI+D,IAAI,CAAC/D,CAAC,CAAC8D,sBAAsB,CAAC,CAACM,OAAO,EAAE;UAAA;UAAA,CAAA5F,cAAA,GAAAwB,CAAA,WAAG,CAAC;UAAC;UAAAxB,cAAA,GAAAC,CAAA;UAC1F,OAAO4F,KAAK,GAAGF,KAAK;QACtB,CAAC,CAAC;MACJ,CAAC,CAAC;MAEF;MAAA;MAAA3F,cAAA,GAAAC,CAAA;MACAS,WAAW,CAACgD,iBAAiB,CAAC;QAC5BpC,QAAQ,EAAE,CAAC,UAAU,EAAE+C,SAAS,CAACJ,cAAc;OAChD,CAAC;IACJ;GACD,CAAC;EAEF;EACA,MAAM6B,0BAA0B;EAAA;EAAA,CAAA9F,cAAA,GAAAC,CAAA,SAAG,IAAAF,aAAA,CAAAgE,WAAW,EAAC;IAC7CC,UAAU,EAAE,MAAAA,CAAO;MACjBe,WAAW;MACXgB;IAAc,CAIf,KAAI;MAAA;MAAA/F,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAC,CAAA;MACH,IAAI,CAACO,MAAM,EAAE;QAAA;QAAAR,cAAA,GAAAwB,CAAA;QAAAxB,cAAA,GAAAC,CAAA;QAAA,MAAM,IAAIkC,KAAK,CAAC,wBAAwB,CAAC;MAAA,CAAC;MAAA;MAAA;QAAAnC,cAAA,GAAAwB,CAAA;MAAA;MAAAxB,cAAA,GAAAC,CAAA;MACvD,OAAO,MAAMI,gBAAgB,CAAC2F,4BAA4B,CAACxF,MAAM,EAAEuE,WAAW,EAAEgB,cAAc,CAAC;IACjG,CAAC;IACD5B,SAAS,EAAEA,CAAA,KAAK;MAAA;MAAAnE,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAC,CAAA;MACd;MACAmB,OAAO,EAAE;IACX;GACD,CAAC;EAEF;EACA,MAAM6E,gBAAgB;EAAA;EAAA,CAAAjG,cAAA,GAAAC,CAAA;EAAG;EAAA,CAAAD,cAAA,GAAAwB,CAAA,WAAAR,aAAa,EAAEkF,MAAM,CAC5C,CAACC,KAAK,EAAE1B,YAAY,KAAK;IAAA;IAAAzE,cAAA,GAAAS,CAAA;IAAAT,cAAA,GAAAC,CAAA;IAAA,OAAAkG,KAAK;IAAI;IAAA,CAAAnG,cAAA,GAAAwB,CAAA,WAAAiD,YAAY,CAACC,YAAY;IAAA;IAAA,CAAA1E,cAAA,GAAAwB,CAAA,WAAI,CAAC,EAAC;EAAD,CAAC,EACjE,CAAC,CACF;EAAA;EAAA,CAAAxB,cAAA,GAAAwB,CAAA,WAAI,CAAC;EAAC;EAAAxB,cAAA,GAAAC,CAAA;EAEP,OAAO;IACLe,aAAa;IAAE;IAAA,CAAAhB,cAAA,GAAAwB,CAAA,WAAAR,aAAa;IAAA;IAAA,CAAAhB,cAAA,GAAAwB,CAAA,WAAI,EAAE;IAClCP,SAAS;IACTC,KAAK,EAAE6B,cAAc;IACrB3B,OAAO;IACP6E,gBAAgB;IAChB/B,sBAAsB,EAAGD,cAAsB,IAC7C;MAAA;MAAAjE,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAC,CAAA;MAAA,OAAA6D,kBAAkB,CAACsC,MAAM,CAAC;QAAEnC;MAAc,CAAE,CAAC;IAAD,CAAC;IAC/CkB,WAAW,EAAEA,CAAClB,cAAsB,EAAEW,WAAmB,KACvD;MAAA;MAAA5E,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAC,CAAA;MAAA,OAAA0E,mBAAmB,CAACyB,MAAM,CAAC;QAAEnC,cAAc;QAAEW;MAAW,CAAE,CAAC;IAAD,CAAC;IAC7DyB,kBAAkB,EAAEA,CAACtB,WAAmB,EAAEgB,cAAsB,KAC9D;MAAA;MAAA/F,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAC,CAAA;MAAA,OAAA6F,0BAA0B,CAACM,MAAM,CAAC;QAAErB,WAAW;QAAEgB;MAAc,CAAE,CAAC;IAAD,CAAC;IACpEO,SAAS,EAAE3B,mBAAmB,CAAC4B,SAAS;IACxCC,UAAU,EAAEV,0BAA0B,CAACS;GACxC;AACH,CAAC;AAAC;AAAAvG,cAAA,GAAAC,CAAA;AArOWwG,OAAA,CAAAlG,qBAAqB,GAAAA,qBAAA","ignoreList":[]}