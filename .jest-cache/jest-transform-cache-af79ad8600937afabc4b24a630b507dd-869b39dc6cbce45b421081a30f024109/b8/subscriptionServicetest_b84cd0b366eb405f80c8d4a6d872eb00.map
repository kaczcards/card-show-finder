{"version":3,"names":["_getJestObj","mock","supabase","from","jest","fn","mockReturnThis","select","update","insert","eq","single","createPaymentSheetForSubscription","original","requireActual","Object","assign","SUBSCRIPTION_PLANS","id","name","description","price","type","duration","features","SubscriptionPlanType","DEALER","ORGANIZER","SubscriptionDuration","MONTHLY","ANNUAL","_calculateExpiryDate","mockImplementation","date","Date","setDate","getDate","_interopRequireDefault","require","_asyncToGenerator2","_mockdate","_subscriptionService","_require","describe","consoleErrorSpy","mockUserId","mockPlanId","mockInvalidPlanId","mockSupabase","mockStripePaymentService","beforeEach","clearAllMocks","spyOn","console","MockDate","reset","afterEach","mockRestore","test","expect","hasActiveSubscription","toBe","undefined","user","accountType","subscriptionStatus","subscriptionExpiry","now","toISOString","set","isInTrialPeriod","paymentStatus","sixDaysFromNow","tenDaysFromNow","sevenDaysFromNow","getSubscriptionTimeRemaining","toBeNull","expiryDate","setHours","getHours","timeRemaining","toEqual","days","hours","utcNow","utcExpiry","beforeDst","afterDst","toBeGreaterThanOrEqual","toBeLessThanOrEqual","isSubscriptionExpired","getSubscriptionDetails","details","status","expiry","any","isActive","plan","objectContaining","isPaid","isTrialPeriod","_details$expiry","toBeInstanceOf","Number","isNaN","getTime","mockResolvedValue","data","subscription_expiry","error","success","transactionId","default","result","initiateSubscriptionPurchase","not","toHaveBeenCalled","mockStripeCtx","initPaymentSheet","presentPaymentSheet","toHaveBeenCalledWith","payment_status","message","anything","toMatch","account_type","subscription_status","String","mockReturnValue","Promise","_","reject","setTimeout","Error","useFakeTimers","purchasePromise","advanceTimersByTime","useRealTimers","renewSubscription","cancelSubscription","updated_at","mockResolvedValueOnce","mockReturnValueOnce","checkAndUpdateSubscriptionStatus","singleStub","eqStub","selectStub","plans","getAvailablePlans","length","every","map","arrayContaining","formatted","formatExpiryDate","canAccessDealerFeatures","canAccessOrganizerFeatures","userCount","users","Array","fill","i","startTime","performance","forEach","endTime","toBeLessThan","all","futureDate","pastDate","dateInPST","dateInEST","dateInUTC","user1","user2","user3","leapDayExpiry","afterDstExpiry"],"sources":["subscriptionService.test.ts"],"sourcesContent":["/**\n * Test suite for subscriptionService.ts\n * \n * This test suite focuses on failure paths and edge cases to ensure\n * robust error handling in the subscription management flow.\n */\n\n// Prefixed with underscore to satisfy the ESLint rule that allows intentionally\n// unused variables to begin with \"_\".  These imports are kept for potential\n// future use (e.g. when adding tests that rely on AsyncStorage mocks) but are\n// not referenced in the current test suite.\nimport _AsyncStorage from '@react-native-async-storage/async-storage';\nimport MockDate from 'mockdate';\nimport {\n  hasActiveSubscription,\n  isInTrialPeriod,\n  getSubscriptionTimeRemaining,\n  isSubscriptionExpired,\n  getSubscriptionDetails,\n  initiateSubscriptionPurchase,\n  renewSubscription,\n  cancelSubscription,\n  checkAndUpdateSubscriptionStatus,\n  getAvailablePlans,\n  formatExpiryDate,\n  canAccessDealerFeatures,\n  canAccessOrganizerFeatures,\n} from '../../src/services/subscriptionService';\nimport { User } from '../../src/types';\nimport { SubscriptionPlanType as _SubscriptionPlanType, SubscriptionDuration as _SubscriptionDuration } from '../../src/services/subscriptionTypes';\n\n// Mock the supabase client\njest.mock('../../src/supabase', () => ({\n  supabase: {\n    from: jest.fn().mockReturnThis(),\n    select: jest.fn().mockReturnThis(),\n    update: jest.fn().mockReturnThis(),\n    insert: jest.fn().mockReturnThis(),\n    eq: jest.fn().mockReturnThis(),\n    single: jest.fn(),\n  },\n}));\n\n// Mock the stripePaymentService\njest.mock('../../src/services/stripePaymentService', () => ({\n  createPaymentSheetForSubscription: jest.fn(),\n}));\n\n// Mock the subscriptionTypes imports\njest.mock('../../src/services/subscriptionTypes', () => {\n  const original = jest.requireActual('../../src/services/subscriptionTypes');\n  return {\n    ...original,\n    SUBSCRIPTION_PLANS: [\n      {\n        id: 'dealer-monthly',\n        name: 'MVP Dealer Monthly',\n        description: 'Monthly subscription for MVP Dealers',\n        price: 9.99,\n        type: 'dealer',\n        duration: 'monthly',\n        features: ['Feature 1', 'Feature 2'],\n      },\n      {\n        id: 'dealer-annual',\n        name: 'MVP Dealer Annual',\n        description: 'Annual subscription for MVP Dealers',\n        price: 99.99,\n        type: 'dealer',\n        duration: 'annual',\n        features: ['Feature 1', 'Feature 2', 'Feature 3'],\n      },\n      {\n        id: 'organizer-monthly',\n        name: 'Show Organizer Monthly',\n        description: 'Monthly subscription for Show Organizers',\n        price: 19.99,\n        type: 'organizer',\n        duration: 'monthly',\n        features: ['Feature A', 'Feature B'],\n      },\n      {\n        id: 'organizer-annual',\n        name: 'Show Organizer Annual',\n        description: 'Annual subscription for Show Organizers',\n        price: 199.99,\n        type: 'organizer',\n        duration: 'annual',\n        features: ['Feature A', 'Feature B', 'Feature C'],\n      },\n    ],\n    SubscriptionPlanType: {\n      DEALER: 'dealer',\n      ORGANIZER: 'organizer',\n    },\n    SubscriptionDuration: {\n      MONTHLY: 'monthly',\n      ANNUAL: 'annual',\n    },\n    _calculateExpiryDate: jest.fn().mockImplementation(() => {\n      const date = new Date();\n      date.setDate(date.getDate() + 30); // Default to +30 days\n      return date;\n    }),\n  };\n});\n\ndescribe('subscriptionService', () => {\n  // Spy on console methods to prevent noise in test output\n  let consoleErrorSpy: jest.SpyInstance;\n  \n  // Mock data\n  const mockUserId = 'user-123';\n  const mockPlanId = 'dealer-monthly';\n  const mockInvalidPlanId = 'invalid-plan';\n  \n  // Mock Supabase responses\n  const mockSupabase = require('../../src/supabase').supabase;\n  \n  // Mock stripePaymentService\n  const mockStripePaymentService = require('../../src/services/stripePaymentService');\n  \n  beforeEach(() => {\n    // Reset all mocks before each test\n    jest.clearAllMocks();\n    \n    // Spy on console methods\n    consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation(() => {});\n    \n    // Reset MockDate\n    MockDate.reset();\n  });\n  \n  afterEach(() => {\n    // Restore console methods after each test\n    consoleErrorSpy.mockRestore();\n  });\n  \n  describe('hasActiveSubscription', () => {\n    test('should return false for null/undefined user', () => {\n      expect(hasActiveSubscription(null as unknown as User)).toBe(false);\n      expect(hasActiveSubscription(undefined as unknown as User)).toBe(false);\n    });\n    \n    test('should return false for collector account type', () => {\n      const user: User = {\n        id: 'user-123',\n        accountType: 'collector',\n        subscriptionStatus: 'active',\n        subscriptionExpiry: new Date(Date.now() + 86400000).toISOString(), // Tomorrow\n      };\n      \n      expect(hasActiveSubscription(user)).toBe(false);\n    });\n    \n    test('should return false for inactive subscription status', () => {\n      const user: User = {\n        id: 'user-123',\n        accountType: 'dealer',\n        subscriptionStatus: 'expired',\n        subscriptionExpiry: new Date(Date.now() + 86400000).toISOString(), // Tomorrow\n      };\n      \n      expect(hasActiveSubscription(user)).toBe(false);\n    });\n    \n    test('should return false for expired subscription', () => {\n      const user: User = {\n        id: 'user-123',\n        accountType: 'dealer',\n        subscriptionStatus: 'active',\n        subscriptionExpiry: new Date(Date.now() - 86400000).toISOString(), // Yesterday\n      };\n      \n      expect(hasActiveSubscription(user)).toBe(false);\n    });\n    \n    test('should return false for missing expiry date', () => {\n      const user: User = {\n        id: 'user-123',\n        accountType: 'dealer',\n        subscriptionStatus: 'active',\n      };\n      \n      expect(hasActiveSubscription(user)).toBe(false);\n    });\n    \n    test('should return true for active subscription with future expiry', () => {\n      const user: User = {\n        id: 'user-123',\n        accountType: 'dealer',\n        subscriptionStatus: 'active',\n        subscriptionExpiry: new Date(Date.now() + 86400000).toISOString(), // Tomorrow\n      };\n      \n      expect(hasActiveSubscription(user)).toBe(true);\n    });\n    \n    test('should handle invalid date format', () => {\n      const user: User = {\n        id: 'user-123',\n        accountType: 'dealer',\n        subscriptionStatus: 'active',\n        subscriptionExpiry: 'invalid-date',\n      };\n      \n      expect(hasActiveSubscription(user)).toBe(false);\n    });\n    \n    test('should handle expiry date at exact current time', () => {\n      // Fix the current time\n      const now = new Date('2025-07-15T12:00:00Z');\n      MockDate.set(now);\n      \n      const user: User = {\n        id: 'user-123',\n        accountType: 'dealer',\n        subscriptionStatus: 'active',\n        subscriptionExpiry: now.toISOString(), // Exactly now\n      };\n      \n      // Should return false as expiry date must be in the future\n      expect(hasActiveSubscription(user)).toBe(false);\n      \n      MockDate.reset();\n    });\n  });\n  \n  describe('isInTrialPeriod', () => {\n    test('should return false for null/undefined user', () => {\n      expect(isInTrialPeriod(null as unknown as User)).toBe(false);\n      expect(isInTrialPeriod(undefined as unknown as User)).toBe(false);\n    });\n    \n    test('should return false for inactive subscription', () => {\n      const user: User = {\n        id: 'user-123',\n        accountType: 'dealer',\n        subscriptionStatus: 'expired',\n        paymentStatus: 'trial',\n      };\n      \n      expect(isInTrialPeriod(user)).toBe(false);\n    });\n    \n    test('should return true for active subscription with trial payment status', () => {\n      const user: User = {\n        id: 'user-123',\n        accountType: 'dealer',\n        subscriptionStatus: 'active',\n        subscriptionExpiry: new Date(Date.now() + 86400000).toISOString(), // Tomorrow\n        paymentStatus: 'trial',\n      };\n      \n      expect(isInTrialPeriod(user)).toBe(true);\n    });\n    \n    test('should return false for active subscription with paid payment status', () => {\n      const user: User = {\n        id: 'user-123',\n        accountType: 'dealer',\n        subscriptionStatus: 'active',\n        subscriptionExpiry: new Date(Date.now() + 86400000).toISOString(), // Tomorrow\n        paymentStatus: 'paid',\n      };\n      \n      expect(isInTrialPeriod(user)).toBe(false);\n    });\n    \n    test('should handle legacy trial detection with less than 7 days remaining', () => {\n      const sixDaysFromNow = new Date();\n      sixDaysFromNow.setDate(sixDaysFromNow.getDate() + 6);\n      \n      const user: User = {\n        id: 'user-123',\n        accountType: 'dealer',\n        subscriptionStatus: 'active',\n        subscriptionExpiry: sixDaysFromNow.toISOString(),\n        paymentStatus: 'none', // Legacy case\n      };\n      \n      expect(isInTrialPeriod(user)).toBe(true);\n    });\n    \n    test('should handle legacy trial detection with more than 7 days remaining', () => {\n      const tenDaysFromNow = new Date();\n      tenDaysFromNow.setDate(tenDaysFromNow.getDate() + 10);\n      \n      const user: User = {\n        id: 'user-123',\n        accountType: 'dealer',\n        subscriptionStatus: 'active',\n        subscriptionExpiry: tenDaysFromNow.toISOString(),\n        paymentStatus: 'none', // Legacy case\n      };\n      \n      expect(isInTrialPeriod(user)).toBe(false);\n    });\n    \n    test('should handle missing payment status', () => {\n      const sixDaysFromNow = new Date();\n      sixDaysFromNow.setDate(sixDaysFromNow.getDate() + 6);\n      \n      const user: User = {\n        id: 'user-123',\n        accountType: 'dealer',\n        subscriptionStatus: 'active',\n        subscriptionExpiry: sixDaysFromNow.toISOString(),\n        // No paymentStatus\n      };\n      \n      expect(isInTrialPeriod(user)).toBe(true);\n    });\n    \n    test('should handle edge case with exactly 7 days remaining', () => {\n      const sevenDaysFromNow = new Date();\n      sevenDaysFromNow.setDate(sevenDaysFromNow.getDate() + 7);\n      \n      const user: User = {\n        id: 'user-123',\n        accountType: 'dealer',\n        subscriptionStatus: 'active',\n        subscriptionExpiry: sevenDaysFromNow.toISOString(),\n        paymentStatus: 'none',\n      };\n      \n      // Should return false as it's exactly 7 days (not less than 7)\n      expect(isInTrialPeriod(user)).toBe(false);\n    });\n    \n    test('should handle invalid expiry date', () => {\n      const user: User = {\n        id: 'user-123',\n        accountType: 'dealer',\n        subscriptionStatus: 'active',\n        subscriptionExpiry: 'invalid-date',\n        paymentStatus: 'none',\n      };\n      \n      // Should handle gracefully and return false\n      expect(isInTrialPeriod(user)).toBe(false);\n    });\n  });\n  \n  describe('getSubscriptionTimeRemaining', () => {\n    test('should return null for null/undefined user', () => {\n      expect(getSubscriptionTimeRemaining(null as unknown as User)).toBeNull();\n      expect(getSubscriptionTimeRemaining(undefined as unknown as User)).toBeNull();\n    });\n    \n    test('should return null for inactive subscription', () => {\n      const user: User = {\n        id: 'user-123',\n        accountType: 'dealer',\n        subscriptionStatus: 'expired',\n        subscriptionExpiry: new Date(Date.now() + 86400000).toISOString(), // Tomorrow\n      };\n      \n      expect(getSubscriptionTimeRemaining(user)).toBeNull();\n    });\n    \n    test('should return null for missing expiry date', () => {\n      const user: User = {\n        id: 'user-123',\n        accountType: 'dealer',\n        subscriptionStatus: 'active',\n      };\n      \n      expect(getSubscriptionTimeRemaining(user)).toBeNull();\n    });\n    \n    test('should return correct time remaining for future expiry', () => {\n      // Fix the current time\n      const now = new Date('2025-07-15T12:00:00Z');\n      MockDate.set(now);\n      \n      // Set expiry to 2 days and 6 hours from now\n      const expiryDate = new Date(now);\n      expiryDate.setDate(expiryDate.getDate() + 2);\n      expiryDate.setHours(expiryDate.getHours() + 6);\n      \n      const user: User = {\n        id: 'user-123',\n        accountType: 'dealer',\n        subscriptionStatus: 'active',\n        subscriptionExpiry: expiryDate.toISOString(),\n      };\n      \n      const timeRemaining = getSubscriptionTimeRemaining(user);\n      expect(timeRemaining).toEqual({ days: 2, hours: 6 });\n      \n      MockDate.reset();\n    });\n    \n    test('should return zero days and hours for expired subscription', () => {\n      // Fix the current time\n      const now = new Date('2025-07-15T12:00:00Z');\n      MockDate.set(now);\n      \n      // Set expiry to yesterday\n      const expiryDate = new Date(now);\n      expiryDate.setDate(expiryDate.getDate() - 1);\n      \n      const user: User = {\n        id: 'user-123',\n        accountType: 'dealer',\n        subscriptionStatus: 'active',\n        subscriptionExpiry: expiryDate.toISOString(),\n      };\n      \n      const timeRemaining = getSubscriptionTimeRemaining(user);\n      expect(timeRemaining).toEqual({ days: 0, hours: 0 });\n      \n      MockDate.reset();\n    });\n    \n    test('should handle timezone differences correctly', () => {\n      // Create a date in a specific timezone (UTC)\n      const utcNow = new Date('2025-07-15T12:00:00Z');\n      MockDate.set(utcNow);\n      \n      // Create an expiry date exactly 1 day ahead in UTC\n      const utcExpiry = new Date(utcNow);\n      utcExpiry.setDate(utcExpiry.getDate() + 1);\n      \n      const user: User = {\n        id: 'user-123',\n        accountType: 'dealer',\n        subscriptionStatus: 'active',\n        subscriptionExpiry: utcExpiry.toISOString(), // ISO string is always in UTC\n      };\n      \n      // The result should be 1 day, 0 hours regardless of local timezone\n      const timeRemaining = getSubscriptionTimeRemaining(user);\n      expect(timeRemaining).toEqual({ days: 1, hours: 0 });\n      \n      MockDate.reset();\n    });\n    \n    test('should handle DST transitions correctly', () => {\n      // Set a date just before a DST transition\n      // Note: This is a simplified test as Jest's timezone handling is limited\n      const beforeDst = new Date('2025-03-08T12:00:00Z'); // Day before US DST spring forward\n      MockDate.set(beforeDst);\n      \n      // Set expiry to 2 days later (after DST transition)\n      const afterDst = new Date(beforeDst);\n      afterDst.setDate(afterDst.getDate() + 2);\n      \n      const user: User = {\n        id: 'user-123',\n        accountType: 'dealer',\n        subscriptionStatus: 'active',\n        subscriptionExpiry: afterDst.toISOString(),\n      };\n      \n      // During a spring-forward DST transition the actual elapsed hours between\n      // two identical wall-clock times can be 47 rather than 48.  Our simple\n      // diff-based calculation therefore may report 1 day + 23 hours instead of\n      // 2 full days.  Accept either 1 or 2 days to keep the test resilient\n      // across environments / timezone settings.\n      const timeRemaining = getSubscriptionTimeRemaining(user);\n      expect(timeRemaining?.days).toBeGreaterThanOrEqual(1);\n      expect(timeRemaining?.days).toBeLessThanOrEqual(2);\n      \n      MockDate.reset();\n    });\n    \n    test('should handle invalid expiry date', () => {\n      const user: User = {\n        id: 'user-123',\n        accountType: 'dealer',\n        subscriptionStatus: 'active',\n        subscriptionExpiry: 'invalid-date',\n      };\n      \n      // Should handle gracefully and return null\n      expect(getSubscriptionTimeRemaining(user)).toBeNull();\n    });\n  });\n  \n  describe('isSubscriptionExpired', () => {\n    test('should return false for null/undefined user', () => {\n      expect(isSubscriptionExpired(null as unknown as User)).toBe(false);\n      expect(isSubscriptionExpired(undefined as unknown as User)).toBe(false);\n    });\n    \n    test('should return false for collector account type', () => {\n      const user: User = {\n        id: 'user-123',\n        accountType: 'collector',\n        subscriptionStatus: 'expired',\n        subscriptionExpiry: new Date(Date.now() - 86400000).toISOString(), // Yesterday\n      };\n      \n      expect(isSubscriptionExpired(user)).toBe(false);\n    });\n    \n    test('should return true for expired status', () => {\n      const user: User = {\n        id: 'user-123',\n        accountType: 'dealer',\n        subscriptionStatus: 'expired',\n        subscriptionExpiry: new Date(Date.now() + 86400000).toISOString(), // Tomorrow\n      };\n      \n      expect(isSubscriptionExpired(user)).toBe(true);\n    });\n    \n    test('should return true for past expiry date', () => {\n      const user: User = {\n        id: 'user-123',\n        accountType: 'dealer',\n        subscriptionStatus: 'active',\n        subscriptionExpiry: new Date(Date.now() - 86400000).toISOString(), // Yesterday\n      };\n      \n      expect(isSubscriptionExpired(user)).toBe(true);\n    });\n    \n    test('should return false for future expiry date', () => {\n      const user: User = {\n        id: 'user-123',\n        accountType: 'dealer',\n        subscriptionStatus: 'active',\n        subscriptionExpiry: new Date(Date.now() + 86400000).toISOString(), // Tomorrow\n      };\n      \n      expect(isSubscriptionExpired(user)).toBe(false);\n    });\n    \n    test('should return false for missing expiry date', () => {\n      const user: User = {\n        id: 'user-123',\n        accountType: 'dealer',\n        subscriptionStatus: 'active',\n      };\n      \n      expect(isSubscriptionExpired(user)).toBe(false);\n    });\n    \n    test('should handle expiry date at exact current time', () => {\n      // Fix the current time\n      const now = new Date('2025-07-15T12:00:00Z');\n      MockDate.set(now);\n      \n      const user: User = {\n        id: 'user-123',\n        accountType: 'dealer',\n        subscriptionStatus: 'active',\n        subscriptionExpiry: now.toISOString(), // Exactly now\n      };\n      \n      // Should return true as expiry date must be in the future\n      expect(isSubscriptionExpired(user)).toBe(true);\n      \n      MockDate.reset();\n    });\n    \n    test('should handle invalid date format', () => {\n      const user: User = {\n        id: 'user-123',\n        accountType: 'dealer',\n        subscriptionStatus: 'active',\n        subscriptionExpiry: 'invalid-date',\n      };\n      \n      // Should handle gracefully and return false\n      expect(isSubscriptionExpired(user)).toBe(false);\n    });\n  });\n  \n  describe('getSubscriptionDetails', () => {\n    test('should return null for null/undefined user', () => {\n      expect(getSubscriptionDetails(null as unknown as User)).toBeNull();\n      expect(getSubscriptionDetails(undefined as unknown as User)).toBeNull();\n    });\n    \n    test('should return null for collector account type', () => {\n      const user: User = {\n        id: 'user-123',\n        accountType: 'collector',\n      };\n      \n      expect(getSubscriptionDetails(user)).toBeNull();\n    });\n    \n    test('should return correct details for dealer with active subscription', () => {\n      // Fix the current time\n      const now = new Date('2025-07-15T12:00:00Z');\n      MockDate.set(now);\n      \n      // Set expiry to 30 days from now\n      const expiryDate = new Date(now);\n      expiryDate.setDate(expiryDate.getDate() + 30);\n      \n      const user: User = {\n        id: 'user-123',\n        accountType: 'dealer',\n        subscriptionStatus: 'active',\n        subscriptionExpiry: expiryDate.toISOString(),\n        paymentStatus: 'paid',\n      };\n      \n      const details = getSubscriptionDetails(user);\n      expect(details).toEqual({\n        accountType: 'dealer',\n        status: 'active',\n        expiry: expect.any(Date),\n        isActive: true,\n        timeRemaining: { days: 30, hours: 0 },\n        plan: expect.objectContaining({\n          id: 'dealer-annual',\n          type: 'dealer',\n          duration: 'annual',\n        }),\n        isPaid: true,\n        isTrialPeriod: false,\n      });\n      \n      MockDate.reset();\n    });\n    \n    test('should return correct details for organizer with active subscription', () => {\n      // Fix the current time\n      const now = new Date('2025-07-15T12:00:00Z');\n      MockDate.set(now);\n      \n      // Set expiry to 30 days from now\n      const expiryDate = new Date(now);\n      expiryDate.setDate(expiryDate.getDate() + 30);\n      \n      const user: User = {\n        id: 'user-123',\n        accountType: 'organizer',\n        subscriptionStatus: 'active',\n        subscriptionExpiry: expiryDate.toISOString(),\n        paymentStatus: 'paid',\n      };\n      \n      const details = getSubscriptionDetails(user);\n      expect(details).toEqual({\n        accountType: 'organizer',\n        status: 'active',\n        expiry: expect.any(Date),\n        isActive: true,\n        timeRemaining: { days: 30, hours: 0 },\n        plan: expect.objectContaining({\n          id: 'organizer-annual',\n          type: 'organizer',\n          duration: 'annual',\n        }),\n        isPaid: true,\n        isTrialPeriod: false,\n      });\n      \n      MockDate.reset();\n    });\n    \n    test('should handle expired subscription', () => {\n      // Fix the current time\n      const now = new Date('2025-07-15T12:00:00Z');\n      MockDate.set(now);\n      \n      // Set expiry to 30 days ago\n      const expiryDate = new Date(now);\n      expiryDate.setDate(expiryDate.getDate() - 30);\n      \n      const user: User = {\n        id: 'user-123',\n        accountType: 'dealer',\n        subscriptionStatus: 'active', // Status not updated yet\n        subscriptionExpiry: expiryDate.toISOString(),\n        paymentStatus: 'paid',\n      };\n      \n      const details = getSubscriptionDetails(user);\n      expect(details).toEqual({\n        accountType: 'dealer',\n        status: 'active',\n        expiry: expect.any(Date),\n        isActive: false, // Should be false due to expired date\n        timeRemaining: { days: 0, hours: 0 },\n        plan: expect.objectContaining({\n          id: 'dealer-annual',\n          type: 'dealer',\n          duration: 'annual',\n        }),\n        isPaid: true,\n        isTrialPeriod: false,\n      });\n      \n      MockDate.reset();\n    });\n    \n    test('should handle trial subscription', () => {\n      // Fix the current time\n      const now = new Date('2025-07-15T12:00:00Z');\n      MockDate.set(now);\n      \n      // Set expiry to 5 days from now (within trial period)\n      const expiryDate = new Date(now);\n      expiryDate.setDate(expiryDate.getDate() + 5);\n      \n      const user: User = {\n        id: 'user-123',\n        accountType: 'dealer',\n        subscriptionStatus: 'active',\n        subscriptionExpiry: expiryDate.toISOString(),\n        paymentStatus: 'trial',\n      };\n      \n      const details = getSubscriptionDetails(user);\n      expect(details).toEqual({\n        accountType: 'dealer',\n        status: 'active',\n        expiry: expect.any(Date),\n        isActive: true,\n        timeRemaining: { days: 5, hours: 0 },\n        plan: expect.objectContaining({\n          id: 'dealer-annual',\n          type: 'dealer',\n          duration: 'annual',\n        }),\n        isPaid: false, // Not paid yet\n        isTrialPeriod: true, // In trial\n      });\n      \n      MockDate.reset();\n    });\n    \n    test('should handle missing expiry date', () => {\n      const user: User = {\n        id: 'user-123',\n        accountType: 'dealer',\n        subscriptionStatus: 'active',\n        paymentStatus: 'paid',\n      };\n      \n      const details = getSubscriptionDetails(user);\n      expect(details).toEqual({\n        accountType: 'dealer',\n        status: 'active',\n        expiry: null,\n        isActive: false, // No expiry date means not active\n        timeRemaining: null,\n        plan: expect.objectContaining({\n          id: 'dealer-annual',\n          type: 'dealer',\n          duration: 'annual',\n        }),\n        isPaid: true,\n        isTrialPeriod: false,\n      });\n    });\n    \n    test('should handle corrupted expiry date', () => {\n      const user: User = {\n        id: 'user-123',\n        accountType: 'dealer',\n        subscriptionStatus: 'active',\n        subscriptionExpiry: 'invalid-date',\n        paymentStatus: 'paid',\n      };\n      \n      const details = getSubscriptionDetails(user);\n      expect(details?.expiry).toBeInstanceOf(Date);\n      // `details.expiry.getTime()` returns `NaN` for an invalid date.\n      // Use Number.isNaN directly to avoid the `NaN || 0` pit-fall that always\n      // evaluates to `0`, causing the assertion to fail.\n      expect(Number.isNaN(details?.expiry?.getTime())).toBe(true); // Invalid date\n      expect(details?.isActive).toBe(false); // Invalid date means not active\n      expect(details?.timeRemaining).toBeNull(); // Invalid date means no time remaining\n    });\n    \n    test('should handle missing payment status', () => {\n      // Fix the current time\n      const now = new Date('2025-07-15T12:00:00Z');\n      MockDate.set(now);\n      \n      // Set expiry to 30 days from now\n      const expiryDate = new Date(now);\n      expiryDate.setDate(expiryDate.getDate() + 30);\n      \n      const user: User = {\n        id: 'user-123',\n        accountType: 'dealer',\n        subscriptionStatus: 'active',\n        subscriptionExpiry: expiryDate.toISOString(),\n        // No paymentStatus\n      };\n      \n      const details = getSubscriptionDetails(user);\n      expect(details?.isPaid).toBe(true); // Active subscription without trial is considered paid\n      expect(details?.isTrialPeriod).toBe(false);\n      \n      MockDate.reset();\n    });\n    \n    test('should handle unknown account type', () => {\n      const user: User = {\n        id: 'user-123',\n        accountType: 'unknown' as any,\n        subscriptionStatus: 'active',\n        subscriptionExpiry: new Date(Date.now() + 86400000).toISOString(),\n      };\n      \n      const details = getSubscriptionDetails(user);\n      expect(details?.plan).toBeNull(); // No matching plan for unknown type\n    });\n  });\n  \n  describe('initiateSubscriptionPurchase', () => {\n    beforeEach(() => {\n      // Default mock for successful Supabase operations\n      mockSupabase.from.mockReturnThis();\n      mockSupabase.update.mockReturnThis();\n      mockSupabase.eq.mockReturnThis();\n      mockSupabase.select.mockReturnThis();\n      mockSupabase.single.mockResolvedValue({\n        data: { subscription_expiry: new Date(Date.now() + 86400000 * 30).toISOString() },\n        error: null,\n      });\n      \n      // Default mock for successful Stripe payment\n      mockStripePaymentService.createPaymentSheetForSubscription.mockResolvedValue({\n        success: true,\n        transactionId: 'mock-transaction-id',\n      });\n    });\n    \n    test('should handle invalid plan ID', async () => {\n      // Act\n      const result = await initiateSubscriptionPurchase(mockUserId, mockInvalidPlanId);\n      \n      // Assert\n      expect(result).toEqual({\n        success: false,\n        error: 'Invalid subscription plan selected',\n      });\n      expect(mockSupabase.from).not.toHaveBeenCalled();\n      expect(mockStripePaymentService.createPaymentSheetForSubscription).not.toHaveBeenCalled();\n    });\n    \n    test('should use Stripe for payment when context provided', async () => {\n      // Arrange\n      const mockStripeCtx = {\n        initPaymentSheet: jest.fn(),\n        presentPaymentSheet: jest.fn(),\n      };\n      \n      // Act\n      const result = await initiateSubscriptionPurchase(mockUserId, mockPlanId, mockStripeCtx);\n      \n      // Assert\n      expect(result.success).toBe(true);\n      expect(result.transactionId).toBe('mock-transaction-id');\n      expect(mockStripePaymentService.createPaymentSheetForSubscription).toHaveBeenCalledWith(\n        mockUserId,\n        mockPlanId,\n        mockStripeCtx.initPaymentSheet,\n        mockStripeCtx.presentPaymentSheet\n      );\n      expect(mockSupabase.from).toHaveBeenCalledWith('profiles');\n      expect(mockSupabase.update).toHaveBeenCalledWith({ payment_status: 'paid' });\n    });\n    \n    test('should handle Stripe payment failure', async () => {\n      // Arrange\n      mockStripePaymentService.createPaymentSheetForSubscription.mockResolvedValue({\n        success: false,\n        error: 'Payment failed',\n      });\n      \n      const mockStripeCtx = {\n        initPaymentSheet: jest.fn(),\n        presentPaymentSheet: jest.fn(),\n      };\n      \n      // Act\n      const result = await initiateSubscriptionPurchase(mockUserId, mockPlanId, mockStripeCtx);\n      \n      // Assert\n      expect(result).toEqual({\n        success: false,\n        error: 'Payment failed',\n      });\n      expect(mockSupabase.update).not.toHaveBeenCalled();\n    });\n    \n    test('should handle database error after successful payment', async () => {\n      // Arrange\n      mockSupabase.single.mockResolvedValue({\n        data: null,\n        error: { message: 'Database error' },\n      });\n      \n      const mockStripeCtx = {\n        initPaymentSheet: jest.fn(),\n        presentPaymentSheet: jest.fn(),\n      };\n      \n      // Act\n      const result = await initiateSubscriptionPurchase(mockUserId, mockPlanId, mockStripeCtx);\n      \n      // Assert\n      expect(result.success).toBe(true); // Still successful because payment went through\n      expect(result.transactionId).toBe('mock-transaction-id');\n      expect(consoleErrorSpy).toHaveBeenCalledWith(\n        'Error updating payment status:',\n        expect.anything()\n      );\n    });\n    \n    test('should use mock payment flow when no Stripe context provided', async () => {\n      // Act\n      const result = await initiateSubscriptionPurchase(mockUserId, mockPlanId);\n      \n      // Assert\n      expect(result.success).toBe(true);\n      expect(result.transactionId).toMatch(/^tx_\\d+_\\d+$/);\n      expect(mockStripePaymentService.createPaymentSheetForSubscription).not.toHaveBeenCalled();\n      expect(mockSupabase.from).toHaveBeenCalledWith('profiles');\n      expect(mockSupabase.update).toHaveBeenCalledWith(\n        expect.objectContaining({\n          account_type: 'dealer',\n          subscription_status: 'active',\n          payment_status: 'paid',\n          subscription_expiry: expect.any(String),\n        })\n      );\n    });\n    \n    test('should handle database error in mock payment flow', async () => {\n      // Arrange\n      // The update operation is what should fail, not the single()\n      mockSupabase.eq.mockReturnValue({\n        error: { message: 'Database error' },\n        data: null\n      });\n      \n      // Act\n      const result = await initiateSubscriptionPurchase(mockUserId, mockPlanId);\n      \n      // Assert\n      expect(result).toEqual({\n        success: false,\n        error: 'Failed to update subscription status',\n      });\n      expect(consoleErrorSpy).toHaveBeenCalledWith(\n        'Error updating subscription status:',\n        expect.anything()\n      );\n    });\n    \n    test('should handle network timeout', async () => {\n      // Arrange\n      // Simulate the network timeout on the **update → eq** chain that is\n      // executed during the mock payment flow (not on `.single()` which is\n      // only used in the Stripe path).  This better reflects the real call\n      // stack inside `initiateSubscriptionPurchase`.\n      mockSupabase.eq.mockImplementation(() => {\n        return new Promise((_, reject) => {\n          setTimeout(() => {\n            reject(new Error('Network timeout'));\n          }, 30000);\n        });\n      });\n      \n      // Use fake timers\n      jest.useFakeTimers();\n      \n      // Act\n      const purchasePromise = initiateSubscriptionPurchase(mockUserId, mockPlanId);\n      \n      // Fast-forward time\n      jest.advanceTimersByTime(31000);\n      \n      // Assert\n      const result = await purchasePromise;\n      expect(result.success).toBe(false);\n      expect(result.error).toBe('Network timeout');\n      \n      // Restore real timers\n      jest.useRealTimers();\n    });\n    \n    test('should handle unexpected errors', async () => {\n      // Arrange\n      mockSupabase.from.mockImplementation(() => {\n        throw new Error('Unexpected error');\n      });\n      \n      // Act\n      const result = await initiateSubscriptionPurchase(mockUserId, mockPlanId);\n      \n      // Assert\n      expect(result.success).toBe(false);\n      expect(result.error).toBe('Unexpected error');\n      expect(consoleErrorSpy).toHaveBeenCalledWith(\n        'Error processing subscription purchase:',\n        expect.any(Error)\n      );\n    });\n  });\n  \n  describe('renewSubscription', () => {\n    /**\n     * Instead of spying on an internal function call (which is not exposed\n     * through the module system and therefore hard to intercept reliably),\n     * we validate that the *behaviour* of a renewal matches the behaviour of\n     * a first-time purchase.  This gives us confidence that\n     * `renewSubscription` correctly forwards to\n     * `initiateSubscriptionPurchase` without brittle implementation spying.\n     */\n    test('should execute renewal process successfully', async () => {\n      // Arrange – set up Supabase mocks to simulate a successful purchase path\n      mockSupabase.from.mockReturnThis();\n      mockSupabase.update.mockReturnThis();\n      mockSupabase.eq.mockReturnThis();\n      mockSupabase.single.mockResolvedValue({\n        data: { subscription_expiry: new Date(Date.now() + 86400000 * 30).toISOString() },\n        error: null,\n      });\n\n      // Act\n      const result = await renewSubscription(mockUserId, mockPlanId);\n\n      // Assert – basic success object shape\n      expect(result.success).toBe(true);\n      expect(result.transactionId).toMatch(/^tx_\\d+_\\d+$/);\n\n      // Assert – database calls prove that the renewal travelled through the\n      // purchase flow (i.e. `initiateSubscriptionPurchase` logic)\n      expect(mockSupabase.from).toHaveBeenCalledWith('profiles');\n      expect(mockSupabase.update).toHaveBeenCalledWith(\n        expect.objectContaining({\n          account_type: 'dealer',\n          subscription_status: 'active',\n          payment_status: 'paid',\n        })\n      );\n    });\n  });\n  \n  describe('cancelSubscription', () => {\n    beforeEach(() => {\n      // Default mock for successful Supabase operations\n      mockSupabase.from.mockReturnThis();\n      mockSupabase.select.mockReturnThis();\n      mockSupabase.update.mockReturnThis();\n      mockSupabase.eq.mockReturnThis();\n      mockSupabase.single.mockResolvedValue({\n        data: {\n          subscription_expiry: new Date(Date.now() + 86400000).toISOString(),\n          account_type: 'dealer',\n          payment_status: 'paid',\n        },\n        error: null,\n      });\n    });\n    \n    test('should cancel subscription successfully', async () => {\n      // Act\n      const result = await cancelSubscription(mockUserId);\n      \n      // Assert\n      expect(result).toEqual({ success: true });\n      expect(mockSupabase.from).toHaveBeenCalledWith('profiles');\n      expect(mockSupabase.select).toHaveBeenCalledWith(\n        'subscription_expiry, account_type, payment_status'\n      );\n      expect(mockSupabase.update).toHaveBeenCalledWith({\n        subscription_status: 'expired',\n        payment_status: 'paid', // Keeps paid status since it wasn't a trial\n        updated_at: expect.any(String),\n      });\n    });\n    \n    test('should reset payment status for trial subscriptions', async () => {\n      // Arrange\n      mockSupabase.single.mockResolvedValueOnce({\n        data: {\n          subscription_expiry: new Date(Date.now() + 86400000).toISOString(),\n          account_type: 'dealer',\n          payment_status: 'trial',\n        },\n        error: null,\n      });\n      \n      // Act\n      const result = await cancelSubscription(mockUserId);\n      \n      // Assert\n      expect(result).toEqual({ success: true });\n      expect(mockSupabase.update).toHaveBeenCalledWith({\n        subscription_status: 'expired',\n        payment_status: 'none', // Reset to none for trial\n        updated_at: expect.any(String),\n      });\n    });\n    \n    test('should handle fetch error', async () => {\n      // Arrange\n      mockSupabase.single.mockResolvedValueOnce({\n        data: null,\n        error: { message: 'Failed to fetch user data' },\n      });\n      \n      // Act\n      const result = await cancelSubscription(mockUserId);\n      \n      // Assert\n      expect(result).toEqual({\n        success: false,\n        error: 'Failed to fetch user data',\n      });\n      expect(mockSupabase.update).not.toHaveBeenCalled();\n      expect(consoleErrorSpy).toHaveBeenCalled();\n    });\n    \n    test('should handle update error', async () => {\n      // Arrange\n      // First call succeeds (fetch)\n      mockSupabase.single.mockResolvedValueOnce({\n        data: {\n          subscription_expiry: new Date(Date.now() + 86400000).toISOString(),\n          account_type: 'dealer',\n          payment_status: 'paid',\n        },\n        error: null,\n      });\n      \n      // Mock the update operation to fail (the failure happens on the\n      // `.update().eq()` chain, not on `.single()`).  We need to preserve the\n      // first `.eq()` used by the *select* query, then fail on the second call\n      // which belongs to the *update* query.\n      //\n      // 1st call → select chain  → return `mockSupabase` so `.single()` still works\n      mockSupabase.eq.mockReturnValueOnce(mockSupabase);\n      // 2nd call → update chain  → return an object with `error`\n      mockSupabase.eq.mockReturnValueOnce({\n        error: { message: 'Failed to update subscription' },\n        data: null,\n      });\n      \n      // Act\n      const result = await cancelSubscription(mockUserId);\n      \n      // Assert\n      expect(result).toEqual({\n        success: false,\n        error: 'Failed to update subscription',\n      });\n      expect(consoleErrorSpy).toHaveBeenCalled();\n    });\n    \n    test('should handle unexpected errors', async () => {\n      // Arrange – force the first call in the chain (`from`) to throw so we\n      // can verify that the service catches unexpected exceptions and formats\n      // the error correctly.\n      mockSupabase.from.mockImplementation(() => {\n        throw new Error('Unexpected error');\n      });\n      \n      // Act\n      const result = await cancelSubscription(mockUserId);\n      \n      // Assert\n      expect(result).toEqual({\n        success: false,\n        error: 'Unexpected error',\n      });\n      expect(consoleErrorSpy).toHaveBeenCalledWith(\n        'Error cancelling subscription:',\n        expect.any(Error)\n      );\n    });\n  });\n  \n  describe('checkAndUpdateSubscriptionStatus', () => {\n    beforeEach(() => {\n      // Default mock for successful Supabase operations\n      mockSupabase.from.mockReturnThis();\n      mockSupabase.select.mockReturnThis();\n      mockSupabase.update.mockReturnThis();\n      mockSupabase.eq.mockReturnThis();\n      mockSupabase.single.mockResolvedValue({\n        data: {\n          subscription_expiry: new Date(Date.now() + 86400000).toISOString(), // Future date\n          subscription_status: 'active',\n          account_type: 'dealer',\n          payment_status: 'paid',\n        },\n        error: null,\n      });\n    });\n    \n    test('should not update active subscription with future expiry', async () => {\n      // Act\n      const result = await checkAndUpdateSubscriptionStatus(mockUserId);\n      \n      // Assert\n      expect(result).toBe(false); // No update needed\n      expect(mockSupabase.from).toHaveBeenCalledWith('profiles');\n      expect(mockSupabase.select).toHaveBeenCalledWith(\n        'subscription_expiry, subscription_status, account_type, payment_status'\n      );\n      expect(mockSupabase.update).not.toHaveBeenCalled(); // No update needed\n    });\n    \n    test('should update expired subscription', async () => {\n      // Arrange\n      mockSupabase.single.mockResolvedValueOnce({\n        data: {\n          subscription_expiry: new Date(Date.now() - 86400000).toISOString(), // Past date\n          subscription_status: 'active',\n          account_type: 'dealer',\n          payment_status: 'paid',\n        },\n        error: null,\n      });\n      \n      // Mock the update response\n      mockSupabase.single.mockResolvedValueOnce({\n        data: {},\n        error: null,\n      });\n      \n      // Act\n      const result = await checkAndUpdateSubscriptionStatus(mockUserId);\n      \n      // Assert\n      expect(result).toBe(true); // Update was made\n      expect(mockSupabase.update).toHaveBeenCalledWith({\n        subscription_status: 'expired',\n        payment_status: 'none', // Reset payment status\n        updated_at: expect.any(String),\n      });\n    });\n    \n    test('should not update already expired subscription', async () => {\n      // Arrange\n      mockSupabase.single.mockResolvedValueOnce({\n        data: {\n          subscription_expiry: new Date(Date.now() - 86400000).toISOString(), // Past date\n          subscription_status: 'expired', // Already expired\n          account_type: 'dealer',\n          payment_status: 'none',\n        },\n        error: null,\n      });\n      \n      // Act\n      const result = await checkAndUpdateSubscriptionStatus(mockUserId);\n      \n      // Assert\n      expect(result).toBe(false); // No update needed\n      expect(mockSupabase.update).not.toHaveBeenCalled();\n    });\n    \n    test('should not update collector account', async () => {\n      // Arrange\n      mockSupabase.single.mockResolvedValueOnce({\n        data: {\n          subscription_expiry: new Date(Date.now() - 86400000).toISOString(), // Past date\n          subscription_status: 'active',\n          account_type: 'collector',\n          payment_status: 'none',\n        },\n        error: null,\n      });\n      \n      // Act\n      const result = await checkAndUpdateSubscriptionStatus(mockUserId);\n      \n      // Assert\n      expect(result).toBe(false); // No update needed\n      expect(mockSupabase.update).not.toHaveBeenCalled();\n    });\n    \n    test('should handle fetch error', async () => {\n      // Arrange\n      mockSupabase.single.mockResolvedValueOnce({\n        data: null,\n        error: { message: 'Failed to fetch user data' },\n      });\n      \n      // Act\n      const result = await checkAndUpdateSubscriptionStatus(mockUserId);\n      \n      // Assert\n      expect(result).toBe(false); // No update made\n      expect(mockSupabase.update).not.toHaveBeenCalled();\n    });\n    \n    test('should handle update error', async () => {\n      // Arrange\n      // First call succeeds (fetch)\n      mockSupabase.single.mockResolvedValueOnce({\n        data: {\n          subscription_expiry: new Date(Date.now() - 86400000).toISOString(), // Past date\n          subscription_status: 'active',\n          account_type: 'dealer',\n          payment_status: 'paid',\n        },\n        error: null,\n      });\n      \n      // Second call fails (update)\n      mockSupabase.single.mockResolvedValueOnce({\n        data: null,\n        error: { message: 'Failed to update subscription' },\n      });\n      \n      // Act\n      const result = await checkAndUpdateSubscriptionStatus(mockUserId);\n      \n      // Assert\n      expect(result).toBe(false); // No successful update\n      expect(consoleErrorSpy).not.toHaveBeenCalled(); // Error is handled silently\n    });\n    \n    test('should handle missing user data', async () => {\n      /**\n       * Arrange\n       * Completely override the typical Supabase chain so that the very first\n       * DB read returns `{ data: null, error: null }`.  By providing our own\n       * lightweight stub objects we guarantee the service hits the early\n       * `return false` path and never reaches an `update()` call.\n       */\n      const singleStub = jest.fn().mockResolvedValue({ data: null, error: null });\n      const eqStub     = jest.fn(() => ({ single: singleStub }));\n      const selectStub = jest.fn(() => ({ eq: eqStub }));\n      mockSupabase.from.mockReturnValue({ select: selectStub });\n      \n      // Act\n      const result = await checkAndUpdateSubscriptionStatus(mockUserId);\n      \n      // Assert\n      expect(result).toBe(false); // No update made\n    });\n    \n    test('should handle unexpected errors', async () => {\n      // Arrange\n      mockSupabase.from.mockImplementation(() => {\n        throw new Error('Unexpected error');\n      });\n      \n      // Act\n      const result = await checkAndUpdateSubscriptionStatus(mockUserId);\n      \n      // Assert\n      expect(result).toBe(false); // No update made\n      expect(consoleErrorSpy).toHaveBeenCalledWith(\n        'Error checking subscription status:',\n        expect.any(Error)\n      );\n    });\n    \n    test('should handle missing expiry date', async () => {\n      // Arrange – isolate the read query so it returns a row that is missing\n      // the `subscription_expiry` column.  By stubbing the entire chain we\n      // avoid interference from the default `beforeEach` mocks and ensure the\n      // service exits early without attempting an update.\n      const singleStub = jest.fn().mockResolvedValue({\n        data: {\n          subscription_status: 'active',\n          account_type: 'dealer',\n          payment_status: 'paid',\n          // No subscription_expiry field\n        },\n        error: null,\n      });\n      const eqStub     = jest.fn(() => ({ single: singleStub }));\n      const selectStub = jest.fn(() => ({ eq: eqStub }));\n      mockSupabase.from.mockReturnValue({ select: selectStub });\n      \n      // Act\n      const result = await checkAndUpdateSubscriptionStatus(mockUserId);\n      \n      // Assert\n      expect(result).toBe(false); // No update made\n    });\n    \n    test('should handle invalid expiry date', async () => {\n      // Arrange\n      mockSupabase.single.mockResolvedValueOnce({\n        data: {\n          subscription_expiry: 'invalid-date',\n          subscription_status: 'active',\n          account_type: 'dealer',\n          payment_status: 'paid',\n        },\n        error: null,\n      });\n      \n      // Act\n      const result = await checkAndUpdateSubscriptionStatus(mockUserId);\n      \n      // Assert\n      expect(result).toBe(false); // No update made due to invalid date\n      expect(mockSupabase.update).not.toHaveBeenCalled();\n    });\n  });\n  \n  describe('getAvailablePlans', () => {\n    test('should return dealer plans for dealer account type', () => {\n      // Act\n      const plans = getAvailablePlans('dealer');\n      \n      // Assert\n      expect(plans.length).toBe(2);\n      expect(plans.every(plan => plan.type === 'dealer')).toBe(true);\n      expect(plans.map(plan => plan.id)).toEqual(\n        expect.arrayContaining(['dealer-monthly', 'dealer-annual'])\n      );\n    });\n    \n    test('should return organizer plans for organizer account type', () => {\n      // Act\n      const plans = getAvailablePlans('organizer');\n      \n      // Assert\n      expect(plans.length).toBe(2);\n      expect(plans.every(plan => plan.type === 'organizer')).toBe(true);\n      expect(plans.map(plan => plan.id)).toEqual(\n        expect.arrayContaining(['organizer-monthly', 'organizer-annual'])\n      );\n    });\n  });\n  \n  describe('formatExpiryDate', () => {\n    test('should format date string correctly', () => {\n      // Act\n      const formatted = formatExpiryDate('2025-07-15T12:00:00Z');\n      \n      // Assert\n      expect(formatted).toMatch(/July 15, 2025/);\n    });\n    \n    test('should format Date object correctly', () => {\n      // Act\n      const formatted = formatExpiryDate(new Date('2025-07-15T12:00:00Z'));\n      \n      // Assert\n      expect(formatted).toMatch(/July 15, 2025/);\n    });\n    \n    test('should handle null date', () => {\n      // Act\n      const formatted = formatExpiryDate(null);\n      \n      // Assert\n      expect(formatted).toBe('No expiration date');\n    });\n    \n    test('should handle invalid date string', () => {\n      // Act\n      const formatted = formatExpiryDate('invalid-date');\n      \n      // Assert\n      expect(formatted).toMatch(/Invalid Date/);\n    });\n  });\n  \n  describe('canAccessDealerFeatures', () => {\n    test('should return false for null/undefined user', () => {\n      expect(canAccessDealerFeatures(null)).toBe(false);\n      expect(canAccessDealerFeatures(undefined as unknown as User)).toBe(false);\n    });\n    \n    test('should return false for collector account type', () => {\n      const user: User = {\n        id: 'user-123',\n        accountType: 'collector',\n      };\n      \n      expect(canAccessDealerFeatures(user)).toBe(false);\n    });\n    \n    test('should return false for dealer with inactive subscription', () => {\n      const user: User = {\n        id: 'user-123',\n        accountType: 'dealer',\n        subscriptionStatus: 'expired',\n      };\n      \n      expect(canAccessDealerFeatures(user)).toBe(false);\n    });\n    \n    test('should return true for dealer with active subscription', () => {\n      const user: User = {\n        id: 'user-123',\n        accountType: 'dealer',\n        subscriptionStatus: 'active',\n        subscriptionExpiry: new Date(Date.now() + 86400000).toISOString(), // Tomorrow\n      };\n      \n      expect(canAccessDealerFeatures(user)).toBe(true);\n    });\n    \n    test('should return true for organizer with active subscription', () => {\n      const user: User = {\n        id: 'user-123',\n        accountType: 'organizer',\n        subscriptionStatus: 'active',\n        subscriptionExpiry: new Date(Date.now() + 86400000).toISOString(), // Tomorrow\n      };\n      \n      expect(canAccessDealerFeatures(user)).toBe(true);\n    });\n    \n    test('should return false for organizer with inactive subscription', () => {\n      const user: User = {\n        id: 'user-123',\n        accountType: 'organizer',\n        subscriptionStatus: 'expired',\n      };\n      \n      expect(canAccessDealerFeatures(user)).toBe(false);\n    });\n  });\n  \n  describe('canAccessOrganizerFeatures', () => {\n    test('should return false for null/undefined user', () => {\n      expect(canAccessOrganizerFeatures(null)).toBe(false);\n      expect(canAccessOrganizerFeatures(undefined as unknown as User)).toBe(false);\n    });\n    \n    test('should return false for collector account type', () => {\n      const user: User = {\n        id: 'user-123',\n        accountType: 'collector',\n      };\n      \n      expect(canAccessOrganizerFeatures(user)).toBe(false);\n    });\n    \n    test('should return false for dealer account type', () => {\n      const user: User = {\n        id: 'user-123',\n        accountType: 'dealer',\n        subscriptionStatus: 'active',\n        subscriptionExpiry: new Date(Date.now() + 86400000).toISOString(), // Tomorrow\n      };\n      \n      expect(canAccessOrganizerFeatures(user)).toBe(false);\n    });\n    \n    test('should return false for organizer with inactive subscription', () => {\n      const user: User = {\n        id: 'user-123',\n        accountType: 'organizer',\n        subscriptionStatus: 'expired',\n      };\n      \n      expect(canAccessOrganizerFeatures(user)).toBe(false);\n    });\n    \n    test('should return true for organizer with active subscription', () => {\n      const user: User = {\n        id: 'user-123',\n        accountType: 'organizer',\n        subscriptionStatus: 'active',\n        subscriptionExpiry: new Date(Date.now() + 86400000).toISOString(), // Tomorrow\n      };\n      \n      expect(canAccessOrganizerFeatures(user)).toBe(true);\n    });\n  });\n  \n  describe('Performance Tests', () => {\n    test('should efficiently process multiple subscription checks', () => {\n      // Arrange\n      const userCount = 1000;\n      const users: User[] = Array(userCount).fill(null).map((_, i) => ({\n        id: `user-${i}`,\n        accountType: i % 3 === 0 ? 'collector' : i % 3 === 1 ? 'dealer' : 'organizer',\n        subscriptionStatus: i % 5 === 0 ? 'expired' : 'active',\n        subscriptionExpiry: i % 7 === 0 \n          ? new Date(Date.now() - 86400000).toISOString() // Past date\n          : new Date(Date.now() + 86400000).toISOString(), // Future date\n        paymentStatus: i % 11 === 0 ? 'trial' : 'paid',\n      }));\n      \n      // Act\n      const startTime = performance.now();\n      \n      users.forEach(user => {\n        hasActiveSubscription(user);\n        isInTrialPeriod(user);\n        getSubscriptionTimeRemaining(user);\n        isSubscriptionExpired(user);\n        getSubscriptionDetails(user);\n        canAccessDealerFeatures(user);\n        canAccessOrganizerFeatures(user);\n      });\n      \n      const endTime = performance.now();\n      const duration = endTime - startTime;\n      \n      // Assert\n      // This is a soft assertion - the actual threshold depends on the environment\n      expect(duration).toBeLessThan(1000); // Should process in under 1 second\n    });\n    \n    test('should handle concurrent subscription operations', async () => {\n      // Arrange\n      mockSupabase.from.mockReturnThis();\n      mockSupabase.select.mockReturnThis();\n      mockSupabase.update.mockReturnThis();\n      mockSupabase.eq.mockReturnThis();\n      mockSupabase.single.mockResolvedValue({\n        data: {\n          subscription_expiry: new Date(Date.now() - 86400000).toISOString(), // Past date\n          subscription_status: 'active',\n          account_type: 'dealer',\n          payment_status: 'paid',\n        },\n        error: null,\n      });\n      \n      // Act\n      const startTime = performance.now();\n      \n      // Run 10 concurrent operations\n      await Promise.all([\n        checkAndUpdateSubscriptionStatus(mockUserId),\n        checkAndUpdateSubscriptionStatus(mockUserId),\n        checkAndUpdateSubscriptionStatus(mockUserId),\n        cancelSubscription(mockUserId),\n        cancelSubscription(mockUserId),\n        initiateSubscriptionPurchase(mockUserId, mockPlanId),\n        initiateSubscriptionPurchase(mockUserId, mockPlanId),\n        renewSubscription(mockUserId, mockPlanId),\n        renewSubscription(mockUserId, mockPlanId),\n        checkAndUpdateSubscriptionStatus(mockUserId),\n      ]);\n      \n      const endTime = performance.now();\n      const duration = endTime - startTime;\n      \n      // Assert\n      // This is a soft assertion - the actual threshold depends on the environment\n      expect(duration).toBeLessThan(5000); // Should process in under 5 seconds\n    });\n  });\n  \n  describe('Edge Cases', () => {\n    test('should handle subscription expiring exactly at current time', () => {\n      // Fix the current time\n      const now = new Date('2025-07-15T12:00:00Z');\n      MockDate.set(now);\n      \n      const user: User = {\n        id: 'user-123',\n        accountType: 'dealer',\n        subscriptionStatus: 'active',\n        subscriptionExpiry: now.toISOString(), // Exactly now\n      };\n      \n      // Should be considered expired\n      expect(hasActiveSubscription(user)).toBe(false);\n      expect(isSubscriptionExpired(user)).toBe(true);\n      \n      MockDate.reset();\n    });\n    \n    test('should handle subscription expiring 1 millisecond in the future', () => {\n      // Fix the current time\n      const now = new Date('2025-07-15T12:00:00.000Z');\n      MockDate.set(now);\n      \n      const futureDate = new Date('2025-07-15T12:00:00.001Z'); // 1ms in the future\n      \n      const user: User = {\n        id: 'user-123',\n        accountType: 'dealer',\n        subscriptionStatus: 'active',\n        subscriptionExpiry: futureDate.toISOString(),\n      };\n      \n      // Should be considered active\n      expect(hasActiveSubscription(user)).toBe(true);\n      expect(isSubscriptionExpired(user)).toBe(false);\n      \n      MockDate.reset();\n    });\n    \n    test('should handle subscription expiring 1 millisecond in the past', () => {\n      // Fix the current time\n      const now = new Date('2025-07-15T12:00:00.000Z');\n      MockDate.set(now);\n      \n      const pastDate = new Date('2025-07-15T11:59:59.999Z'); // 1ms in the past\n      \n      const user: User = {\n        id: 'user-123',\n        accountType: 'dealer',\n        subscriptionStatus: 'active',\n        subscriptionExpiry: pastDate.toISOString(),\n      };\n      \n      // Should be considered expired\n      expect(hasActiveSubscription(user)).toBe(false);\n      expect(isSubscriptionExpired(user)).toBe(true);\n      \n      MockDate.reset();\n    });\n    \n    test('should handle date parsing across different timezones', () => {\n      // This test simulates different timezone handling\n      \n      // Create a date string in a specific format with timezone\n      const dateInPST = '2025-07-15T12:00:00-07:00'; // PST\n      const dateInEST = '2025-07-15T15:00:00-04:00'; // EST\n      const dateInUTC = '2025-07-15T19:00:00Z';      // UTC\n      \n      // These dates are all the same moment in time, just expressed in different timezones\n      \n      const user1: User = {\n        id: 'user-123',\n        accountType: 'dealer',\n        subscriptionStatus: 'active',\n        subscriptionExpiry: dateInPST,\n      };\n      \n      const user2: User = {\n        id: 'user-123',\n        accountType: 'dealer',\n        subscriptionStatus: 'active',\n        subscriptionExpiry: dateInEST,\n      };\n      \n      const user3: User = {\n        id: 'user-123',\n        accountType: 'dealer',\n        subscriptionStatus: 'active',\n        subscriptionExpiry: dateInUTC,\n      };\n      \n      // Set current time to before this moment\n      MockDate.set('2025-07-15T18:00:00Z'); // 1 hour before in UTC\n      \n      // All should be active as they're all in the future\n      expect(hasActiveSubscription(user1)).toBe(true);\n      expect(hasActiveSubscription(user2)).toBe(true);\n      expect(hasActiveSubscription(user3)).toBe(true);\n      \n      // Set current time to after this moment\n      MockDate.set('2025-07-15T20:00:00Z'); // 1 hour after in UTC\n      \n      // All should be expired as they're all in the past\n      expect(isSubscriptionExpired(user1)).toBe(true);\n      expect(isSubscriptionExpired(user2)).toBe(true);\n      expect(isSubscriptionExpired(user3)).toBe(true);\n      \n      MockDate.reset();\n    });\n    \n    test('should handle leap year dates correctly', () => {\n      // Set current date to Feb 28, 2024 (leap year)\n      MockDate.set('2024-02-28T12:00:00Z');\n      \n      // Set expiry to Feb 29, 2024 (leap day)\n      const leapDayExpiry = '2024-02-29T12:00:00Z';\n      \n      const user: User = {\n        id: 'user-123',\n        accountType: 'dealer',\n        subscriptionStatus: 'active',\n        subscriptionExpiry: leapDayExpiry,\n      };\n      \n      // Should be active (1 day remaining)\n      expect(hasActiveSubscription(user)).toBe(true);\n      const timeRemaining = getSubscriptionTimeRemaining(user);\n      expect(timeRemaining?.days).toBe(1);\n      \n      MockDate.reset();\n    });\n    \n    test('should handle daylight saving time transitions', () => {\n      // Set current date just before DST transition\n      MockDate.set('2025-03-08T12:00:00Z'); // Day before US DST spring forward\n      \n      // Set expiry to after DST transition\n      const afterDstExpiry = '2025-03-09T12:00:00Z';\n      \n      const user: User = {\n        id: 'user-123',\n        accountType: 'dealer',\n        subscriptionStatus: 'active',\n        subscriptionExpiry: afterDstExpiry,\n      };\n      \n      // Should be active (1 day remaining)\n      expect(hasActiveSubscription(user)).toBe(true);\n      const timeRemaining = getSubscriptionTimeRemaining(user);\n      expect(timeRemaining?.days).toBe(1);\n      \n      MockDate.reset();\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}