24dd5e980a23414d3ec92c7f37cd3061
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
function cov_sa5xt6wt7() {
  var path = "/Users/kevin/card-show-finder/src/services/messagingService.ts";
  var hash = "660a46d2214e8a65a20d063b76c6b09a6619f772";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kevin/card-show-finder/src/services/messagingService.ts",
    statementMap: {
      "0": {
        start: {
          line: 49,
          column: 27
        },
        end: {
          line: 96,
          column: 1
        }
      },
      "1": {
        start: {
          line: 56,
          column: 2
        },
        end: {
          line: 95,
          column: 3
        }
      },
      "2": {
        start: {
          line: 58,
          column: 4
        },
        end: {
          line: 58,
          column: 88
        }
      },
      "3": {
        start: {
          line: 79,
          column: 33
        },
        end: {
          line: 89,
          column: 5
        }
      },
      "4": {
        start: {
          line: 91,
          column: 4
        },
        end: {
          line: 91,
          column: 23
        }
      },
      "5": {
        start: {
          line: 93,
          column: 4
        },
        end: {
          line: 93,
          column: 51
        }
      },
      "6": {
        start: {
          line: 94,
          column: 4
        },
        end: {
          line: 94,
          column: 16
        }
      },
      "7": {
        start: {
          line: 105,
          column: 31
        },
        end: {
          line: 130,
          column: 1
        }
      },
      "8": {
        start: {
          line: 110,
          column: 2
        },
        end: {
          line: 129,
          column: 3
        }
      },
      "9": {
        start: {
          line: 112,
          column: 4
        },
        end: {
          line: 112,
          column: 54
        }
      },
      "10": {
        start: {
          line: 125,
          column: 4
        },
        end: {
          line: 125,
          column: 14
        }
      },
      "11": {
        start: {
          line: 127,
          column: 4
        },
        end: {
          line: 127,
          column: 57
        }
      },
      "12": {
        start: {
          line: 128,
          column: 4
        },
        end: {
          line: 128,
          column: 14
        }
      },
      "13": {
        start: {
          line: 137,
          column: 33
        },
        end: {
          line: 155,
          column: 1
        }
      },
      "14": {
        start: {
          line: 138,
          column: 2
        },
        end: {
          line: 154,
          column: 3
        }
      },
      "15": {
        start: {
          line: 140,
          column: 4
        },
        end: {
          line: 140,
          column: 55
        }
      },
      "16": {
        start: {
          line: 150,
          column: 4
        },
        end: {
          line: 150,
          column: 16
        }
      },
      "17": {
        start: {
          line: 152,
          column: 4
        },
        end: {
          line: 152,
          column: 59
        }
      },
      "18": {
        start: {
          line: 153,
          column: 4
        },
        end: {
          line: 153,
          column: 17
        }
      },
      "19": {
        start: {
          line: 163,
          column: 29
        },
        end: {
          line: 182,
          column: 1
        }
      },
      "20": {
        start: {
          line: 164,
          column: 2
        },
        end: {
          line: 181,
          column: 3
        }
      },
      "21": {
        start: {
          line: 166,
          column: 4
        },
        end: {
          line: 166,
          column: 48
        }
      },
      "22": {
        start: {
          line: 177,
          column: 4
        },
        end: {
          line: 177,
          column: 16
        }
      },
      "23": {
        start: {
          line: 179,
          column: 4
        },
        end: {
          line: 179,
          column: 52
        }
      },
      "24": {
        start: {
          line: 180,
          column: 4
        },
        end: {
          line: 180,
          column: 17
        }
      },
      "25": {
        start: {
          line: 192,
          column: 36
        },
        end: {
          line: 222,
          column: 1
        }
      },
      "26": {
        start: {
          line: 198,
          column: 2
        },
        end: {
          line: 221,
          column: 3
        }
      },
      "27": {
        start: {
          line: 200,
          column: 4
        },
        end: {
          line: 200,
          column: 93
        }
      },
      "28": {
        start: {
          line: 203,
          column: 32
        },
        end: {
          line: 203,
          column: 34
        }
      },
      "29": {
        start: {
          line: 204,
          column: 4
        },
        end: {
          line: 215,
          column: 5
        }
      },
      "30": {
        start: {
          line: 205,
          column: 22
        },
        end: {
          line: 211,
          column: 7
        }
      },
      "31": {
        start: {
          line: 212,
          column: 6
        },
        end: {
          line: 214,
          column: 7
        }
      },
      "32": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 213,
          column: 31
        }
      },
      "33": {
        start: {
          line: 217,
          column: 4
        },
        end: {
          line: 217,
          column: 20
        }
      },
      "34": {
        start: {
          line: 219,
          column: 4
        },
        end: {
          line: 219,
          column: 61
        }
      },
      "35": {
        start: {
          line: 220,
          column: 4
        },
        end: {
          line: 220,
          column: 16
        }
      },
      "36": {
        start: {
          line: 225,
          column: 32
        },
        end: {
          line: 231,
          column: 1
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 49,
            column: 27
          },
          end: {
            line: 49,
            column: 28
          }
        },
        loc: {
          start: {
            line: 55,
            column: 30
          },
          end: {
            line: 96,
            column: 1
          }
        },
        line: 55
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 105,
            column: 31
          },
          end: {
            line: 105,
            column: 32
          }
        },
        loc: {
          start: {
            line: 109,
            column: 25
          },
          end: {
            line: 130,
            column: 1
          }
        },
        line: 109
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 137,
            column: 33
          },
          end: {
            line: 137,
            column: 34
          }
        },
        loc: {
          start: {
            line: 137,
            column: 80
          },
          end: {
            line: 155,
            column: 1
          }
        },
        line: 137
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 163,
            column: 29
          },
          end: {
            line: 163,
            column: 30
          }
        },
        loc: {
          start: {
            line: 163,
            column: 92
          },
          end: {
            line: 182,
            column: 1
          }
        },
        line: 163
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 192,
            column: 36
          },
          end: {
            line: 192,
            column: 37
          }
        },
        loc: {
          start: {
            line: 197,
            column: 32
          },
          end: {
            line: 222,
            column: 1
          }
        },
        line: 197
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 53,
            column: 2
          },
          end: {
            line: 53,
            column: 40
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 53,
            column: 22
          },
          end: {
            line: 53,
            column: 40
          }
        }],
        line: 53
      },
      "1": {
        loc: {
          start: {
            line: 107,
            column: 2
          },
          end: {
            line: 107,
            column: 20
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 107,
            column: 18
          },
          end: {
            line: 107,
            column: 20
          }
        }],
        line: 107
      },
      "2": {
        loc: {
          start: {
            line: 108,
            column: 2
          },
          end: {
            line: 108,
            column: 20
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 108,
            column: 19
          },
          end: {
            line: 108,
            column: 20
          }
        }],
        line: 108
      },
      "3": {
        loc: {
          start: {
            line: 212,
            column: 6
          },
          end: {
            line: 214,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 212,
            column: 6
          },
          end: {
            line: 214,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 212
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0],
      "1": [0],
      "2": [0],
      "3": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "660a46d2214e8a65a20d063b76c6b09a6619f772"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_sa5xt6wt7 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_sa5xt6wt7();
export var MessageType = function (MessageType) {
  MessageType["DIRECT"] = "direct";
  MessageType["BROADCAST"] = "broadcast";
  MessageType["NOTIFICATION"] = "notification";
  return MessageType;
}({});
export var MessageStatus = function (MessageStatus) {
  MessageStatus["SENT"] = "sent";
  MessageStatus["DELIVERED"] = "delivered";
  MessageStatus["READ"] = "read";
  MessageStatus["FAILED"] = "failed";
  return MessageStatus;
}({});
cov_sa5xt6wt7().s[0]++;
export var sendMessage = function () {
  var _ref = _asyncToGenerator(function* (senderId, recipientId, content) {
    var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : (cov_sa5xt6wt7().b[0][0]++, MessageType.DIRECT);
    var metadata = arguments.length > 4 ? arguments[4] : undefined;
    cov_sa5xt6wt7().f[0]++;
    cov_sa5xt6wt7().s[1]++;
    try {
      cov_sa5xt6wt7().s[2]++;
      console.log('Sending message:', {
        senderId: senderId,
        recipientId: recipientId,
        content: content,
        type: type,
        metadata: metadata
      });
      var mockMessage = (cov_sa5xt6wt7().s[3]++, {
        id: `msg_${Date.now()}`,
        senderId: senderId,
        recipientId: recipientId,
        content: content,
        type: type,
        status: MessageStatus.SENT,
        metadata: metadata,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      });
      cov_sa5xt6wt7().s[4]++;
      return mockMessage;
    } catch (error) {
      cov_sa5xt6wt7().s[5]++;
      console.error('Error sending message:', error);
      cov_sa5xt6wt7().s[6]++;
      return null;
    }
  });
  return function sendMessage(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();
cov_sa5xt6wt7().s[7]++;
export var getUserMessages = function () {
  var _ref2 = _asyncToGenerator(function* (userId) {
    var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (cov_sa5xt6wt7().b[1][0]++, 20);
    var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : (cov_sa5xt6wt7().b[2][0]++, 0);
    cov_sa5xt6wt7().f[1]++;
    cov_sa5xt6wt7().s[8]++;
    try {
      cov_sa5xt6wt7().s[9]++;
      console.log('Getting messages for user:', userId);
      cov_sa5xt6wt7().s[10]++;
      return [];
    } catch (error) {
      cov_sa5xt6wt7().s[11]++;
      console.error('Error getting user messages:', error);
      cov_sa5xt6wt7().s[12]++;
      return [];
    }
  });
  return function getUserMessages(_x4) {
    return _ref2.apply(this, arguments);
  };
}();
cov_sa5xt6wt7().s[13]++;
export var markMessageAsRead = function () {
  var _ref3 = _asyncToGenerator(function* (messageId) {
    cov_sa5xt6wt7().f[2]++;
    cov_sa5xt6wt7().s[14]++;
    try {
      cov_sa5xt6wt7().s[15]++;
      console.log('Marking message as read:', messageId);
      cov_sa5xt6wt7().s[16]++;
      return true;
    } catch (error) {
      cov_sa5xt6wt7().s[17]++;
      console.error('Error marking message as read:', error);
      cov_sa5xt6wt7().s[18]++;
      return false;
    }
  });
  return function markMessageAsRead(_x5) {
    return _ref3.apply(this, arguments);
  };
}();
cov_sa5xt6wt7().s[19]++;
export var deleteMessage = function () {
  var _ref4 = _asyncToGenerator(function* (messageId, userId) {
    cov_sa5xt6wt7().f[3]++;
    cov_sa5xt6wt7().s[20]++;
    try {
      cov_sa5xt6wt7().s[21]++;
      console.log('Deleting message:', messageId);
      cov_sa5xt6wt7().s[22]++;
      return true;
    } catch (error) {
      cov_sa5xt6wt7().s[23]++;
      console.error('Error deleting message:', error);
      cov_sa5xt6wt7().s[24]++;
      return false;
    }
  });
  return function deleteMessage(_x6, _x7) {
    return _ref4.apply(this, arguments);
  };
}();
cov_sa5xt6wt7().s[25]++;
export var sendBroadcastMessage = function () {
  var _ref5 = _asyncToGenerator(function* (senderId, recipientIds, content, metadata) {
    cov_sa5xt6wt7().f[4]++;
    cov_sa5xt6wt7().s[26]++;
    try {
      cov_sa5xt6wt7().s[27]++;
      console.log('Sending broadcast message:', {
        senderId: senderId,
        recipientIds: recipientIds,
        content: content,
        metadata: metadata
      });
      var messages = (cov_sa5xt6wt7().s[28]++, []);
      cov_sa5xt6wt7().s[29]++;
      for (var recipientId of recipientIds) {
        var message = (cov_sa5xt6wt7().s[30]++, yield sendMessage(senderId, recipientId, content, MessageType.BROADCAST, metadata));
        cov_sa5xt6wt7().s[31]++;
        if (message) {
          cov_sa5xt6wt7().b[3][0]++;
          cov_sa5xt6wt7().s[32]++;
          messages.push(message);
        } else {
          cov_sa5xt6wt7().b[3][1]++;
        }
      }
      cov_sa5xt6wt7().s[33]++;
      return messages;
    } catch (error) {
      cov_sa5xt6wt7().s[34]++;
      console.error('Error sending broadcast message:', error);
      cov_sa5xt6wt7().s[35]++;
      return null;
    }
  });
  return function sendBroadcastMessage(_x8, _x9, _x0, _x1) {
    return _ref5.apply(this, arguments);
  };
}();
export var messagingService = (cov_sa5xt6wt7().s[36]++, {
  sendMessage: sendMessage,
  getUserMessages: getUserMessages,
  markMessageAsRead: markMessageAsRead,
  deleteMessage: deleteMessage,
  sendBroadcastMessage: sendBroadcastMessage
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,