{"file":"/Users/kevin/card-show-finder/__tests__/components/Chat/ChatList.test.tsx","mappings":"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","names":[],"sources":["/Users/kevin/card-show-finder/__tests__/components/Chat/ChatList.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, fireEvent, waitFor, act } from '@testing-library/react-native';\nimport ChatList from '../../../src/components/Chat/ChatList';\n\n// Mock the hooks\njest.mock('../../../src/hooks', () => ({\n  useConversationsQuery: jest.fn(),\n  useConversationMessagesQuery: jest.fn(),\n}));\n\n// Import the mocked hooks\nimport { useConversationsQuery, useConversationMessagesQuery } from '../../../src/hooks';\n\ndescribe('ChatList Component', () => {\n  // Mock data\n  const mockConversations = [\n    {\n      id: 'convo-1',\n      title: 'Conversation 1',\n      last_message_text: 'Hello there',\n      last_message_timestamp: '2025-07-11T10:00:00Z',\n      unread_count: 2,\n      participants: [\n        {\n          user_id: 'user-2',\n          display_name: 'John Doe',\n          avatar_url: null,\n        },\n      ],\n      type: 'direct',\n    },\n    {\n      id: 'convo-2',\n      title: 'Conversation 2',\n      last_message_text: 'How are you?',\n      last_message_timestamp: '2025-07-10T15:30:00Z',\n      unread_count: 0,\n      participants: [\n        {\n          user_id: 'user-3',\n          display_name: 'Jane Smith',\n          avatar_url: null,\n        },\n      ],\n      type: 'direct',\n    },\n  ];\n\n  const mockMessages = [\n    {\n      id: 'msg-1',\n      conversation_id: 'convo-1',\n      sender_id: 'user-2',\n      message_text: 'Hello there',\n      created_at: '2025-07-11T10:00:00Z',\n      read_by_user_ids: ['user-1'],\n      sender_profile: {\n        id: 'user-2',\n        display_name: 'John Doe',\n      },\n    },\n    {\n      id: 'msg-2',\n      conversation_id: 'convo-1',\n      sender_id: 'user-1',\n      message_text: 'Hi! How are you?',\n      created_at: '2025-07-11T10:01:00Z',\n      read_by_user_ids: ['user-1', 'user-2'],\n      sender_profile: {\n        id: 'user-1',\n        display_name: 'Current User',\n      },\n    },\n  ];\n\n  // Mock implementations\n  const mockMarkConversationAsRead = jest.fn();\n  const mockSendMessage = jest.fn();\n  const mockRefetchConversations = jest.fn();\n  const mockSendConversationMessage = jest.fn();\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    // Mock useConversationsQuery hook\n    (useConversationsQuery as jest.Mock).mockReturnValue({\n      conversations: mockConversations,\n      isLoading: false,\n      error: null,\n      refetch: mockRefetchConversations,\n      markConversationAsRead: mockMarkConversationAsRead,\n      sendMessage: mockSendMessage,\n      isSending: false,\n    });\n\n    // Mock useConversationMessagesQuery hook\n    (useConversationMessagesQuery as jest.Mock).mockReturnValue({\n      messages: mockMessages,\n      isLoading: false,\n      error: null,\n      sendMessage: mockSendConversationMessage,\n      isSending: false,\n    });\n  });\n\n  test('renders conversation list when no conversation is selected', () => {\n    const { getByText } = render(<ChatList userId=\"user-1\" />);\n    \n    expect(getByText('Conversation 1')).toBeTruthy();\n    expect(getByText('Conversation 2')).toBeTruthy();\n  });\n\n  test('selects conversation when clicked', () => {\n    const onSelectConversationMock = jest.fn();\n    const { getByText } = render(\n      <ChatList \n        userId=\"user-1\" \n        onSelectConversation={onSelectConversationMock}\n      />\n    );\n    \n    fireEvent.press(getByText('Conversation 1'));\n    \n    // Check if the handler was called with the correct conversation\n    expect(onSelectConversationMock).toHaveBeenCalledWith(mockConversations[0]);\n    \n    // Check if markConversationAsRead was called\n    expect(mockMarkConversationAsRead).toHaveBeenCalledWith('convo-1');\n  });\n\n  test('processes initialConversationId only once', async () => {\n    // Spy on React.useRef to track how it's used\n    const useRefSpy = jest.spyOn(React, 'useRef');\n    \n    // Render component with initialConversationId\n    render(\n      <ChatList \n        userId=\"user-1\" \n        initialConversationId=\"convo-1\"\n      />\n    );\n    \n    // Wait for component to process initialConversationId\n    await waitFor(() => {\n      // Verify markConversationAsRead was called exactly once\n      expect(mockMarkConversationAsRead).toHaveBeenCalledTimes(1);\n      expect(mockMarkConversationAsRead).toHaveBeenCalledWith('convo-1');\n    });\n    \n    // Verify useRef was called (for the processedInitialIdRef)\n    expect(useRefSpy).toHaveBeenCalled();\n    \n    // Force a re-render to see if it processes initialConversationId again\n    const { rerender } = render(\n      <ChatList \n        userId=\"user-1\" \n        initialConversationId=\"convo-1\"\n      />\n    );\n    \n    // Re-render with the same props\n    rerender(\n      <ChatList \n        userId=\"user-1\" \n        initialConversationId=\"convo-1\"\n      />\n    );\n    \n    // Verify markConversationAsRead was still only called once\n    expect(mockMarkConversationAsRead).toHaveBeenCalledTimes(1);\n    \n    useRefSpy.mockRestore();\n  });\n\n  test('handles different initialConversationId correctly', async () => {\n    // First render with one initialConversationId\n    const { rerender } = render(\n      <ChatList \n        userId=\"user-1\" \n        initialConversationId=\"convo-1\"\n      />\n    );\n    \n    // Wait for first conversation to be processed\n    await waitFor(() => {\n      expect(mockMarkConversationAsRead).toHaveBeenCalledWith('convo-1');\n    });\n    \n    // Reset mock to track new calls\n    mockMarkConversationAsRead.mockClear();\n    \n    // Re-render with a different initialConversationId\n    rerender(\n      <ChatList \n        userId=\"user-1\" \n        initialConversationId=\"convo-2\"\n      />\n    );\n    \n    // Verify second conversation is processed\n    await waitFor(() => {\n      expect(mockMarkConversationAsRead).toHaveBeenCalledWith('convo-2');\n    });\n  });\n\n  test('does not cause infinite loop with initialConversationId', async () => {\n    // Mock console.error to catch any potential maximum update depth exceeded errors\n    const originalError = console.error;\n    console.error = jest.fn();\n    \n    // Render with initialConversationId\n    render(\n      <ChatList \n        userId=\"user-1\" \n        initialConversationId=\"convo-1\"\n      />\n    );\n    \n    // Wait for any async operations\n    await act(async () => {\n      await new Promise(resolve => setTimeout(resolve, 100));\n    });\n    \n    // Check if there were any maximum update depth exceeded errors\n    expect(console.error).not.toHaveBeenCalledWith(\n      expect.stringContaining('Maximum update depth exceeded')\n    );\n    \n    // Restore console.error\n    console.error = originalError;\n  });\n\n  test('handles empty conversations array with initialConversationId', () => {\n    // Mock empty conversations\n    (useConversationsQuery as jest.Mock).mockReturnValueOnce({\n      conversations: [],\n      isLoading: false,\n      error: null,\n      refetch: mockRefetchConversations,\n      markConversationAsRead: mockMarkConversationAsRead,\n      sendMessage: mockSendMessage,\n      isSending: false,\n    });\n    \n    render(\n      <ChatList \n        userId=\"user-1\" \n        initialConversationId=\"convo-1\"\n      />\n    );\n    \n    // Verify markConversationAsRead was not called since conversation doesn't exist\n    expect(mockMarkConversationAsRead).not.toHaveBeenCalled();\n  });\n\n  test('handles null userId with initialConversationId', () => {\n    render(\n      <ChatList \n        userId={null} \n        initialConversationId=\"convo-1\"\n      />\n    );\n    \n    // Verify markConversationAsRead was not called when userId is null\n    expect(mockMarkConversationAsRead).not.toHaveBeenCalled();\n  });\n\n  test('sends message correctly', () => {\n    // First select a conversation\n    const { getByText, getByPlaceholderText } = render(\n      <ChatList userId=\"user-1\" />\n    );\n    \n    // Select conversation\n    fireEvent.press(getByText('Conversation 1'));\n    \n    // Find input and send button\n    const messageInput = getByPlaceholderText('Type a message...');\n    \n    // Type a message\n    fireEvent.changeText(messageInput, 'Hello, this is a test message');\n    \n    // Send the message\n    fireEvent(messageInput, 'submitEditing');\n    \n    // Check if sendConversationMessage was called with the correct text\n    expect(mockSendConversationMessage).toHaveBeenCalledWith('Hello, this is a test message');\n  });\n});\n"],"version":3}