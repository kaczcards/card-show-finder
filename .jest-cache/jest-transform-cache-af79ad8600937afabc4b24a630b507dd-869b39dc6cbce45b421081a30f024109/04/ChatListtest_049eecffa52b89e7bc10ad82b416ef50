746de272e5124a2cbbefc0a05d8b320e
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock the hooks
jest.mock('../../../src/hooks', () => ({
    useConversationsQuery: jest.fn(),
    useConversationMessagesQuery: jest.fn(),
}));
const react_1 = __importDefault(require("react"));
const react_native_1 = require("@testing-library/react-native");
const ChatList_1 = __importDefault(require("../../../src/components/Chat/ChatList"));
// Import the mocked hooks
const hooks_1 = require("../../../src/hooks");
describe('ChatList Component', () => {
    // Mock data
    const mockConversations = [
        {
            id: 'convo-1',
            title: 'Conversation 1',
            last_message_text: 'Hello there',
            last_message_timestamp: '2025-07-11T10:00:00Z',
            unread_count: 2,
            participants: [
                {
                    user_id: 'user-2',
                    display_name: 'John Doe',
                    avatar_url: null,
                },
            ],
            type: 'direct',
        },
        {
            id: 'convo-2',
            title: 'Conversation 2',
            last_message_text: 'How are you?',
            last_message_timestamp: '2025-07-10T15:30:00Z',
            unread_count: 0,
            participants: [
                {
                    user_id: 'user-3',
                    display_name: 'Jane Smith',
                    avatar_url: null,
                },
            ],
            type: 'direct',
        },
    ];
    const mockMessages = [
        {
            id: 'msg-1',
            conversation_id: 'convo-1',
            sender_id: 'user-2',
            message_text: 'Hello there',
            created_at: '2025-07-11T10:00:00Z',
            read_by_user_ids: ['user-1'],
            sender_profile: {
                id: 'user-2',
                display_name: 'John Doe',
            },
        },
        {
            id: 'msg-2',
            conversation_id: 'convo-1',
            sender_id: 'user-1',
            message_text: 'Hi! How are you?',
            created_at: '2025-07-11T10:01:00Z',
            read_by_user_ids: ['user-1', 'user-2'],
            sender_profile: {
                id: 'user-1',
                display_name: 'Current User',
            },
        },
    ];
    // Mock implementations
    const mockMarkConversationAsRead = jest.fn();
    const mockSendMessage = jest.fn();
    const mockRefetchConversations = jest.fn();
    const mockSendConversationMessage = jest.fn();
    beforeEach(() => {
        jest.clearAllMocks();
        // Mock useConversationsQuery hook
        hooks_1.useConversationsQuery.mockReturnValue({
            conversations: mockConversations,
            isLoading: false,
            error: null,
            refetch: mockRefetchConversations,
            markConversationAsRead: mockMarkConversationAsRead,
            sendMessage: mockSendMessage,
            isSending: false,
        });
        // Mock useConversationMessagesQuery hook
        hooks_1.useConversationMessagesQuery.mockReturnValue({
            messages: mockMessages,
            isLoading: false,
            error: null,
            sendMessage: mockSendConversationMessage,
            isSending: false,
        });
    });
    test('renders conversation list when no conversation is selected', () => {
        const { getByText } = (0, react_native_1.render)(<ChatList_1.default userId="user-1"/>);
        expect(getByText('Conversation 1')).toBeTruthy();
        expect(getByText('Conversation 2')).toBeTruthy();
    });
    test('selects conversation when clicked', () => {
        const onSelectConversationMock = jest.fn();
        const { getByText } = (0, react_native_1.render)(<ChatList_1.default userId="user-1" onSelectConversation={onSelectConversationMock}/>);
        react_native_1.fireEvent.press(getByText('Conversation 1'));
        // Check if the handler was called with the correct conversation
        expect(onSelectConversationMock).toHaveBeenCalledWith(mockConversations[0]);
        // Check if markConversationAsRead was called
        expect(mockMarkConversationAsRead).toHaveBeenCalledWith('convo-1');
    });
    test('processes initialConversationId only once', async () => {
        // Spy on React.useRef to track how it's used
        const useRefSpy = jest.spyOn(react_1.default, 'useRef');
        // Render component with initialConversationId
        (0, react_native_1.render)(<ChatList_1.default userId="user-1" initialConversationId="convo-1"/>);
        // Wait for component to process initialConversationId
        await (0, react_native_1.waitFor)(() => {
            // Verify markConversationAsRead was called exactly once
            expect(mockMarkConversationAsRead).toHaveBeenCalledTimes(1);
            expect(mockMarkConversationAsRead).toHaveBeenCalledWith('convo-1');
        });
        // Verify useRef was called (for the processedInitialIdRef)
        expect(useRefSpy).toHaveBeenCalled();
        // Force a re-render to see if it processes initialConversationId again
        const { rerender } = (0, react_native_1.render)(<ChatList_1.default userId="user-1" initialConversationId="convo-1"/>);
        // Re-render with the same props
        rerender(<ChatList_1.default userId="user-1" initialConversationId="convo-1"/>);
        // Verify markConversationAsRead was still only called once
        expect(mockMarkConversationAsRead).toHaveBeenCalledTimes(1);
        useRefSpy.mockRestore();
    });
    test('handles different initialConversationId correctly', async () => {
        // First render with one initialConversationId
        const { rerender } = (0, react_native_1.render)(<ChatList_1.default userId="user-1" initialConversationId="convo-1"/>);
        // Wait for first conversation to be processed
        await (0, react_native_1.waitFor)(() => {
            expect(mockMarkConversationAsRead).toHaveBeenCalledWith('convo-1');
        });
        // Reset mock to track new calls
        mockMarkConversationAsRead.mockClear();
        // Re-render with a different initialConversationId
        rerender(<ChatList_1.default userId="user-1" initialConversationId="convo-2"/>);
        // Verify second conversation is processed
        await (0, react_native_1.waitFor)(() => {
            expect(mockMarkConversationAsRead).toHaveBeenCalledWith('convo-2');
        });
    });
    test('does not cause infinite loop with initialConversationId', async () => {
        // Mock console.error to catch any potential maximum update depth exceeded errors
        const originalError = console.error;
        console.error = jest.fn();
        // Render with initialConversationId
        (0, react_native_1.render)(<ChatList_1.default userId="user-1" initialConversationId="convo-1"/>);
        // Wait for any async operations
        await (0, react_native_1.act)(async () => {
            await new Promise(resolve => setTimeout(resolve, 100));
        });
        // Check if there were any maximum update depth exceeded errors
        expect(console.error).not.toHaveBeenCalledWith(expect.stringContaining('Maximum update depth exceeded'));
        // Restore console.error
        console.error = originalError;
    });
    test('handles empty conversations array with initialConversationId', () => {
        // Mock empty conversations
        hooks_1.useConversationsQuery.mockReturnValueOnce({
            conversations: [],
            isLoading: false,
            error: null,
            refetch: mockRefetchConversations,
            markConversationAsRead: mockMarkConversationAsRead,
            sendMessage: mockSendMessage,
            isSending: false,
        });
        (0, react_native_1.render)(<ChatList_1.default userId="user-1" initialConversationId="convo-1"/>);
        // Verify markConversationAsRead was not called since conversation doesn't exist
        expect(mockMarkConversationAsRead).not.toHaveBeenCalled();
    });
    test('handles null userId with initialConversationId', () => {
        (0, react_native_1.render)(<ChatList_1.default userId={null} initialConversationId="convo-1"/>);
        // Verify markConversationAsRead was not called when userId is null
        expect(mockMarkConversationAsRead).not.toHaveBeenCalled();
    });
    test('sends message correctly', () => {
        // First select a conversation
        const { getByText, getByPlaceholderText } = (0, react_native_1.render)(<ChatList_1.default userId="user-1"/>);
        // Select conversation
        react_native_1.fireEvent.press(getByText('Conversation 1'));
        // Find input and send button
        const messageInput = getByPlaceholderText('Type a message...');
        // Type a message
        react_native_1.fireEvent.changeText(messageInput, 'Hello, this is a test message');
        // Send the message
        (0, react_native_1.fireEvent)(messageInput, 'submitEditing');
        // Check if sendConversationMessage was called with the correct text
        expect(mockSendConversationMessage).toHaveBeenCalledWith('Hello, this is a test message');
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,