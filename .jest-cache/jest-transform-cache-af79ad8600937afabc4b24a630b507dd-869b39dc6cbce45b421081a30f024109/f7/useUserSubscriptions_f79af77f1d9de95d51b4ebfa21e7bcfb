d2b72296a3653c76f270100548dc50de
"use strict";

/* istanbul ignore next */
function cov_21wbpfmr70() {
  var path = "/Users/kevin/card-show-finder/src/hooks/useUserSubscriptions.ts";
  var hash = "8e2a1ee1206ac6b98c53ef20291c9137f5ada1d0";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kevin/card-show-finder/src/hooks/useUserSubscriptions.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 38
        }
      },
      "2": {
        start: {
          line: 5,
          column: 16
        },
        end: {
          line: 5,
          column: 32
        }
      },
      "3": {
        start: {
          line: 6,
          column: 19
        },
        end: {
          line: 6,
          column: 41
        }
      },
      "4": {
        start: {
          line: 7,
          column: 22
        },
        end: {
          line: 7,
          column: 56
        }
      },
      "5": {
        start: {
          line: 12,
          column: 29
        },
        end: {
          line: 70,
          column: 1
        }
      },
      "6": {
        start: {
          line: 13,
          column: 46
        },
        end: {
          line: 13,
          column: 71
        }
      },
      "7": {
        start: {
          line: 14,
          column: 38
        },
        end: {
          line: 14,
          column: 65
        }
      },
      "8": {
        start: {
          line: 15,
          column: 30
        },
        end: {
          line: 15,
          column: 57
        }
      },
      "9": {
        start: {
          line: 16,
          column: 26
        },
        end: {
          line: 16,
          column: 54
        }
      },
      "10": {
        start: {
          line: 17,
          column: 21
        },
        end: {
          line: 17,
          column: 30
        }
      },
      "11": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 68,
          column: 15
        }
      },
      "12": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 24,
          column: 9
        }
      },
      "13": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 21,
          column: 33
        }
      },
      "14": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 32
        }
      },
      "15": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 19
        }
      },
      "16": {
        start: {
          line: 25,
          column: 35
        },
        end: {
          line: 66,
          column: 9
        }
      },
      "17": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 65,
          column: 13
        }
      },
      "18": {
        start: {
          line: 27,
          column: 16
        },
        end: {
          line: 27,
          column: 35
        }
      },
      "19": {
        start: {
          line: 28,
          column: 16
        },
        end: {
          line: 28,
          column: 31
        }
      },
      "20": {
        start: {
          line: 29,
          column: 16
        },
        end: {
          line: 29,
          column: 96
        }
      },
      "21": {
        start: {
          line: 36,
          column: 55
        },
        end: {
          line: 40,
          column: 29
        }
      },
      "22": {
        start: {
          line: 42,
          column: 16
        },
        end: {
          line: 45,
          column: 17
        }
      },
      "23": {
        start: {
          line: 43,
          column: 20
        },
        end: {
          line: 43,
          column: 105
        }
      },
      "24": {
        start: {
          line: 44,
          column: 20
        },
        end: {
          line: 44,
          column: 98
        }
      },
      "25": {
        start: {
          line: 47,
          column: 31
        },
        end: {
          line: 55,
          column: 24
        }
      },
      "26": {
        start: {
          line: 56,
          column: 16
        },
        end: {
          line: 56,
          column: 41
        }
      },
      "27": {
        start: {
          line: 57,
          column: 16
        },
        end: {
          line: 57,
          column: 92
        }
      },
      "28": {
        start: {
          line: 60,
          column: 16
        },
        end: {
          line: 60,
          column: 79
        }
      },
      "29": {
        start: {
          line: 61,
          column: 16
        },
        end: {
          line: 61,
          column: 94
        }
      },
      "30": {
        start: {
          line: 64,
          column: 16
        },
        end: {
          line: 64,
          column: 36
        }
      },
      "31": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 29
        }
      },
      "32": {
        start: {
          line: 69,
          column: 4
        },
        end: {
          line: 69,
          column: 47
        }
      },
      "33": {
        start: {
          line: 71,
          column: 0
        },
        end: {
          line: 71,
          column: 52
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 12,
            column: 29
          },
          end: {
            line: 12,
            column: 30
          }
        },
        loc: {
          start: {
            line: 12,
            column: 35
          },
          end: {
            line: 70,
            column: 1
          }
        },
        line: 12
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 18,
            column: 27
          },
          end: {
            line: 18,
            column: 28
          }
        },
        loc: {
          start: {
            line: 18,
            column: 33
          },
          end: {
            line: 68,
            column: 5
          }
        },
        line: 18
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 25,
            column: 35
          },
          end: {
            line: 25,
            column: 36
          }
        },
        loc: {
          start: {
            line: 25,
            column: 47
          },
          end: {
            line: 66,
            column: 9
          }
        },
        line: 25
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 24,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 20
      },
      "1": {
        loc: {
          start: {
            line: 42,
            column: 16
          },
          end: {
            line: 45,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 16
          },
          end: {
            line: 45,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "2": {
        loc: {
          start: {
            line: 44,
            column: 36
          },
          end: {
            line: 44,
            column: 96
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 44,
            column: 36
          },
          end: {
            line: 44,
            column: 57
          }
        }, {
          start: {
            line: 44,
            column: 61
          },
          end: {
            line: 44,
            column: 96
          }
        }],
        line: 44
      },
      "3": {
        loc: {
          start: {
            line: 47,
            column: 31
          },
          end: {
            line: 55,
            column: 24
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 48,
            column: 22
          },
          end: {
            line: 54,
            column: 21
          }
        }, {
          start: {
            line: 55,
            column: 22
          },
          end: {
            line: 55,
            column: 24
          }
        }],
        line: 47
      },
      "4": {
        loc: {
          start: {
            line: 61,
            column: 25
          },
          end: {
            line: 61,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 61,
            column: 48
          },
          end: {
            line: 61,
            column: 51
          }
        }, {
          start: {
            line: 61,
            column: 54
          },
          end: {
            line: 61,
            column: 92
          }
        }],
        line: 61
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/kevin/card-show-finder/src/hooks/useUserSubscriptions.ts",
      mappings: ";;;AAAA,oCAAoC;AACpC,iCAA4C;AAC5C,0CAAuC;AACvC,yDAAkD;AAElD;;;GAGG;AACI,MAAM,oBAAoB,GAAG,GAAG,EAAE;IACvC,MAAM,CAAC,aAAa,EAAE,gBAAgB,CAAC,GAAG,IAAA,gBAAQ,EAAQ,EAAE,CAAC,CAAC;IAC9D,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,IAAA,gBAAQ,EAAU,IAAI,CAAC,CAAC;IAC1D,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,IAAA,gBAAQ,EAAe,IAAI,CAAC,CAAC;IACvD,MAAM,EAAE,SAAS,EAAE,GAAG,IAAA,qBAAO,GAAE,CAAC;IAChC,MAAM,EAAE,IAAI,EAAE,GAAG,SAAS,CAAC;IAE3B,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,0DAA0D;QAC1D,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,gBAAgB,CAAC,EAAE,CAAC,CAAC;YACrB,YAAY,CAAC,KAAK,CAAC,CAAC;YACpB,OAAO;QACT,CAAC;QAED,MAAM,kBAAkB,GAAG,KAAK,IAAI,EAAE;YACpC,IAAI,CAAC;gBACH,YAAY,CAAC,IAAI,CAAC,CAAC;gBACnB,QAAQ,CAAC,IAAI,CAAC,CAAC;gBAEf,OAAO,CAAC,GAAG,CAAC,yDAAyD,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;gBAEhF;;;;;oFAKoE;gBACpE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,aAAa,EAAE,GAAG,MAAM,mBAAQ;qBAClD,IAAI,CAAC,UAAU,CAAC;qBAChB,MAAM,CAAC,wDAAwD,CAAC;qBAChE,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC;qBACjB,MAAM,EAAE,CAAC;gBAEZ,wBAAwB;gBACxB,IAAI,aAAa,EAAE,CAAC;oBAClB,OAAO,CAAC,KAAK,CAAC,sDAAsD,EAAE,aAAa,CAAC,CAAC;oBACrF,MAAM,IAAI,KAAK,CAAC,aAAa,CAAC,OAAO,IAAI,mCAAmC,CAAC,CAAC;gBAChF,CAAC;gBAED,wDAAwD;gBACxD,MAAM,MAAM,GAAG,IAAI;oBACjB,CAAC,CAAC;wBACE;4BACE,MAAM,EAAE,IAAI,CAAC,mBAAmB;4BAChC,MAAM,EAAE,IAAI,CAAC,mBAAmB;4BAChC,WAAW,EAAE,IAAI,CAAC,YAAY;yBAC/B;qBACF;oBACH,CAAC,CAAC,EAAE,CAAC;gBAEP,gBAAgB,CAAC,MAAM,CAAC,CAAC;gBACzB,OAAO,CAAC,GAAG,CAAC,+CAA+C,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;YAC9E,CAAC;YAAC,OAAO,GAAG,EAAE,CAAC;gBACb,OAAO,CAAC,KAAK,CAAC,0CAA0C,EAAE,GAAG,CAAC,CAAC;gBAC/D,QAAQ,CAAC,GAAG,YAAY,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC,CAAC;YAChF,CAAC;oBAAS,CAAC;gBACT,YAAY,CAAC,KAAK,CAAC,CAAC;YACtB,CAAC;QACH,CAAC,CAAC;QAEF,kBAAkB,EAAE,CAAC;IACvB,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,6BAA6B;IAEzC,OAAO,EAAE,aAAa,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;AAC7C,CAAC,CAAC;AAjEW,QAAA,oBAAoB,wBAiE/B",
      names: [],
      sources: ["/Users/kevin/card-show-finder/src/hooks/useUserSubscriptions.ts"],
      sourcesContent: ["// src/hooks/useUserSubscriptions.ts\nimport { useState, useEffect } from 'react';\nimport { supabase } from '../supabase';\nimport { useAuth } from '../contexts/AuthContext';\n\n/**\n * Custom hook to fetch user subscription data with proper loading and error handling\n * @returns Object containing subscriptions array, loading state, and error state\n */\nexport const useUserSubscriptions = () => {\n  const [subscriptions, setSubscriptions] = useState<any[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [error, setError] = useState<Error | null>(null);\n  const { authState } = useAuth();\n  const { user } = authState;\n\n  useEffect(() => {\n    // Don't attempt to fetch if there's no authenticated user\n    if (!user) {\n      setSubscriptions([]);\n      setIsLoading(false);\n      return;\n    }\n\n    const fetchSubscriptions = async () => {\n      try {\n        setIsLoading(true);\n        setError(null);\n\n        console.log('[useUserSubscriptions] Fetching subscriptions for user:', user.id);\n\n        /* --------------------------------------------------------------\n         * Subscription info lives in the `profiles` table, not a separate\n         * `user_subscriptions` table. We fetch the three relevant columns\n         * and map them to an array with one element so existing screens\n         * that expect `subscriptions.find(...)` keep working.\n         * -------------------------------------------------------------- */\n        const { data, error: supabaseError } = await supabase\n          .from('profiles')\n          .select('subscription_status, subscription_expiry, account_type')\n          .eq('id', user.id)\n          .single();\n\n        // Handle Supabase error\n        if (supabaseError) {\n          console.error('[useUserSubscriptions] Error fetching subscriptions:', supabaseError);\n          throw new Error(supabaseError.message || 'Failed to fetch subscription data');\n        }\n\n        // Map the profile row into the shape expected by the UI\n        const mapped = data\n          ? [\n              {\n                status: data.subscription_status,\n                expiry: data.subscription_expiry,\n                accountType: data.account_type,\n              },\n            ]\n          : [];\n\n        setSubscriptions(mapped);\n        console.log('[useUserSubscriptions] Fetched subscriptions:', mapped.length);\n      } catch (err) {\n        console.error('[useUserSubscriptions] Unexpected error:', err);\n        setError(err instanceof Error ? err : new Error('An unknown error occurred'));\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchSubscriptions();\n  }, [user]); // Re-fetch when user changes\n\n  return { subscriptions, isLoading, error };\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8e2a1ee1206ac6b98c53ef20291c9137f5ada1d0"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_21wbpfmr70 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_21wbpfmr70();
cov_21wbpfmr70().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_21wbpfmr70().s[1]++;
exports.useUserSubscriptions = void 0;
// src/hooks/useUserSubscriptions.ts
const react_1 =
/* istanbul ignore next */
(cov_21wbpfmr70().s[2]++, require("react"));
const supabase_1 =
/* istanbul ignore next */
(cov_21wbpfmr70().s[3]++, require("../supabase"));
const AuthContext_1 =
/* istanbul ignore next */
(cov_21wbpfmr70().s[4]++, require("../contexts/AuthContext"));
/**
 * Custom hook to fetch user subscription data with proper loading and error handling
 * @returns Object containing subscriptions array, loading state, and error state
 */
/* istanbul ignore next */
cov_21wbpfmr70().s[5]++;
const useUserSubscriptions = () => {
  /* istanbul ignore next */
  cov_21wbpfmr70().f[0]++;
  const [subscriptions, setSubscriptions] =
  /* istanbul ignore next */
  (cov_21wbpfmr70().s[6]++, (0, react_1.useState)([]));
  const [isLoading, setIsLoading] =
  /* istanbul ignore next */
  (cov_21wbpfmr70().s[7]++, (0, react_1.useState)(true));
  const [error, setError] =
  /* istanbul ignore next */
  (cov_21wbpfmr70().s[8]++, (0, react_1.useState)(null));
  const {
    authState
  } =
  /* istanbul ignore next */
  (cov_21wbpfmr70().s[9]++, (0, AuthContext_1.useAuth)());
  const {
    user
  } =
  /* istanbul ignore next */
  (cov_21wbpfmr70().s[10]++, authState);
  /* istanbul ignore next */
  cov_21wbpfmr70().s[11]++;
  (0, react_1.useEffect)(() => {
    /* istanbul ignore next */
    cov_21wbpfmr70().f[1]++;
    cov_21wbpfmr70().s[12]++;
    // Don't attempt to fetch if there's no authenticated user
    if (!user) {
      /* istanbul ignore next */
      cov_21wbpfmr70().b[0][0]++;
      cov_21wbpfmr70().s[13]++;
      setSubscriptions([]);
      /* istanbul ignore next */
      cov_21wbpfmr70().s[14]++;
      setIsLoading(false);
      /* istanbul ignore next */
      cov_21wbpfmr70().s[15]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_21wbpfmr70().b[0][1]++;
    }
    cov_21wbpfmr70().s[16]++;
    const fetchSubscriptions = async () => {
      /* istanbul ignore next */
      cov_21wbpfmr70().f[2]++;
      cov_21wbpfmr70().s[17]++;
      try {
        /* istanbul ignore next */
        cov_21wbpfmr70().s[18]++;
        setIsLoading(true);
        /* istanbul ignore next */
        cov_21wbpfmr70().s[19]++;
        setError(null);
        /* istanbul ignore next */
        cov_21wbpfmr70().s[20]++;
        console.log('[useUserSubscriptions] Fetching subscriptions for user:', user.id);
        /* --------------------------------------------------------------
         * Subscription info lives in the `profiles` table, not a separate
         * `user_subscriptions` table. We fetch the three relevant columns
         * and map them to an array with one element so existing screens
         * that expect `subscriptions.find(...)` keep working.
         * -------------------------------------------------------------- */
        const {
          data,
          error: supabaseError
        } =
        /* istanbul ignore next */
        (cov_21wbpfmr70().s[21]++, await supabase_1.supabase.from('profiles').select('subscription_status, subscription_expiry, account_type').eq('id', user.id).single());
        // Handle Supabase error
        /* istanbul ignore next */
        cov_21wbpfmr70().s[22]++;
        if (supabaseError) {
          /* istanbul ignore next */
          cov_21wbpfmr70().b[1][0]++;
          cov_21wbpfmr70().s[23]++;
          console.error('[useUserSubscriptions] Error fetching subscriptions:', supabaseError);
          /* istanbul ignore next */
          cov_21wbpfmr70().s[24]++;
          throw new Error(
          /* istanbul ignore next */
          (cov_21wbpfmr70().b[2][0]++, supabaseError.message) ||
          /* istanbul ignore next */
          (cov_21wbpfmr70().b[2][1]++, 'Failed to fetch subscription data'));
        } else
        /* istanbul ignore next */
        {
          cov_21wbpfmr70().b[1][1]++;
        }
        // Map the profile row into the shape expected by the UI
        const mapped =
        /* istanbul ignore next */
        (cov_21wbpfmr70().s[25]++, data ?
        /* istanbul ignore next */
        (cov_21wbpfmr70().b[3][0]++, [{
          status: data.subscription_status,
          expiry: data.subscription_expiry,
          accountType: data.account_type
        }]) :
        /* istanbul ignore next */
        (cov_21wbpfmr70().b[3][1]++, []));
        /* istanbul ignore next */
        cov_21wbpfmr70().s[26]++;
        setSubscriptions(mapped);
        /* istanbul ignore next */
        cov_21wbpfmr70().s[27]++;
        console.log('[useUserSubscriptions] Fetched subscriptions:', mapped.length);
      } catch (err) {
        /* istanbul ignore next */
        cov_21wbpfmr70().s[28]++;
        console.error('[useUserSubscriptions] Unexpected error:', err);
        /* istanbul ignore next */
        cov_21wbpfmr70().s[29]++;
        setError(err instanceof Error ?
        /* istanbul ignore next */
        (cov_21wbpfmr70().b[4][0]++, err) :
        /* istanbul ignore next */
        (cov_21wbpfmr70().b[4][1]++, new Error('An unknown error occurred')));
      } finally {
        /* istanbul ignore next */
        cov_21wbpfmr70().s[30]++;
        setIsLoading(false);
      }
    };
    /* istanbul ignore next */
    cov_21wbpfmr70().s[31]++;
    fetchSubscriptions();
  }, [user]); // Re-fetch when user changes
  /* istanbul ignore next */
  cov_21wbpfmr70().s[32]++;
  return {
    subscriptions,
    isLoading,
    error
  };
};
/* istanbul ignore next */
cov_21wbpfmr70().s[33]++;
exports.useUserSubscriptions = useUserSubscriptions;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,