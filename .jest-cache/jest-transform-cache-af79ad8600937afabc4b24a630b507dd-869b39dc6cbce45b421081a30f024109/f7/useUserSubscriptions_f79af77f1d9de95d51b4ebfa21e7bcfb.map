{"version":3,"names":["cov_21wbpfmr70","actualCoverage","s","react_1","require","supabase_1","AuthContext_1","useUserSubscriptions","f","subscriptions","setSubscriptions","useState","isLoading","setIsLoading","error","setError","authState","useAuth","user","useEffect","b","fetchSubscriptions","console","log","id","data","supabaseError","supabase","from","select","eq","single","Error","message","mapped","status","subscription_status","expiry","subscription_expiry","accountType","account_type","length","err","exports"],"sources":["/Users/kevin/card-show-finder/src/hooks/useUserSubscriptions.ts"],"sourcesContent":["// src/hooks/useUserSubscriptions.ts\nimport { useState, useEffect } from 'react';\nimport { supabase } from '../supabase';\nimport { useAuth } from '../contexts/AuthContext';\n\n/**\n * Custom hook to fetch user subscription data with proper loading and error handling\n * @returns Object containing subscriptions array, loading state, and error state\n */\nexport const useUserSubscriptions = () => {\n  const [subscriptions, setSubscriptions] = useState<any[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [error, setError] = useState<Error | null>(null);\n  const { authState } = useAuth();\n  const { user } = authState;\n\n  useEffect(() => {\n    // Don't attempt to fetch if there's no authenticated user\n    if (!user) {\n      setSubscriptions([]);\n      setIsLoading(false);\n      return;\n    }\n\n    const fetchSubscriptions = async () => {\n      try {\n        setIsLoading(true);\n        setError(null);\n\n        console.log('[useUserSubscriptions] Fetching subscriptions for user:', user.id);\n\n        /* --------------------------------------------------------------\n         * Subscription info lives in the `profiles` table, not a separate\n         * `user_subscriptions` table. We fetch the three relevant columns\n         * and map them to an array with one element so existing screens\n         * that expect `subscriptions.find(...)` keep working.\n         * -------------------------------------------------------------- */\n        const { data, error: supabaseError } = await supabase\n          .from('profiles')\n          .select('subscription_status, subscription_expiry, account_type')\n          .eq('id', user.id)\n          .single();\n\n        // Handle Supabase error\n        if (supabaseError) {\n          console.error('[useUserSubscriptions] Error fetching subscriptions:', supabaseError);\n          throw new Error(supabaseError.message || 'Failed to fetch subscription data');\n        }\n\n        // Map the profile row into the shape expected by the UI\n        const mapped = data\n          ? [\n              {\n                status: data.subscription_status,\n                expiry: data.subscription_expiry,\n                accountType: data.account_type,\n              },\n            ]\n          : [];\n\n        setSubscriptions(mapped);\n        console.log('[useUserSubscriptions] Fetched subscriptions:', mapped.length);\n      } catch (err) {\n        console.error('[useUserSubscriptions] Unexpected error:', err);\n        setError(err instanceof Error ? err : new Error('An unknown error occurred'));\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchSubscriptions();\n  }, [user]); // Re-fetch when user changes\n\n  return { subscriptions, isLoading, error };\n};\n"],"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","ignoreList":[]}