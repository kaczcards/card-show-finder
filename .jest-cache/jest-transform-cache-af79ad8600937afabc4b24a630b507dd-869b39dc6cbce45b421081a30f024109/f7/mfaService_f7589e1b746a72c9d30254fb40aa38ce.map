{"version":3,"names":["supabase","MFAService","_classCallCheck","cov_7p9bcyhz4","f","supabaseUrl","s","b","auth","url","baseUrl","replace","_createClass","key","value","_startEnrollment","_asyncToGenerator","_ref","callMFAEndpoint","data","error","Error","message","console","startEnrollment","apply","arguments","_verifySetup","code","challengeId","_ref2","verifySetup","_x","_x2","_authenticate","userId","sessionId","_ref3","authenticate","_x3","_x4","_x5","_validateRecoveryCode","_ref4","validateRecoveryCode","_x6","_x7","_x8","_disableMFA","_ref5","disableMFA","_x9","_getMFAStatus","_ref6","getMFAStatus","_regenerateRecoveryCodes","_ref7","regenerateRecoveryCodes","_x0","_isMFARequired","_ref8","from","select","eq","single","profile","mfa_enabled","mfa_verified","isMFARequired","_x1","_callMFAEndpoint","endpoint","body","length","undefined","method","_ref9","getSession","session","headers","access_token","response","fetch","JSON","stringify","ok","errorData","json","status","_x10","mfaService"],"sources":["mfaService.ts"],"sourcesContent":["import { supabase } from \"../lib/supabase\";\n\n/**\n * MFA enrollment response\n */\nexport interface MFAEnrollmentResponse {\n  secret: string;\n  qrCode: string;\n  challengeId: string;\n  algorithm: string;\n  digits: number;\n  period: number;\n}\n\n/**\n * MFA verification response\n */\nexport interface MFAVerificationResponse {\n  success: boolean;\n  recoveryCodes: string[];\n  message: string;\n}\n\n/**\n * MFA authentication response\n */\nexport interface MFAAuthenticationResponse {\n  success: boolean;\n  message: string;\n  sessionId?: string;\n}\n\n/**\n * MFA recovery code validation response\n */\nexport interface MFARecoveryResponse {\n  success: boolean;\n  message: string;\n  sessionId?: string;\n  recoveryCodesRemaining: number;\n}\n\n/**\n * MFA status response\n */\nexport interface MFAStatusResponse {\n  mfaEnabled: boolean;\n  mfaVerified: boolean;\n  enrollmentTime: string | null;\n  recoveryCodesRemaining: number;\n}\n\n/**\n * MFA service for managing Multi-Factor Authentication\n */\nexport class MFAService {\n  private readonly baseUrl: string;\n\n  /**\n   * Constructor\n   */\n  constructor() {\n    // Get the Supabase URL from the client\n    const supabaseUrl = supabase.auth.url() || \"\";\n    // Replace the auth part with functions\n    this.baseUrl = supabaseUrl.replace(\"/auth/v1\", \"/functions/v1/mfa\");\n  }\n\n  /**\n   * Start MFA enrollment process\n   * @returns MFA enrollment data including secret and QR code\n   */\n  async startEnrollment(): Promise<MFAEnrollmentResponse> {\n    try {\n      const { data, error } = await this.callMFAEndpoint<MFAEnrollmentResponse>(\"enroll\", {}, \"GET\");\n      \n      if (error) {\n        throw new Error(error.message);\n      }\n      \n      return data;\n    } catch (error) {\n      console.error(\"Failed to start MFA enrollment:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Verify MFA setup with a TOTP code\n   * @param code - The TOTP code from the authenticator app\n   * @param challengeId - The challenge ID from enrollment\n   * @returns Verification result with recovery codes\n   */\n  async verifySetup(code: string, challengeId: string): Promise<MFAVerificationResponse> {\n    try {\n      const { data, error } = await this.callMFAEndpoint<MFAVerificationResponse>(\"verify\", {\n        code,\n        challengeId\n      });\n      \n      if (error) {\n        throw new Error(error.message);\n      }\n      \n      return data;\n    } catch (error) {\n      console.error(\"Failed to verify MFA setup:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Authenticate with MFA during login\n   * @param code - The TOTP code from the authenticator app\n   * @param userId - The user ID to authenticate\n   * @param sessionId - Optional session ID for tracking\n   * @returns Authentication result\n   */\n  async authenticate(code: string, userId: string, sessionId?: string): Promise<MFAAuthenticationResponse> {\n    try {\n      const { data, error } = await this.callMFAEndpoint<MFAAuthenticationResponse>(\"authenticate\", {\n        code,\n        userId,\n        sessionId\n      });\n      \n      if (error) {\n        throw new Error(error.message);\n      }\n      \n      return data;\n    } catch (error) {\n      console.error(\"Failed to authenticate with MFA:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Validate a recovery code\n   * @param code - The recovery code\n   * @param userId - The user ID\n   * @param sessionId - Optional session ID for tracking\n   * @returns Validation result\n   */\n  async validateRecoveryCode(code: string, userId: string, sessionId?: string): Promise<MFARecoveryResponse> {\n    try {\n      const { data, error } = await this.callMFAEndpoint<MFARecoveryResponse>(\"validate-recovery\", {\n        code,\n        userId,\n        sessionId\n      });\n      \n      if (error) {\n        throw new Error(error.message);\n      }\n      \n      return data;\n    } catch (error) {\n      console.error(\"Failed to validate recovery code:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Disable MFA for the current user\n   * @param code - Optional TOTP code for verification (required for non-admin users)\n   * @returns Result of the operation\n   */\n  async disableMFA(code?: string): Promise<{ success: boolean; message: string }> {\n    try {\n      const { data, error } = await this.callMFAEndpoint<{ success: boolean; message: string }>(\"disable\", {\n        code\n      });\n      \n      if (error) {\n        throw new Error(error.message);\n      }\n      \n      return data;\n    } catch (error) {\n      console.error(\"Failed to disable MFA:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get the current MFA status\n   * @returns MFA status information\n   */\n  async getMFAStatus(): Promise<MFAStatusResponse> {\n    try {\n      const { data, error } = await this.callMFAEndpoint<MFAStatusResponse>(\"status\", {}, \"GET\");\n      \n      if (error) {\n        throw new Error(error.message);\n      }\n      \n      return data;\n    } catch (error) {\n      console.error(\"Failed to get MFA status:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Regenerate recovery codes\n   * @param code - TOTP code for verification\n   * @returns New recovery codes\n   */\n  async regenerateRecoveryCodes(code: string): Promise<MFAVerificationResponse> {\n    try {\n      const { data, error } = await this.callMFAEndpoint<MFAVerificationResponse>(\"regenerate-recovery-codes\", {\n        code\n      });\n      \n      if (error) {\n        throw new Error(error.message);\n      }\n      \n      return data;\n    } catch (error) {\n      console.error(\"Failed to regenerate recovery codes:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Check if MFA is required for a user\n   * @param userId - User ID to check\n   * @returns Whether MFA is required\n   */\n  async isMFARequired(userId: string): Promise<boolean> {\n    try {\n      // Get user profile to check if MFA is enabled\n      const { data: profile, error } = await supabase\n        .from(\"profiles\")\n        .select(\"mfa_enabled, mfa_verified\")\n        .eq(\"id\", userId)\n        .single();\n      \n      if (error) {\n        throw new Error(error.message);\n      }\n      \n      return profile?.mfa_enabled && profile?.mfa_verified;\n    } catch (error) {\n      console.error(\"Failed to check if MFA is required:\", error);\n      return false; // Default to not requiring MFA on error\n    }\n  }\n\n  /**\n   * Call an MFA endpoint\n   * @param endpoint - Endpoint to call\n   * @param body - Request body\n   * @param method - HTTP method\n   * @returns Response data and error\n   */\n  private async callMFAEndpoint<T>(\n    endpoint: string,\n    body: Record<string, any> = {},\n    method: \"GET\" | \"POST\" = \"POST\"\n  ): Promise<{ data: T; error: Error | null }> {\n    try {\n      // Get the current session\n      const { data: { session } } = await supabase.auth.getSession();\n      \n      if (!session) {\n        throw new Error(\"No active session\");\n      }\n      \n      const url = `${this.baseUrl}/${endpoint}`;\n      const headers = {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${session.access_token}`\n      };\n      \n      let response;\n      if (method === \"GET\") {\n        response = await fetch(url, { headers, method });\n      } else {\n        response = await fetch(url, {\n          method,\n          headers,\n          body: JSON.stringify(body)\n        });\n      }\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `HTTP error ${response.status}`);\n      }\n      \n      const data = await response.json();\n      return { data: data as T, error: null };\n    } catch (error) {\n      return { data: {} as T, error: error as Error };\n    }\n  }\n}\n\n// Export a singleton instance\nexport const mfaService = new MFAService();\n"],"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","ignoreList":[]}