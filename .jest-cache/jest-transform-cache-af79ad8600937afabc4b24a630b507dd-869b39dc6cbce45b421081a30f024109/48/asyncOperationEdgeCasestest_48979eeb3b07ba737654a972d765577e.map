{"version":3,"names":["mockStorage","_data","Map","setItem","jest","fn","key","value","Promise","resolve","reject","Math","random","Error","setTimeout","set","getItem","get","removeItem","delete","clear","getAllKeys","Array","from","keys","MockEventEmitter","_classCallCheck2","default","listeners","_createClass2","addListener","event","listener","_this","has","push","remove","removeListener","eventListeners","index","indexOf","splice","removeAllListeners","emit","_len","arguments","length","args","_key","forEach","apply","e","console","error","describe","consoleErrorSpy","consoleWarnSpy","beforeEach","clearAllMocks","spyOn","mockImplementation","afterEach","mockRestore","useRealTimers","test","_asyncToGenerator2","initialData","JSON","stringify","theme","notifications","update1","_ref2","data","parse","update2","_ref3","_yield$Promise$all","all","_yield$Promise$all2","_slicedToArray2","result1","result2","expect","not","toEqual","finalValue","objectContaining","any","String","Boolean","toBe","currentVersion","currentValue","getWithVersion","version","setWithVersion","_ref6","k","valueStr","_x","_x2","incrementWithRetry","_ref7","maxRetries","undefined","retries","dataStr","newData","r","results","allSettled","every","status","eventEmitter","mockCallback","subscription","toHaveBeenCalledWith","mockClear","toHaveBeenCalled","useFakeTimers","timerId","clearTimeout","advanceTimersByTime","abortController","AbortController","signal","longRunningOperation","checkAbort","aborted","intervalId","setInterval","clearInterval","operationPromise","abort","rejects","toThrow","processData","_ref0","_validatedData","_transformedData","_savedData","Object","assign","saved","_x3","innerOperation","_ref10","middleOperation","_ref11","message","outerOperation","_ref12","fetchWithFallback","_ref14","url","fallback","_x4","_x5","result","timeoutPromise","ms","_","slowOperation","racePromise","race","operationWithTimeout","_ref17","operation","timeoutMs","timeoutError","timeoutId","finally","_x6","_x7","doNotFake","operation1","operation2","operation3","reason","concurrencyLimit","activeOperations","maxConcurrentOperations","_ref20","id","max","_x8","runWithConcurrencyLimit","_ref21","operations","limit","executing","_loop","_operation","p","then","_x9","_x0","fill","map","i","toBeLessThanOrEqual","op","successResults","filter","priorityQueue","priority","sort","a","b","executionOrder","_results","item","deeplyNested","level1","level2","level3","level4","level5","retrieved","hasCircularReference","obj","seen","WeakSet","visit","add","values","some","cyclic","name","self","acyclic","specialCharsObject","emoji","arabic","chinese","russian","japanese","korean","thai","specialChars","escapeChars","malformedJSON","SyntaxError","safeParse","json","step1","_ref28","step2","_ref29","step3","_ref30","_ref32","_ref33","_ref34","createAppError","code","context","executeOperation","_ref36","appError","_x1","fail","executeAll","_ref38","ops","successes","failures","_x10","attempts","maxAttempts","unreliableOperation","withRetry","_ref40","_lastError","lastError","attempt","warn","_x11","_x12","toHaveBeenCalledTimes","networkError","validationError","callCount","withConditionalRetry","_ref42","shouldRetry","_x13","_x14","_x15","largeArray","processInChunks","_ref44","items","chunkSize","processor","chunk","slice","chunkResults","_toConsumableArray2","_x16","_x17","_x18","processItems","_ref45","processed","_x19","expensiveCalculation","sqrt","memoize","cache","_len2","_key2","memoizedCalculation","result3","result4"],"sources":["asyncOperationEdgeCases.test.ts"],"sourcesContent":["/**\n * Edge Cases and Async Operations Test Suite\n * \n * This test suite focuses on testing edge cases related to asynchronous operations\n * using pure JavaScript/TypeScript patterns, including race conditions, memory management,\n * promise chains, timeouts, concurrent operations, and error handling patterns.\n */\n\n// Simple mock for AsyncStorage-like functionality\nconst mockStorage = {\n  _data: new Map<string, string>(),\n  setItem: jest.fn((key: string, value: string) => {\n    return new Promise<void>((resolve, reject) => {\n      // Simulate occasional failures but with low probability to keep tests stable\n      if (Math.random() < 0.05) {\n        reject(new Error('Storage error'));\n        return;\n      }\n      \n      setTimeout(() => {\n        mockStorage._data.set(key, value);\n        resolve();\n      }, 1); // Very short delay to avoid test timeouts\n    });\n  }),\n  getItem: jest.fn((key: string) => {\n    return new Promise<string | null>((resolve) => {\n      setTimeout(() => {\n        resolve(mockStorage._data.get(key) || null);\n      }, 1); // Very short delay to avoid test timeouts\n    });\n  }),\n  removeItem: jest.fn((key: string) => {\n    return new Promise<void>((resolve) => {\n      setTimeout(() => {\n        mockStorage._data.delete(key);\n        resolve();\n      }, 1);\n    });\n  }),\n  clear: jest.fn(() => {\n    return new Promise<void>((resolve) => {\n      mockStorage._data.clear();\n      resolve();\n    });\n  }),\n  getAllKeys: jest.fn(() => {\n    return new Promise<string[]>((resolve) => {\n      resolve(Array.from(mockStorage._data.keys()));\n    });\n  })\n};\n\n// Mock for EventEmitter\nclass MockEventEmitter {\n  private listeners: Map<string, Array<(...args: any[]) => void>> = new Map();\n  \n  addListener(event: string, listener: (...args: any[]) => void) {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, []);\n    }\n    this.listeners.get(event)!.push(listener);\n    return {\n      remove: () => this.removeListener(event, listener)\n    };\n  }\n  \n  removeListener(event: string, listener: (...args: any[]) => void) {\n    if (!this.listeners.has(event)) return;\n    \n    const eventListeners = this.listeners.get(event)!;\n    const index = eventListeners.indexOf(listener);\n    if (index !== -1) {\n      eventListeners.splice(index, 1);\n    }\n  }\n  \n  removeAllListeners(event?: string) {\n    if (event) {\n      this.listeners.delete(event);\n    } else {\n      this.listeners.clear();\n    }\n  }\n  \n  emit(event: string, ...args: any[]) {\n    if (!this.listeners.has(event)) return false;\n    \n    const eventListeners = this.listeners.get(event)!;\n    eventListeners.forEach(listener => {\n      try {\n        listener(...args);\n      } catch (e) {\n        console.error('Error in event listener:', e);\n      }\n    });\n    return true;\n  }\n}\n\ndescribe('Edge Cases and Async Operations', () => {\n  // Spy on console methods to prevent noise in test output\n  let consoleErrorSpy: jest.SpyInstance;\n  let consoleWarnSpy: jest.SpyInstance;\n  \n  // Setup before each test\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Spy on console methods\n    consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation(() => {});\n    consoleWarnSpy = jest.spyOn(console, 'warn').mockImplementation(() => {});\n    \n    // Clear mock storage\n    mockStorage._data.clear();\n  });\n  \n  // Cleanup after each test\n  afterEach(() => {\n    consoleErrorSpy.mockRestore();\n    consoleWarnSpy.mockRestore();\n    jest.useRealTimers();\n  });\n\n  describe('Race Conditions', () => {\n    test('should handle multiple concurrent storage operations on the same key', async () => {\n      // Arrange\n      const key = 'user_preferences';\n      const initialData = JSON.stringify({ theme: 'light', notifications: true });\n      \n      // Set initial data\n      await mockStorage.setItem(key, initialData);\n      \n      // Act - Simulate two concurrent updates\n      const update1 = async () => {\n        const data = JSON.parse(await mockStorage.getItem(key) || '{}');\n        data.theme = 'dark';\n        await mockStorage.setItem(key, JSON.stringify(data));\n        return data;\n      };\n      \n      const update2 = async () => {\n        const data = JSON.parse(await mockStorage.getItem(key) || '{}');\n        data.notifications = false;\n        await mockStorage.setItem(key, JSON.stringify(data));\n        return data;\n      };\n      \n      // Run both updates concurrently\n      const [result1, result2] = await Promise.all([update1(), update2()]);\n      \n      // Assert\n      // One update will overwrite the other due to race condition\n      expect(result1).not.toEqual(result2);\n      \n      // The final stored value will be from whichever operation completed last\n      const finalValue = JSON.parse(await mockStorage.getItem(key) || '{}');\n      expect(finalValue).toEqual(expect.objectContaining({\n        theme: expect.any(String),\n        notifications: expect.any(Boolean),\n      }));\n      \n      // Only one property was updated in each result\n      expect(result1.theme).toBe('dark');\n      expect(result2.notifications).toBe(false);\n    });\n    \n    test('should implement optimistic locking to prevent race conditions', async () => {\n      // Arrange\n      const key = 'counter';\n      let currentVersion = 1;\n      let currentValue = 0;\n      \n      // Mock storage with version checking\n      const getWithVersion = jest.fn(async () => {\n        return JSON.stringify({ value: currentValue, version: currentVersion });\n      });\n      \n      const setWithVersion = jest.fn(async (k: string, valueStr: string) => {\n        const data = JSON.parse(valueStr);\n        \n        // Simulate optimistic locking - only update if versions match\n        if (data.version === currentVersion) {\n          currentValue = data.value;\n          currentVersion++;\n          return;\n        } else {\n          throw new Error('Version mismatch - data was modified by another process');\n        }\n      });\n      \n      // Function to increment with retry logic\n      const incrementWithRetry = async (maxRetries = 3): Promise<number> => {\n        let retries = 0;\n        \n        while (retries < maxRetries) {\n          try {\n            // Get current data\n            const dataStr = await getWithVersion(key);\n            const data = JSON.parse(dataStr || '{\"value\":0,\"version\":1}');\n            \n            // Update with current version\n            const newData = {\n              value: data.value + 1,\n              version: data.version\n            };\n            \n            // Try to save\n            await setWithVersion(key, JSON.stringify(newData));\n            return newData.value;\n          } catch (error) {\n            retries++;\n            if (retries >= maxRetries) {\n              throw error;\n            }\n            // Wait before retrying (very short delay for tests)\n            await new Promise(r => setTimeout(r, 1));\n          }\n        }\n        \n        throw new Error('Failed after max retries');\n      };\n      \n      // Act - Run multiple increments in parallel\n      const results = await Promise.allSettled([\n        incrementWithRetry(),\n        incrementWithRetry(),\n        incrementWithRetry()\n      ]);\n      \n      // Assert\n      // All operations should eventually succeed with retries\n      expect(results.every(r => r.status === 'fulfilled')).toBe(true);\n      \n      // Final value should be incremented by the number of operations\n      expect(currentValue).toBe(3);\n      \n      // Version should be incremented for each successful update\n      expect(currentVersion).toBe(4); // Started at 1, then 3 successful updates\n    });\n  });\n\n  describe('Memory Management', () => {\n    test('should properly cleanup event listeners when component unmounts', () => {\n      // Arrange\n      const eventEmitter = new MockEventEmitter();\n      const mockCallback = jest.fn();\n      \n      // Act - Simulate component lifecycle\n      // Setup phase (componentDidMount)\n      const subscription = eventEmitter.addListener('dataChange', mockCallback);\n      \n      // Verify listener is working\n      eventEmitter.emit('dataChange', { value: 'test' });\n      expect(mockCallback).toHaveBeenCalledWith({ value: 'test' });\n      \n      // Cleanup phase (componentWillUnmount)\n      subscription.remove();\n      \n      // Verify listener is removed\n      mockCallback.mockClear();\n      eventEmitter.emit('dataChange', { value: 'test2' });\n      expect(mockCallback).not.toHaveBeenCalled();\n    });\n    \n    test('should cancel timers to prevent memory leaks', () => {\n      // Arrange\n      jest.useFakeTimers();\n      const mockCallback = jest.fn();\n      \n      // Act - Simulate component with timer\n      const timerId = setTimeout(mockCallback, 50);\n      \n      // Simulate component unmount - cleanup timers\n      clearTimeout(timerId);\n      \n      // Fast-forward time\n      jest.advanceTimersByTime(100);\n      \n      // Assert\n      expect(mockCallback).not.toHaveBeenCalled();\n    });\n    \n    test('should handle abandoned promises that could cause memory leaks', async () => {\n      // Arrange\n      jest.useFakeTimers();\n      const abortController = new AbortController();\n      const { signal } = abortController;\n      \n      // Create a promise that checks for abort signal\n      const longRunningOperation = () => new Promise((resolve, reject) => {\n        const checkAbort = () => {\n          if (signal.aborted) {\n            reject(new Error('Operation aborted'));\n            return true;\n          }\n          return false;\n        };\n        \n        // Immediate check\n        if (checkAbort()) return;\n        \n        // Set up periodic checks with very short interval\n        const intervalId = setInterval(() => {\n          if (checkAbort()) {\n            clearInterval(intervalId);\n          }\n        }, 5);\n        \n        // Resolve after a short time if not aborted\n        setTimeout(() => {\n          clearInterval(intervalId);\n          resolve('Operation completed');\n        }, 10);\n      });\n      \n      // Act - Start a long running operation\n      const operationPromise = longRunningOperation();\n      \n      // Simulate component unmount - abort the operation\n      abortController.abort();\n      \n      // Fast-forward time to trigger interval checks\n      jest.advanceTimersByTime(5);\n      \n      // Assert\n      await expect(operationPromise).rejects.toThrow('Operation aborted');\n    });\n  });\n\n  describe('Promise Chain Failures', () => {\n    test('should handle errors in the middle of promise chains', async () => {\n      // Arrange\n      const processData = async (data: any) => {\n        // Step 1: Validate\n        const _validatedData = await Promise.resolve(data);\n        \n        // Step 2: Transform (will fail)\n        const _transformedData = await Promise.reject(new Error('Transform failed'));\n        \n        // Step 3: Save (should never execute)\n        const _savedData = await Promise.resolve({ ..._transformedData, saved: true });\n        \n        return _savedData;\n      };\n      \n      // Act & Assert\n      await expect(processData({ test: true })).rejects.toThrow('Transform failed');\n    });\n    \n    test('should handle errors in nested promise chains', async () => {\n      // Arrange\n      const innerOperation = async () => {\n        throw new Error('Inner operation failed');\n      };\n      \n      const middleOperation = async () => {\n        try {\n          return await innerOperation();\n        } catch (error) {\n          throw new Error(`Middle operation caught: ${(error as Error).message}`);\n        }\n      };\n      \n      const outerOperation = async () => {\n        try {\n          return await middleOperation();\n        } catch (error) {\n          throw new Error(`Outer operation caught: ${(error as Error).message}`);\n        }\n      };\n      \n      // Act & Assert\n      await expect(outerOperation()).rejects.toThrow(\n        'Outer operation caught: Middle operation caught: Inner operation failed'\n      );\n    });\n    \n    test('should recover from promise chain failures with fallback values', async () => {\n      // Arrange\n      const fetchWithFallback = async (url: string, fallback: any) => {\n        try {\n          throw new Error('Network error');\n        } catch (error) {\n          console.error('Error fetching data:', error);\n          return fallback;\n        }\n      };\n      \n      // Act\n      const result = await fetchWithFallback('https://api.example.com/data', { fallback: true });\n      \n      // Assert\n      expect(result).toEqual({ fallback: true });\n      expect(consoleErrorSpy).toHaveBeenCalled();\n    });\n  });\n\n  describe('Timeout Handling', () => {\n    test('should handle promise timeout with race pattern', async () => {\n      // Arrange\n      jest.useFakeTimers();\n      \n      const timeoutPromise = (ms: number) => {\n        return new Promise((_, reject) => {\n          setTimeout(() => reject(new Error(`Operation timed out after ${ms}ms`)), ms);\n        });\n      };\n      \n      const slowOperation = () => {\n        return new Promise(resolve => {\n          setTimeout(() => resolve('Success'), 20);\n        });\n      };\n      \n      // Act\n      const racePromise = Promise.race([slowOperation(), timeoutPromise(10)]);\n      \n      // Fast-forward time to trigger timeout\n      jest.advanceTimersByTime(10);\n      \n      // Assert\n      await expect(racePromise).rejects.toThrow('Operation timed out after 10ms');\n    });\n    \n    test('should implement custom timeout for async operations', async () => {\n      // Arrange\n      jest.useFakeTimers();\n      \n      const operationWithTimeout = async <T>(\n        operation: () => Promise<T>,\n        timeoutMs: number\n      ): Promise<T> => {\n        const timeoutError = new Error(`Operation timed out after ${timeoutMs}ms`);\n        \n        let timeoutId: NodeJS.Timeout;\n        const timeoutPromise = new Promise<never>((_, reject) => {\n          timeoutId = setTimeout(() => reject(timeoutError), timeoutMs);\n        });\n        \n        return Promise.race([\n          operation(),\n          timeoutPromise\n        ]).finally(() => {\n          clearTimeout(timeoutId);\n        });\n      };\n      \n      // A slow operation that would take too long\n      const slowOperation = () => new Promise<string>(resolve => {\n        setTimeout(() => resolve('Success'), 20);\n      });\n      \n      // Act\n      const operationPromise = operationWithTimeout(() => slowOperation(), 10);\n      \n      // Fast-forward time to trigger timeout\n      jest.advanceTimersByTime(10);\n      \n      // Assert\n      await expect(operationPromise).rejects.toThrow('Operation timed out after 10ms');\n    });\n    \n    test('should handle timeouts in parallel operations', async () => {\n      // Arrange - Simplified version to avoid fake timer complications\n      jest.useFakeTimers({ doNotFake: ['nextTick', 'setImmediate'] });\n      \n      // Create resolved promises for success cases and rejected for timeout cases\n      const operation1 = Promise.resolve('Operation 1 completed');\n      const operation2 = Promise.reject(new Error('Operation 2 timed out after 10ms'));\n      const operation3 = Promise.resolve('Operation 3 completed');\n      \n      // Act\n      const results = await Promise.allSettled([operation1, operation2, operation3]);\n      \n      // Assert - Verify the expected pattern of successes and failures\n      expect(results[0].status).toBe('fulfilled');\n      expect(results[1].status).toBe('rejected');\n      expect(results[2].status).toBe('fulfilled');\n      \n      if (results[1].status === 'rejected') {\n        expect(results[1].reason.message).toBe('Operation 2 timed out after 10ms');\n      }\n    });\n  });\n\n  describe('Concurrent Operations', () => {\n    test('should limit concurrency of parallel operations', async () => {\n      // Arrange - simplified version with smaller array\n      const concurrencyLimit = 2;\n      let activeOperations = 0;\n      let maxConcurrentOperations = 0;\n      \n      const operation = async (id: number) => {\n        activeOperations++;\n        maxConcurrentOperations = Math.max(maxConcurrentOperations, activeOperations);\n        \n        // Simulate work with minimal delay\n        await new Promise(resolve => setTimeout(resolve, 1));\n        \n        activeOperations--;\n        return `Operation ${id} completed`;\n      };\n      \n      // Helper to run operations with limited concurrency\n      const runWithConcurrencyLimit = async (operations: (() => Promise<any>)[], limit: number) => {\n        const results: any[] = [];\n        const executing: Promise<any>[] = [];\n        \n        for (const operation of operations) {\n          const p = Promise.resolve().then(() => operation());\n          results.push(p);\n          \n          if (limit <= operations.length) {\n            const e: Promise<any> = p.then(() => {\n              executing.splice(executing.indexOf(e), 1);\n            });\n            executing.push(e);\n            \n            if (executing.length >= limit) {\n              await Promise.race(executing);\n            }\n          }\n        }\n        \n        return Promise.all(results);\n      };\n      \n      // Act - use a smaller array size (5 instead of 10)\n      const operations = Array(5).fill(null).map((_, i) => () => operation(i + 1));\n      await runWithConcurrencyLimit(operations, concurrencyLimit);\n      \n      // Assert\n      expect(maxConcurrentOperations).toBeLessThanOrEqual(concurrencyLimit);\n    });\n    \n    test('should handle errors in concurrent operations without stopping others', async () => {\n      // Arrange\n      const operations = [\n        () => Promise.resolve('Operation 1 success'),\n        () => Promise.reject(new Error('Operation 2 failed')),\n        () => Promise.resolve('Operation 3 success'),\n        () => Promise.reject(new Error('Operation 4 failed')),\n        () => Promise.resolve('Operation 5 success'),\n      ];\n      \n      // Act\n      const results = await Promise.allSettled(operations.map(op => op()));\n      \n      // Assert\n      expect(results[0].status).toBe('fulfilled');\n      expect(results[1].status).toBe('rejected');\n      expect(results[2].status).toBe('fulfilled');\n      expect(results[3].status).toBe('rejected');\n      expect(results[4].status).toBe('fulfilled');\n      \n      const successResults = results.filter(r => r.status === 'fulfilled');\n      expect(successResults.length).toBe(3);\n    });\n    \n    test('should prioritize operations in concurrent queue', async () => {\n      // Arrange\n      interface QueueItem {\n        id: number;\n        priority: number;\n        operation: () => Promise<any>;\n      }\n      \n      const priorityQueue: QueueItem[] = [\n        { id: 1, priority: 2, operation: () => Promise.resolve('Operation 1 (Medium)') },\n        { id: 2, priority: 1, operation: () => Promise.resolve('Operation 2 (High)') },\n        { id: 3, priority: 3, operation: () => Promise.resolve('Operation 3 (Low)') },\n        { id: 4, priority: 1, operation: () => Promise.resolve('Operation 4 (High)') },\n        { id: 5, priority: 2, operation: () => Promise.resolve('Operation 5 (Medium)') },\n      ];\n      \n      // Sort by priority (lower number = higher priority)\n      priorityQueue.sort((a, b) => a.priority - b.priority);\n      \n      // Act\n      const executionOrder: number[] = [];\n      const _results = await Promise.all(\n        priorityQueue.map(item => {\n          return item.operation().then(result => {\n            executionOrder.push(item.id);\n            return result;\n          });\n        })\n      );\n      \n      // Assert\n      // High priority operations (2, 4) should be at the start of the execution order\n      expect(executionOrder[0]).toBe(2);\n      expect(executionOrder[1]).toBe(4);\n      \n      // Low priority operation (3) should be at the end\n      expect(executionOrder[executionOrder.length - 1]).toBe(3);\n    });\n  });\n\n  describe('Data Structure Edge Cases', () => {\n    test('should handle deeply nested objects', async () => {\n      // Arrange\n      const deeplyNested = {\n        level1: {\n          level2: {\n            level3: {\n              level4: {\n                level5: {\n                  value: 'Deep value',\n                },\n              },\n            },\n          },\n        },\n      };\n      \n      // Act\n      await mockStorage.setItem('deeplyNested', JSON.stringify(deeplyNested));\n      const retrieved = JSON.parse(await mockStorage.getItem('deeplyNested') || '{}');\n      \n      // Assert\n      expect(retrieved.level1.level2.level3.level4.level5.value).toBe('Deep value');\n    });\n    \n    test('should detect circular references without serialization', () => {\n      // Helper to detect whether an object graph contains a circular reference\n      const hasCircularReference = (obj: any): boolean => {\n        const seen = new WeakSet();\n\n        const visit = (value: any): boolean => {\n          if (typeof value !== 'object' || value === null) {\n            return false;\n          }\n          if (seen.has(value)) {\n            return true; // cycle detected\n          }\n          seen.add(value);\n          return Object.values(value).some(visit);\n        };\n\n        return visit(obj);\n      };\n\n      // Arrange – create an object with a cycle\n      const cyclic: any = { name: 'root' };\n      cyclic.self = cyclic;\n\n      // Arrange – create an acyclic object\n      const acyclic = { a: { b: 1 } };\n\n      // Assert\n      expect(hasCircularReference(cyclic)).toBe(true);\n      expect(hasCircularReference(acyclic)).toBe(false);\n    });\n    \n    test('should handle Unicode and special characters', async () => {\n      // Arrange\n      const specialCharsObject = {\n        emoji: '😀🚀🌟🔥🎉',\n        arabic: 'مرحبا بالعالم',\n        chinese: '你好世界',\n        russian: 'Привет, мир',\n        japanese: 'こんにちは世界',\n        korean: '안녕하세요 세계',\n        thai: 'สวัสดีชาวโลก',\n        specialChars: '©®™§¶†‡♠♣♥♦¿¡«»',\n        escapeChars: '\\n\\t\\r\\b\\f\\\\\\'\\\\\"',\n      };\n      \n      // Act\n      await mockStorage.setItem('specialChars', JSON.stringify(specialCharsObject));\n      const retrieved = JSON.parse(await mockStorage.getItem('specialChars') || '{}');\n      \n      // Assert\n      expect(retrieved.emoji).toBe(specialCharsObject.emoji);\n      expect(retrieved.arabic).toBe(specialCharsObject.arabic);\n      expect(retrieved.chinese).toBe(specialCharsObject.chinese);\n      expect(retrieved.russian).toBe(specialCharsObject.russian);\n      expect(retrieved.japanese).toBe(specialCharsObject.japanese);\n      expect(retrieved.korean).toBe(specialCharsObject.korean);\n      expect(retrieved.thai).toBe(specialCharsObject.thai);\n      expect(retrieved.specialChars).toBe(specialCharsObject.specialChars);\n      expect(retrieved.escapeChars).toBe(specialCharsObject.escapeChars);\n    });\n    \n    test('should handle malformed data', async () => {\n      // Arrange\n      const malformedJSON = '{\"name\": \"Test\", \"value\": 42, missing: quotes, unclosed: {';\n      \n      // Act & Assert\n      expect(() => JSON.parse(malformedJSON)).toThrow(SyntaxError);\n      \n      // Safe parser with error handling\n      const safeParse = (json: string, fallback: any = {}) => {\n        try {\n          return JSON.parse(json);\n        } catch (error) {\n          console.error('Error parsing JSON:', error);\n          return fallback;\n        }\n      };\n      \n      // Act with safe parser\n      const result = safeParse(malformedJSON, { error: true });\n      \n      // Assert\n      expect(result).toEqual({ error: true });\n      expect(consoleErrorSpy).toHaveBeenCalled();\n    });\n  });\n\n  describe('Error Propagation', () => {\n    test('should propagate errors through async chains', async () => {\n      // Arrange\n      const step1 = async () => {\n        throw new Error('Error in step 1');\n      };\n      \n      const step2 = async () => {\n        await step1();\n        return 'Step 2 completed';\n      };\n      \n      const step3 = async () => {\n        const result = await step2();\n        return `Step 3 completed with ${result}`;\n      };\n      \n      // Act & Assert\n      await expect(step3()).rejects.toThrow('Error in step 1');\n    });\n    \n    test('should transform errors through async chains', async () => {\n      // Arrange\n      const step1 = async () => {\n        throw new Error('Database connection failed');\n      };\n      \n      const step2 = async () => {\n        try {\n          await step1();\n          return 'Step 2 completed';\n        } catch (error) {\n          throw new Error(`Data retrieval error: ${(error as Error).message}`);\n        }\n      };\n      \n      const step3 = async () => {\n        try {\n          const result = await step2();\n          return `Step 3 completed with ${result}`;\n        } catch (error) {\n          throw new Error(`Processing error: ${(error as Error).message}`);\n        }\n      };\n      \n      // Act & Assert\n      await expect(step3()).rejects.toThrow('Processing error: Data retrieval error: Database connection failed');\n    });\n    \n    test('should handle errors with context information', async () => {\n      // Arrange\n      interface AppError extends Error {\n        code?: string;\n        context?: Record<string, any>;\n      }\n      \n      const createAppError = (\n        message: string,\n        code?: string,\n        context?: Record<string, any>\n      ): AppError => {\n        const error = new Error(message) as AppError;\n        if (code) error.code = code;\n        if (context) error.context = context;\n        return error;\n      };\n      \n      const executeOperation = async (context: string) => {\n        try {\n          throw new Error('Operation failed');\n        } catch (error) {\n          const appError = createAppError(\n            (error as Error).message,\n            'OPERATION_ERROR',\n            { context }\n          );\n          throw appError;\n        }\n      };\n      \n      // Act & Assert\n      try {\n        await executeOperation('test-context');\n        fail('Should have thrown an error');\n      } catch (error: any) {\n        expect(error.message).toBe('Operation failed');\n        expect(error.code).toBe('OPERATION_ERROR');\n        expect(error.context).toEqual({ context: 'test-context' });\n      }\n    });\n    \n    test('should aggregate errors from multiple operations', async () => {\n      // Arrange\n      const operations = [\n        () => Promise.resolve('Operation 1 success'),\n        () => Promise.reject(new Error('Operation 2 failed')),\n        () => Promise.resolve('Operation 3 success'),\n        () => Promise.reject(new Error('Operation 4 failed')),\n      ];\n      \n      // Custom implementation to aggregate errors\n      const executeAll = async (ops: (() => Promise<any>)[]) => {\n        const results = await Promise.allSettled(ops.map(op => op()));\n        \n        const successes = results\n          .filter((r): r is PromiseFulfilledResult<any> => r.status === 'fulfilled')\n          .map(r => r.value);\n        \n        const failures = results\n          .filter((r): r is PromiseRejectedResult => r.status === 'rejected')\n          .map(r => r.reason);\n        \n        if (failures.length > 0) {\n          const error = new Error(`${failures.length} operations failed`);\n          (error as any).failures = failures;\n          (error as any).successes = successes;\n          throw error;\n        }\n        \n        return successes;\n      };\n      \n      // Act & Assert\n      try {\n        await executeAll(operations);\n        fail('Should have thrown an error');\n      } catch (error: any) {\n        expect(error.message).toBe('2 operations failed');\n        expect(error.failures.length).toBe(2);\n        expect(error.failures[0].message).toBe('Operation 2 failed');\n        expect(error.failures[1].message).toBe('Operation 4 failed');\n        expect(error.successes.length).toBe(2);\n        expect(error.successes).toEqual(['Operation 1 success', 'Operation 3 success']);\n      }\n    });\n  });\n\n  describe('Retry Mechanisms', () => {\n    test('should implement retry with exponential backoff', async () => {\n      // Arrange\n      let attempts = 0;\n      const maxAttempts = 3;\n      \n      const unreliableOperation = jest.fn().mockImplementation(() => {\n        attempts++;\n        if (attempts < 3) {\n          return Promise.reject(new Error(`Attempt ${attempts} failed`));\n        }\n        return Promise.resolve(`Success on attempt ${attempts}`);\n      });\n      \n      const withRetry = async <T>(\n        operation: () => Promise<T>,\n        maxRetries: number\n      ): Promise<T> => {\n        let lastError: Error | null = null;\n        \n        for (let attempt = 1; attempt <= maxRetries; attempt++) {\n          try {\n            return await operation();\n          } catch (error) {\n            lastError = error as Error;\n            console.warn(`Attempt ${attempt} failed: ${lastError.message}`);\n            \n            if (attempt < maxRetries) {\n              // Use minimal delay for tests\n              await new Promise(resolve => setTimeout(resolve, 1));\n            }\n          }\n        }\n        \n        throw new Error(`All ${maxRetries} attempts failed. Last error: ${lastError?.message}`);\n      };\n      \n      // Act\n      const result = await withRetry(unreliableOperation, maxAttempts);\n      \n      // Assert\n      expect(result).toBe('Success on attempt 3');\n      expect(unreliableOperation).toHaveBeenCalledTimes(3);\n      expect(consoleWarnSpy).toHaveBeenCalledTimes(2);\n    });\n    \n    test('should implement conditional retry based on error type', async () => {\n      // Arrange\n      const networkError = new Error('Network error');\n      (networkError as any).code = 'NETWORK_ERROR';\n      \n      const validationError = new Error('Validation error');\n      (validationError as any).code = 'VALIDATION_ERROR';\n      \n      let callCount = 0;\n      const operation = jest.fn().mockImplementation(() => {\n        callCount++;\n        \n        if (callCount === 1) {\n          return Promise.reject(networkError); // Should retry\n        } else if (callCount === 2) {\n          return Promise.reject(validationError); // Should not retry\n        }\n        \n        return Promise.resolve('Success');\n      });\n      \n      const withConditionalRetry = async <T>(\n        operation: () => Promise<T>,\n        maxRetries: number,\n        shouldRetry: (error: Error) => boolean\n      ): Promise<T> => {\n        let attempts = 0;\n        let lastError: Error | null = null;\n        \n        while (attempts < maxRetries) {\n          try {\n            return await operation();\n          } catch (error) {\n            lastError = error as Error;\n            attempts++;\n            \n            if (attempts >= maxRetries || !shouldRetry(lastError)) {\n              throw lastError;\n            }\n            \n            // Minimal delay for tests\n            await new Promise(resolve => setTimeout(resolve, 1));\n          }\n        }\n        \n        throw lastError;\n      };\n      \n      // Only retry network errors, not validation errors\n      const shouldRetry = (error: Error) => (error as any).code === 'NETWORK_ERROR';\n      \n      // Act & Assert\n      await expect(withConditionalRetry(operation, 3, shouldRetry)).rejects.toThrow('Validation error');\n      expect(operation).toHaveBeenCalledTimes(2);\n    });\n  });\n\n  describe('Performance Optimization', () => {\n    test('should efficiently process large arrays with chunking', async () => {\n      // Arrange - use smaller array for faster tests\n      const largeArray = Array(20).fill(null).map((_, i) => ({ id: i, value: `Item ${i}` }));\n      \n      // Function to process array in chunks\n      const processInChunks = async <T, R>(\n        items: T[],\n        chunkSize: number,\n        processor: (chunk: T[]) => Promise<R[]>\n      ): Promise<R[]> => {\n        const results: R[] = [];\n        \n        for (let i = 0; i < items.length; i += chunkSize) {\n          const chunk = items.slice(i, i + chunkSize);\n          const chunkResults = await processor(chunk);\n          results.push(...chunkResults);\n        }\n        \n        return results;\n      };\n      \n      // Mock processor function\n      const processItems = jest.fn().mockImplementation(async (items: any[]) => {\n        return items.map(item => ({ ...item, processed: true }));\n      });\n      \n      // Act\n      const results = await processInChunks(largeArray, 5, processItems);\n      \n      // Assert\n      expect(results.length).toBe(20);\n      expect(results[0].processed).toBe(true);\n      expect(results[19].processed).toBe(true);\n      \n      // Should have called the processor 4 times (20 items / 5 chunk size)\n      expect(processItems).toHaveBeenCalledTimes(4);\n    });\n    \n    test('should implement memoization for expensive calculations', () => {\n      // Arrange\n      const expensiveCalculation = jest.fn((a: number, b: number) => {\n        // Simplified calculation for tests\n        return a * b + Math.sqrt(a + b);\n      });\n      \n      // Create a memoized version of the function\n      const memoize = <T extends (...args: any[]) => any>(fn: T): T => {\n        const cache = new Map<string, ReturnType<T>>();\n        \n        return ((...args: Parameters<T>): ReturnType<T> => {\n          const key = JSON.stringify(args);\n          \n          if (cache.has(key)) {\n            return cache.get(key)!;\n          }\n          \n          const result = fn(...args);\n          cache.set(key, result);\n          return result;\n        }) as T;\n      };\n      \n      const memoizedCalculation = memoize(expensiveCalculation);\n      \n      // Act\n      const result1 = memoizedCalculation(10, 20);\n      const result2 = memoizedCalculation(5, 10);\n      const result3 = memoizedCalculation(10, 20); // Should use cached result\n      const result4 = memoizedCalculation(5, 10);  // Should use cached result\n      \n      // Assert\n      expect(result1).toBe(result3);\n      expect(result2).toBe(result4);\n      \n      // Original function should only be called twice\n      expect(expensiveCalculation).toHaveBeenCalledTimes(2);\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}