name: Database Security Tests

on:
  push:
    branches: [ main, feature/*, fix/* ]
    paths:
      - '**.sql'
      - 'test/database/**'
      - '.github/workflows/database-security-tests.yml'
  pull_request:
    branches: [ main ]
    paths:
      - '**.sql'
      - 'test/database/**'
      - '.github/workflows/database-security-tests.yml'
  # Allow manual triggering
  workflow_dispatch:

jobs:
  security-tests:
    name: Run Database Security Tests
    runs-on: ubuntu-latest
    
    services:
      # Set up PostgreSQL service container
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: card_show_finder_test
        ports:
          - 5432:5432
        # Health check to ensure database is ready
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Install pgTAP
        run: |
          sudo apt-get install -y postgresql-server-dev-14 build-essential git
          git clone https://github.com/theory/pgtap.git
          cd pgtap
          make
          sudo make install
          cd ..

      - name: Install Perl and pg_prove
        run: |
          sudo apt-get install -y cpanminus libdbd-pg-perl
          sudo cpanm TAP::Parser::SourceHandler::pgTAP

      - name: Setup database schema
        run: |
          # Create auth schema for testing
          PGPASSWORD=postgres psql -h localhost -U postgres -d card_show_finder_test -c "CREATE SCHEMA IF NOT EXISTS auth;"
          PGPASSWORD=postgres psql -h localhost -U postgres -d card_show_finder_test -c "CREATE TABLE IF NOT EXISTS auth.users (id UUID PRIMARY KEY, email TEXT);"
          
          # Apply base schema
          find db_migrations -name "*.sql" | sort | while read -r file; do
            echo "Applying migration: $file"
            PGPASSWORD=postgres psql -h localhost -U postgres -d card_show_finder_test -f "$file"
          done
          
          # Apply RLS policies
          echo "Applying RLS policy cleanup..."
          PGPASSWORD=postgres psql -h localhost -U postgres -d card_show_finder_test -f simple-drop-all-policies.sql
          
          echo "Applying consolidated RLS policies..."
          PGPASSWORD=postgres psql -h localhost -U postgres -d card_show_finder_test -f consolidated-rls-policies.sql

      - name: Install pgTAP in database
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d card_show_finder_test -c "CREATE EXTENSION IF NOT EXISTS pgtap;"

      - name: Make test script executable
        run: chmod +x test/database/run_security_tests.sh

      - name: Run security tests
        run: |
          cd test/database
          ./run_security_tests.sh \
            --ci \
            --database card_show_finder_test \
            --user postgres \
            --password postgres \
            --host localhost \
            --junit

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-test-results
          path: |
            test/database/test-results/
            test/database/*.log

      - name: Check for test failures
        if: failure()
        run: |
          echo "::error::Database security tests failed. Check the test results for details."
          exit 1
