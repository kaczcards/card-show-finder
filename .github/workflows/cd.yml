name: Continuous Deployment

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      version:
        description: 'Version override (leave empty for auto)'
        required: false
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  NODE_VERSION: 18
  EXPO_CLI_VERSION: 6.3.10
  EXPO_PUBLIC_SUPABASE_URL: ${{ secrets.EXPO_PUBLIC_SUPABASE_URL }}
  EXPO_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.EXPO_PUBLIC_SUPABASE_ANON_KEY }}
  SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
  EXPO_PUBLIC_GOOGLE_MAPS_API_KEY: ${{ secrets.EXPO_PUBLIC_GOOGLE_MAPS_API_KEY }}
  EXPO_PUBLIC_SENTRY_DSN: ${{ secrets.EXPO_PUBLIC_SENTRY_DSN }}

jobs:
  determine-environment:
    name: Determine Deployment Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      version: ${{ steps.set-version.outputs.version }}
      build_id: ${{ steps.set-build-id.outputs.build_id }}
      is_release: ${{ steps.check-release.outputs.is_release }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Determine environment
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/tags/v"* ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=development" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
          fi

      - name: Check if release
        id: check-release
        run: |
          if [[ "${{ github.ref }}" == "refs/tags/v"* ]]; then
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Determine version
        id: set-version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.version }}" != "" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/tags/v"* ]]; then
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          else
            # Generate version based on date and commit hash
            TIMESTAMP=$(date +'%Y%m%d.%H%M')
            SHORT_SHA=$(git rev-parse --short HEAD)
            echo "version=${TIMESTAMP}-${SHORT_SHA}" >> $GITHUB_OUTPUT
          fi

      - name: Generate build ID
        id: set-build-id
        run: |
          BUILD_ID=$(date +'%Y%m%d%H%M%S')-$(echo $GITHUB_SHA | cut -c1-7)
          echo "build_id=${BUILD_ID}" >> $GITHUB_OUTPUT

  build-and-submit:
    name: Build and Submit
    runs-on: ubuntu-latest
    needs: determine-environment
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install EAS CLI
        run: npm install -g eas-cli

      - name: Setup EAS credentials
        run: |
          echo "EXPO_TOKEN=${{ secrets.EXPO_TOKEN }}" >> $GITHUB_ENV

      # ------------------------------------------------------------------
      # Consolidated prebuild & Hermes configuration step
      #   ‚Ä¢ Creates temporary .env so Expo can read variables
      #   ‚Ä¢ Silences git dirty-tree warnings
      #   ‚Ä¢ Runs `expo prebuild --clean`
      #   ‚Ä¢ Verifies and enforces Hermes settings on both platforms
      # ------------------------------------------------------------------
      - name: Setup Hermes configuration
        env:
          EXPO_PUBLIC_SUPABASE_URL: ${{ env.EXPO_PUBLIC_SUPABASE_URL }}
          EXPO_PUBLIC_SUPABASE_ANON_KEY: ${{ env.EXPO_PUBLIC_SUPABASE_ANON_KEY }}
          EXPO_PUBLIC_GOOGLE_MAPS_API_KEY: ${{ env.EXPO_PUBLIC_GOOGLE_MAPS_API_KEY }}
          EXPO_PUBLIC_SENTRY_DSN: ${{ env.EXPO_PUBLIC_SENTRY_DSN }}
          SUPABASE_SERVICE_KEY: ${{ env.SUPABASE_SERVICE_KEY }}
        run: |
          # 1Ô∏è‚É£  Write a throw-away .env file for Expo / dotenv
          echo "EXPO_PUBLIC_SUPABASE_URL=${EXPO_PUBLIC_SUPABASE_URL}"            >  .env
          echo "EXPO_PUBLIC_SUPABASE_ANON_KEY=${EXPO_PUBLIC_SUPABASE_ANON_KEY}"  >> .env
          echo "EXPO_PUBLIC_GOOGLE_MAPS_API_KEY=${EXPO_PUBLIC_GOOGLE_MAPS_API_KEY}" >> .env
          echo "EXPO_PUBLIC_SENTRY_DSN=${EXPO_PUBLIC_SENTRY_DSN}"                >> .env
          echo "SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}"                    >> .env

          # 2Ô∏è‚É£  Configure git to ignore dirty-tree warnings & stage .env
          git config --global --add safe.directory "$(pwd)"
          git add .env || true

          # 3Ô∏è‚É£  Run prebuild ‚Äë this regenerates ios/ & android/
          npx expo prebuild --clean

          # 4Ô∏è‚É£  Enforce Hermes / New-Arch settings (iOS)
          if [[ -f ios/Podfile.properties.json ]]; then
            jq '."expo.jsEngine"="hermes" | ."newArchEnabled"="false"' \
              ios/Podfile.properties.json > ios/Podfile.properties.json.tmp
            mv ios/Podfile.properties.json.tmp ios/Podfile.properties.json
          fi

          # 5Ô∏è‚É£  Enforce Hermes / New-Arch settings (Android)
          if [[ -f android/gradle.properties ]]; then
            sed -i.bak 's/hermesEnabled=false/hermesEnabled=true/g' android/gradle.properties
            sed -i.bak 's/newArchEnabled=true/newArchEnabled=false/g' android/gradle.properties
          fi

      - name: Set app version
        run: |
          # Update app.json or app.config.js with the version
          if [ -f "app.json" ]; then
            jq '.expo.version="${{ needs.determine-environment.outputs.version }}"' app.json > app.json.tmp
            mv app.json.tmp app.json
          elif [ -f "app.config.js" ]; then
            # Create a backup
            cp app.config.js app.config.js.bak
            
            # Update version in app.config.js
            sed -i "s/version: \"[^\"]*\"/version: \"${{ needs.determine-environment.outputs.version }}\"/g" app.config.js
          fi

      - name: Create service account file
        if: ${{ needs.determine-environment.outputs.environment == 'staging' || needs.determine-environment.outputs.environment == 'production' }}
        run: |
          echo '${{ secrets.ANDROID_SERVICE_ACCOUNT_KEY }}' > ./android-service-account.json

      - name: Setup EAS Android credentials
        run: |
          echo "üîç Checking EAS Android credentials status..."
          
          # Get project info and credentials status
          echo "üìã Project information:"
          eas project:info || echo "‚ö†Ô∏è Could not get project info"
          
          # Try to list Android credentials to check if they exist
          echo "üîê Checking Android credentials:"
          ANDROID_CREDS_OUTPUT=$(eas credentials:list --platform android --json 2>&1) || true
          echo "$ANDROID_CREDS_OUTPUT" | grep -q "keystore" && HAS_KEYSTORE=true || HAS_KEYSTORE=false
          
          if [[ "$HAS_KEYSTORE" == "true" ]]; then
            echo "‚úÖ Android keystore found on EAS servers"
          else
            echo "‚ö†Ô∏è No Android keystore found on EAS servers"
            echo "‚ö†Ô∏è Will use development profile for Android builds which should have credentials configured"
            echo "USE_DEV_PROFILE_FOR_ANDROID=true" >> $GITHUB_ENV
          fi
          
          # Always set this to ensure we use remote credentials
          echo "EAS_NO_VCS=1" >> $GITHUB_ENV
          
          # Log the environment for debugging
          echo "üåç Environment: ${{ needs.determine-environment.outputs.environment }}"
          echo "üì± Android build profile: ${USE_DEV_PROFILE_FOR_ANDROID:-${{ needs.determine-environment.outputs.environment }}}"

      - name: Build app with EAS
        run: |
          echo "üöÄ Starting EAS build process..."
          
          # Set default error handling
          set -e
          
          # Build iOS with the determined environment profile
          echo "üçé Building iOS app with profile: ${{ needs.determine-environment.outputs.environment }}"
          eas build \
            --platform ios \
            --profile ${{ needs.determine-environment.outputs.environment }} \
            --non-interactive \
            --no-wait
          
          # Build Android with development profile (which has credentials) or fallback to specified environment
          ANDROID_PROFILE="${USE_DEV_PROFILE_FOR_ANDROID:-${{ needs.determine-environment.outputs.environment }}}"
          echo "ü§ñ Building Android app with profile: $ANDROID_PROFILE"
          eas build \
            --platform android \
            --profile $ANDROID_PROFILE \
            --non-interactive \
            --wait
          
          echo "‚úÖ Build commands completed"

      - name: Submit to app stores
        if: ${{ needs.determine-environment.outputs.environment == 'staging' || needs.determine-environment.outputs.environment == 'production' }}
        run: |
          eas submit \
            --platform all \
            --profile ${{ needs.determine-environment.outputs.environment }} \
            --non-interactive

      - name: Update with OTA
        if: ${{ needs.determine-environment.outputs.environment != 'production' }}
        run: |
          eas update \
            --branch ${{ needs.determine-environment.outputs.environment }} \
            --message "Update ${{ needs.determine-environment.outputs.version }} (Build ${{ needs.determine-environment.outputs.build_id }})"

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [determine-environment, build-and-submit]
    if: ${{ needs.determine-environment.outputs.is_release == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        uses: metcalfc/changelog-generator@v4.1.0
        with:
          myToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release v${{ needs.determine-environment.outputs.version }}
          body: |
            ## Card Show Finder v${{ needs.determine-environment.outputs.version }}

            **Build ID:** ${{ needs.determine-environment.outputs.build_id }}
            **Release Date:** $(date +'%Y-%m-%d')

            ### What's Changed
            ${{ steps.changelog.outputs.changelog }}

            ### Installation
            - iOS: Available on TestFlight and App Store (pending review)
            - Android: Available on Google Play (pending review)

          draft: false
          prerelease: false
          files: |
            CHANGELOG.md
            LICENSE
          token: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [determine-environment, build-and-submit, create-release]
    if: always()
    steps:
      - name: Check build result
        id: check
        run: |
          if [[ "${{ needs.build-and-submit.result }}" == "success" ]]; then
            echo "STATUS=success" >> $GITHUB_ENV
            echo "EMOJI=‚úÖ" >> $GITHUB_ENV
          else
            echo "STATUS=failure" >> $GITHUB_ENV
            echo "EMOJI=‚ùå" >> $GITHUB_ENV
          fi

      - name: Send Slack notification
        if: env.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ env.STATUS }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: "${{ env.EMOJI }} Deployment to ${{ needs.determine-environment.outputs.environment }} ${{ env.STATUS }} for ${{ github.repository }} (v${{ needs.determine-environment.outputs.version }})"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send email notification
        if: ${{ needs.determine-environment.outputs.environment == 'production' && needs.determine-environment.outputs.is_release == 'true' && env.NOTIFICATION_EMAIL != '' }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.MAIL_SERVER }}
          server_port: ${{ secrets.MAIL_PORT }}
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: "üöÄ New Release: Card Show Finder v${{ needs.determine-environment.outputs.version }}"
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: Card Show Finder Releases <noreply@kaczcards.com>
          body: |
            # üéâ New Release: Card Show Finder v${{ needs.determine-environment.outputs.version }}
            
            **Build ID:** ${{ needs.determine-environment.outputs.build_id }}
            **Release Date:** $(date +'%Y-%m-%d')
            
            The new version has been submitted to the App Store and Google Play and is pending review.
            
            ## Release Notes
            
            ${{ needs.create-release.outputs.changelog || 'No changelog available' }}
            
            ## Links
            
            - App Store: https://apps.apple.com/app/id${{ secrets.ASC_APP_ID }}
            - Google Play: https://play.google.com/store/apps/details?id=com.kaczcards.cardshowfinder
            - GitHub Release: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.determine-environment.outputs.version }}
            
            Thank you for your continued support!
            
            -- 
            Card Show Finder Team
