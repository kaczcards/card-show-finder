name: Continuous Deployment

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      version:
        description: 'Version override (leave empty for auto)'
        required: false
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  NODE_VERSION: 18
  EXPO_CLI_VERSION: 6.3.10
  SUPABASE_URL: ${{ secrets.EXPO_PUBLIC_SUPABASE_URL }}
  SUPABASE_ANON_KEY: ${{ secrets.EXPO_PUBLIC_SUPABASE_ANON_KEY }}
  SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
  EXPO_PUBLIC_GOOGLE_MAPS_API_KEY: ${{ secrets.EXPO_PUBLIC_GOOGLE_MAPS_API_KEY }}
  EXPO_PUBLIC_SENTRY_DSN: ${{ secrets.EXPO_PUBLIC_SENTRY_DSN }}

jobs:
  determine-environment:
    name: Determine Deployment Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      version: ${{ steps.set-version.outputs.version }}
      build_id: ${{ steps.set-build-id.outputs.build_id }}
      is_release: ${{ steps.check-release.outputs.is_release }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Determine environment
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/tags/v"* ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=development" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
          fi

      - name: Check if release
        id: check-release
        run: |
          if [[ "${{ github.ref }}" == "refs/tags/v"* ]]; then
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Determine version
        id: set-version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.version }}" != "" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/tags/v"* ]]; then
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          else
            # Generate version based on date and commit hash
            TIMESTAMP=$(date +'%Y%m%d.%H%M')
            SHORT_SHA=$(git rev-parse --short HEAD)
            echo "version=${TIMESTAMP}-${SHORT_SHA}" >> $GITHUB_OUTPUT
          fi

      - name: Generate build ID
        id: set-build-id
        run: |
          BUILD_ID=$(date +'%Y%m%d%H%M%S')-$(echo $GITHUB_SHA | cut -c1-7)
          echo "build_id=${BUILD_ID}" >> $GITHUB_OUTPUT

  validate-database:
    name: Validate Database Migrations
    runs-on: ubuntu-latest
    needs: determine-environment
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Install Supabase CLI
        run: |
          #--------------------------------------------------------------------
          # Robust Supabase CLI installation
          # 1) Clean npm cache & ensure registry
          # 2) Retry npm install (3 attempts)
          # 3) Fallback to direct binary download if npm fails
          #--------------------------------------------------------------------

          set -e

          npm cache clean --force
          npm config set registry https://registry.npmjs.org/

          install_via_npm() {
            echo "Attempting npm installation (attempt $1)…"
            npm install -g supabase@latest --verbose
          }

          success=false
          for i in 1 2 3; do
            if install_via_npm "$i"; then
              success=true
              break
            else
              echo "❌ npm installation failed on attempt $i"
              sleep 5
            fi
          done

          if [ "$success" = false ]; then
            echo "⚡ Falling back to direct binary download…"
            SUPABASE_VERSION="1.200.3"
            curl -L "https://github.com/supabase/cli/releases/download/v${SUPABASE_VERSION}/supabase_linux_amd64.tar.gz" -o supabase.tar.gz
            tar -xzf supabase.tar.gz
            sudo mv supabase /usr/local/bin/supabase
            chmod +x /usr/local/bin/supabase
          fi

          echo "✅ Supabase CLI version: $(supabase --version)"

      - name: Run database security validation
        run: npm run test:security:verbose

  build-and-submit:
    name: Build and Submit
    runs-on: ubuntu-latest
    needs: [determine-environment, validate-database]
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install EAS CLI
        run: npm install -g eas-cli

      - name: Setup EAS credentials
        run: |
          echo "EXPO_TOKEN=${{ secrets.EXPO_TOKEN }}" >> $GITHUB_ENV

      - name: Setup Hermes configuration
        run: |
          # Ensure Hermes is enabled on both platforms
          npx expo prebuild --clean
          
          # Verify iOS configuration
          if [ -f "ios/Podfile.properties.json" ]; then
            jq '.["expo.jsEngine"]="hermes" | .["newArchEnabled"]="false"' ios/Podfile.properties.json > ios/Podfile.properties.json.tmp
            mv ios/Podfile.properties.json.tmp ios/Podfile.properties.json
          fi
          
          # Verify Android configuration
          if [ -f "android/gradle.properties" ]; then
            sed -i.bak 's/hermesEnabled=false/hermesEnabled=true/g' android/gradle.properties
            sed -i.bak 's/newArchEnabled=true/newArchEnabled=false/g' android/gradle.properties
          fi

      - name: Set app version
        run: |
          # Update app.json or app.config.js with the version
          if [ -f "app.json" ]; then
            jq '.expo.version="${{ needs.determine-environment.outputs.version }}"' app.json > app.json.tmp
            mv app.json.tmp app.json
          elif [ -f "app.config.js" ]; then
            # Create a backup
            cp app.config.js app.config.js.bak
            
            # Update version in app.config.js
            sed -i "s/version: \"[^\"]*\"/version: \"${{ needs.determine-environment.outputs.version }}\"/g" app.config.js
          fi

      - name: Create service account file
        if: ${{ needs.determine-environment.outputs.environment == 'staging' || needs.determine-environment.outputs.environment == 'production' }}
        run: |
          echo '${{ secrets.ANDROID_SERVICE_ACCOUNT_KEY }}' > ./android-service-account.json

      - name: Build app with EAS
        run: |
          eas build \
            --platform all \
            --profile ${{ needs.determine-environment.outputs.environment }} \
            --non-interactive \
            --wait

      - name: Submit to app stores
        if: ${{ needs.determine-environment.outputs.environment == 'staging' || needs.determine-environment.outputs.environment == 'production' }}
        run: |
          eas submit \
            --platform all \
            --profile ${{ needs.determine-environment.outputs.environment }} \
            --non-interactive

      - name: Update with OTA
        if: ${{ needs.determine-environment.outputs.environment != 'production' }}
        run: |
          eas update \
            --branch ${{ needs.determine-environment.outputs.environment }} \
            --message "Update ${{ needs.determine-environment.outputs.version }} (Build ${{ needs.determine-environment.outputs.build_id }})"

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [determine-environment, build-and-submit]
    if: ${{ needs.determine-environment.outputs.is_release == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        uses: metcalfc/changelog-generator@v4.1.0
        with:
          myToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release v${{ needs.determine-environment.outputs.version }}
          body: |
            ## Card Show Finder v${{ needs.determine-environment.outputs.version }}

            **Build ID:** ${{ needs.determine-environment.outputs.build_id }}
            **Release Date:** $(date +'%Y-%m-%d')

            ### What's Changed
            ${{ steps.changelog.outputs.changelog }}

            ### Installation
            - iOS: Available on TestFlight and App Store (pending review)
            - Android: Available on Google Play (pending review)

          draft: false
          prerelease: false
          files: |
            CHANGELOG.md
            LICENSE
          token: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [determine-environment, build-and-submit, create-release]
    if: always()
    steps:
      - name: Check build result
        id: check
        run: |
          if [[ "${{ needs.build-and-submit.result }}" == "success" ]]; then
            echo "STATUS=success" >> $GITHUB_ENV
            echo "EMOJI=✅" >> $GITHUB_ENV
          else
            echo "STATUS=failure" >> $GITHUB_ENV
            echo "EMOJI=❌" >> $GITHUB_ENV
          fi

      - name: Send Slack notification
        if: env.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ env.STATUS }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: "${{ env.EMOJI }} Deployment to ${{ needs.determine-environment.outputs.environment }} ${{ env.STATUS }} for ${{ github.repository }} (v${{ needs.determine-environment.outputs.version }})"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send email notification
        if: ${{ needs.determine-environment.outputs.environment == 'production' && needs.determine-environment.outputs.is_release == 'true' && env.NOTIFICATION_EMAIL != '' }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.MAIL_SERVER }}
          server_port: ${{ secrets.MAIL_PORT }}
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: "🚀 New Release: Card Show Finder v${{ needs.determine-environment.outputs.version }}"
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: Card Show Finder Releases <noreply@kaczcards.com>
          body: |
            # 🎉 New Release: Card Show Finder v${{ needs.determine-environment.outputs.version }}
            
            **Build ID:** ${{ needs.determine-environment.outputs.build_id }}
            **Release Date:** $(date +'%Y-%m-%d')
            
            The new version has been submitted to the App Store and Google Play and is pending review.
            
            ## Release Notes
            
            ${{ needs.create-release.outputs.changelog || 'No changelog available' }}
            
            ## Links
            
            - App Store: https://apps.apple.com/app/id${{ secrets.ASC_APP_ID }}
            - Google Play: https://play.google.com/store/apps/details?id=com.kaczcards.cardshowfinder
            - GitHub Release: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.determine-environment.outputs.version }}
            
            Thank you for your continued support!
            
            -- 
            Card Show Finder Team
