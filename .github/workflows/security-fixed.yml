name: Security Scanning (Fixed)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  security:
    runs-on: ubuntu-latest
    name: Run security scans
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks with direct execution
        run: |
          set -e
          echo "🔐 Installing Gitleaks v8.24.3…"
          curl -sSfL \
            https://github.com/gitleaks/gitleaks/releases/download/v8.24.3/gitleaks_8.24.3_linux_x64.tar.gz \
            | tar -xzC /tmp
          sudo mv /tmp/gitleaks /usr/local/bin/gitleaks
          chmod +x /usr/local/bin/gitleaks

          echo "✅ Gitleaks version: $(gitleaks version)"

          echo "📄 Verifying .gitleaks.toml presence and contents"
          ls -la .gitleaks.toml
          cat .gitleaks.toml

          echo "🚀 Running Gitleaks with explicit config path"
          gitleaks detect \
            --config=.gitleaks.toml \
            --redact \
            -v \
            --exit-code=2 \
            --report-format=sarif \
            --report-path=results.sarif \
            --log-level=debug
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Detect hardcoded secrets
        run: |
          set -euo pipefail

          echo "🔎 Installing detect-secrets…"
          pip install --quiet detect-secrets

          echo "📄 Checking for existing baseline"
          if [[ ! -f .secrets.baseline ]]; then
            echo "::warning::No .secrets.baseline found – generating a fresh baseline."
            # Generate a minimal baseline with our standard exclusions
            detect-secrets scan \
              --all-files \
              --exclude-files '.jest-cache/.*' \
              --exclude-files '.*node_modules.*' \
              --exclude-files '.*\\.cache.*' \
              --exclude-files '.*build.*' \
              --exclude-files '.*dist.*' \
              --exclude-files '\\.github/workflows/.*\\.ya?ml$' \
              --exclude-files 'temp-export/.*' \
              --exclude-files 'temp-test-build/.*' \
              --force-use-all-plugins \
              > .secrets.baseline
            echo "::notice::Baseline created – commit this file to keep CI stable."
          fi

          echo "🚀 Running detect-secrets scan using baseline"
          detect-secrets scan \
            --baseline .secrets.baseline \
            --all-files \
            > detect-secrets-scan.json

          echo "📊 Evaluating detect-secrets results"

          # 1. If the output file is completely empty, detect-secrets found nothing.
          if [[ ! -s detect-secrets-scan.json ]]; then
            echo "✅ No new secrets detected (empty report)."
            exit 0
          fi

          # 2. Non-empty file – check if JSON `results` object is empty.
          if grep -q '"results"[[:space:]]*:[[:space:]]*{}' detect-secrets-scan.json; then
            echo "✅ No new secrets detected."
            exit 0
          fi

          # 3. Anything else means potential secrets were found.
          echo "::error::NEW secrets detected by detect-secrets!"
          cat detect-secrets-scan.json
          exit 1

      # -------------------------------------------------
      # Prepare Node environment for OWASP Dependency Check
      # -------------------------------------------------
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install Node dependencies
        run: npm ci --ignore-scripts

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'card-show-finder'
          path: '.'
          format: 'HTML'
          out: 'reports'
          args: >
            --suppression suppression.xml
            --failOnCVSS 7
            --enableRetired

      - name: Upload dependency check report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports

      - name: Check for Dependabot alerts
        uses: actions/dependency-review-action@v4
        if: github.event_name == 'pull_request'
